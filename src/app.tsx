import { FileInput, TextInput, Title, Rows, FormField } from "@canva/app-ui-kit";
import { appProcess } from "@canva/platform";
import * as React from "react";
import * as styles from "styles/components.css";
import { addElementAtPoint, createRichtextRange } from "@canva/design";

var canvasRef, changeTitle;
var wadLoaded = false;
const canvasScreen = new ImageData(320, 200);

export function App() {
  const [title, setTitle] = React.useState("");
  const context = appProcess.current.getInfo();

  React.useEffect(() => {
    changeTitle = (newTitle) => {
      setTitle(newTitle);
    };
  }, []);

  
function ObjectPanel() {  
  canvasRef = React.useRef<HTMLCanvasElement>(null);

  return (
   <div className={styles.scrollContainer}>
    <Title alignment="center" capitalization="default" size="small" tone="primary"> {title} </Title>
      <Rows spacing="2u">
        <FormField
          label="Select a WAD"
          control={(props) => (
                <FileInput accept={['.wad']} disabled={wadLoaded}
                  onDropAcceptedFiles={(event) => openWad(event)}
                />
          )}
        />
        <canvas ref={canvasRef} width={320} height={200} style={{ width: "100%", height: "100%" }} />
        <TextInput name="" onKeyDown={(event) => getKey(event)} placeholder="Button presses go here" value=""/>
      </Rows>
    </div>
  );
}


  if (context.surface === "object_panel") {
    return <ObjectPanel />;
  }

  throw new Error(`Invalid surface: ${context.surface}`);
}

function getCanvas(canvas: HTMLCanvasElement | null) {
  if (!canvas) {
    throw new Error("HTMLCanvasElement does not exist");
  }

  const context = canvas.getContext("2d");

  if (!context) {
    throw new Error("CanvasRenderingContext2D does not exist");
  }

  return { canvas, context };
}

function openWad(event) {
    console.log(event);
    const file = event[0];
    if (file && file.size) {
      console.log(file.name);

      const reader = new FileReader();
      reader.onload = function(event) {
        const uint8File = new Uint8Array(event.target.result);
        let stream = FS.open("/" + file.name, "w+");
        FS.write(stream, uint8File, 0, file.size, 0);
        FS.close(stream);
        Module.ccall(
          'doomgeneric_Create',
          'void',
          ['number', 'number'],
          [0, 0]
        );
        wadLoaded=true;
        setInterval(doomTick, 0);
      }
      reader.readAsArrayBuffer(file);
    }
  }

var keys = new Uint8Array(256).fill(0);
var keyQueue = [];

function getKey(event) {
  let doomKey = _toDoomKey(event.keyCode);
  keys[doomKey] = 1;
  keyQueue.push([doomKey, 1]);
}

function doomTick() {
  for (let i = 0; i < keys.length; i++) {
    if (keys[i] > 0) {
      keys[i]++;
    }
    if (keys[i] > 6) {
      keys[i] = 0;
      keyQueue.push([i, 0]);
    }
  }
  _doomgeneric_Tick();
}


function drawScreen(framebuffer_ptr, dwidth, dheight) {
  let framebuffer = Module.HEAPU8.subarray(framebuffer_ptr, framebuffer_ptr + dwidth*dheight*4);
  for (let i = 0; i < dwidth*dheight*4; i += 4) {
    canvasScreen.data[i] = framebuffer[i + 2];
    canvasScreen.data[i + 1] = framebuffer[i + 1];
    canvasScreen.data[i + 2] = framebuffer[i];
    canvasScreen.data[i + 3] = 255;
  }
  const { canvas, context } = getCanvas(canvasRef.current);
  const { width, height } = canvas;
  context.putImageData(canvasScreen, 0, 0);
}

async function insertEndoom(range) {
  await addElementAtPoint({
    type: "richtext",
    range,
  });
}

function drawEndoom(endoom_ptr) {
  let endoomData = Module.HEAPU8.subarray(endoom_ptr, endoom_ptr + 4000);
  const range = createRichtextRange();
  
  for (var y = 0; y < 25; y++) {
    var textRow = "";
    for (var x = 0; x < 160; x += 2) {
      if (endoomData[y*160 + x] <= 0x7A) {
        textRow += String.fromCharCode(endoomData[y*160 + x]);
      }
    }
    textRow += "\n";
    console.log(textRow);
    range.appendText(textRow);
  }
  insertEndoom(range);
}

function updateTitle(title_ptr, titleSize) {
  let titleChar = Module.HEAPU8.subarray(title_ptr, title_ptr + titleSize);
  let newTitle = "";
  for (let i = 0; i < titleSize; i++) {
    newTitle += String.fromCharCode(titleChar[i]);
  }
  changeTitle(newTitle);
}

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};



// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;


// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';






// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};






var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}







function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });






// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 401760,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5644640,
    DYNAMIC_BASE = 5644640,
    DYNAMICTOP_PTR = 401552;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');








// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_INITIAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  var e = what;

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}


var memoryInitializer = null;












function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    if (name[0] == '_') {
      displayName = name.substr(1);
    }
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}



// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [function($0) { drawEndoom($0); },
 function() { return Date.now(); },
 function($0, $1, $2) { drawScreen($0, $1, $2); },
 function() { if (keyQueue.length === 0) return 0; let key_data = keyQueue.shift(); let key = key_data[0]; let pressed = key_data[1]; return (pressed << 8) | key; },
 function($0, $1) { updateTitle($0, $1); }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}




// STATICTOP = STATIC_BASE + 401752;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 401744;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  
   function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

   

   


  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  var ___environ=401584;
  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = __getExecutableName();
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        ___environ = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((___environ)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=___environ;
      } else {
        ___environ = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((___environ)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((___environ)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((___environ)+(strings.length * ptrSize))>>2)]=0;
    }

  
  
   
  
   
  
     

  
    

  
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = FS.mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },mmapAlloc:function(size) {
        var alignedSize = alignMemory(size, 16384);
        var ptr = _malloc(alignedSize);
        while (size < alignedSize) HEAP8[ptr + size++] = 0;
        return ptr;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___sys_unlink(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall10(a0
  ) {
  return ___sys_unlink(a0);
  }

  
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall221(a0,a1,a2
  ) {
  return ___sys_fcntl64(a0,a1,a2);
  }

  
  function ___sys_rename(old_path, new_path) {try {
  
      old_path = SYSCALLS.getStr(old_path);
      new_path = SYSCALLS.getStr(new_path);
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall38(a0,a1
  ) {
  return ___sys_rename(a0,a1);
  }

  
  function ___sys_mkdir(path, mode) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall39(a0,a1
  ) {
  return ___sys_mkdir(a0,a1);
  }

  
  function ___sys_rmdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall40(a0
  ) {
  return ___sys_rmdir(a0);
  }

  
  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall5(a0,a1,a2
  ) {
  return ___sys_open(a0,a1,a2);
  }

  
  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall54(a0,a1,a2
  ) {
  return ___sys_ioctl(a0,a1,a2);
  }

   

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(a0
  ) {
  return _fd_close(a0);
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(a0,a1,a2,a3
  ) {
  return _fd_read(a0,a1,a2,a3);
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(a0,a1,a2,a3,a4
  ) {
  return _fd_seek(a0,a1,a2,a3,a4);
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(a0,a1,a2,a3
  ) {
  return _fd_write(a0,a1,a2,a3);
  }

   

   

   

  function _emscripten_asm_const_int() {}

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }



   

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }
  
   

   

   

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      if (!command) return 0; // no shell available
      setErrNo(6);
      return -1;
    }

  
  var __readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray( __readAsmConstArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      __readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        assert(ch === 100/*'d'*/ || ch === 102/*'f'*/ || ch === 105 /*'i'*/);
        // A double takes two 32-bit slots, and must also be aligned - the backend
        // will emit padding to avoid that.
        var double = ch < 105;
        if (double && (buf & 1)) buf++;
        __readAsmConstArgsArray.push(double ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
        ++buf;
      }
      return __readAsmConstArgsArray;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_clz32,Math_imul,Int8Array,Int32Array

function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = { "___buildEnvironment": ___buildEnvironment, "___sys_fcntl64": ___sys_fcntl64, "___sys_ioctl": ___sys_ioctl, "___sys_mkdir": ___sys_mkdir, "___sys_open": ___sys_open, "___sys_rename": ___sys_rename, "___sys_rmdir": ___sys_rmdir, "___sys_unlink": ___sys_unlink, "___syscall10": ___syscall10, "___syscall221": ___syscall221, "___syscall38": ___syscall38, "___syscall39": ___syscall39, "___syscall40": ___syscall40, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__getExecutableName": __getExecutableName, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_int": _emscripten_asm_const_int, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_system": _system, "abort": abort, "abortStackOverflow": abortStackOverflow, "getTempRet0": getTempRet0, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "setTempRet0": setTempRet0, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  nullFunc_i=env.nullFunc_i,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  ___buildEnvironment=env.___buildEnvironment,
  ___sys_fcntl64=env.___sys_fcntl64,
  ___sys_ioctl=env.___sys_ioctl,
  ___sys_mkdir=env.___sys_mkdir,
  ___sys_open=env.___sys_open,
  ___sys_rename=env.___sys_rename,
  ___sys_rmdir=env.___sys_rmdir,
  ___sys_unlink=env.___sys_unlink,
  ___syscall10=env.___syscall10,
  ___syscall221=env.___syscall221,
  ___syscall38=env.___syscall38,
  ___syscall39=env.___syscall39,
  ___syscall40=env.___syscall40,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __getExecutableName=env.__getExecutableName,
  _emscripten_asm_const_i=env._emscripten_asm_const_i,
  _emscripten_asm_const_ii=env._emscripten_asm_const_ii,
  _emscripten_asm_const_iii=env._emscripten_asm_const_iii,
  _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii,
  _emscripten_asm_const_int=env._emscripten_asm_const_int,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _fd_close=env._fd_close,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _system=env._system,
  abortStackOverflow=env.abortStackOverflow,
  STACKTOP = 401760,
  STACK_MAX = 5644640,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _AM_activateNewScale() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add2 = 0, $add8 = 0, $add9 = 0;
 var $call = 0, $call4 = 0, $div = 0, $div1 = 0, $div5 = 0, $div6 = 0, $shl = 0, $shl3 = 0, $sub = 0, $sub7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99317]|0;
 $div = (($0|0) / 2)&-1;
 $1 = HEAP32[99318]|0;
 $add = (($1) + ($div))|0;
 HEAP32[99318] = $add;
 $2 = HEAP32[99319]|0;
 $div1 = (($2|0) / 2)&-1;
 $3 = HEAP32[99320]|0;
 $add2 = (($3) + ($div1))|0;
 HEAP32[99320] = $add2;
 $4 = HEAP32[99321]|0;
 $shl = $4 << 16;
 $5 = HEAP32[99322]|0;
 $call = (_FixedMul($shl,$5)|0);
 HEAP32[99317] = $call;
 $6 = HEAP32[99323]|0;
 $shl3 = $6 << 16;
 $7 = HEAP32[99322]|0;
 $call4 = (_FixedMul($shl3,$7)|0);
 HEAP32[99319] = $call4;
 $8 = HEAP32[99317]|0;
 $div5 = (($8|0) / 2)&-1;
 $9 = HEAP32[99318]|0;
 $sub = (($9) - ($div5))|0;
 HEAP32[99318] = $sub;
 $10 = HEAP32[99319]|0;
 $div6 = (($10|0) / 2)&-1;
 $11 = HEAP32[99320]|0;
 $sub7 = (($11) - ($div6))|0;
 HEAP32[99320] = $sub7;
 $12 = HEAP32[99318]|0;
 $13 = HEAP32[99317]|0;
 $add8 = (($12) + ($13))|0;
 HEAP32[99324] = $add8;
 $14 = HEAP32[99320]|0;
 $15 = HEAP32[99319]|0;
 $add9 = (($14) + ($15))|0;
 HEAP32[99325] = $add9;
 return;
}
function _AM_saveScaleAndLoc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99318]|0;
 HEAP32[99326] = $0;
 $1 = HEAP32[99320]|0;
 HEAP32[99327] = $1;
 $2 = HEAP32[99317]|0;
 HEAP32[99328] = $2;
 $3 = HEAP32[99319]|0;
 HEAP32[99329] = $3;
 return;
}
function _AM_restoreScaleAndLoc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add4 = 0, $call = 0, $call5 = 0, $div = 0, $div2 = 0, $shl = 0, $sub = 0, $sub3 = 0, $tobool = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99328]|0;
 HEAP32[99317] = $0;
 $1 = HEAP32[99329]|0;
 HEAP32[99319] = $1;
 $2 = HEAP32[32153]|0;
 $tobool = ($2|0)!=(0);
 if ($tobool) {
  $5 = HEAP32[99330]|0;
  $6 = HEAP32[$5>>2]|0;
  $x = ((($6)) + 12|0);
  $7 = HEAP32[$x>>2]|0;
  $8 = HEAP32[99317]|0;
  $div = (($8|0) / 2)&-1;
  $sub = (($7) - ($div))|0;
  HEAP32[99318] = $sub;
  $9 = HEAP32[99330]|0;
  $10 = HEAP32[$9>>2]|0;
  $y = ((($10)) + 16|0);
  $11 = HEAP32[$y>>2]|0;
  $12 = HEAP32[99319]|0;
  $div2 = (($12|0) / 2)&-1;
  $sub3 = (($11) - ($div2))|0;
  HEAP32[99320] = $sub3;
 } else {
  $3 = HEAP32[99326]|0;
  HEAP32[99318] = $3;
  $4 = HEAP32[99327]|0;
  HEAP32[99320] = $4;
 }
 $13 = HEAP32[99318]|0;
 $14 = HEAP32[99317]|0;
 $add = (($13) + ($14))|0;
 HEAP32[99324] = $add;
 $15 = HEAP32[99320]|0;
 $16 = HEAP32[99319]|0;
 $add4 = (($15) + ($16))|0;
 HEAP32[99325] = $add4;
 $17 = HEAP32[99321]|0;
 $shl = $17 << 16;
 $18 = HEAP32[99317]|0;
 $call = (_FixedDiv($shl,$18)|0);
 HEAP32[32154] = $call;
 $19 = HEAP32[32154]|0;
 $call5 = (_FixedDiv(65536,$19)|0);
 HEAP32[99322] = $call5;
 return;
}
function _AM_addMark() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add2 = 0, $add4 = 0, $arrayidx = 0, $arrayidx3 = 0, $div = 0, $div1 = 0, $rem = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99318]|0;
 $1 = HEAP32[99317]|0;
 $div = (($1|0) / 2)&-1;
 $add = (($0) + ($div))|0;
 $2 = HEAP32[99331]|0;
 $arrayidx = (159952 + ($2<<3)|0);
 HEAP32[$arrayidx>>2] = $add;
 $3 = HEAP32[99320]|0;
 $4 = HEAP32[99319]|0;
 $div1 = (($4|0) / 2)&-1;
 $add2 = (($3) + ($div1))|0;
 $5 = HEAP32[99331]|0;
 $arrayidx3 = (159952 + ($5<<3)|0);
 $y = ((($arrayidx3)) + 4|0);
 HEAP32[$y>>2] = $add2;
 $6 = HEAP32[99331]|0;
 $add4 = (($6) + 1)|0;
 $rem = (($add4|0) % 10)&-1;
 HEAP32[99331] = $rem;
 return;
}
function _AM_findMinMaxBoundaries() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arrayidx = 0;
 var $arrayidx11 = 0, $arrayidx14 = 0, $arrayidx2 = 0, $arrayidx21 = 0, $arrayidx8 = 0, $b = 0, $call = 0, $call27 = 0, $call30 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp19 = 0, $cmp28 = 0, $cmp6 = 0, $cond = 0, $i = 0, $inc = 0, $shl = 0, $shl26 = 0;
 var $shl29 = 0, $sub = 0, $sub25 = 0, $y = 0, $y15 = 0, $y22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[99332] = 2147483647;
 HEAP32[99333] = 2147483647;
 HEAP32[99334] = -2147483647;
 HEAP32[99335] = -2147483647;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[99840]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99841]|0;
  $3 = $i;
  $arrayidx = (($2) + ($3<<3)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = HEAP32[99333]|0;
  $cmp1 = ($4|0)<($5|0);
  $6 = HEAP32[99841]|0;
  $7 = $i;
  $arrayidx2 = (($6) + ($7<<3)|0);
  $8 = HEAP32[$arrayidx2>>2]|0;
  if ($cmp1) {
   HEAP32[99333] = $8;
  } else {
   $9 = HEAP32[99335]|0;
   $cmp6 = ($8|0)>($9|0);
   if ($cmp6) {
    $10 = HEAP32[99841]|0;
    $11 = $i;
    $arrayidx8 = (($10) + ($11<<3)|0);
    $12 = HEAP32[$arrayidx8>>2]|0;
    HEAP32[99335] = $12;
   }
  }
  $13 = HEAP32[99841]|0;
  $14 = $i;
  $arrayidx11 = (($13) + ($14<<3)|0);
  $y = ((($arrayidx11)) + 4|0);
  $15 = HEAP32[$y>>2]|0;
  $16 = HEAP32[99332]|0;
  $cmp12 = ($15|0)<($16|0);
  $17 = HEAP32[99841]|0;
  $18 = $i;
  $arrayidx14 = (($17) + ($18<<3)|0);
  $y15 = ((($arrayidx14)) + 4|0);
  $19 = HEAP32[$y15>>2]|0;
  if ($cmp12) {
   HEAP32[99332] = $19;
  } else {
   $20 = HEAP32[99334]|0;
   $cmp19 = ($19|0)>($20|0);
   if ($cmp19) {
    $21 = HEAP32[99841]|0;
    $22 = $i;
    $arrayidx21 = (($21) + ($22<<3)|0);
    $y22 = ((($arrayidx21)) + 4|0);
    $23 = HEAP32[$y22>>2]|0;
    HEAP32[99334] = $23;
   }
  }
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 $25 = HEAP32[99335]|0;
 $26 = HEAP32[99333]|0;
 $sub = (($25) - ($26))|0;
 HEAP32[99336] = $sub;
 $27 = HEAP32[99334]|0;
 $28 = HEAP32[99332]|0;
 $sub25 = (($27) - ($28))|0;
 HEAP32[99337] = $sub25;
 $29 = HEAP32[99321]|0;
 $shl = $29 << 16;
 $30 = HEAP32[99336]|0;
 $call = (_FixedDiv($shl,$30)|0);
 $a = $call;
 $31 = HEAP32[99323]|0;
 $shl26 = $31 << 16;
 $32 = HEAP32[99337]|0;
 $call27 = (_FixedDiv($shl26,$32)|0);
 $b = $call27;
 $33 = $a;
 $34 = $b;
 $cmp28 = ($33|0)<($34|0);
 $35 = $a;
 $36 = $b;
 $cond = $cmp28 ? $35 : $36;
 HEAP32[99338] = $cond;
 $37 = HEAP32[99323]|0;
 $shl29 = $37 << 16;
 $call30 = (_FixedDiv($shl29,2097152)|0);
 HEAP32[99339] = $call30;
 STACKTOP = sp;return;
}
function _AM_changeWindowLoc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add15 = 0, $add2 = 0, $add22 = 0, $add29 = 0, $add3 = 0, $add30 = 0, $add7 = 0, $cmp = 0, $cmp16 = 0;
 var $cmp23 = 0, $cmp8 = 0, $div = 0, $div10 = 0, $div14 = 0, $div18 = 0, $div21 = 0, $div25 = 0, $div5 = 0, $div6 = 0, $or$cond = 0, $sub = 0, $sub11 = 0, $sub19 = 0, $sub26 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100367]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[100368]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool | $tobool1;
 if ($or$cond) {
  HEAP32[32153] = 0;
  HEAP32[100369] = 2147483647;
 }
 $2 = HEAP32[100367]|0;
 $3 = HEAP32[99318]|0;
 $add = (($3) + ($2))|0;
 HEAP32[99318] = $add;
 $4 = HEAP32[100368]|0;
 $5 = HEAP32[99320]|0;
 $add2 = (($5) + ($4))|0;
 HEAP32[99320] = $add2;
 $6 = HEAP32[99318]|0;
 $7 = HEAP32[99317]|0;
 $div = (($7|0) / 2)&-1;
 $add3 = (($6) + ($div))|0;
 $8 = HEAP32[99335]|0;
 $cmp = ($add3|0)>($8|0);
 if ($cmp) {
  $9 = HEAP32[99335]|0;
  $10 = HEAP32[99317]|0;
  $div5 = (($10|0) / 2)&-1;
  $sub = (($9) - ($div5))|0;
  HEAP32[99318] = $sub;
 } else {
  $11 = HEAP32[99318]|0;
  $12 = HEAP32[99317]|0;
  $div6 = (($12|0) / 2)&-1;
  $add7 = (($11) + ($div6))|0;
  $13 = HEAP32[99333]|0;
  $cmp8 = ($add7|0)<($13|0);
  if ($cmp8) {
   $14 = HEAP32[99333]|0;
   $15 = HEAP32[99317]|0;
   $div10 = (($15|0) / 2)&-1;
   $sub11 = (($14) - ($div10))|0;
   HEAP32[99318] = $sub11;
  }
 }
 $16 = HEAP32[99320]|0;
 $17 = HEAP32[99319]|0;
 $div14 = (($17|0) / 2)&-1;
 $add15 = (($16) + ($div14))|0;
 $18 = HEAP32[99334]|0;
 $cmp16 = ($add15|0)>($18|0);
 if ($cmp16) {
  $19 = HEAP32[99334]|0;
  $20 = HEAP32[99319]|0;
  $div18 = (($20|0) / 2)&-1;
  $sub19 = (($19) - ($div18))|0;
  HEAP32[99320] = $sub19;
 } else {
  $21 = HEAP32[99320]|0;
  $22 = HEAP32[99319]|0;
  $div21 = (($22|0) / 2)&-1;
  $add22 = (($21) + ($div21))|0;
  $23 = HEAP32[99332]|0;
  $cmp23 = ($add22|0)<($23|0);
  if ($cmp23) {
   $24 = HEAP32[99332]|0;
   $25 = HEAP32[99319]|0;
   $div25 = (($25|0) / 2)&-1;
   $sub26 = (($24) - ($div25))|0;
   HEAP32[99320] = $sub26;
  }
 }
 $26 = HEAP32[99318]|0;
 $27 = HEAP32[99317]|0;
 $add29 = (($26) + ($27))|0;
 HEAP32[99324] = $add29;
 $28 = HEAP32[99320]|0;
 $29 = HEAP32[99319]|0;
 $add30 = (($28) + ($29))|0;
 HEAP32[99325] = $add30;
 return;
}
function _AM_initVariables() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $call = 0, $call2 = 0, $cmp = 0, $div = 0, $div10 = 0, $inc = 0, $pnum = 0, $shl = 0, $shl1 = 0, $sub = 0, $sub11 = 0, $tobool = 0;
 var $tobool5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[99316] = 1;
 $0 = HEAP32[100203]|0;
 HEAP32[99340] = $0;
 HEAP32[100369] = 2147483647;
 HEAP32[99341] = 0;
 HEAP32[100368] = 0;
 HEAP32[100367] = 0;
 HEAP32[99342] = 65536;
 HEAP32[99343] = 65536;
 $1 = HEAP32[99321]|0;
 $shl = $1 << 16;
 $2 = HEAP32[99322]|0;
 $call = (_FixedMul($shl,$2)|0);
 HEAP32[99317] = $call;
 $3 = HEAP32[99323]|0;
 $shl1 = $3 << 16;
 $4 = HEAP32[99322]|0;
 $call2 = (_FixedMul($shl1,$4)|0);
 HEAP32[99319] = $call2;
 $5 = HEAP32[99415]|0;
 $arrayidx = (183040 + ($5<<2)|0);
 $6 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($6|0)!=(0);
 L1: do {
  if ($tobool) {
   $7 = HEAP32[99415]|0;
   $arrayidx3 = (183056 + (($7*288)|0)|0);
   HEAP32[99330] = $arrayidx3;
  } else {
   HEAP32[99330] = 183056;
   $pnum = 0;
   while(1) {
    $8 = $pnum;
    $cmp = ($8|0)<(4);
    if (!($cmp)) {
     break L1;
    }
    $9 = $pnum;
    $arrayidx4 = (183040 + ($9<<2)|0);
    $10 = HEAP32[$arrayidx4>>2]|0;
    $tobool5 = ($10|0)!=(0);
    $11 = $pnum;
    if ($tobool5) {
     break;
    }
    $inc = (($11) + 1)|0;
    $pnum = $inc;
   }
   $arrayidx7 = (183056 + (($11*288)|0)|0);
   HEAP32[99330] = $arrayidx7;
  }
 } while(0);
 $12 = HEAP32[99330]|0;
 $13 = HEAP32[$12>>2]|0;
 $x = ((($13)) + 12|0);
 $14 = HEAP32[$x>>2]|0;
 $15 = HEAP32[99317]|0;
 $div = (($15|0) / 2)&-1;
 $sub = (($14) - ($div))|0;
 HEAP32[99318] = $sub;
 $16 = HEAP32[99330]|0;
 $17 = HEAP32[$16>>2]|0;
 $y = ((($17)) + 16|0);
 $18 = HEAP32[$y>>2]|0;
 $19 = HEAP32[99319]|0;
 $div10 = (($19|0) / 2)&-1;
 $sub11 = (($18) - ($div10))|0;
 HEAP32[99320] = $sub11;
 _AM_changeWindowLoc();
 $20 = HEAP32[99318]|0;
 HEAP32[99326] = $20;
 $21 = HEAP32[99320]|0;
 HEAP32[99327] = $21;
 $22 = HEAP32[99317]|0;
 HEAP32[99328] = $22;
 $23 = HEAP32[99319]|0;
 HEAP32[99329] = $23;
 (_ST_Responder(128620)|0);
 STACKTOP = sp;return;
}
function _AM_loadPics() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $i = 0, $inc = 0, $namebuf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $namebuf = sp + 8|0;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  HEAP32[$vararg_buffer>>2] = $1;
  (_snprintf($namebuf,9,130160,$vararg_buffer)|0);
  $call2 = (_W_CacheLumpName($namebuf,1)|0);
  $2 = $i;
  $arrayidx = (160032 + ($2<<2)|0);
  HEAP32[$arrayidx>>2] = $call2;
  $3 = $i;
  $inc = (($3) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _AM_unloadPics() {
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $i = 0, $inc = 0, $namebuf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $namebuf = sp + 8|0;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  HEAP32[$vararg_buffer>>2] = $1;
  (_snprintf($namebuf,9,130160,$vararg_buffer)|0);
  _W_ReleaseLumpName($namebuf);
  $2 = $i;
  $inc = (($2) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _AM_clearMarks() {
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (159952 + ($1<<3)|0);
  HEAP32[$arrayidx>>2] = -1;
  $2 = $i;
  $inc = (($2) + 1)|0;
  $i = $inc;
 }
 HEAP32[99331] = 0;
 STACKTOP = sp;return;
}
function _AM_LevelInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99321] = 320;
 HEAP32[99323] = 168;
 _AM_clearMarks();
 _AM_findMinMaxBoundaries();
 $0 = HEAP32[99338]|0;
 $call = (_FixedDiv($0,45875)|0);
 HEAP32[32154] = $call;
 $1 = HEAP32[32154]|0;
 $2 = HEAP32[99339]|0;
 $cmp = ($1|0)>($2|0);
 if ($cmp) {
  $3 = HEAP32[99338]|0;
  HEAP32[32154] = $3;
 }
 $4 = HEAP32[32154]|0;
 $call1 = (_FixedDiv(65536,$4)|0);
 HEAP32[99322] = $call1;
 return;
}
function _AM_Stop() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _AM_unloadPics();
 HEAP32[99316] = 0;
 (_ST_Responder(128640)|0);
 HEAP32[32165] = 1;
 return;
}
function _AM_Start() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32165]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  _AM_Stop();
 }
 HEAP32[32165] = 0;
 $1 = HEAP32[32166]|0;
 $2 = HEAP32[99423]|0;
 $cmp = ($1|0)!=($2|0);
 if (!($cmp)) {
  $3 = HEAP32[32167]|0;
  $4 = HEAP32[99424]|0;
  $cmp1 = ($3|0)!=($4|0);
  if (!($cmp1)) {
   _AM_initVariables();
   _AM_loadPics();
   return;
  }
 }
 _AM_LevelInit();
 $5 = HEAP32[99423]|0;
 HEAP32[32166] = $5;
 $6 = HEAP32[99424]|0;
 HEAP32[32167] = $6;
 _AM_initVariables();
 _AM_loadPics();
 return;
}
function _AM_minOutWindowScale() {
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99338]|0;
 HEAP32[32154] = $0;
 $1 = HEAP32[32154]|0;
 $call = (_FixedDiv(65536,$1)|0);
 HEAP32[99322] = $call;
 _AM_activateNewScale();
 return;
}
function _AM_maxOutWindowScale() {
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99339]|0;
 HEAP32[32154] = $0;
 $1 = HEAP32[32154]|0;
 $call = (_FixedDiv(65536,$1)|0);
 HEAP32[99322] = $call;
 _AM_activateNewScale();
 return;
}
function _AM_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call102 = 0, $call18 = 0;
 var $call26 = 0, $call34 = 0, $cmp1 = 0, $cmp108 = 0, $cmp112 = 0, $cmp119 = 0, $cmp126 = 0, $cmp133 = 0, $cmp14 = 0, $cmp140 = 0, $cmp142 = 0, $cmp22 = 0, $cmp30 = 0, $cmp39 = 0, $cmp4 = 0, $cmp42 = 0, $cmp45 = 0, $cmp48 = 0, $cmp56 = 0, $cmp67 = 0;
 var $cmp7 = 0, $cmp79 = 0, $cmp84 = 0, $conv = 0, $data1 = 0, $data1111 = 0, $data16 = 0, $data2 = 0, $ev$addr = 0, $key = 0, $lnot = 0, $lnot$ext = 0, $lnot$ext60 = 0, $lnot$ext71 = 0, $lnot59 = 0, $lnot70 = 0, $message = 0, $message74 = 0, $message82 = 0, $message86 = 0;
 var $rc = 0, $rem = 0, $sub = 0, $sub35 = 0, $tobool = 0, $tobool100 = 0, $tobool103 = 0, $tobool115 = 0, $tobool122 = 0, $tobool129 = 0, $tobool136 = 0, $tobool16 = 0, $tobool24 = 0, $tobool32 = 0, $tobool50 = 0, $tobool51 = 0, $tobool58 = 0, $tobool61 = 0, $tobool69 = 0, $tobool72 = 0;
 var $tobool9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $ev$addr = $ev;
 $rc = 0;
 $0 = HEAP32[99316]|0;
 $tobool = ($0|0)!=(0);
 $1 = $ev$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp4 = ($2|0)==(0);
 if (!($tobool)) {
  if (!($cmp4)) {
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  $3 = $ev$addr;
  $data1 = ((($3)) + 4|0);
  $4 = HEAP32[$data1>>2]|0;
  $5 = HEAP32[32245]|0;
  $cmp1 = ($4|0)==($5|0);
  if (!($cmp1)) {
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  _AM_Start();
  HEAP32[99491] = 0;
  $rc = 1;
  $75 = $rc;
  STACKTOP = sp;return ($75|0);
 }
 if (!($cmp4)) {
  $55 = $ev$addr;
  $56 = HEAP32[$55>>2]|0;
  $cmp108 = ($56|0)==(1);
  if (!($cmp108)) {
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  $rc = 0;
  $57 = $ev$addr;
  $data1111 = ((($57)) + 4|0);
  $58 = HEAP32[$data1111>>2]|0;
  $key = $58;
  $59 = $key;
  $60 = HEAP32[32241]|0;
  $cmp112 = ($59|0)==($60|0);
  if ($cmp112) {
   $61 = HEAP32[32153]|0;
   $tobool115 = ($61|0)!=(0);
   if ($tobool115) {
    $75 = $rc;
    STACKTOP = sp;return ($75|0);
   }
   HEAP32[100367] = 0;
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  $62 = $key;
  $63 = HEAP32[32242]|0;
  $cmp119 = ($62|0)==($63|0);
  if ($cmp119) {
   $64 = HEAP32[32153]|0;
   $tobool122 = ($64|0)!=(0);
   if ($tobool122) {
    $75 = $rc;
    STACKTOP = sp;return ($75|0);
   }
   HEAP32[100367] = 0;
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  $65 = $key;
  $66 = HEAP32[32239]|0;
  $cmp126 = ($65|0)==($66|0);
  if ($cmp126) {
   $67 = HEAP32[32153]|0;
   $tobool129 = ($67|0)!=(0);
   if ($tobool129) {
    $75 = $rc;
    STACKTOP = sp;return ($75|0);
   }
   HEAP32[100368] = 0;
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  $68 = $key;
  $69 = HEAP32[32240]|0;
  $cmp133 = ($68|0)==($69|0);
  if ($cmp133) {
   $70 = HEAP32[32153]|0;
   $tobool136 = ($70|0)!=(0);
   if ($tobool136) {
    $75 = $rc;
    STACKTOP = sp;return ($75|0);
   }
   HEAP32[100368] = 0;
   $75 = $rc;
   STACKTOP = sp;return ($75|0);
  }
  $71 = $key;
  $72 = HEAP32[32244]|0;
  $cmp140 = ($71|0)==($72|0);
  if (!($cmp140)) {
   $73 = $key;
   $74 = HEAP32[32243]|0;
   $cmp142 = ($73|0)==($74|0);
   if (!($cmp142)) {
    $75 = $rc;
    STACKTOP = sp;return ($75|0);
   }
  }
  HEAP32[99343] = 65536;
  HEAP32[99342] = 65536;
  $75 = $rc;
  STACKTOP = sp;return ($75|0);
 }
 $rc = 1;
 $6 = $ev$addr;
 $data16 = ((($6)) + 4|0);
 $7 = HEAP32[$data16>>2]|0;
 $key = $7;
 $8 = $key;
 $9 = HEAP32[32241]|0;
 $cmp7 = ($8|0)==($9|0);
 do {
  if ($cmp7) {
   $10 = HEAP32[32153]|0;
   $tobool9 = ($10|0)!=(0);
   if ($tobool9) {
    $rc = 0;
    break;
   } else {
    $11 = HEAP32[99322]|0;
    $call = (_FixedMul(262144,$11)|0);
    HEAP32[100367] = $call;
    break;
   }
  } else {
   $12 = $key;
   $13 = HEAP32[32242]|0;
   $cmp14 = ($12|0)==($13|0);
   if ($cmp14) {
    $14 = HEAP32[32153]|0;
    $tobool16 = ($14|0)!=(0);
    if ($tobool16) {
     $rc = 0;
     break;
    } else {
     $15 = HEAP32[99322]|0;
     $call18 = (_FixedMul(262144,$15)|0);
     $sub = (0 - ($call18))|0;
     HEAP32[100367] = $sub;
     break;
    }
   }
   $16 = $key;
   $17 = HEAP32[32239]|0;
   $cmp22 = ($16|0)==($17|0);
   if ($cmp22) {
    $18 = HEAP32[32153]|0;
    $tobool24 = ($18|0)!=(0);
    if ($tobool24) {
     $rc = 0;
     break;
    } else {
     $19 = HEAP32[99322]|0;
     $call26 = (_FixedMul(262144,$19)|0);
     HEAP32[100368] = $call26;
     break;
    }
   }
   $20 = $key;
   $21 = HEAP32[32240]|0;
   $cmp30 = ($20|0)==($21|0);
   if ($cmp30) {
    $22 = HEAP32[32153]|0;
    $tobool32 = ($22|0)!=(0);
    if ($tobool32) {
     $rc = 0;
     break;
    } else {
     $23 = HEAP32[99322]|0;
     $call34 = (_FixedMul(262144,$23)|0);
     $sub35 = (0 - ($call34))|0;
     HEAP32[100368] = $sub35;
     break;
    }
   }
   $24 = $key;
   $25 = HEAP32[32244]|0;
   $cmp39 = ($24|0)==($25|0);
   if ($cmp39) {
    HEAP32[99343] = 64250;
    HEAP32[99342] = 66846;
    break;
   }
   $26 = $key;
   $27 = HEAP32[32243]|0;
   $cmp42 = ($26|0)==($27|0);
   if ($cmp42) {
    HEAP32[99343] = 66846;
    HEAP32[99342] = 64250;
    break;
   }
   $28 = $key;
   $29 = HEAP32[32245]|0;
   $cmp45 = ($28|0)==($29|0);
   if ($cmp45) {
    HEAP32[99344] = 0;
    HEAP32[99491] = 1;
    _AM_Stop();
    break;
   }
   $30 = $key;
   $31 = HEAP32[32246]|0;
   $cmp48 = ($30|0)==($31|0);
   if ($cmp48) {
    $32 = HEAP32[99344]|0;
    $tobool50 = ($32|0)!=(0);
    $lnot = $tobool50 ^ 1;
    $lnot$ext = $lnot&1;
    HEAP32[99344] = $lnot$ext;
    $33 = HEAP32[99344]|0;
    $tobool51 = ($33|0)!=(0);
    if ($tobool51) {
     _AM_saveScaleAndLoc();
     _AM_minOutWindowScale();
     break;
    } else {
     _AM_restoreScaleAndLoc();
     break;
    }
   }
   $34 = $key;
   $35 = HEAP32[32247]|0;
   $cmp56 = ($34|0)==($35|0);
   if ($cmp56) {
    $36 = HEAP32[32153]|0;
    $tobool58 = ($36|0)!=(0);
    $lnot59 = $tobool58 ^ 1;
    $lnot$ext60 = $lnot59&1;
    HEAP32[32153] = $lnot$ext60;
    HEAP32[100369] = 2147483647;
    $37 = HEAP32[32153]|0;
    $tobool61 = ($37|0)!=(0);
    $38 = HEAP32[99330]|0;
    $message = ((($38)) + 224|0);
    if ($tobool61) {
     HEAP32[$message>>2] = 130169;
     break;
    } else {
     HEAP32[$message>>2] = 130184;
     break;
    }
   }
   $39 = $key;
   $40 = HEAP32[32248]|0;
   $cmp67 = ($39|0)==($40|0);
   if ($cmp67) {
    $41 = HEAP32[99345]|0;
    $tobool69 = ($41|0)!=(0);
    $lnot70 = $tobool69 ^ 1;
    $lnot$ext71 = $lnot70&1;
    HEAP32[99345] = $lnot$ext71;
    $42 = HEAP32[99345]|0;
    $tobool72 = ($42|0)!=(0);
    $43 = HEAP32[99330]|0;
    $message74 = ((($43)) + 224|0);
    if ($tobool72) {
     HEAP32[$message74>>2] = 130200;
     break;
    } else {
     HEAP32[$message74>>2] = 130208;
     break;
    }
   }
   $44 = $key;
   $45 = HEAP32[32249]|0;
   $cmp79 = ($44|0)==($45|0);
   if ($cmp79) {
    $46 = HEAP32[99331]|0;
    HEAP32[$vararg_buffer>>2] = 130223;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $46;
    (_M_snprintf(160080,20,130217,$vararg_buffer)|0);
    $47 = HEAP32[99330]|0;
    $message82 = ((($47)) + 224|0);
    HEAP32[$message82>>2] = 160080;
    _AM_addMark();
    break;
   }
   $48 = $key;
   $49 = HEAP32[32250]|0;
   $cmp84 = ($48|0)==($49|0);
   if ($cmp84) {
    _AM_clearMarks();
    $50 = HEAP32[99330]|0;
    $message86 = ((($50)) + 224|0);
    HEAP32[$message86>>2] = 130235;
    break;
   } else {
    $rc = 0;
    break;
   }
  }
 } while(0);
 $51 = HEAP32[99430]|0;
 $tobool100 = ($51|0)!=(0);
 if ($tobool100) {
  $75 = $rc;
  STACKTOP = sp;return ($75|0);
 }
 $52 = $ev$addr;
 $data2 = ((($52)) + 8|0);
 $53 = HEAP32[$data2>>2]|0;
 $conv = $53&255;
 $call102 = (_cht_CheckCheat(128560,$conv)|0);
 $tobool103 = ($call102|0)!=(0);
 if (!($tobool103)) {
  $75 = $rc;
  STACKTOP = sp;return ($75|0);
 }
 $rc = 0;
 $54 = HEAP32[99346]|0;
 $add = (($54) + 1)|0;
 $rem = (($add|0) % 3)&-1;
 HEAP32[99346] = $rem;
 $75 = $rc;
 STACKTOP = sp;return ($75|0);
}
function _AM_changeWindowScale() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32154]|0;
 $1 = HEAP32[99343]|0;
 $call = (_FixedMul($0,$1)|0);
 HEAP32[32154] = $call;
 $2 = HEAP32[32154]|0;
 $call1 = (_FixedDiv(65536,$2)|0);
 HEAP32[99322] = $call1;
 $3 = HEAP32[32154]|0;
 $4 = HEAP32[99338]|0;
 $cmp = ($3|0)<($4|0);
 if ($cmp) {
  _AM_minOutWindowScale();
  return;
 }
 $5 = HEAP32[32154]|0;
 $6 = HEAP32[99339]|0;
 $cmp2 = ($5|0)>($6|0);
 if ($cmp2) {
  _AM_maxOutWindowScale();
  return;
 } else {
  _AM_activateNewScale();
  return;
 }
}
function _AM_doFollowPlayer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add14 = 0, $call = 0, $call11 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp2 = 0, $div = 0, $div12 = 0;
 var $shl = 0, $shl10 = 0, $shr = 0, $shr9 = 0, $sub = 0, $sub13 = 0, $x = 0, $x16 = 0, $x4 = 0, $y = 0, $y18 = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100369]|0;
 $1 = HEAP32[99330]|0;
 $2 = HEAP32[$1>>2]|0;
 $x = ((($2)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 $cmp = ($0|0)!=($3|0);
 if (!($cmp)) {
  $4 = HEAP32[100370]|0;
  $5 = HEAP32[99330]|0;
  $6 = HEAP32[$5>>2]|0;
  $y = ((($6)) + 16|0);
  $7 = HEAP32[$y>>2]|0;
  $cmp2 = ($4|0)!=($7|0);
  if (!($cmp2)) {
   return;
  }
 }
 $8 = HEAP32[99330]|0;
 $9 = HEAP32[$8>>2]|0;
 $x4 = ((($9)) + 12|0);
 $10 = HEAP32[$x4>>2]|0;
 $11 = HEAP32[32154]|0;
 $call = (_FixedMul($10,$11)|0);
 $shr = $call >> 16;
 $shl = $shr << 16;
 $12 = HEAP32[99322]|0;
 $call5 = (_FixedMul($shl,$12)|0);
 $13 = HEAP32[99317]|0;
 $div = (($13|0) / 2)&-1;
 $sub = (($call5) - ($div))|0;
 HEAP32[99318] = $sub;
 $14 = HEAP32[99330]|0;
 $15 = HEAP32[$14>>2]|0;
 $y7 = ((($15)) + 16|0);
 $16 = HEAP32[$y7>>2]|0;
 $17 = HEAP32[32154]|0;
 $call8 = (_FixedMul($16,$17)|0);
 $shr9 = $call8 >> 16;
 $shl10 = $shr9 << 16;
 $18 = HEAP32[99322]|0;
 $call11 = (_FixedMul($shl10,$18)|0);
 $19 = HEAP32[99319]|0;
 $div12 = (($19|0) / 2)&-1;
 $sub13 = (($call11) - ($div12))|0;
 HEAP32[99320] = $sub13;
 $20 = HEAP32[99318]|0;
 $21 = HEAP32[99317]|0;
 $add = (($20) + ($21))|0;
 HEAP32[99324] = $add;
 $22 = HEAP32[99320]|0;
 $23 = HEAP32[99319]|0;
 $add14 = (($22) + ($23))|0;
 HEAP32[99325] = $add14;
 $24 = HEAP32[99330]|0;
 $25 = HEAP32[$24>>2]|0;
 $x16 = ((($25)) + 12|0);
 $26 = HEAP32[$x16>>2]|0;
 HEAP32[100369] = $26;
 $27 = HEAP32[99330]|0;
 $28 = HEAP32[$27>>2]|0;
 $y18 = ((($28)) + 16|0);
 $29 = HEAP32[$y18>>2]|0;
 HEAP32[100370] = $29;
 return;
}
function _AM_Ticker() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $inc = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99316]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  return;
 }
 $1 = HEAP32[99341]|0;
 $inc = (($1) + 1)|0;
 HEAP32[99341] = $inc;
 $2 = HEAP32[32153]|0;
 $tobool1 = ($2|0)!=(0);
 if ($tobool1) {
  _AM_doFollowPlayer();
 }
 $3 = HEAP32[99342]|0;
 $cmp = ($3|0)!=(65536);
 if ($cmp) {
  _AM_changeWindowScale();
 }
 $4 = HEAP32[100367]|0;
 $tobool6 = ($4|0)!=(0);
 $5 = HEAP32[100368]|0;
 $tobool7 = ($5|0)!=(0);
 $or$cond = $tobool6 | $tobool7;
 if (!($or$cond)) {
  return;
 }
 _AM_changeWindowLoc();
 return;
}
function _AM_clearFB($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $color$addr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $color$addr = $color;
 $0 = HEAP32[99340]|0;
 $1 = $color$addr;
 $2 = $1&255;
 $3 = HEAP32[99321]|0;
 $4 = HEAP32[99323]|0;
 $mul = Math_imul($3, $4)|0;
 _memset(($0|0),($2|0),($mul|0))|0;
 STACKTOP = sp;return;
}
function _AM_clipMline($ml,$fl) {
 $ml = $ml|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add155 = 0, $add179 = 0, $add205 = 0, $add230 = 0, $add56 = 0, $add64 = 0, $add73 = 0, $and = 0, $and128 = 0, $and138 = 0, $and159 = 0, $and184 = 0;
 var $and210 = 0, $and298 = 0, $and42 = 0, $b = 0, $b10 = 0, $b102 = 0, $b108 = 0, $b115 = 0, $b121 = 0, $b143 = 0, $b146 = 0, $b164 = 0, $b167 = 0, $b187 = 0, $b192 = 0, $b213 = 0, $b218 = 0, $b270 = 0, $b271 = 0, $b277 = 0;
 var $b284 = 0, $b29 = 0, $b290 = 0, $b35 = 0, $b59 = 0, $b65 = 0, $b67 = 0, $b74 = 0, $call = 0, $call53 = 0, $call62 = 0, $call70 = 0, $cmp = 0, $cmp104 = 0, $cmp110 = 0, $cmp117 = 0, $cmp12 = 0, $cmp123 = 0, $cmp19 = 0, $cmp24 = 0;
 var $cmp240 = 0, $cmp245 = 0, $cmp251 = 0, $cmp258 = 0, $cmp264 = 0, $cmp273 = 0, $cmp279 = 0, $cmp286 = 0, $cmp292 = 0, $cmp3 = 0, $cmp31 = 0, $cmp37 = 0, $cmp7 = 0, $cmp78 = 0, $cmp84 = 0, $cmp91 = 0, $cmp97 = 0, $div = 0, $div178 = 0, $div204 = 0;
 var $div229 = 0, $dx = 0, $dy = 0, $fl$addr = 0, $ml$addr = 0, $mul = 0, $mul177 = 0, $mul203 = 0, $mul228 = 0, $or = 0, $or106 = 0, $or112 = 0, $or119 = 0, $or125 = 0, $or132 = 0, $or247 = 0, $or253 = 0, $or26 = 0, $or260 = 0, $or266 = 0;
 var $or275 = 0, $or281 = 0, $or288 = 0, $or294 = 0, $or33 = 0, $or39 = 0, $or80 = 0, $or86 = 0, $or93 = 0, $or99 = 0, $outcode1 = 0, $outcode2 = 0, $outside = 0, $retval = 0, $shr = 0, $shr54 = 0, $shr63 = 0, $shr71 = 0, $sub = 0, $sub145 = 0;
 var $sub150 = 0, $sub166 = 0, $sub171 = 0, $sub176 = 0, $sub181 = 0, $sub191 = 0, $sub196 = 0, $sub199 = 0, $sub202 = 0, $sub207 = 0, $sub217 = 0, $sub222 = 0, $sub227 = 0, $sub52 = 0, $sub55 = 0, $sub61 = 0, $sub69 = 0, $sub72 = 0, $tmp = 0, $tobool = 0;
 var $tobool129 = 0, $tobool133 = 0, $tobool134 = 0, $tobool139 = 0, $tobool160 = 0, $tobool185 = 0, $tobool211 = 0, $tobool299 = 0, $tobool43 = 0, $y = 0, $y103 = 0, $y109 = 0, $y11 = 0, $y142 = 0, $y144 = 0, $y154 = 0, $y157 = 0, $y163 = 0, $y165 = 0, $y175 = 0;
 var $y182 = 0, $y188 = 0, $y190 = 0, $y198 = 0, $y2 = 0, $y206 = 0, $y214 = 0, $y216 = 0, $y224 = 0, $y231 = 0, $y235 = 0, $y244 = 0, $y250 = 0, $y272 = 0, $y278 = 0, $y51 = 0, $y58 = 0, $y6 = 0, $y68 = 0, $y75 = 0;
 var $y77 = 0, $y83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp = sp + 8|0;
 $ml$addr = $ml;
 $fl$addr = $fl;
 $outcode1 = 0;
 $outcode2 = 0;
 $0 = $ml$addr;
 $y = ((($0)) + 4|0);
 $1 = HEAP32[$y>>2]|0;
 $2 = HEAP32[99325]|0;
 $cmp = ($1|0)>($2|0);
 if ($cmp) {
  $outcode1 = 8;
 } else {
  $3 = $ml$addr;
  $y2 = ((($3)) + 4|0);
  $4 = HEAP32[$y2>>2]|0;
  $5 = HEAP32[99320]|0;
  $cmp3 = ($4|0)<($5|0);
  if ($cmp3) {
   $outcode1 = 4;
  }
 }
 $6 = $ml$addr;
 $b = ((($6)) + 8|0);
 $y6 = ((($b)) + 4|0);
 $7 = HEAP32[$y6>>2]|0;
 $8 = HEAP32[99325]|0;
 $cmp7 = ($7|0)>($8|0);
 if ($cmp7) {
  $outcode2 = 8;
 } else {
  $9 = $ml$addr;
  $b10 = ((($9)) + 8|0);
  $y11 = ((($b10)) + 4|0);
  $10 = HEAP32[$y11>>2]|0;
  $11 = HEAP32[99320]|0;
  $cmp12 = ($10|0)<($11|0);
  if ($cmp12) {
   $outcode2 = 4;
  }
 }
 $12 = $outcode1;
 $13 = $outcode2;
 $and = $12 & $13;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $retval = 0;
  $186 = $retval;
  STACKTOP = sp;return ($186|0);
 }
 $14 = $ml$addr;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[99318]|0;
 $cmp19 = ($15|0)<($16|0);
 if ($cmp19) {
  $17 = $outcode1;
  $or = $17 | 1;
  $outcode1 = $or;
 } else {
  $18 = $ml$addr;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[99324]|0;
  $cmp24 = ($19|0)>($20|0);
  if ($cmp24) {
   $21 = $outcode1;
   $or26 = $21 | 2;
   $outcode1 = $or26;
  }
 }
 $22 = $ml$addr;
 $b29 = ((($22)) + 8|0);
 $23 = HEAP32[$b29>>2]|0;
 $24 = HEAP32[99318]|0;
 $cmp31 = ($23|0)<($24|0);
 if ($cmp31) {
  $25 = $outcode2;
  $or33 = $25 | 1;
  $outcode2 = $or33;
 } else {
  $26 = $ml$addr;
  $b35 = ((($26)) + 8|0);
  $27 = HEAP32[$b35>>2]|0;
  $28 = HEAP32[99324]|0;
  $cmp37 = ($27|0)>($28|0);
  if ($cmp37) {
   $29 = $outcode2;
   $or39 = $29 | 2;
   $outcode2 = $or39;
  }
 }
 $30 = $outcode1;
 $31 = $outcode2;
 $and42 = $30 & $31;
 $tobool43 = ($and42|0)!=(0);
 if ($tobool43) {
  $retval = 0;
  $186 = $retval;
  STACKTOP = sp;return ($186|0);
 }
 $32 = $ml$addr;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[99318]|0;
 $sub = (($33) - ($34))|0;
 $35 = HEAP32[32154]|0;
 $call = (_FixedMul($sub,$35)|0);
 $shr = $call >> 16;
 $add = (0 + ($shr))|0;
 $36 = $fl$addr;
 HEAP32[$36>>2] = $add;
 $37 = HEAP32[99323]|0;
 $38 = $ml$addr;
 $y51 = ((($38)) + 4|0);
 $39 = HEAP32[$y51>>2]|0;
 $40 = HEAP32[99320]|0;
 $sub52 = (($39) - ($40))|0;
 $41 = HEAP32[32154]|0;
 $call53 = (_FixedMul($sub52,$41)|0);
 $shr54 = $call53 >> 16;
 $sub55 = (($37) - ($shr54))|0;
 $add56 = (0 + ($sub55))|0;
 $42 = $fl$addr;
 $y58 = ((($42)) + 4|0);
 HEAP32[$y58>>2] = $add56;
 $43 = $ml$addr;
 $b59 = ((($43)) + 8|0);
 $44 = HEAP32[$b59>>2]|0;
 $45 = HEAP32[99318]|0;
 $sub61 = (($44) - ($45))|0;
 $46 = HEAP32[32154]|0;
 $call62 = (_FixedMul($sub61,$46)|0);
 $shr63 = $call62 >> 16;
 $add64 = (0 + ($shr63))|0;
 $47 = $fl$addr;
 $b65 = ((($47)) + 8|0);
 HEAP32[$b65>>2] = $add64;
 $48 = HEAP32[99323]|0;
 $49 = $ml$addr;
 $b67 = ((($49)) + 8|0);
 $y68 = ((($b67)) + 4|0);
 $50 = HEAP32[$y68>>2]|0;
 $51 = HEAP32[99320]|0;
 $sub69 = (($50) - ($51))|0;
 $52 = HEAP32[32154]|0;
 $call70 = (_FixedMul($sub69,$52)|0);
 $shr71 = $call70 >> 16;
 $sub72 = (($48) - ($shr71))|0;
 $add73 = (0 + ($sub72))|0;
 $53 = $fl$addr;
 $b74 = ((($53)) + 8|0);
 $y75 = ((($b74)) + 4|0);
 HEAP32[$y75>>2] = $add73;
 $outcode1 = 0;
 $54 = $fl$addr;
 $y77 = ((($54)) + 4|0);
 $55 = HEAP32[$y77>>2]|0;
 $cmp78 = ($55|0)<(0);
 if ($cmp78) {
  $56 = $outcode1;
  $or80 = $56 | 8;
  $outcode1 = $or80;
 } else {
  $57 = $fl$addr;
  $y83 = ((($57)) + 4|0);
  $58 = HEAP32[$y83>>2]|0;
  $59 = HEAP32[99323]|0;
  $cmp84 = ($58|0)>=($59|0);
  if ($cmp84) {
   $60 = $outcode1;
   $or86 = $60 | 4;
   $outcode1 = $or86;
  }
 }
 $61 = $fl$addr;
 $62 = HEAP32[$61>>2]|0;
 $cmp91 = ($62|0)<(0);
 if ($cmp91) {
  $63 = $outcode1;
  $or93 = $63 | 1;
  $outcode1 = $or93;
 } else {
  $64 = $fl$addr;
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[99321]|0;
  $cmp97 = ($65|0)>=($66|0);
  if ($cmp97) {
   $67 = $outcode1;
   $or99 = $67 | 2;
   $outcode1 = $or99;
  }
 }
 $outcode2 = 0;
 $68 = $fl$addr;
 $b102 = ((($68)) + 8|0);
 $y103 = ((($b102)) + 4|0);
 $69 = HEAP32[$y103>>2]|0;
 $cmp104 = ($69|0)<(0);
 if ($cmp104) {
  $70 = $outcode2;
  $or106 = $70 | 8;
  $outcode2 = $or106;
 } else {
  $71 = $fl$addr;
  $b108 = ((($71)) + 8|0);
  $y109 = ((($b108)) + 4|0);
  $72 = HEAP32[$y109>>2]|0;
  $73 = HEAP32[99323]|0;
  $cmp110 = ($72|0)>=($73|0);
  if ($cmp110) {
   $74 = $outcode2;
   $or112 = $74 | 4;
   $outcode2 = $or112;
  }
 }
 $75 = $fl$addr;
 $b115 = ((($75)) + 8|0);
 $76 = HEAP32[$b115>>2]|0;
 $cmp117 = ($76|0)<(0);
 if ($cmp117) {
  $77 = $outcode2;
  $or119 = $77 | 1;
  $outcode2 = $or119;
 } else {
  $78 = $fl$addr;
  $b121 = ((($78)) + 8|0);
  $79 = HEAP32[$b121>>2]|0;
  $80 = HEAP32[99321]|0;
  $cmp123 = ($79|0)>=($80|0);
  if ($cmp123) {
   $81 = $outcode2;
   $or125 = $81 | 2;
   $outcode2 = $or125;
  }
 }
 $82 = $outcode1;
 $83 = $outcode2;
 $and128 = $82 & $83;
 $tobool129 = ($and128|0)!=(0);
 if ($tobool129) {
  $retval = 0;
  $186 = $retval;
  STACKTOP = sp;return ($186|0);
 }
 while(1) {
  $84 = $outcode1;
  $85 = $outcode2;
  $or132 = $84 | $85;
  $tobool133 = ($or132|0)!=(0);
  if (!($tobool133)) {
   label = 73;
   break;
  }
  $86 = $outcode1;
  $tobool134 = ($86|0)!=(0);
  if ($tobool134) {
   $87 = $outcode1;
   $outside = $87;
  } else {
   $88 = $outcode2;
   $outside = $88;
  }
  $89 = $outside;
  $and138 = $89 & 8;
  $tobool139 = ($and138|0)!=(0);
  do {
   if ($tobool139) {
    $90 = $fl$addr;
    $y142 = ((($90)) + 4|0);
    $91 = HEAP32[$y142>>2]|0;
    $92 = $fl$addr;
    $b143 = ((($92)) + 8|0);
    $y144 = ((($b143)) + 4|0);
    $93 = HEAP32[$y144>>2]|0;
    $sub145 = (($91) - ($93))|0;
    $dy = $sub145;
    $94 = $fl$addr;
    $b146 = ((($94)) + 8|0);
    $95 = HEAP32[$b146>>2]|0;
    $96 = $fl$addr;
    $97 = HEAP32[$96>>2]|0;
    $sub150 = (($95) - ($97))|0;
    $dx = $sub150;
    $98 = $fl$addr;
    $99 = HEAP32[$98>>2]|0;
    $100 = $dx;
    $101 = $fl$addr;
    $y154 = ((($101)) + 4|0);
    $102 = HEAP32[$y154>>2]|0;
    $mul = Math_imul($100, $102)|0;
    $103 = $dy;
    $div = (($mul|0) / ($103|0))&-1;
    $add155 = (($99) + ($div))|0;
    HEAP32[$tmp>>2] = $add155;
    $y157 = ((($tmp)) + 4|0);
    HEAP32[$y157>>2] = 0;
   } else {
    $104 = $outside;
    $and159 = $104 & 4;
    $tobool160 = ($and159|0)!=(0);
    if ($tobool160) {
     $105 = $fl$addr;
     $y163 = ((($105)) + 4|0);
     $106 = HEAP32[$y163>>2]|0;
     $107 = $fl$addr;
     $b164 = ((($107)) + 8|0);
     $y165 = ((($b164)) + 4|0);
     $108 = HEAP32[$y165>>2]|0;
     $sub166 = (($106) - ($108))|0;
     $dy = $sub166;
     $109 = $fl$addr;
     $b167 = ((($109)) + 8|0);
     $110 = HEAP32[$b167>>2]|0;
     $111 = $fl$addr;
     $112 = HEAP32[$111>>2]|0;
     $sub171 = (($110) - ($112))|0;
     $dx = $sub171;
     $113 = $fl$addr;
     $114 = HEAP32[$113>>2]|0;
     $115 = $dx;
     $116 = $fl$addr;
     $y175 = ((($116)) + 4|0);
     $117 = HEAP32[$y175>>2]|0;
     $118 = HEAP32[99323]|0;
     $sub176 = (($117) - ($118))|0;
     $mul177 = Math_imul($115, $sub176)|0;
     $119 = $dy;
     $div178 = (($mul177|0) / ($119|0))&-1;
     $add179 = (($114) + ($div178))|0;
     HEAP32[$tmp>>2] = $add179;
     $120 = HEAP32[99323]|0;
     $sub181 = (($120) - 1)|0;
     $y182 = ((($tmp)) + 4|0);
     HEAP32[$y182>>2] = $sub181;
     break;
    }
    $121 = $outside;
    $and184 = $121 & 2;
    $tobool185 = ($and184|0)!=(0);
    if ($tobool185) {
     $122 = $fl$addr;
     $b187 = ((($122)) + 8|0);
     $y188 = ((($b187)) + 4|0);
     $123 = HEAP32[$y188>>2]|0;
     $124 = $fl$addr;
     $y190 = ((($124)) + 4|0);
     $125 = HEAP32[$y190>>2]|0;
     $sub191 = (($123) - ($125))|0;
     $dy = $sub191;
     $126 = $fl$addr;
     $b192 = ((($126)) + 8|0);
     $127 = HEAP32[$b192>>2]|0;
     $128 = $fl$addr;
     $129 = HEAP32[$128>>2]|0;
     $sub196 = (($127) - ($129))|0;
     $dx = $sub196;
     $130 = $fl$addr;
     $y198 = ((($130)) + 4|0);
     $131 = HEAP32[$y198>>2]|0;
     $132 = $dy;
     $133 = HEAP32[99321]|0;
     $sub199 = (($133) - 1)|0;
     $134 = $fl$addr;
     $135 = HEAP32[$134>>2]|0;
     $sub202 = (($sub199) - ($135))|0;
     $mul203 = Math_imul($132, $sub202)|0;
     $136 = $dx;
     $div204 = (($mul203|0) / ($136|0))&-1;
     $add205 = (($131) + ($div204))|0;
     $y206 = ((($tmp)) + 4|0);
     HEAP32[$y206>>2] = $add205;
     $137 = HEAP32[99321]|0;
     $sub207 = (($137) - 1)|0;
     HEAP32[$tmp>>2] = $sub207;
     break;
    }
    $138 = $outside;
    $and210 = $138 & 1;
    $tobool211 = ($and210|0)!=(0);
    if ($tobool211) {
     $139 = $fl$addr;
     $b213 = ((($139)) + 8|0);
     $y214 = ((($b213)) + 4|0);
     $140 = HEAP32[$y214>>2]|0;
     $141 = $fl$addr;
     $y216 = ((($141)) + 4|0);
     $142 = HEAP32[$y216>>2]|0;
     $sub217 = (($140) - ($142))|0;
     $dy = $sub217;
     $143 = $fl$addr;
     $b218 = ((($143)) + 8|0);
     $144 = HEAP32[$b218>>2]|0;
     $145 = $fl$addr;
     $146 = HEAP32[$145>>2]|0;
     $sub222 = (($144) - ($146))|0;
     $dx = $sub222;
     $147 = $fl$addr;
     $y224 = ((($147)) + 4|0);
     $148 = HEAP32[$y224>>2]|0;
     $149 = $dy;
     $150 = $fl$addr;
     $151 = HEAP32[$150>>2]|0;
     $sub227 = (0 - ($151))|0;
     $mul228 = Math_imul($149, $sub227)|0;
     $152 = $dx;
     $div229 = (($mul228|0) / ($152|0))&-1;
     $add230 = (($148) + ($div229))|0;
     $y231 = ((($tmp)) + 4|0);
     HEAP32[$y231>>2] = $add230;
     HEAP32[$tmp>>2] = 0;
     break;
    } else {
     HEAP32[$tmp>>2] = 0;
     $y235 = ((($tmp)) + 4|0);
     HEAP32[$y235>>2] = 0;
     break;
    }
   }
  } while(0);
  $153 = $outside;
  $154 = $outcode1;
  $cmp240 = ($153|0)==($154|0);
  $155 = $fl$addr;
  do {
   if ($cmp240) {
    ;HEAP32[$155>>2]=HEAP32[$tmp>>2]|0;HEAP32[$155+4>>2]=HEAP32[$tmp+4>>2]|0;
    $outcode1 = 0;
    $156 = $fl$addr;
    $y244 = ((($156)) + 4|0);
    $157 = HEAP32[$y244>>2]|0;
    $cmp245 = ($157|0)<(0);
    if ($cmp245) {
     $158 = $outcode1;
     $or247 = $158 | 8;
     $outcode1 = $or247;
    } else {
     $159 = $fl$addr;
     $y250 = ((($159)) + 4|0);
     $160 = HEAP32[$y250>>2]|0;
     $161 = HEAP32[99323]|0;
     $cmp251 = ($160|0)>=($161|0);
     if ($cmp251) {
      $162 = $outcode1;
      $or253 = $162 | 4;
      $outcode1 = $or253;
     }
    }
    $163 = $fl$addr;
    $164 = HEAP32[$163>>2]|0;
    $cmp258 = ($164|0)<(0);
    if ($cmp258) {
     $165 = $outcode1;
     $or260 = $165 | 1;
     $outcode1 = $or260;
     break;
    }
    $166 = $fl$addr;
    $167 = HEAP32[$166>>2]|0;
    $168 = HEAP32[99321]|0;
    $cmp264 = ($167|0)>=($168|0);
    if ($cmp264) {
     $169 = $outcode1;
     $or266 = $169 | 2;
     $outcode1 = $or266;
    }
   } else {
    $b270 = ((($155)) + 8|0);
    ;HEAP32[$b270>>2]=HEAP32[$tmp>>2]|0;HEAP32[$b270+4>>2]=HEAP32[$tmp+4>>2]|0;
    $outcode2 = 0;
    $170 = $fl$addr;
    $b271 = ((($170)) + 8|0);
    $y272 = ((($b271)) + 4|0);
    $171 = HEAP32[$y272>>2]|0;
    $cmp273 = ($171|0)<(0);
    if ($cmp273) {
     $172 = $outcode2;
     $or275 = $172 | 8;
     $outcode2 = $or275;
    } else {
     $173 = $fl$addr;
     $b277 = ((($173)) + 8|0);
     $y278 = ((($b277)) + 4|0);
     $174 = HEAP32[$y278>>2]|0;
     $175 = HEAP32[99323]|0;
     $cmp279 = ($174|0)>=($175|0);
     if ($cmp279) {
      $176 = $outcode2;
      $or281 = $176 | 4;
      $outcode2 = $or281;
     }
    }
    $177 = $fl$addr;
    $b284 = ((($177)) + 8|0);
    $178 = HEAP32[$b284>>2]|0;
    $cmp286 = ($178|0)<(0);
    if ($cmp286) {
     $179 = $outcode2;
     $or288 = $179 | 1;
     $outcode2 = $or288;
     break;
    }
    $180 = $fl$addr;
    $b290 = ((($180)) + 8|0);
    $181 = HEAP32[$b290>>2]|0;
    $182 = HEAP32[99321]|0;
    $cmp292 = ($181|0)>=($182|0);
    if ($cmp292) {
     $183 = $outcode2;
     $or294 = $183 | 2;
     $outcode2 = $or294;
    }
   }
  } while(0);
  $184 = $outcode1;
  $185 = $outcode2;
  $and298 = $184 & $185;
  $tobool299 = ($and298|0)!=(0);
  if ($tobool299) {
   label = 71;
   break;
  }
 }
 if ((label|0) == 71) {
  $retval = 0;
  $186 = $retval;
  STACKTOP = sp;return ($186|0);
 }
 else if ((label|0) == 73) {
  $retval = 1;
  $186 = $retval;
  STACKTOP = sp;return ($186|0);
 }
 return (0)|0;
}
function _AM_drawFline($fl,$color) {
 $fl = $fl|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add67 = 0, $add70 = 0, $add71 = 0, $add77 = 0, $add88 = 0, $add91 = 0, $add92 = 0, $arrayidx = 0, $arrayidx78 = 0, $ax = 0, $ay = 0, $b = 0, $b17 = 0, $b21 = 0, $b25 = 0, $b28 = 0, $b36 = 0, $b58 = 0, $b79 = 0;
 var $cmp = 0, $cmp12 = 0, $cmp15 = 0, $cmp19 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp34 = 0, $cmp4 = 0, $cmp41 = 0, $cmp48 = 0, $cmp54 = 0, $cmp60 = 0, $cmp64 = 0, $cmp8 = 0, $cmp81 = 0, $cmp85 = 0, $color$addr = 0, $cond = 0, $cond35 = 0;
 var $cond46 = 0, $cond49 = 0, $conv = 0, $conv75 = 0, $d = 0, $div = 0, $div72 = 0, $dx = 0, $dy = 0, $fl$addr = 0, $inc = 0, $mul = 0, $mul47 = 0, $mul57 = 0, $mul76 = 0, $sub = 0, $sub33 = 0, $sub40 = 0, $sub43 = 0, $sub56 = 0;
 var $sub68 = 0, $sub73 = 0, $sub89 = 0, $sx = 0, $sy = 0, $vararg_buffer = 0, $x = 0, $y = 0, $y11 = 0, $y22 = 0, $y26 = 0, $y37 = 0, $y39 = 0, $y53 = 0, $y7 = 0, $y80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $fl$addr = $fl;
 $color$addr = $color;
 $0 = $fl$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)<(0);
 if (!($cmp)) {
  $2 = $fl$addr;
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[99321]|0;
  $cmp4 = ($3|0)>=($4|0);
  if (!($cmp4)) {
   $5 = $fl$addr;
   $y7 = ((($5)) + 4|0);
   $6 = HEAP32[$y7>>2]|0;
   $cmp8 = ($6|0)<(0);
   if (!($cmp8)) {
    $7 = $fl$addr;
    $y11 = ((($7)) + 4|0);
    $8 = HEAP32[$y11>>2]|0;
    $9 = HEAP32[99323]|0;
    $cmp12 = ($8|0)>=($9|0);
    if (!($cmp12)) {
     $10 = $fl$addr;
     $b = ((($10)) + 8|0);
     $11 = HEAP32[$b>>2]|0;
     $cmp15 = ($11|0)<(0);
     if (!($cmp15)) {
      $12 = $fl$addr;
      $b17 = ((($12)) + 8|0);
      $13 = HEAP32[$b17>>2]|0;
      $14 = HEAP32[99321]|0;
      $cmp19 = ($13|0)>=($14|0);
      if (!($cmp19)) {
       $15 = $fl$addr;
       $b21 = ((($15)) + 8|0);
       $y22 = ((($b21)) + 4|0);
       $16 = HEAP32[$y22>>2]|0;
       $cmp23 = ($16|0)<(0);
       if (!($cmp23)) {
        $17 = $fl$addr;
        $b25 = ((($17)) + 8|0);
        $y26 = ((($b25)) + 4|0);
        $18 = HEAP32[$y26>>2]|0;
        $19 = HEAP32[99323]|0;
        $cmp27 = ($18|0)>=($19|0);
        if (!($cmp27)) {
         $22 = $fl$addr;
         $b28 = ((($22)) + 8|0);
         $23 = HEAP32[$b28>>2]|0;
         $24 = $fl$addr;
         $25 = HEAP32[$24>>2]|0;
         $sub = (($23) - ($25))|0;
         $dx = $sub;
         $26 = $dx;
         $cmp32 = ($26|0)<(0);
         $27 = $dx;
         $sub33 = (0 - ($27))|0;
         $cond = $cmp32 ? $sub33 : $27;
         $mul = $cond<<1;
         $ax = $mul;
         $28 = $dx;
         $cmp34 = ($28|0)<(0);
         $cond35 = $cmp34 ? -1 : 1;
         $sx = $cond35;
         $29 = $fl$addr;
         $b36 = ((($29)) + 8|0);
         $y37 = ((($b36)) + 4|0);
         $30 = HEAP32[$y37>>2]|0;
         $31 = $fl$addr;
         $y39 = ((($31)) + 4|0);
         $32 = HEAP32[$y39>>2]|0;
         $sub40 = (($30) - ($32))|0;
         $dy = $sub40;
         $33 = $dy;
         $cmp41 = ($33|0)<(0);
         $34 = $dy;
         $sub43 = (0 - ($34))|0;
         $cond46 = $cmp41 ? $sub43 : $34;
         $mul47 = $cond46<<1;
         $ay = $mul47;
         $35 = $dy;
         $cmp48 = ($35|0)<(0);
         $cond49 = $cmp48 ? -1 : 1;
         $sy = $cond49;
         $36 = $fl$addr;
         $37 = HEAP32[$36>>2]|0;
         $x = $37;
         $38 = $fl$addr;
         $y53 = ((($38)) + 4|0);
         $39 = HEAP32[$y53>>2]|0;
         $y = $39;
         $40 = $ax;
         $41 = $ay;
         $cmp54 = ($40|0)>($41|0);
         if ($cmp54) {
          $42 = $ay;
          $43 = $ax;
          $div = (($43|0) / 2)&-1;
          $sub56 = (($42) - ($div))|0;
          $d = $sub56;
          while(1) {
           $44 = $color$addr;
           $conv = $44&255;
           $45 = HEAP32[99340]|0;
           $46 = $y;
           $47 = HEAP32[99321]|0;
           $mul57 = Math_imul($46, $47)|0;
           $48 = $x;
           $add = (($mul57) + ($48))|0;
           $arrayidx = (($45) + ($add)|0);
           HEAP8[$arrayidx>>0] = $conv;
           $49 = $x;
           $50 = $fl$addr;
           $b58 = ((($50)) + 8|0);
           $51 = HEAP32[$b58>>2]|0;
           $cmp60 = ($49|0)==($51|0);
           if ($cmp60) {
            break;
           }
           $52 = $d;
           $cmp64 = ($52|0)>=(0);
           if ($cmp64) {
            $53 = $sy;
            $54 = $y;
            $add67 = (($54) + ($53))|0;
            $y = $add67;
            $55 = $ax;
            $56 = $d;
            $sub68 = (($56) - ($55))|0;
            $d = $sub68;
           }
           $57 = $sx;
           $58 = $x;
           $add70 = (($58) + ($57))|0;
           $x = $add70;
           $59 = $ay;
           $60 = $d;
           $add71 = (($60) + ($59))|0;
           $d = $add71;
          }
          STACKTOP = sp;return;
         } else {
          $61 = $ax;
          $62 = $ay;
          $div72 = (($62|0) / 2)&-1;
          $sub73 = (($61) - ($div72))|0;
          $d = $sub73;
          while(1) {
           $63 = $color$addr;
           $conv75 = $63&255;
           $64 = HEAP32[99340]|0;
           $65 = $y;
           $66 = HEAP32[99321]|0;
           $mul76 = Math_imul($65, $66)|0;
           $67 = $x;
           $add77 = (($mul76) + ($67))|0;
           $arrayidx78 = (($64) + ($add77)|0);
           HEAP8[$arrayidx78>>0] = $conv75;
           $68 = $y;
           $69 = $fl$addr;
           $b79 = ((($69)) + 8|0);
           $y80 = ((($b79)) + 4|0);
           $70 = HEAP32[$y80>>2]|0;
           $cmp81 = ($68|0)==($70|0);
           if ($cmp81) {
            break;
           }
           $71 = $d;
           $cmp85 = ($71|0)>=(0);
           if ($cmp85) {
            $72 = $sx;
            $73 = $x;
            $add88 = (($73) + ($72))|0;
            $x = $add88;
            $74 = $ay;
            $75 = $d;
            $sub89 = (($75) - ($74))|0;
            $d = $sub89;
           }
           $76 = $sy;
           $77 = $y;
           $add91 = (($77) + ($76))|0;
           $y = $add91;
           $78 = $ax;
           $79 = $d;
           $add92 = (($79) + ($78))|0;
           $d = $add92;
          }
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $20 = HEAP32[32479]|0;
 $21 = HEAP32[99347]|0;
 $inc = (($21) + 1)|0;
 HEAP32[99347] = $inc;
 HEAP32[$vararg_buffer>>2] = $21;
 (_fprintf($20,130253,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _AM_drawMline($ml,$color) {
 $ml = $ml|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $call = 0, $color$addr = 0, $ml$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ml$addr = $ml;
 $color$addr = $color;
 $0 = $ml$addr;
 $call = (_AM_clipMline($0,397392)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $1 = $color$addr;
 _AM_drawFline(397392,$1);
 STACKTOP = sp;return;
}
function _AM_drawGrid($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $add20 = 0, $add22 = 0;
 var $add25 = 0, $add36 = 0, $add4 = 0, $add6 = 0, $b = 0, $b10 = 0, $b26 = 0, $b33 = 0, $cmp = 0, $cmp29 = 0, $color$addr = 0, $end = 0, $ml = 0, $rem = 0, $rem14 = 0, $rem18 = 0, $rem2 = 0, $start = 0, $sub = 0, $sub1 = 0;
 var $sub13 = 0, $sub17 = 0, $sub19 = 0, $sub3 = 0, $tobool = 0, $tobool15 = 0, $x = 0, $y = 0, $y32 = 0, $y34 = 0, $y5 = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ml = sp;
 $color$addr = $color;
 $0 = HEAP32[99318]|0;
 $start = $0;
 $1 = $start;
 $2 = HEAP32[99856]|0;
 $sub = (($1) - ($2))|0;
 $rem = (($sub|0) % 8388608)&-1;
 $tobool = ($rem|0)!=(0);
 if ($tobool) {
  $3 = $start;
  $4 = HEAP32[99856]|0;
  $sub1 = (($3) - ($4))|0;
  $rem2 = (($sub1|0) % 8388608)&-1;
  $sub3 = (8388608 - ($rem2))|0;
  $5 = $start;
  $add = (($5) + ($sub3))|0;
  $start = $add;
 }
 $6 = HEAP32[99318]|0;
 $7 = HEAP32[99317]|0;
 $add4 = (($6) + ($7))|0;
 $end = $add4;
 $8 = HEAP32[99320]|0;
 $y5 = ((($ml)) + 4|0);
 HEAP32[$y5>>2] = $8;
 $9 = HEAP32[99320]|0;
 $10 = HEAP32[99319]|0;
 $add6 = (($9) + ($10))|0;
 $b = ((($ml)) + 8|0);
 $y7 = ((($b)) + 4|0);
 HEAP32[$y7>>2] = $add6;
 $11 = $start;
 $x = $11;
 while(1) {
  $12 = $x;
  $13 = $end;
  $cmp = ($12|0)<($13|0);
  if (!($cmp)) {
   break;
  }
  $14 = $x;
  HEAP32[$ml>>2] = $14;
  $15 = $x;
  $b10 = ((($ml)) + 8|0);
  HEAP32[$b10>>2] = $15;
  $16 = $color$addr;
  _AM_drawMline($ml,$16);
  $17 = $x;
  $add12 = (($17) + 8388608)|0;
  $x = $add12;
 }
 $18 = HEAP32[99320]|0;
 $start = $18;
 $19 = $start;
 $20 = HEAP32[99857]|0;
 $sub13 = (($19) - ($20))|0;
 $rem14 = (($sub13|0) % 8388608)&-1;
 $tobool15 = ($rem14|0)!=(0);
 if ($tobool15) {
  $21 = $start;
  $22 = HEAP32[99857]|0;
  $sub17 = (($21) - ($22))|0;
  $rem18 = (($sub17|0) % 8388608)&-1;
  $sub19 = (8388608 - ($rem18))|0;
  $23 = $start;
  $add20 = (($23) + ($sub19))|0;
  $start = $add20;
 }
 $24 = HEAP32[99320]|0;
 $25 = HEAP32[99319]|0;
 $add22 = (($24) + ($25))|0;
 $end = $add22;
 $26 = HEAP32[99318]|0;
 HEAP32[$ml>>2] = $26;
 $27 = HEAP32[99318]|0;
 $28 = HEAP32[99317]|0;
 $add25 = (($27) + ($28))|0;
 $b26 = ((($ml)) + 8|0);
 HEAP32[$b26>>2] = $add25;
 $29 = $start;
 $y = $29;
 while(1) {
  $30 = $y;
  $31 = $end;
  $cmp29 = ($30|0)<($31|0);
  if (!($cmp29)) {
   break;
  }
  $32 = $y;
  $y32 = ((($ml)) + 4|0);
  HEAP32[$y32>>2] = $32;
  $33 = $y;
  $b33 = ((($ml)) + 8|0);
  $y34 = ((($b33)) + 4|0);
  HEAP32[$y34>>2] = $33;
  $34 = $color$addr;
  _AM_drawMline($ml,$34);
  $35 = $y;
  $add36 = (($35) + 8388608)|0;
  $y = $add36;
 }
 STACKTOP = sp;return;
}
function _AM_drawWalls() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add34 = 0;
 var $add46 = 0, $add56 = 0, $add60 = 0, $and = 0, $and13 = 0, $and29 = 0, $and74 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx26 = 0, $arrayidx3 = 0, $arrayidx39 = 0, $arrayidx41 = 0, $arrayidx48 = 0, $arrayidx5 = 0, $arrayidx50 = 0, $arrayidx68 = 0;
 var $arrayidx71 = 0, $arrayidx8 = 0, $backsector = 0, $backsector40 = 0, $backsector49 = 0, $ceilingheight = 0, $ceilingheight52 = 0, $cmp = 0, $cmp22 = 0, $cmp43 = 0, $cmp53 = 0, $conv = 0, $conv12 = 0, $conv21 = 0, $conv28 = 0, $conv73 = 0, $flags = 0, $flags11 = 0, $flags27 = 0, $flags72 = 0;
 var $frontsector = 0, $frontsector51 = 0, $i = 0, $inc = 0, $or$cond = 0, $powers = 0, $special = 0, $tobool = 0, $tobool14 = 0, $tobool15 = 0, $tobool18 = 0, $tobool30 = 0, $tobool58 = 0, $tobool69 = 0, $tobool75 = 0, $tobool9 = 0, $v2 = 0, $v26 = 0, $y = 0, $y7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[99853]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99844]|0;
  $3 = $i;
  $arrayidx = (($2) + ($3<<6)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[99352] = $5;
  $6 = HEAP32[99844]|0;
  $7 = $i;
  $arrayidx1 = (($6) + ($7<<6)|0);
  $8 = HEAP32[$arrayidx1>>2]|0;
  $y = ((($8)) + 4|0);
  $9 = HEAP32[$y>>2]|0;
  HEAP32[(397412)>>2] = $9;
  $10 = HEAP32[99844]|0;
  $11 = $i;
  $arrayidx3 = (($10) + ($11<<6)|0);
  $v2 = ((($arrayidx3)) + 4|0);
  $12 = HEAP32[$v2>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  HEAP32[(397416)>>2] = $13;
  $14 = HEAP32[99844]|0;
  $15 = $i;
  $arrayidx5 = (($14) + ($15<<6)|0);
  $v26 = ((($arrayidx5)) + 4|0);
  $16 = HEAP32[$v26>>2]|0;
  $y7 = ((($16)) + 4|0);
  $17 = HEAP32[$y7>>2]|0;
  HEAP32[(397420)>>2] = $17;
  $18 = HEAP32[99346]|0;
  $tobool = ($18|0)!=(0);
  if ($tobool) {
   label = 5;
  } else {
   $19 = HEAP32[99844]|0;
   $20 = $i;
   $arrayidx8 = (($19) + ($20<<6)|0);
   $flags = ((($arrayidx8)) + 16|0);
   $21 = HEAP16[$flags>>1]|0;
   $conv = $21 << 16 >> 16;
   $and = $conv & 256;
   $tobool9 = ($and|0)!=(0);
   if ($tobool9) {
    label = 5;
   } else {
    $52 = HEAP32[99330]|0;
    $powers = ((($52)) + 52|0);
    $arrayidx68 = ((($powers)) + 16|0);
    $53 = HEAP32[$arrayidx68>>2]|0;
    $tobool69 = ($53|0)!=(0);
    if ($tobool69) {
     $54 = HEAP32[99844]|0;
     $55 = $i;
     $arrayidx71 = (($54) + ($55<<6)|0);
     $flags72 = ((($arrayidx71)) + 16|0);
     $56 = HEAP16[$flags72>>1]|0;
     $conv73 = $56 << 16 >> 16;
     $and74 = $conv73 & 128;
     $tobool75 = ($and74|0)!=(0);
     if (!($tobool75)) {
      _AM_drawMline(397408,99);
     }
    }
   }
  }
  do {
   if ((label|0) == 5) {
    label = 0;
    $22 = HEAP32[99844]|0;
    $23 = $i;
    $arrayidx10 = (($22) + ($23<<6)|0);
    $flags11 = ((($arrayidx10)) + 16|0);
    $24 = HEAP16[$flags11>>1]|0;
    $conv12 = $24 << 16 >> 16;
    $and13 = $conv12 & 128;
    $tobool14 = ($and13|0)==(0);
    $25 = HEAP32[99346]|0;
    $tobool15 = ($25|0)!=(0);
    $or$cond = $tobool14 | $tobool15;
    if ($or$cond) {
     $26 = HEAP32[99844]|0;
     $27 = $i;
     $arrayidx17 = (($26) + ($27<<6)|0);
     $backsector = ((($arrayidx17)) + 52|0);
     $28 = HEAP32[$backsector>>2]|0;
     $tobool18 = ($28|0)!=(0|0);
     if (!($tobool18)) {
      $add = (176 + 0)|0;
      _AM_drawMline(397408,$add);
      break;
     }
     $29 = HEAP32[99844]|0;
     $30 = $i;
     $arrayidx20 = (($29) + ($30<<6)|0);
     $special = ((($arrayidx20)) + 18|0);
     $31 = HEAP16[$special>>1]|0;
     $conv21 = $31 << 16 >> 16;
     $cmp22 = ($conv21|0)==(39);
     if ($cmp22) {
      _AM_drawMline(397408,184);
      break;
     }
     $32 = HEAP32[99844]|0;
     $33 = $i;
     $arrayidx26 = (($32) + ($33<<6)|0);
     $flags27 = ((($arrayidx26)) + 16|0);
     $34 = HEAP16[$flags27>>1]|0;
     $conv28 = $34 << 16 >> 16;
     $and29 = $conv28 & 32;
     $tobool30 = ($and29|0)!=(0);
     if ($tobool30) {
      $add34 = (176 + 0)|0;
      _AM_drawMline(397408,$add34);
      break;
     }
     $35 = HEAP32[99844]|0;
     $36 = $i;
     $arrayidx39 = (($35) + ($36<<6)|0);
     $backsector40 = ((($arrayidx39)) + 52|0);
     $37 = HEAP32[$backsector40>>2]|0;
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP32[99844]|0;
     $40 = $i;
     $arrayidx41 = (($39) + ($40<<6)|0);
     $frontsector = ((($arrayidx41)) + 48|0);
     $41 = HEAP32[$frontsector>>2]|0;
     $42 = HEAP32[$41>>2]|0;
     $cmp43 = ($38|0)!=($42|0);
     if ($cmp43) {
      $add46 = (64 + 0)|0;
      _AM_drawMline(397408,$add46);
      break;
     }
     $43 = HEAP32[99844]|0;
     $44 = $i;
     $arrayidx48 = (($43) + ($44<<6)|0);
     $backsector49 = ((($arrayidx48)) + 52|0);
     $45 = HEAP32[$backsector49>>2]|0;
     $ceilingheight = ((($45)) + 4|0);
     $46 = HEAP32[$ceilingheight>>2]|0;
     $47 = HEAP32[99844]|0;
     $48 = $i;
     $arrayidx50 = (($47) + ($48<<6)|0);
     $frontsector51 = ((($arrayidx50)) + 48|0);
     $49 = HEAP32[$frontsector51>>2]|0;
     $ceilingheight52 = ((($49)) + 4|0);
     $50 = HEAP32[$ceilingheight52>>2]|0;
     $cmp53 = ($46|0)!=($50|0);
     if ($cmp53) {
      $add56 = (231 + 0)|0;
      _AM_drawMline(397408,$add56);
      break;
     }
     $51 = HEAP32[99346]|0;
     $tobool58 = ($51|0)!=(0);
     if ($tobool58) {
      $add60 = (96 + 0)|0;
      _AM_drawMline(397408,$add60);
     }
    }
   }
  } while(0);
  $57 = $i;
  $inc = (($57) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _AM_rotate($x,$y,$a) {
 $x = $x|0;
 $y = $y|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0;
 var $add = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx5 = 0, $arrayidx8 = 0, $call = 0, $call3 = 0, $call6 = 0, $call9 = 0, $shr = 0, $shr1 = 0, $shr4 = 0, $shr7 = 0, $sub = 0, $tmpx = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $a$addr = $a;
 $0 = $x$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $a$addr;
 $shr = $2 >>> 19;
 $arrayidx = ((82992) + ($shr<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $call = (_FixedMul($1,$3)|0);
 $4 = $y$addr;
 $5 = HEAP32[$4>>2]|0;
 $6 = $a$addr;
 $shr1 = $6 >>> 19;
 $arrayidx2 = (74800 + ($shr1<<2)|0);
 $7 = HEAP32[$arrayidx2>>2]|0;
 $call3 = (_FixedMul($5,$7)|0);
 $sub = (($call) - ($call3))|0;
 $tmpx = $sub;
 $8 = $x$addr;
 $9 = HEAP32[$8>>2]|0;
 $10 = $a$addr;
 $shr4 = $10 >>> 19;
 $arrayidx5 = (74800 + ($shr4<<2)|0);
 $11 = HEAP32[$arrayidx5>>2]|0;
 $call6 = (_FixedMul($9,$11)|0);
 $12 = $y$addr;
 $13 = HEAP32[$12>>2]|0;
 $14 = $a$addr;
 $shr7 = $14 >>> 19;
 $arrayidx8 = ((82992) + ($shr7<<2)|0);
 $15 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_FixedMul($13,$15)|0);
 $add = (($call6) + ($call9))|0;
 $16 = $y$addr;
 HEAP32[$16>>2] = $add;
 $17 = $tmpx;
 $18 = $x$addr;
 HEAP32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function _AM_drawLineCharacter($lineguy,$lineguylines,$scale,$angle,$color,$x,$y) {
 $lineguy = $lineguy|0;
 $lineguylines = $lineguylines|0;
 $scale = $scale|0;
 $angle = $angle|0;
 $color = $color|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add29 = 0;
 var $add61 = 0, $add64 = 0, $angle$addr = 0, $arrayidx = 0, $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx4 = 0, $b = 0, $b32 = 0, $b35 = 0, $b37 = 0, $b41 = 0, $b44 = 0, $b46 = 0, $b49 = 0, $b54 = 0, $b56 = 0, $b59 = 0, $b62 = 0, $call = 0;
 var $call15 = 0, $call43 = 0, $call48 = 0, $cmp = 0, $color$addr = 0, $i = 0, $inc = 0, $l = 0, $lineguy$addr = 0, $lineguylines$addr = 0, $scale$addr = 0, $tobool = 0, $tobool18 = 0, $tobool39 = 0, $tobool52 = 0, $x$addr = 0, $y$addr = 0, $y14 = 0, $y17 = 0, $y23 = 0;
 var $y28 = 0, $y36 = 0, $y38 = 0, $y47 = 0, $y50 = 0, $y57 = 0, $y6 = 0, $y63 = 0, $y8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $l = sp;
 $lineguy$addr = $lineguy;
 $lineguylines$addr = $lineguylines;
 $scale$addr = $scale;
 $angle$addr = $angle;
 $color$addr = $color;
 $x$addr = $x;
 $y$addr = $y;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $lineguylines$addr;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = $lineguy$addr;
  $3 = $i;
  $arrayidx = (($2) + ($3<<4)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  HEAP32[$l>>2] = $4;
  $5 = $lineguy$addr;
  $6 = $i;
  $arrayidx4 = (($5) + ($6<<4)|0);
  $y6 = ((($arrayidx4)) + 4|0);
  $7 = HEAP32[$y6>>2]|0;
  $y8 = ((($l)) + 4|0);
  HEAP32[$y8>>2] = $7;
  $8 = $scale$addr;
  $tobool = ($8|0)!=(0);
  if ($tobool) {
   $9 = $scale$addr;
   $10 = HEAP32[$l>>2]|0;
   $call = (_FixedMul($9,$10)|0);
   HEAP32[$l>>2] = $call;
   $11 = $scale$addr;
   $y14 = ((($l)) + 4|0);
   $12 = HEAP32[$y14>>2]|0;
   $call15 = (_FixedMul($11,$12)|0);
   $y17 = ((($l)) + 4|0);
   HEAP32[$y17>>2] = $call15;
  }
  $13 = $angle$addr;
  $tobool18 = ($13|0)!=(0);
  if ($tobool18) {
   $y23 = ((($l)) + 4|0);
   $14 = $angle$addr;
   _AM_rotate($l,$y23,$14);
  }
  $15 = $x$addr;
  $16 = HEAP32[$l>>2]|0;
  $add = (($16) + ($15))|0;
  HEAP32[$l>>2] = $add;
  $17 = $y$addr;
  $y28 = ((($l)) + 4|0);
  $18 = HEAP32[$y28>>2]|0;
  $add29 = (($18) + ($17))|0;
  HEAP32[$y28>>2] = $add29;
  $19 = $lineguy$addr;
  $20 = $i;
  $arrayidx30 = (($19) + ($20<<4)|0);
  $b = ((($arrayidx30)) + 8|0);
  $21 = HEAP32[$b>>2]|0;
  $b32 = ((($l)) + 8|0);
  HEAP32[$b32>>2] = $21;
  $22 = $lineguy$addr;
  $23 = $i;
  $arrayidx34 = (($22) + ($23<<4)|0);
  $b35 = ((($arrayidx34)) + 8|0);
  $y36 = ((($b35)) + 4|0);
  $24 = HEAP32[$y36>>2]|0;
  $b37 = ((($l)) + 8|0);
  $y38 = ((($b37)) + 4|0);
  HEAP32[$y38>>2] = $24;
  $25 = $scale$addr;
  $tobool39 = ($25|0)!=(0);
  if ($tobool39) {
   $26 = $scale$addr;
   $b41 = ((($l)) + 8|0);
   $27 = HEAP32[$b41>>2]|0;
   $call43 = (_FixedMul($26,$27)|0);
   $b44 = ((($l)) + 8|0);
   HEAP32[$b44>>2] = $call43;
   $28 = $scale$addr;
   $b46 = ((($l)) + 8|0);
   $y47 = ((($b46)) + 4|0);
   $29 = HEAP32[$y47>>2]|0;
   $call48 = (_FixedMul($28,$29)|0);
   $b49 = ((($l)) + 8|0);
   $y50 = ((($b49)) + 4|0);
   HEAP32[$y50>>2] = $call48;
  }
  $30 = $angle$addr;
  $tobool52 = ($30|0)!=(0);
  if ($tobool52) {
   $b54 = ((($l)) + 8|0);
   $b56 = ((($l)) + 8|0);
   $y57 = ((($b56)) + 4|0);
   $31 = $angle$addr;
   _AM_rotate($b54,$y57,$31);
  }
  $32 = $x$addr;
  $b59 = ((($l)) + 8|0);
  $33 = HEAP32[$b59>>2]|0;
  $add61 = (($33) + ($32))|0;
  HEAP32[$b59>>2] = $add61;
  $34 = $y$addr;
  $b62 = ((($l)) + 8|0);
  $y63 = ((($b62)) + 4|0);
  $35 = HEAP32[$y63>>2]|0;
  $add64 = (($35) + ($34))|0;
  HEAP32[$y63>>2] = $add64;
  $36 = $color$addr;
  _AM_drawMline($l,$36);
  $37 = $i;
  $inc = (($37) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _AM_drawPlayers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $angle29 = 0, $arrayidx = 0, $arrayidx18 = 0, $arrayidx22 = 0;
 var $arrayidx26 = 0, $cmp = 0, $cmp15 = 0, $color = 0, $i = 0, $inc = 0, $inc34 = 0, $or$cond = 0, $p = 0, $powers = 0, $their_color = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool13 = 0, $tobool19 = 0, $tobool23 = 0, $x = 0, $x31 = 0, $y = 0;
 var $y33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $their_color = -1;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  $1 = HEAP32[99346]|0;
  $tobool1 = ($1|0)!=(0);
  $2 = HEAP32[99330]|0;
  $3 = HEAP32[$2>>2]|0;
  $angle = ((($3)) + 32|0);
  $4 = HEAP32[$angle>>2]|0;
  $5 = HEAP32[99330]|0;
  $6 = HEAP32[$5>>2]|0;
  $x = ((($6)) + 12|0);
  $7 = HEAP32[$x>>2]|0;
  $8 = HEAP32[99330]|0;
  $9 = HEAP32[$8>>2]|0;
  $y = ((($9)) + 16|0);
  $10 = HEAP32[$y>>2]|0;
  if ($tobool1) {
   _AM_drawLineCharacter(128,16,0,$4,209,$7,$10);
   STACKTOP = sp;return;
  } else {
   _AM_drawLineCharacter(16,7,0,$4,209,$7,$10);
   STACKTOP = sp;return;
  }
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $cmp = ($11|0)<(4);
  if (!($cmp)) {
   break;
  }
  $12 = $their_color;
  $inc = (($12) + 1)|0;
  $their_color = $inc;
  $13 = $i;
  $arrayidx = (183056 + (($13*288)|0)|0);
  $p = $arrayidx;
  $14 = HEAP32[99430]|0;
  $tobool12 = ($14|0)==(0);
  $15 = HEAP32[99429]|0;
  $tobool13 = ($15|0)!=(0);
  $or$cond = $tobool12 | $tobool13;
  if ($or$cond) {
   label = 9;
  } else {
   $16 = $p;
   $17 = HEAP32[99330]|0;
   $cmp15 = ($16|0)!=($17|0);
   if (!($cmp15)) {
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $18 = $i;
   $arrayidx18 = (183040 + ($18<<2)|0);
   $19 = HEAP32[$arrayidx18>>2]|0;
   $tobool19 = ($19|0)!=(0);
   if ($tobool19) {
    $20 = $p;
    $powers = ((($20)) + 52|0);
    $arrayidx22 = ((($powers)) + 8|0);
    $21 = HEAP32[$arrayidx22>>2]|0;
    $tobool23 = ($21|0)!=(0);
    if ($tobool23) {
     $color = 246;
    } else {
     $22 = $their_color;
     $arrayidx26 = (432 + ($22<<2)|0);
     $23 = HEAP32[$arrayidx26>>2]|0;
     $color = $23;
    }
    $24 = $p;
    $25 = HEAP32[$24>>2]|0;
    $angle29 = ((($25)) + 32|0);
    $26 = HEAP32[$angle29>>2]|0;
    $27 = $color;
    $28 = $p;
    $29 = HEAP32[$28>>2]|0;
    $x31 = ((($29)) + 12|0);
    $30 = HEAP32[$x31>>2]|0;
    $31 = $p;
    $32 = HEAP32[$31>>2]|0;
    $y33 = ((($32)) + 16|0);
    $33 = HEAP32[$y33>>2]|0;
    _AM_drawLineCharacter(16,7,0,$26,$27,$30,$33);
   }
  }
  $34 = $i;
  $inc34 = (($34) + 1)|0;
  $i = $inc34;
 }
 STACKTOP = sp;return;
}
function _AM_drawThings($colors,$colorrange) {
 $colors = $colors|0;
 $colorrange = $colorrange|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $angle = 0, $arrayidx = 0, $cmp = 0;
 var $colorrange$addr = 0, $colors$addr = 0, $i = 0, $inc = 0, $snext = 0, $t = 0, $thinglist = 0, $tobool = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $colors$addr = $colors;
 $colorrange$addr = $colorrange;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[99849]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99850]|0;
  $3 = $i;
  $arrayidx = (($2) + (($3*88)|0)|0);
  $thinglist = ((($arrayidx)) + 72|0);
  $4 = HEAP32[$thinglist>>2]|0;
  $t = $4;
  while(1) {
   $5 = $t;
   $tobool = ($5|0)!=(0|0);
   if (!($tobool)) {
    break;
   }
   $6 = $t;
   $angle = ((($6)) + 32|0);
   $7 = HEAP32[$angle>>2]|0;
   $8 = $colors$addr;
   $add = (($8) + 0)|0;
   $9 = $t;
   $x = ((($9)) + 12|0);
   $10 = HEAP32[$x>>2]|0;
   $11 = $t;
   $y = ((($11)) + 16|0);
   $12 = HEAP32[$y>>2]|0;
   _AM_drawLineCharacter(384,3,1048576,$7,$add,$10,$12);
   $13 = $t;
   $snext = ((($13)) + 24|0);
   $14 = HEAP32[$snext>>2]|0;
   $t = $14;
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _AM_drawMarks() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add9 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx4 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp12 = 0, $cmp14 = 0, $cmp17 = 0, $fx = 0;
 var $fy = 0, $h = 0, $i = 0, $inc = 0, $or$cond = 0, $shr = 0, $shr7 = 0, $sub = 0, $sub11 = 0, $sub16 = 0, $sub5 = 0, $sub8 = 0, $w = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (159952 + ($1<<3)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($2|0)!=(-1);
  if ($cmp1) {
   $w = 5;
   $h = 6;
   $3 = $i;
   $arrayidx2 = (159952 + ($3<<3)|0);
   $4 = HEAP32[$arrayidx2>>2]|0;
   $5 = HEAP32[99318]|0;
   $sub = (($4) - ($5))|0;
   $6 = HEAP32[32154]|0;
   $call = (_FixedMul($sub,$6)|0);
   $shr = $call >> 16;
   $add = (0 + ($shr))|0;
   $fx = $add;
   $7 = HEAP32[99323]|0;
   $8 = $i;
   $arrayidx4 = (159952 + ($8<<3)|0);
   $y = ((($arrayidx4)) + 4|0);
   $9 = HEAP32[$y>>2]|0;
   $10 = HEAP32[99320]|0;
   $sub5 = (($9) - ($10))|0;
   $11 = HEAP32[32154]|0;
   $call6 = (_FixedMul($sub5,$11)|0);
   $shr7 = $call6 >> 16;
   $sub8 = (($7) - ($shr7))|0;
   $add9 = (0 + ($sub8))|0;
   $fy = $add9;
   $12 = $fx;
   $cmp10 = ($12|0)>=(0);
   if ($cmp10) {
    $13 = $fx;
    $14 = HEAP32[99321]|0;
    $15 = $w;
    $sub11 = (($14) - ($15))|0;
    $cmp12 = ($13|0)<=($sub11|0);
    $16 = $fy;
    $cmp14 = ($16|0)>=(0);
    $or$cond = $cmp12 & $cmp14;
    if ($or$cond) {
     $17 = $fy;
     $18 = HEAP32[99323]|0;
     $19 = $h;
     $sub16 = (($18) - ($19))|0;
     $cmp17 = ($17|0)<=($sub16|0);
     if ($cmp17) {
      $20 = $fx;
      $21 = $fy;
      $22 = $i;
      $arrayidx19 = (160032 + ($22<<2)|0);
      $23 = HEAP32[$arrayidx19>>2]|0;
      _V_DrawPatch($20,$21,$23);
     }
    }
   }
  }
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _AM_drawCrosshair($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $arrayidx = 0, $color$addr = 0, $conv = 0, $div = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $color$addr = $color;
 $0 = $color$addr;
 $conv = $0&255;
 $1 = HEAP32[99340]|0;
 $2 = HEAP32[99321]|0;
 $3 = HEAP32[99323]|0;
 $add = (($3) + 1)|0;
 $mul = Math_imul($2, $add)|0;
 $div = (($mul|0) / 2)&-1;
 $arrayidx = (($1) + ($div)|0);
 HEAP8[$arrayidx>>0] = $conv;
 STACKTOP = sp;return;
}
function _AM_Drawer() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99316]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  return;
 }
 _AM_clearFB(0);
 $1 = HEAP32[99345]|0;
 $tobool1 = ($1|0)!=(0);
 if ($tobool1) {
  _AM_drawGrid(104);
 }
 _AM_drawWalls();
 _AM_drawPlayers();
 $2 = HEAP32[99346]|0;
 $cmp = ($2|0)==(2);
 if ($cmp) {
  _AM_drawThings(112,16);
 }
 _AM_drawCrosshair(96);
 _AM_drawMarks();
 $3 = HEAP32[99321]|0;
 $4 = HEAP32[99323]|0;
 _V_MarkRect(0,0,$3,$4);
 return;
}
function _D_PostEvent($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $arrayidx = 0, $ev$addr = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ev$addr = $ev;
 $0 = HEAP32[99359]|0;
 $arrayidx = (160112 + (($0*20)|0)|0);
 $1 = $ev$addr;
 ;HEAP32[$arrayidx>>2]=HEAP32[$1>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arrayidx+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arrayidx+16>>2]=HEAP32[$1+16>>2]|0;
 $2 = HEAP32[99359]|0;
 $add = (($2) + 1)|0;
 $rem = (($add|0) % 64)&-1;
 HEAP32[99359] = $rem;
 STACKTOP = sp;return;
}
function _D_PopEvent() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $arrayidx = 0, $cmp = 0, $rem = 0, $result = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99360]|0;
 $1 = HEAP32[99359]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $retval = 0;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 } else {
  $2 = HEAP32[99360]|0;
  $arrayidx = (160112 + (($2*20)|0)|0);
  $result = $arrayidx;
  $3 = HEAP32[99360]|0;
  $add = (($3) + 1)|0;
  $rem = (($add|0) % 64)&-1;
  HEAP32[99360] = $rem;
  $4 = $result;
  $retval = $4;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _D_FindWADByName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0;
 var $arrayidx3 = 0, $arrayidx7 = 0, $call = 0, $call1 = 0, $call11 = 0, $call12 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $i = 0, $inc = 0, $name$addr = 0, $path = 0, $retval = 0, $tobool = 0, $tobool13 = 0, $tobool2 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $name$addr = $name;
 $0 = $name$addr;
 $call = (_M_FileExists($0)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $1 = $name$addr;
  $retval = $1;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 _BuildIWADDirList();
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[99361]|0;
  $cmp = ($2|0)<($3|0);
  if (!($cmp)) {
   label = 11;
   break;
  }
  $4 = $i;
  $arrayidx = (161392 + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $6 = $name$addr;
  $call1 = (_DirIsFile($5,$6)|0);
  $tobool2 = ($call1|0)!=(0);
  if ($tobool2) {
   $7 = $i;
   $arrayidx3 = (161392 + ($7<<2)|0);
   $8 = HEAP32[$arrayidx3>>2]|0;
   $call4 = (_M_FileExists($8)|0);
   $tobool5 = ($call4|0)!=(0);
   if ($tobool5) {
    label = 7;
    break;
   }
  }
  $11 = $i;
  $arrayidx10 = (161392 + ($11<<2)|0);
  $12 = HEAP32[$arrayidx10>>2]|0;
  $13 = $name$addr;
  HEAP32[$vararg_buffer>>2] = 152940;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $call11 = (_M_StringJoin($12,$vararg_buffer)|0);
  $path = $call11;
  $14 = $path;
  $call12 = (_M_FileExists($14)|0);
  $tobool13 = ($call12|0)!=(0);
  $15 = $path;
  if ($tobool13) {
   label = 9;
   break;
  }
  _free($15);
  $16 = $i;
  $inc = (($16) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 7) {
  $9 = $i;
  $arrayidx7 = (161392 + ($9<<2)|0);
  $10 = HEAP32[$arrayidx7>>2]|0;
  $call8 = (___strdup($10)|0);
  $retval = $call8;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 9) {
  $retval = $15;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 11) {
  $retval = 0;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _BuildIWADDirList() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _AddIWADDir(159941);
 return;
}
function _DirIsFile($path,$filename) {
 $path = $path|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx6 = 0, $call = 0, $call1 = 0, $call7 = 0, $cmp = 0;
 var $cmp3 = 0, $conv = 0, $filename$addr = 0, $filename_len = 0, $land$ext = 0, $lnot = 0, $path$addr = 0, $path_len = 0, $sub = 0, $sub2 = 0, $sub5 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $path$addr = $path;
 $filename$addr = $filename;
 $0 = $path$addr;
 $call = (_strlen($0)|0);
 $path_len = $call;
 $1 = $filename$addr;
 $call1 = (_strlen($1)|0);
 $filename_len = $call1;
 $2 = $path_len;
 $3 = $filename_len;
 $add = (($3) + 1)|0;
 $cmp = ($2>>>0)>=($add>>>0);
 if (!($cmp)) {
  $12 = 0;
  $land$ext = $12&1;
  STACKTOP = sp;return ($land$ext|0);
 }
 $4 = $path$addr;
 $5 = $path_len;
 $6 = $filename_len;
 $sub = (($5) - ($6))|0;
 $sub2 = (($sub) - 1)|0;
 $arrayidx = (($4) + ($sub2)|0);
 $7 = HEAP8[$arrayidx>>0]|0;
 $conv = $7 << 24 >> 24;
 $cmp3 = ($conv|0)==(47);
 if (!($cmp3)) {
  $12 = 0;
  $land$ext = $12&1;
  STACKTOP = sp;return ($land$ext|0);
 }
 $8 = $path$addr;
 $9 = $path_len;
 $10 = $filename_len;
 $sub5 = (($9) - ($10))|0;
 $arrayidx6 = (($8) + ($sub5)|0);
 $11 = $filename$addr;
 $call7 = (_strcasecmp($arrayidx6,$11)|0);
 $tobool = ($call7|0)!=(0);
 $lnot = $tobool ^ 1;
 $12 = $lnot;
 $land$ext = $12&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _AddIWADDir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $dir$addr = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dir$addr = $dir;
 $0 = HEAP32[99361]|0;
 $cmp = ($0|0)<(128);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $1 = $dir$addr;
 $2 = HEAP32[99361]|0;
 $arrayidx = (161392 + ($2<<2)|0);
 HEAP32[$arrayidx>>2] = $1;
 $3 = HEAP32[99361]|0;
 $inc = (($3) + 1)|0;
 HEAP32[99361] = $inc;
 STACKTOP = sp;return;
}
function _D_TryFindWADByName($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $filename$addr = 0, $result = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $filename$addr = $filename;
 $0 = $filename$addr;
 $call = (_D_FindWADByName($0)|0);
 $result = $call;
 $1 = $result;
 $cmp = ($1|0)!=(0|0);
 if ($cmp) {
  $2 = $result;
  $retval = $2;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 } else {
  $3 = $filename$addr;
  $retval = $3;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _D_FindIWAD($mask,$mission) {
 $mask = $mask|0;
 $mission = $mission|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $arrayidx = 0, $arrayidx7 = 0, $call = 0, $call1 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $cmp5 = 0, $cmp6 = 0, $i = 0, $inc = 0, $iwadfile = 0, $iwadparm = 0, $mask$addr = 0, $mission$addr = 0, $result = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $mask$addr = $mask;
 $mission$addr = $mission;
 $call = (_M_CheckParmWithArgs(131071,1)|0);
 $iwadparm = $call;
 $0 = $iwadparm;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99714]|0;
  $2 = $iwadparm;
  $add = (($2) + 1)|0;
  $arrayidx = (($1) + ($add<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $iwadfile = $3;
  $4 = $iwadfile;
  $call1 = (_D_FindWADByName($4)|0);
  $result = $call1;
  $5 = $result;
  $cmp = ($5|0)==(0|0);
  if ($cmp) {
   $6 = $iwadfile;
   HEAP32[$vararg_buffer>>2] = $6;
   _I_Error(131077,$vararg_buffer);
  }
  $7 = $result;
  $8 = $mask$addr;
  $call3 = (_IdentifyIWADByName($7,$8)|0);
  $9 = $mission$addr;
  HEAP32[$9>>2] = $call3;
  $18 = $result;
  STACKTOP = sp;return ($18|0);
 }
 (_printf(131103,$vararg_buffer1)|0);
 $result = 0;
 _BuildIWADDirList();
 $i = 0;
 while(1) {
  $10 = $result;
  $cmp5 = ($10|0)==(0|0);
  if (!($cmp5)) {
   label = 9;
   break;
  }
  $11 = $i;
  $12 = HEAP32[99361]|0;
  $cmp6 = ($11|0)<($12|0);
  if (!($cmp6)) {
   label = 9;
   break;
  }
  $13 = $i;
  $arrayidx7 = (161392 + ($13<<2)|0);
  $14 = HEAP32[$arrayidx7>>2]|0;
  $15 = $mask$addr;
  $16 = $mission$addr;
  $call8 = (_SearchDirectoryForIWAD($14,$15,$16)|0);
  $result = $call8;
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 9) {
  $18 = $result;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _IdentifyIWADByName($name,$mask) {
 $name = $name|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx6 = 0, $call = 0;
 var $call8 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $i = 0, $inc = 0, $mask$addr = 0, $mission = 0, $mission11 = 0, $mission2 = 0, $name$addr = 0, $p = 0, $shl = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $name$addr = $name;
 $mask$addr = $mask;
 $0 = $name$addr;
 $call = (_strrchr($0,47)|0);
 $p = $call;
 $1 = $p;
 $cmp = ($1|0)!=(0|0);
 if ($cmp) {
  $2 = $p;
  $add$ptr = ((($2)) + 1|0);
  $name$addr = $add$ptr;
 }
 $mission = 9;
 $i = 0;
 while(1) {
  $3 = $i;
  $cmp1 = ($3>>>0)<(14);
  if (!($cmp1)) {
   label = 9;
   break;
  }
  $4 = $i;
  $arrayidx = (736 + ($4<<4)|0);
  $mission2 = ((($arrayidx)) + 4|0);
  $5 = HEAP32[$mission2>>2]|0;
  $shl = 1 << $5;
  $6 = $mask$addr;
  $and = $shl & $6;
  $cmp3 = ($and|0)==(0);
  if (!($cmp3)) {
   $7 = $name$addr;
   $8 = $i;
   $arrayidx6 = (736 + ($8<<4)|0);
   $9 = HEAP32[$arrayidx6>>2]|0;
   $call8 = (_strcasecmp($7,$9)|0);
   $tobool = ($call8|0)!=(0);
   if (!($tobool)) {
    break;
   }
  }
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 9) {
  $13 = $mission;
  STACKTOP = sp;return ($13|0);
 }
 $10 = $i;
 $arrayidx10 = (736 + ($10<<4)|0);
 $mission11 = ((($arrayidx10)) + 4|0);
 $11 = HEAP32[$mission11>>2]|0;
 $mission = $11;
 $13 = $mission;
 STACKTOP = sp;return ($13|0);
}
function _SearchDirectoryForIWAD($dir,$mask,$mission) {
 $dir = $dir|0;
 $mask = $mask|0;
 $mission = $mission|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx6 = 0, $call = 0, $cmp = 0;
 var $cmp2 = 0, $cmp4 = 0, $dir$addr = 0, $filename = 0, $i = 0, $inc = 0, $mask$addr = 0, $mission$addr = 0, $mission1 = 0, $mission7 = 0, $retval = 0, $shl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $dir$addr = $dir;
 $mask$addr = $mask;
 $mission$addr = $mission;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(14);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $1 = $i;
  $arrayidx = (736 + ($1<<4)|0);
  $mission1 = ((($arrayidx)) + 4|0);
  $2 = HEAP32[$mission1>>2]|0;
  $shl = 1 << $2;
  $3 = $mask$addr;
  $and = $shl & $3;
  $cmp2 = ($and|0)==(0);
  if (!($cmp2)) {
   $4 = $dir$addr;
   $5 = $i;
   $arrayidx3 = (736 + ($5<<4)|0);
   $6 = HEAP32[$arrayidx3>>2]|0;
   $call = (_CheckDirectoryHasIWAD($4,$6)|0);
   $filename = $call;
   $7 = $filename;
   $cmp4 = ($7|0)!=(0|0);
   if ($cmp4) {
    label = 5;
    break;
   }
  }
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 5) {
  $8 = $i;
  $arrayidx6 = (736 + ($8<<4)|0);
  $mission7 = ((($arrayidx6)) + 4|0);
  $9 = HEAP32[$mission7>>2]|0;
  $10 = $mission$addr;
  HEAP32[$10>>2] = $9;
  $11 = $filename;
  $retval = $11;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 7) {
  $retval = 0;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _CheckDirectoryHasIWAD($dir,$iwadname) {
 $dir = $dir|0;
 $iwadname = $iwadname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call11 = 0, $call3 = 0, $call4 = 0, $call7 = 0, $call8 = 0, $dir$addr = 0;
 var $filename = 0, $iwadname$addr = 0, $retval = 0, $tobool = 0, $tobool12 = 0, $tobool2 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $dir$addr = $dir;
 $iwadname$addr = $iwadname;
 $0 = $dir$addr;
 $1 = $iwadname$addr;
 $call = (_DirIsFile($0,$1)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $2 = $dir$addr;
  $call1 = (_M_FileExists($2)|0);
  $tobool2 = ($call1|0)!=(0);
  if ($tobool2) {
   $3 = $dir$addr;
   $call3 = (___strdup($3)|0);
   $retval = $call3;
   $11 = $retval;
   STACKTOP = sp;return ($11|0);
  }
 }
 $4 = $dir$addr;
 $call4 = (_strcmp($4,159941)|0);
 $tobool5 = ($call4|0)!=(0);
 if ($tobool5) {
  $6 = $dir$addr;
  $7 = $iwadname$addr;
  HEAP32[$vararg_buffer>>2] = 152940;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $call8 = (_M_StringJoin($6,$vararg_buffer)|0);
  $filename = $call8;
 } else {
  $5 = $iwadname$addr;
  $call7 = (___strdup($5)|0);
  $filename = $call7;
 }
 $8 = $filename;
 HEAP32[$vararg_buffer3>>2] = $8;
 (_printf(131149,$vararg_buffer3)|0);
 $9 = $filename;
 $call11 = (_M_FileExists($9)|0);
 $tobool12 = ($call11|0)!=(0);
 $10 = $filename;
 if ($tobool12) {
  $retval = $10;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 } else {
  _free($10);
  $retval = 0;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _D_SaveGameIWADName($gamemission) {
 $gamemission = $gamemission|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $cmp1 = 0, $gamemission$addr = 0, $i = 0, $inc = 0, $mission = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $gamemission$addr = $gamemission;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(14);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = $gamemission$addr;
  $2 = $i;
  $arrayidx = (736 + ($2<<4)|0);
  $mission = ((($arrayidx)) + 4|0);
  $3 = HEAP32[$mission>>2]|0;
  $cmp1 = ($1|0)==($3|0);
  $4 = $i;
  if ($cmp1) {
   label = 4;
   break;
  }
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $arrayidx2 = (736 + ($4<<4)|0);
  $5 = HEAP32[$arrayidx2>>2]|0;
  $retval = $5;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 else if ((label|0) == 6) {
  $retval = 131450;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _D_SuggestGameName($mission,$mode) {
 $mission = $mission|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx7 = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp6 = 0, $description = 0;
 var $i = 0, $inc = 0, $mission$addr = 0, $mission1 = 0, $mode$addr = 0, $mode5 = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mission$addr = $mission;
 $mode$addr = $mode;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(14);
  if (!($cmp)) {
   label = 8;
   break;
  }
  $1 = $i;
  $arrayidx = (736 + ($1<<4)|0);
  $mission1 = ((($arrayidx)) + 4|0);
  $2 = HEAP32[$mission1>>2]|0;
  $3 = $mission$addr;
  $cmp2 = ($2|0)==($3|0);
  if ($cmp2) {
   $4 = $mode$addr;
   $cmp3 = ($4|0)==(4);
   if ($cmp3) {
    label = 6;
    break;
   }
   $5 = $i;
   $arrayidx4 = (736 + ($5<<4)|0);
   $mode5 = ((($arrayidx4)) + 8|0);
   $6 = HEAP32[$mode5>>2]|0;
   $7 = $mode$addr;
   $cmp6 = ($6|0)==($7|0);
   if ($cmp6) {
    label = 6;
    break;
   }
  }
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  $8 = $i;
  $arrayidx7 = (736 + ($8<<4)|0);
  $description = ((($arrayidx7)) + 12|0);
  $9 = HEAP32[$description>>2]|0;
  $retval = $9;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 else if ((label|0) == 8) {
  $retval = 131462;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _NetUpdate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $div = 0, $i = 0;
 var $inc = 0, $newtics = 0, $nowtime = 0, $sub = 0, $sub2 = 0, $sub3 = 0, $tobool = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99362]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $call = (_GetAdjustedTime()|0);
 $1 = HEAP32[99363]|0;
 $div = (($call|0) / ($1|0))&-1;
 $nowtime = $div;
 $2 = $nowtime;
 $3 = HEAP32[99364]|0;
 $sub = (($2) - ($3))|0;
 $newtics = $sub;
 $4 = $nowtime;
 HEAP32[99364] = $4;
 $5 = HEAP32[99366]|0;
 $6 = $newtics;
 $cmp = ($5|0)<=($6|0);
 if ($cmp) {
  $7 = HEAP32[99366]|0;
  $8 = $newtics;
  $sub2 = (($8) - ($7))|0;
  $newtics = $sub2;
  HEAP32[99366] = 0;
 } else {
  $9 = $newtics;
  $10 = HEAP32[99366]|0;
  $sub3 = (($10) - ($9))|0;
  HEAP32[99366] = $sub3;
  $newtics = 0;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $newtics;
  $cmp5 = ($11|0)<($12|0);
  if (!($cmp5)) {
   label = 9;
   break;
  }
  $call6 = (_BuildNewTic()|0);
  $tobool7 = ($call6|0)!=(0);
  if (!($tobool7)) {
   label = 9;
   break;
  }
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _GetAdjustedTime() {
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $call = 0, $div = 0, $div1 = 0, $mul = 0, $time_ms = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_I_GetTimeMS()|0);
 $time_ms = $call;
 $0 = HEAP32[32170]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $div = (0 / 65536)&-1;
  $1 = $time_ms;
  $add = (($1) + ($div))|0;
  $time_ms = $add;
 }
 $2 = $time_ms;
 $mul = ($2*35)|0;
 $div1 = (($mul|0) / 1000)&-1;
 STACKTOP = sp;return ($div1|0);
}
function _BuildNewTic() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $BuildTiccmd = 0, $RunMenu = 0, $arrayidx = 0, $arrayidx18 = 0, $cmd = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $div = 0, $gameticdiv = 0, $inc = 0, $ingame = 0, $rem = 0, $rem17 = 0, $retval = 0, $sub = 0, $sub11 = 0, $sub7 = 0, $tobool = 0, $tobool2 = 0;
 var $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $cmd = sp;
 $0 = HEAP32[99365]|0;
 $1 = HEAP32[99363]|0;
 $div = (($0|0) / ($1|0))&-1;
 $gameticdiv = $div;
 _I_StartTic();
 $2 = HEAP32[99367]|0;
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_v[$3 & 255]();
 $4 = HEAP32[99367]|0;
 $RunMenu = ((($4)) + 12|0);
 $5 = HEAP32[$RunMenu>>2]|0;
 FUNCTION_TABLE_v[$5 & 255]();
 $tobool = (0)!=(0);
 if ($tobool) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $6 = HEAP32[32170]|0;
 $tobool2 = ($6|0)!=(0);
 if ($tobool2) {
  $tobool4 = (0)!=(0);
  if (!($tobool4)) {
   $7 = HEAP32[99368]|0;
   $8 = $gameticdiv;
   $sub = (($7) - ($8))|0;
   $cmp = ($sub|0)>(2);
   if ($cmp) {
    $retval = 0;
    $19 = $retval;
    STACKTOP = sp;return ($19|0);
   }
  }
  $9 = HEAP32[99368]|0;
  $10 = $gameticdiv;
  $sub7 = (($9) - ($10))|0;
  $cmp8 = ($sub7|0)>(8);
  if ($cmp8) {
   $retval = 0;
   $19 = $retval;
   STACKTOP = sp;return ($19|0);
  }
 } else {
  $11 = HEAP32[99368]|0;
  $12 = $gameticdiv;
  $sub11 = (($11) - ($12))|0;
  $cmp12 = ($sub11|0)>=(5);
  if ($cmp12) {
   $retval = 0;
   $19 = $retval;
   STACKTOP = sp;return ($19|0);
  }
 }
 ;HEAP32[$cmd>>2]=0|0;HEAP32[$cmd+4>>2]=0|0;HEAP32[$cmd+8>>2]=0|0;HEAP32[$cmd+12>>2]=0|0;
 $13 = HEAP32[99367]|0;
 $BuildTiccmd = ((($13)) + 4|0);
 $14 = HEAP32[$BuildTiccmd>>2]|0;
 $15 = HEAP32[99368]|0;
 FUNCTION_TABLE_vii[$14 & 255]($cmd,$15);
 $16 = HEAP32[99368]|0;
 $rem = (($16|0) % 128)&-1;
 $arrayidx = (161904 + (($rem*160)|0)|0);
 ;HEAP32[$arrayidx>>2]=HEAP32[$cmd>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$cmd+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$cmd+8>>2]|0;HEAP32[$arrayidx+12>>2]=HEAP32[$cmd+12>>2]|0;
 $17 = HEAP32[99368]|0;
 $rem17 = (($17|0) % 128)&-1;
 $arrayidx18 = (161904 + (($rem17*160)|0)|0);
 $ingame = ((($arrayidx18)) + 128|0);
 HEAP32[$ingame>>2] = 1;
 $18 = HEAP32[99368]|0;
 $inc = (($18) + 1)|0;
 HEAP32[99368] = $inc;
 $retval = 1;
 $19 = $retval;
 STACKTOP = sp;return ($19|0);
}
function _D_StartGameLoop() {
 var $0 = 0, $call = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_GetAdjustedTime()|0);
 $0 = HEAP32[99363]|0;
 $div = (($call|0) / ($0|0))&-1;
 HEAP32[99364] = $div;
 return;
}
function _D_StartNetGame($settings,$callback) {
 $settings = $settings|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $callback$addr = 0, $consoleplayer = 0, $extratics = 0, $new_sync = 0, $new_sync2 = 0, $num_players = 0, $player_classes = 0, $settings$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $settings$addr = $settings;
 $callback$addr = $callback;
 $0 = $settings$addr;
 $consoleplayer = ((($0)) + 64|0);
 HEAP32[$consoleplayer>>2] = 0;
 $1 = $settings$addr;
 $num_players = ((($1)) + 60|0);
 HEAP32[$num_players>>2] = 1;
 $2 = HEAP32[99369]|0;
 $3 = $settings$addr;
 $player_classes = ((($3)) + 68|0);
 HEAP32[$player_classes>>2] = $2;
 $4 = $settings$addr;
 $new_sync = ((($4)) + 44|0);
 HEAP32[$new_sync>>2] = 0;
 $5 = $settings$addr;
 $extratics = ((($5)) + 4|0);
 HEAP32[$extratics>>2] = 1;
 $6 = $settings$addr;
 HEAP32[$6>>2] = 1;
 $7 = $settings$addr;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[99363] = $8;
 $9 = $settings$addr;
 $new_sync2 = ((($9)) + 44|0);
 $10 = HEAP32[$new_sync2>>2]|0;
 HEAP32[32170] = $10;
 STACKTOP = sp;return;
}
function _D_InitNetGame($connect_data) {
 $connect_data = $connect_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $connect_data$addr = 0, $player_class = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $connect_data$addr = $connect_data;
 $result = 0;
 _I_AtExit(123,1);
 $0 = $connect_data$addr;
 $player_class = ((($0)) + 64|0);
 $1 = HEAP32[$player_class>>2]|0;
 HEAP32[99369] = $1;
 $2 = $result;
 STACKTOP = sp;return ($2|0);
}
function _D_QuitNetGame() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _TryRunTics() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $RunTic = 0, $add = 0, $add29 = 0, $arrayidx = 0, $availabletics = 0, $call = 0, $call2 = 0, $call26 = 0, $call31 = 0, $call36 = 0, $call45 = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp23 = 0, $cmp30 = 0;
 var $cmp33 = 0, $cmp39 = 0, $cmp53 = 0, $cmp55 = 0, $counts = 0, $dec = 0, $div = 0, $div28 = 0, $div3 = 0, $div32 = 0, $div37 = 0, $div49 = 0, $div54 = 0, $entertic = 0, $i = 0, $inc = 0, $inc61 = 0, $ingame = 0, $ingame59 = 0, $lowtic = 0;
 var $realtics = 0, $rem = 0, $set = 0, $sub = 0, $sub38 = 0, $sub4 = 0, $sub8 = 0, $tobool = 0, $tobool19 = 0, $tobool27 = 0, $tobool43 = 0, $tobool46 = 0, $tobool5 = 0, $tobool50 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_I_GetTime()|0);
 $0 = HEAP32[99363]|0;
 $div = (($call|0) / ($0|0))&-1;
 $entertic = $div;
 $1 = $entertic;
 $2 = HEAP32[99370]|0;
 $sub = (($1) - ($2))|0;
 $realtics = $sub;
 $3 = $entertic;
 HEAP32[99370] = $3;
 $4 = HEAP32[99362]|0;
 $tobool = ($4|0)!=(0);
 if ($tobool) {
  (_BuildNewTic()|0);
 } else {
  _NetUpdate();
 }
 $call2 = (_GetLowTic()|0);
 $lowtic = $call2;
 $5 = $lowtic;
 $6 = HEAP32[99365]|0;
 $7 = HEAP32[99363]|0;
 $div3 = (($6|0) / ($7|0))&-1;
 $sub4 = (($5) - ($div3))|0;
 $availabletics = $sub4;
 $8 = HEAP32[32170]|0;
 $tobool5 = ($8|0)!=(0);
 if ($tobool5) {
  $9 = $availabletics;
  $counts = $9;
 } else {
  $10 = $realtics;
  $11 = $availabletics;
  $sub8 = (($11) - 1)|0;
  $cmp = ($10|0)<($sub8|0);
  $12 = $realtics;
  do {
   if ($cmp) {
    $add = (($12) + 1)|0;
    $counts = $add;
   } else {
    $13 = $availabletics;
    $cmp11 = ($12|0)<($13|0);
    if ($cmp11) {
     $14 = $realtics;
     $counts = $14;
     break;
    } else {
     $15 = $availabletics;
     $counts = $15;
     break;
    }
   }
  } while(0);
  $16 = $counts;
  $cmp16 = ($16|0)<(1);
  if ($cmp16) {
   $counts = 1;
  }
  $tobool19 = (0)!=(0);
  if ($tobool19) {
   _OldNetSync();
  }
 }
 $17 = $counts;
 $cmp23 = ($17|0)<(1);
 if ($cmp23) {
  $counts = 1;
 }
 while(1) {
  $call26 = (_PlayersInGame()|0);
  $tobool27 = ($call26|0)!=(0);
  if ($tobool27) {
   $18 = $lowtic;
   $19 = HEAP32[99365]|0;
   $20 = HEAP32[99363]|0;
   $div28 = (($19|0) / ($20|0))&-1;
   $21 = $counts;
   $add29 = (($div28) + ($21))|0;
   $cmp30 = ($18|0)<($add29|0);
   if (!($cmp30)) {
    break;
   }
  }
  _NetUpdate();
  $call31 = (_GetLowTic()|0);
  $lowtic = $call31;
  $22 = $lowtic;
  $23 = HEAP32[99365]|0;
  $24 = HEAP32[99363]|0;
  $div32 = (($23|0) / ($24|0))&-1;
  $cmp33 = ($22|0)<($div32|0);
  if ($cmp33) {
   _I_Error(131476,$vararg_buffer);
  }
  $call36 = (_I_GetTime()|0);
  $25 = HEAP32[99363]|0;
  $div37 = (($call36|0) / ($25|0))&-1;
  $26 = $entertic;
  $sub38 = (($div37) - ($26))|0;
  $cmp39 = ($sub38|0)>(0);
  if ($cmp39) {
   label = 35;
   break;
  }
  _I_Sleep(1);
 }
 if ((label|0) == 35) {
  STACKTOP = sp;return;
 }
 while(1) {
  $27 = $counts;
  $dec = (($27) + -1)|0;
  $counts = $dec;
  $tobool43 = ($27|0)!=(0);
  if (!($tobool43)) {
   label = 35;
   break;
  }
  $call45 = (_PlayersInGame()|0);
  $tobool46 = ($call45|0)!=(0);
  if (!($tobool46)) {
   label = 35;
   break;
  }
  $28 = HEAP32[99365]|0;
  $29 = HEAP32[99363]|0;
  $div49 = (($28|0) / ($29|0))&-1;
  $rem = (($div49|0) % 128)&-1;
  $arrayidx = (161904 + (($rem*160)|0)|0);
  $set = $arrayidx;
  $tobool50 = (0)!=(0);
  if (!($tobool50)) {
   $30 = $set;
   _SinglePlayerClear($30);
  }
  $i = 0;
  while(1) {
   $31 = $i;
   $32 = HEAP32[99363]|0;
   $cmp53 = ($31|0)<($32|0);
   if (!($cmp53)) {
    break;
   }
   $33 = HEAP32[99365]|0;
   $34 = HEAP32[99363]|0;
   $div54 = (($33|0) / ($34|0))&-1;
   $35 = $lowtic;
   $cmp55 = ($div54|0)>($35|0);
   if ($cmp55) {
    _I_Error(131505,$vararg_buffer1);
   }
   $36 = $set;
   $ingame = ((($36)) + 128|0);
   ;HEAP32[182384>>2]=HEAP32[$ingame>>2]|0;HEAP32[182384+4>>2]=HEAP32[$ingame+4>>2]|0;HEAP32[182384+8>>2]=HEAP32[$ingame+8>>2]|0;HEAP32[182384+12>>2]=HEAP32[$ingame+12>>2]|0;HEAP32[182384+16>>2]=HEAP32[$ingame+16>>2]|0;HEAP32[182384+20>>2]=HEAP32[$ingame+20>>2]|0;HEAP32[182384+24>>2]=HEAP32[$ingame+24>>2]|0;HEAP32[182384+28>>2]=HEAP32[$ingame+28>>2]|0;
   $37 = HEAP32[99367]|0;
   $RunTic = ((($37)) + 8|0);
   $38 = HEAP32[$RunTic>>2]|0;
   $39 = $set;
   $40 = $set;
   $ingame59 = ((($40)) + 128|0);
   FUNCTION_TABLE_vii[$38 & 255]($39,$ingame59);
   $41 = HEAP32[99365]|0;
   $inc = (($41) + 1)|0;
   HEAP32[99365] = $inc;
   $42 = $set;
   _TicdupSquash($42);
   $43 = $i;
   $inc61 = (($43) + 1)|0;
   $i = $inc61;
  }
  _NetUpdate();
 }
 if ((label|0) == 35) {
  STACKTOP = sp;return;
 }
}
function _GetLowTic() {
 var $0 = 0, $1 = 0, $lowtic = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99368]|0;
 $lowtic = $0;
 $1 = $lowtic;
 STACKTOP = sp;return ($1|0);
}
function _OldNetSync() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx11 = 0, $cmp = 0;
 var $cmp10 = 0, $cmp2 = 0, $cmp5 = 0, $cmp7 = 0, $conv = 0, $dec = 0, $i = 0, $inc = 0, $inc1 = 0, $keyplayer = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $tobool = 0, $tobool12 = 0, $tobool13 = 0, $tobool15 = 0, $tobool17 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $keyplayer = -1;
 $0 = HEAP32[99371]|0;
 $inc = (($0) + 1)|0;
 HEAP32[99371] = $inc;
 $i = 0;
 while(1) {
  $1 = $i;
  $cmp = ($1>>>0)<(8);
  if (!($cmp)) {
   break;
  }
  $2 = $i;
  $arrayidx = (182384 + ($2<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($3|0)!=(0);
  $4 = $i;
  if ($tobool) {
   label = 4;
   break;
  }
  $inc1 = (($4) + 1)|0;
  $i = $inc1;
 }
 if ((label|0) == 4) {
  $keyplayer = $4;
 }
 $5 = $keyplayer;
 $cmp2 = ($5|0)<(0);
 $6 = $keyplayer;
 $cmp5 = (0)==($6|0);
 $or$cond3 = $cmp2 | $cmp5;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[99368]|0;
 $cmp7 = ($7|0)<=(0);
 if ($cmp7) {
  $8 = HEAP32[99364]|0;
  $dec = (($8) + -1)|0;
  HEAP32[99364] = $dec;
 }
 $9 = HEAP32[99372]|0;
 $cmp10 = ($9|0)>(0);
 $conv = $cmp10&1;
 $10 = HEAP32[99371]|0;
 $and = $10 & 3;
 $arrayidx11 = (182416 + ($and<<2)|0);
 HEAP32[$arrayidx11>>2] = $conv;
 $11 = HEAP32[99368]|0;
 HEAP32[99372] = $11;
 $12 = HEAP32[45604]|0;
 $tobool12 = ($12|0)!=(0);
 $13 = HEAP32[(182420)>>2]|0;
 $tobool13 = ($13|0)!=(0);
 $or$cond = $tobool12 & $tobool13;
 $14 = HEAP32[(182424)>>2]|0;
 $tobool15 = ($14|0)!=(0);
 $or$cond1 = $or$cond & $tobool15;
 $15 = HEAP32[(182428)>>2]|0;
 $tobool17 = ($15|0)!=(0);
 $or$cond2 = $or$cond1 & $tobool17;
 if (!($or$cond2)) {
  STACKTOP = sp;return;
 }
 HEAP32[99366] = 1;
 STACKTOP = sp;return;
}
function _PlayersInGame() {
 var $0 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $result = 0;
 $result = 1;
 $0 = $result;
 STACKTOP = sp;return ($0|0);
}
function _SinglePlayerClear($set) {
 $set = $set|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $i = 0, $inc = 0, $ingame = 0, $set$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $set$addr = $set;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(8);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $cmp1 = ($1|0)!=(0);
  if ($cmp1) {
   $2 = $set$addr;
   $ingame = ((($2)) + 128|0);
   $3 = $i;
   $arrayidx = (($ingame) + ($3<<2)|0);
   HEAP32[$arrayidx>>2] = 0;
  }
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _TicdupSquash($set) {
 $set = $set|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $arrayidx = 0, $buttons = 0, $buttons1 = 0, $chatchar = 0, $cmd = 0, $cmp = 0, $conv = 0, $i = 0, $inc = 0, $set$addr = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $set$addr = $set;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(8);
  if (!($cmp)) {
   break;
  }
  $1 = $set$addr;
  $2 = $i;
  $arrayidx = (($1) + ($2<<4)|0);
  $cmd = $arrayidx;
  $3 = $cmd;
  $chatchar = ((($3)) + 4|0);
  HEAP8[$chatchar>>0] = 0;
  $4 = $cmd;
  $buttons = ((($4)) + 5|0);
  $5 = HEAP8[$buttons>>0]|0;
  $conv = $5&255;
  $and = $conv & 128;
  $tobool = ($and|0)!=(0);
  if ($tobool) {
   $6 = $cmd;
   $buttons1 = ((($6)) + 5|0);
   HEAP8[$buttons1>>0] = 0;
  }
  $7 = $i;
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _D_RegisterLoopCallbacks($i) {
 $i = $i|0;
 var $0 = 0, $i$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i$addr = $i;
 $0 = $i$addr;
 HEAP32[99367] = $0;
 STACKTOP = sp;return;
}
function _D_ProcessEvents() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $cmp = 0, $ev = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99374]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 while(1) {
  $call = (_D_PopEvent()|0);
  $ev = $call;
  $cmp = ($call|0)!=(0|0);
  if (!($cmp)) {
   break;
  }
  $1 = $ev;
  $call1 = (_M_Responder($1)|0);
  $tobool2 = ($call1|0)!=(0);
  if ($tobool2) {
   continue;
  } else {
   $2 = $ev;
   (_G_Responder($2)|0);
   continue;
  }
 }
 STACKTOP = sp;return;
}
function _D_Display() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add90 = 0, $arrayidx = 0, $call100 = 0, $call104 = 0;
 var $call53 = 0, $call91 = 0, $call97 = 0, $cmp = 0, $cmp102 = 0, $cmp17 = 0, $cmp27 = 0, $cmp28 = 0, $cmp33 = 0, $cmp41 = 0, $cmp47 = 0, $cmp50 = 0, $cmp55 = 0, $cmp58 = 0, $cmp6 = 0, $cmp62 = 0, $cmp67 = 0, $conv = 0, $conv29 = 0, $dec = 0;
 var $div = 0, $done = 0, $lnot = 0, $nowtime = 0, $or$cond = 0, $or$cond1 = 0, $or$cond10 = 0, $or$cond10$not = 0, $or$cond11 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond8$not = 0, $or$cond9 = 0, $redrawsbar = 0;
 var $sub = 0, $sub101 = 0, $sub98 = 0, $tics = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool106 = 0, $tobool13 = 0, $tobool16 = 0, $tobool19 = 0, $tobool22 = 0, $tobool24 = 0, $tobool36 = 0, $tobool38 = 0, $tobool44 = 0, $tobool65 = 0, $tobool7 = 0, $tobool70 = 0, $tobool72 = 0;
 var $tobool74 = 0, $tobool77 = 0, $tobool81 = 0, $tobool84 = 0, $tobool86 = 0, $tobool93 = 0, $wipe = 0, $wipestart = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = HEAP32[99504]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $redrawsbar = 0;
 $1 = HEAP32[99971]|0;
 $tobool1 = ($1|0)!=(0);
 if ($tobool1) {
  _R_ExecuteSetViewSize();
  HEAP32[32173] = -1;
  HEAP32[99391] = 3;
 }
 $2 = HEAP32[99416]|0;
 $3 = HEAP32[32172]|0;
 $cmp = ($2|0)!=($3|0);
 if ($cmp) {
  $wipe = 1;
  (_wipe_StartScreen(0,0,320,200)|0);
 } else {
  $wipe = 0;
 }
 $4 = HEAP32[99416]|0;
 $cmp6 = ($4|0)==(0);
 $5 = HEAP32[99365]|0;
 $tobool7 = ($5|0)!=(0);
 $or$cond = $cmp6 & $tobool7;
 if ($or$cond) {
  _HU_Erase();
 }
 $6 = HEAP32[99416]|0;
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[99365]|0;
  $tobool10 = ($7|0)!=(0);
  if ($tobool10) {
   $8 = HEAP32[99316]|0;
   $tobool13 = ($8|0)!=(0);
   if ($tobool13) {
    _AM_Drawer();
   }
   $9 = $wipe;
   $tobool16 = ($9|0)!=(0);
   if ($tobool16) {
    label = 15;
   } else {
    $10 = HEAP32[99946]|0;
    $cmp17 = ($10|0)!=(200);
    $11 = HEAP32[99392]|0;
    $tobool19 = ($11|0)!=(0);
    $or$cond1 = $cmp17 & $tobool19;
    if ($or$cond1) {
     label = 15;
    }
   }
   if ((label|0) == 15) {
    $redrawsbar = 1;
   }
   $12 = HEAP32[99393]|0;
   $tobool22 = ($12|0)==(0);
   $13 = HEAP32[99731]|0;
   $tobool24 = ($13|0)!=(0);
   $or$cond2 = $tobool22 | $tobool24;
   if (!($or$cond2)) {
    $redrawsbar = 1;
   }
   $14 = HEAP32[99946]|0;
   $cmp27 = ($14|0)==(200);
   $conv = $cmp27&1;
   $15 = $redrawsbar;
   _ST_Drawer($conv,$15);
   $16 = HEAP32[99946]|0;
   $cmp28 = ($16|0)==(200);
   $conv29 = $cmp28&1;
   HEAP32[99392] = $conv29;
  }
  break;
 }
 case 1:  {
  _WI_Drawer();
  break;
 }
 case 2:  {
  _F_Drawer();
  break;
 }
 case 3:  {
  _D_PageDrawer();
  break;
 }
 default: {
 }
 }
 _I_UpdateNoBlit();
 $17 = HEAP32[99416]|0;
 $cmp33 = ($17|0)!=(0);
 $18 = HEAP32[99316]|0;
 $tobool36 = ($18|0)!=(0);
 $or$cond3 = $cmp33 | $tobool36;
 $or$cond3$not = $or$cond3 ^ 1;
 $19 = HEAP32[99365]|0;
 $tobool38 = ($19|0)!=(0);
 $or$cond4 = $or$cond3$not & $tobool38;
 if ($or$cond4) {
  $20 = HEAP32[99426]|0;
  $arrayidx = (183056 + (($20*288)|0)|0);
  _R_RenderPlayerView($arrayidx);
 }
 $21 = HEAP32[99416]|0;
 $cmp41 = ($21|0)==(0);
 $22 = HEAP32[99365]|0;
 $tobool44 = ($22|0)!=(0);
 $or$cond5 = $cmp41 & $tobool44;
 if ($or$cond5) {
  _HU_Drawer();
 }
 $23 = HEAP32[99416]|0;
 $24 = HEAP32[32173]|0;
 $cmp47 = ($23|0)!=($24|0);
 $25 = HEAP32[99416]|0;
 $cmp50 = ($25|0)!=(0);
 $or$cond6 = $cmp47 & $cmp50;
 if ($or$cond6) {
  $call53 = (_W_CacheLumpName(157989,8)|0);
  _I_SetPalette($call53);
 }
 $26 = HEAP32[99416]|0;
 $cmp55 = ($26|0)==(0);
 $27 = HEAP32[32173]|0;
 $cmp58 = ($27|0)!=(0);
 $or$cond7 = $cmp55 & $cmp58;
 if ($or$cond7) {
  HEAP32[99394] = 0;
  _R_FillBackScreen();
 }
 $28 = HEAP32[99416]|0;
 $cmp62 = ($28|0)!=(0);
 $29 = HEAP32[99316]|0;
 $tobool65 = ($29|0)!=(0);
 $or$cond8 = $cmp62 | $tobool65;
 $or$cond8$not = $or$cond8 ^ 1;
 $30 = HEAP32[99960]|0;
 $cmp67 = ($30|0)!=(320);
 $or$cond9 = $or$cond8$not & $cmp67;
 if ($or$cond9) {
  $31 = HEAP32[99724]|0;
  $tobool70 = ($31|0)!=(0);
  $32 = HEAP32[99395]|0;
  $tobool72 = ($32|0)!=(0);
  $or$cond10 = $tobool70 | $tobool72;
  $or$cond10$not = $or$cond10 ^ 1;
  $33 = HEAP32[99394]|0;
  $tobool74 = ($33|0)!=(0);
  $or$cond11 = $or$cond10$not & $tobool74;
  if (!($or$cond11)) {
   HEAP32[99391] = 3;
  }
  $34 = HEAP32[99391]|0;
  $tobool77 = ($34|0)!=(0);
  if ($tobool77) {
   _R_DrawViewBorder();
   $35 = HEAP32[99391]|0;
   $dec = (($35) + -1)|0;
   HEAP32[99391] = $dec;
  }
 }
 $36 = HEAP32[99414]|0;
 $tobool81 = ($36|0)!=(0);
 if ($tobool81) {
  $37 = HEAP32[99419]|0;
  _V_DrawMouseSpeedBox($37);
 }
 $38 = HEAP32[99724]|0;
 HEAP32[99395] = $38;
 $39 = HEAP32[99491]|0;
 HEAP32[99394] = $39;
 $40 = HEAP32[99731]|0;
 HEAP32[99393] = $40;
 $41 = HEAP32[99416]|0;
 HEAP32[32172] = $41;
 HEAP32[32173] = $41;
 $42 = HEAP32[99428]|0;
 $tobool84 = ($42|0)!=(0);
 if ($tobool84) {
  $43 = HEAP32[99316]|0;
  $tobool86 = ($43|0)!=(0);
  if ($tobool86) {
   $y = 4;
  } else {
   $44 = HEAP32[99959]|0;
   $add = (($44) + 4)|0;
   $y = $add;
  }
  $45 = HEAP32[99958]|0;
  $46 = HEAP32[99960]|0;
  $sub = (($46) - 68)|0;
  $div = (($sub|0) / 2)&-1;
  $add90 = (($45) + ($div))|0;
  $47 = $y;
  $call91 = (_W_CacheLumpName(131520,8)|0);
  _V_DrawPatchDirect($add90,$47,$call91);
 }
 _M_Drawer();
 _NetUpdate();
 $48 = $wipe;
 $tobool93 = ($48|0)!=(0);
 if (!($tobool93)) {
  _I_FinishUpdate();
  STACKTOP = sp;return;
 }
 (_wipe_EndScreen(0,0,320,200)|0);
 $call97 = (_I_GetTime()|0);
 $sub98 = (($call97) - 1)|0;
 $wipestart = $sub98;
 while(1) {
  while(1) {
   $call100 = (_I_GetTime()|0);
   $nowtime = $call100;
   $49 = $nowtime;
   $50 = $wipestart;
   $sub101 = (($49) - ($50))|0;
   $tics = $sub101;
   _I_Sleep(1);
   $51 = $tics;
   $cmp102 = ($51|0)<=(0);
   if (!($cmp102)) {
    break;
   }
  }
  $52 = $nowtime;
  $wipestart = $52;
  $53 = $tics;
  $call104 = (_wipe_ScreenWipe(1,0,0,320,200,$53)|0);
  $done = $call104;
  _I_UpdateNoBlit();
  _M_Drawer();
  _I_FinishUpdate();
  $54 = $done;
  $tobool106 = ($54|0)!=(0);
  $lnot = $tobool106 ^ 1;
  if (!($lnot)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _D_PageDrawer() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99378]|0;
 $call = (_W_CacheLumpName($0,8)|0);
 _V_DrawPatch(0,0,$call);
 return;
}
function _D_BindVariables() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $buf = 0, $cmp = 0, $i = 0, $inc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $buf = sp + 8|0;
 _M_ApplyPlatformDefaults();
 _I_BindVideoVariables();
 _I_BindJoystickVariables();
 _I_BindSoundVariables();
 _M_BindBaseControls();
 _M_BindWeaponControls();
 _M_BindMapControls();
 _M_BindMenuControls();
 _M_BindChatControls(4);
 HEAP32[46712] = 103;
 HEAP32[(186852)>>2] = 105;
 HEAP32[(186856)>>2] = 98;
 HEAP32[(186860)>>2] = 114;
 _M_BindVariable(149886,129128);
 _M_BindVariable(149904,129876);
 _M_BindVariable(149915,129880);
 _M_BindVariable(149951,129132);
 _M_BindVariable(150291,129136);
 _M_BindVariable(150315,398892);
 _M_BindVariable(150327,129884);
 _M_BindVariable(149087,128756);
 _M_BindVariable(149110,128760);
 _M_BindVariable(149059,128684);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  HEAP32[$vararg_buffer>>2] = $1;
  (_M_snprintf($buf,12,131528,$vararg_buffer)|0);
  $2 = $i;
  $arrayidx = (2368 + ($2<<2)|0);
  _M_BindVariable($buf,$arrayidx);
  $3 = $i;
  $inc = (($3) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _D_GrabMouseCallback() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $land$ext = 0, $lnot = 0, $or$cond = 0, $or$cond1 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool5 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tobool = (0)!=(0);
 if ($tobool) {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 $0 = HEAP32[99724]|0;
 $tobool1 = ($0|0)!=(0);
 $1 = HEAP32[99428]|0;
 $tobool2 = ($1|0)!=(0);
 $or$cond = $tobool1 | $tobool2;
 if ($or$cond) {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 $2 = HEAP32[99416]|0;
 $cmp = ($2|0)!=(0);
 $3 = HEAP32[99431]|0;
 $tobool5 = ($3|0)!=(0);
 $or$cond1 = $cmp | $tobool5;
 if ($or$cond1) {
  $5 = 0;
 } else {
  $4 = HEAP32[99375]|0;
  $tobool6 = ($4|0)!=(0);
  $lnot = $tobool6 ^ 1;
  $5 = $lnot;
 }
 $land$ext = $5&1;
 $retval = $land$ext;
 $6 = $retval;
 STACKTOP = sp;return ($6|0);
}
function _doomgeneric_Tick() {
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _I_StartFrame();
 _TryRunTics();
 $0 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($0*288)|0)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 _S_UpdateSounds($1);
 $2 = HEAP32[100205]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  return;
 }
 _D_Display();
 return;
}
function _D_DoomLoop() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, $tobool4 = 0, $tobool7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99376]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99432]|0;
  $tobool1 = ($1|0)!=(0);
  $2 = HEAP32[99427]|0;
  $cmp = ($2|0)==(5);
  $or$cond = $tobool1 | $cmp;
  $3 = HEAP32[99433]|0;
  $tobool3 = ($3|0)!=(0);
  $or$cond1 = $or$cond | $tobool3;
  if ($or$cond1) {
   (_printf(131540,$vararg_buffer)|0);
  }
 }
 $4 = HEAP32[99432]|0;
 $tobool4 = ($4|0)!=(0);
 if ($tobool4) {
  _G_BeginRecording();
 }
 HEAP32[99373] = 1;
 _TryRunTics();
 $5 = HEAP32[99357]|0;
 _I_SetWindowTitle($5);
 _I_GraphicsCheckCommandLine();
 _I_SetGrabMouseCallback(124);
 _I_InitGraphics();
 _I_EnableLoadingDisk();
 _V_RestoreBuffer();
 _R_ExecuteSetViewSize();
 _D_StartGameLoop();
 $6 = HEAP32[99414]|0;
 $tobool7 = ($6|0)!=(0);
 if (!($tobool7)) {
  _doomgeneric_Tick();
  STACKTOP = sp;return;
 }
 $7 = HEAP32[99416]|0;
 HEAP32[32172] = $7;
 _doomgeneric_Tick();
 STACKTOP = sp;return;
}
function _D_PageTicker() {
 var $0 = 0, $cmp = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99377]|0;
 $dec = (($0) + -1)|0;
 HEAP32[99377] = $dec;
 $cmp = ($dec|0)<(0);
 if (!($cmp)) {
  return;
 }
 _D_AdvanceDemo();
 return;
}
function _D_AdvanceDemo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99375] = 1;
 return;
}
function _D_DoAdvanceDemo() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $call28 = 0, $cmp = 0, $cmp1 = 0, $cmp16 = 0, $cmp19 = 0, $cmp29 = 0;
 var $cmp4 = 0, $cmp8 = 0, $or$cond = 0, $playerstate = 0, $rem = 0, $rem3 = 0, $tobool = 0, $tobool26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($0*288)|0)|0);
 $playerstate = ((($arrayidx)) + 4|0);
 HEAP32[$playerstate>>2] = 0;
 HEAP32[99375] = 0;
 HEAP32[99496] = 0;
 HEAP32[99428] = 0;
 HEAP32[99427] = 0;
 $1 = HEAP32[32169]|0;
 $cmp = ($1|0)==(6);
 $2 = HEAP32[32169]|0;
 $cmp1 = ($2|0)==(7);
 $or$cond = $cmp | $cmp1;
 $3 = HEAP32[99379]|0;
 $add = (($3) + 1)|0;
 if ($or$cond) {
  $rem = (($add|0) % 7)&-1;
  HEAP32[99379] = $rem;
 } else {
  $rem3 = (($add|0) % 6)&-1;
  HEAP32[99379] = $rem3;
 }
 $4 = HEAP32[99379]|0;
 L5: do {
  switch ($4|0) {
  case 0:  {
   $5 = HEAP32[32168]|0;
   $cmp4 = ($5|0)==(2);
   if ($cmp4) {
    HEAP32[99377] = 385;
   } else {
    HEAP32[99377] = 170;
   }
   HEAP32[99416] = 3;
   HEAP32[99378] = 131770;
   $6 = HEAP32[32168]|0;
   $cmp8 = ($6|0)==(2);
   if ($cmp8) {
    _S_StartMusic(66);
    break L5;
   } else {
    _S_StartMusic(29);
    break L5;
   }
   break;
  }
  case 1:  {
   _G_DeferedPlayDemo(131779);
   break;
  }
  case 2:  {
   HEAP32[99377] = 200;
   HEAP32[99416] = 3;
   HEAP32[99378] = 151966;
   break;
  }
  case 3:  {
   _G_DeferedPlayDemo(131785);
   break;
  }
  case 4:  {
   HEAP32[99416] = 3;
   $7 = HEAP32[32168]|0;
   $cmp16 = ($7|0)==(2);
   if ($cmp16) {
    HEAP32[99377] = 385;
    HEAP32[99378] = 131770;
    _S_StartMusic(66);
    break L5;
   }
   HEAP32[99377] = 200;
   $8 = HEAP32[32168]|0;
   $cmp19 = ($8|0)==(3);
   if ($cmp19) {
    HEAP32[99378] = 151966;
    break L5;
   } else {
    HEAP32[99378] = 151978;
    break L5;
   }
   break;
  }
  case 5:  {
   _G_DeferedPlayDemo(131791);
   break;
  }
  case 6:  {
   _G_DeferedPlayDemo(131797);
   break;
  }
  default: {
  }
  }
 } while(0);
 $9 = HEAP32[99376]|0;
 $tobool = ($9|0)!=(0);
 if (!($tobool)) {
  return;
 }
 $10 = HEAP32[99378]|0;
 $call = (_strcasecmp($10,131770)|0);
 $tobool26 = ($call|0)!=(0);
 if ($tobool26) {
  return;
 }
 $call28 = (_W_CheckNumForName(131803)|0);
 $cmp29 = ($call28|0)<(0);
 if (!($cmp29)) {
  return;
 }
 HEAP32[99378] = 158230;
 return;
}
function _D_StartTitle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99427] = 0;
 HEAP32[99379] = -1;
 _D_AdvanceDemo();
 return;
}
function _D_IdentifyVersion() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx36 = 0;
 var $call = 0, $call22 = 0, $call26 = 0, $call33 = 0, $call6 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp14 = 0, $cmp15 = 0, $cmp20 = 0, $cmp23 = 0, $cmp27 = 0, $cmp34 = 0, $cond = 0, $cond19 = 0, $i = 0, $inc = 0, $p = 0, $tobool = 0;
 var $tobool7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99356]|0;
 $cmp = ($0|0)==(9);
 if ($cmp) {
  $i = 0;
  while(1) {
   $1 = $i;
   $2 = HEAP32[100198]|0;
   $cmp1 = ($1>>>0)<($2>>>0);
   if (!($cmp1)) {
    break;
   }
   $3 = HEAP32[100199]|0;
   $4 = $i;
   $arrayidx = (($3) + (($4*28)|0)|0);
   $call = (_strncasecmp($arrayidx,131812,8)|0);
   $tobool = ($call|0)!=(0);
   if (!($tobool)) {
    label = 5;
    break;
   }
   $5 = HEAP32[100199]|0;
   $6 = $i;
   $arrayidx3 = (($5) + (($6*28)|0)|0);
   $call6 = (_strncasecmp($arrayidx3,131818,8)|0);
   $tobool7 = ($call6|0)!=(0);
   if (!($tobool7)) {
    label = 7;
    break;
   }
   $7 = $i;
   $inc = (($7) + 1)|0;
   $i = $inc;
  }
  if ((label|0) == 5) {
   HEAP32[99356] = 1;
  }
  else if ((label|0) == 7) {
   HEAP32[99356] = 0;
  }
  $8 = HEAP32[99356]|0;
  $cmp10 = ($8|0)==(9);
  if ($cmp10) {
   _I_Error(131823,$vararg_buffer);
  }
 }
 $9 = HEAP32[99356]|0;
 $cmp14 = ($9|0)==(4);
 if ($cmp14) {
  $cond19 = 0;
 } else {
  $10 = HEAP32[99356]|0;
  $cmp15 = ($10|0)==(5);
  $11 = HEAP32[99356]|0;
  $cond = $cmp15 ? 1 : $11;
  $cond19 = $cond;
 }
 $cmp20 = ($cond19|0)==(0);
 if (!($cmp20)) {
  HEAP32[32168] = 2;
  $call33 = (_M_CheckParmWithArgs(131863,1)|0);
  $p = $call33;
  $12 = $p;
  $cmp34 = ($12|0)>(0);
  if (!($cmp34)) {
   STACKTOP = sp;return;
  }
  $13 = HEAP32[99714]|0;
  $14 = $p;
  $add = (($14) + 1)|0;
  $arrayidx36 = (($13) + ($add<<2)|0);
  $15 = HEAP32[$arrayidx36>>2]|0;
  _SetMissionForPackName($15);
  STACKTOP = sp;return;
 }
 $call22 = (_W_CheckNumForName(131853)|0);
 $cmp23 = ($call22|0)>(0);
 if ($cmp23) {
  HEAP32[32168] = 3;
  STACKTOP = sp;return;
 }
 $call26 = (_W_CheckNumForName(131858)|0);
 $cmp27 = ($call26|0)>(0);
 if ($cmp27) {
  HEAP32[32168] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[32168] = 0;
  STACKTOP = sp;return;
 }
}
function _SetMissionForPackName($pack_name) {
 $pack_name = $pack_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $i = 0, $inc = 0, $inc10 = 0;
 var $mission = 0, $pack_name$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pack_name$addr = $pack_name;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(3);
  if (!($cmp)) {
   break;
  }
  $1 = $pack_name$addr;
  $2 = $i;
  $arrayidx = (960 + ($2<<3)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $call = (_strcasecmp($1,$3)|0);
  $tobool = ($call|0)!=(0);
  $4 = $i;
  if (!($tobool)) {
   label = 4;
   break;
  }
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $arrayidx1 = (960 + ($4<<3)|0);
  $mission = ((($arrayidx1)) + 4|0);
  $5 = HEAP32[$mission>>2]|0;
  HEAP32[99356] = $5;
  STACKTOP = sp;return;
 }
 (_printf(131869,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $6 = $i;
  $cmp4 = ($6>>>0)<(3);
  if (!($cmp4)) {
   break;
  }
  $7 = $i;
  $arrayidx6 = (960 + ($7<<3)|0);
  $8 = HEAP32[$arrayidx6>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $8;
  (_printf(131895,$vararg_buffer1)|0);
  $9 = $i;
  $inc10 = (($9) + 1)|0;
  $i = $inc10;
 }
 $10 = $pack_name$addr;
 HEAP32[$vararg_buffer3>>2] = $10;
 _I_Error(131900,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _D_SetGameDescription() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call15 = 0;
 var $call19 = 0, $call24 = 0, $call29 = 0, $call38 = 0, $call40 = 0, $call58 = 0, $call75 = 0, $call92 = 0, $cmp = 0, $cmp12 = 0, $cmp16 = 0, $cmp2 = 0, $cmp21 = 0, $cmp26 = 0, $cmp4 = 0, $cmp43 = 0, $cmp47 = 0, $cmp55 = 0, $cmp6 = 0, $cmp60 = 0;
 var $cmp64 = 0, $cmp72 = 0, $cmp77 = 0, $cmp81 = 0, $cmp89 = 0, $cond = 0, $cond11 = 0, $cond52 = 0, $cond54 = 0, $cond69 = 0, $cond71 = 0, $cond86 = 0, $cond88 = 0, $conv = 0, $conv3 = 0, $is_freedm = 0, $is_freedoom = 0, $tobool = 0, $tobool36 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_W_CheckNumForName(135270)|0);
 $cmp = ($call|0)>=(0);
 $conv = $cmp&1;
 $is_freedoom = $conv;
 $call1 = (_W_CheckNumForName(131930)|0);
 $cmp2 = ($call1|0)>=(0);
 $conv3 = $cmp2&1;
 $is_freedm = $conv3;
 HEAP32[99357] = 131937;
 $0 = HEAP32[99356]|0;
 $cmp4 = ($0|0)==(4);
 if ($cmp4) {
  $cond11 = 0;
 } else {
  $1 = HEAP32[99356]|0;
  $cmp6 = ($1|0)==(5);
  $2 = HEAP32[99356]|0;
  $cond = $cmp6 ? 1 : $2;
  $cond11 = $cond;
 }
 $cmp12 = ($cond11|0)==(0);
 $3 = $is_freedoom;
 $tobool = ($3|0)!=(0);
 if ($cmp12) {
  if ($tobool) {
   $call15 = (_GetGameName(131945)|0);
   HEAP32[99357] = $call15;
   STACKTOP = sp;return;
  }
  $4 = HEAP32[32168]|0;
  $cmp16 = ($4|0)==(3);
  if ($cmp16) {
   $call19 = (_GetGameName(131963)|0);
   HEAP32[99357] = $call19;
   STACKTOP = sp;return;
  }
  $5 = HEAP32[32168]|0;
  $cmp21 = ($5|0)==(1);
  if ($cmp21) {
   $call24 = (_GetGameName(131981)|0);
   HEAP32[99357] = $call24;
   STACKTOP = sp;return;
  }
  $6 = HEAP32[32168]|0;
  $cmp26 = ($6|0)==(0);
  if (!($cmp26)) {
   STACKTOP = sp;return;
  }
  $call29 = (_GetGameName(131997)|0);
  HEAP32[99357] = $call29;
  STACKTOP = sp;return;
 }
 if ($tobool) {
  $7 = $is_freedm;
  $tobool36 = ($7|0)!=(0);
  if ($tobool36) {
   $call38 = (_GetGameName(132012)|0);
   HEAP32[99357] = $call38;
   STACKTOP = sp;return;
  } else {
   $call40 = (_GetGameName(132019)|0);
   HEAP32[99357] = $call40;
   STACKTOP = sp;return;
  }
 }
 $8 = HEAP32[99356]|0;
 $cmp43 = ($8|0)==(4);
 if ($cmp43) {
  $cond54 = 0;
 } else {
  $9 = HEAP32[99356]|0;
  $cmp47 = ($9|0)==(5);
  $10 = HEAP32[99356]|0;
  $cond52 = $cmp47 ? 1 : $10;
  $cond54 = $cond52;
 }
 $cmp55 = ($cond54|0)==(1);
 if ($cmp55) {
  $call58 = (_GetGameName(132037)|0);
  HEAP32[99357] = $call58;
  STACKTOP = sp;return;
 }
 $11 = HEAP32[99356]|0;
 $cmp60 = ($11|0)==(4);
 if ($cmp60) {
  $cond71 = 0;
 } else {
  $12 = HEAP32[99356]|0;
  $cmp64 = ($12|0)==(5);
  $13 = HEAP32[99356]|0;
  $cond69 = $cmp64 ? 1 : $13;
  $cond71 = $cond69;
 }
 $cmp72 = ($cond71|0)==(3);
 if ($cmp72) {
  $call75 = (_GetGameName(132059)|0);
  HEAP32[99357] = $call75;
  STACKTOP = sp;return;
 }
 $14 = HEAP32[99356]|0;
 $cmp77 = ($14|0)==(4);
 if ($cmp77) {
  $cond88 = 0;
 } else {
  $15 = HEAP32[99356]|0;
  $cmp81 = ($15|0)==(5);
  $16 = HEAP32[99356]|0;
  $cond86 = $cmp81 ? 1 : $16;
  $cond88 = $cond86;
 }
 $cmp89 = ($cond88|0)==(2);
 if (!($cmp89)) {
  STACKTOP = sp;return;
 }
 $call92 = (_GetGameName(132087)|0);
 HEAP32[99357] = $call92;
 STACKTOP = sp;return;
}
function _GetGameName($gamename) {
 $gamename = $gamename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx20 = 0, $arrayidx28 = 0, $call = 0, $call11 = 0, $call18 = 0;
 var $call22 = 0, $call26 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp15 = 0, $cmp2 = 0, $cmp7 = 0, $conv = 0, $conv10 = 0, $conv14 = 0, $conv21 = 0, $deh_sub = 0, $div = 0, $gamename$addr = 0, $gamename_size = 0, $i = 0, $inc = 0, $rem = 0, $retval = 0;
 var $sub = 0, $sub19 = 0, $sub27 = 0, $tobool = 0, $tobool23 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $gamename$addr = $gamename;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(7);
  if (!($cmp)) {
   label = 15;
   break;
  }
  $1 = $i;
  $arrayidx = (992 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $deh_sub = $2;
  $3 = $deh_sub;
  $4 = $i;
  $arrayidx1 = (992 + ($4<<2)|0);
  $5 = HEAP32[$arrayidx1>>2]|0;
  $cmp2 = ($3|0)!=($5|0);
  if ($cmp2) {
   break;
  }
  $27 = $i;
  $inc = (($27) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 15) {
  $28 = $gamename$addr;
  $retval = $28;
  $29 = $retval;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $deh_sub;
 $call = (_strlen($6)|0);
 $add = (($call) + 10)|0;
 $gamename_size = $add;
 $7 = $gamename_size;
 $call3 = (_Z_Malloc($7,1,0)|0);
 $gamename$addr = $call3;
 $call4 = (_G_VanillaVersionCode()|0);
 $version = $call4;
 $8 = $gamename$addr;
 $9 = $gamename_size;
 $10 = $deh_sub;
 $11 = $version;
 $div = (($11|0) / 100)&-1;
 $12 = $version;
 $rem = (($12|0) % 100)&-1;
 HEAP32[$vararg_buffer>>2] = $div;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $rem;
 (_M_snprintf($8,$9,$10,$vararg_buffer)|0);
 while(1) {
  $13 = $gamename$addr;
  $14 = HEAP8[$13>>0]|0;
  $conv = $14 << 24 >> 24;
  $cmp7 = ($conv|0)!=(0);
  if (!($cmp7)) {
   break;
  }
  $15 = $gamename$addr;
  $16 = HEAP8[$15>>0]|0;
  $conv10 = $16 << 24 >> 24;
  $call11 = (_isspace($conv10)|0);
  $tobool = ($call11|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $17 = $gamename$addr;
  $18 = $gamename$addr;
  $add$ptr = ((($18)) + 1|0);
  $19 = $gamename_size;
  $sub = (($19) - 1)|0;
  _memmove(($17|0),($add$ptr|0),($sub|0))|0;
 }
 while(1) {
  $20 = $gamename$addr;
  $21 = HEAP8[$20>>0]|0;
  $conv14 = $21 << 24 >> 24;
  $cmp15 = ($conv14|0)!=(0);
  if ($cmp15) {
   $22 = $gamename$addr;
   $23 = $gamename$addr;
   $call18 = (_strlen($23)|0);
   $sub19 = (($call18) - 1)|0;
   $arrayidx20 = (($22) + ($sub19)|0);
   $24 = HEAP8[$arrayidx20>>0]|0;
   $conv21 = $24 << 24 >> 24;
   $call22 = (_isspace($conv21)|0);
   $tobool23 = ($call22|0)!=(0);
   $30 = $tobool23;
  } else {
   $30 = 0;
  }
  $25 = $gamename$addr;
  if (!($30)) {
   break;
  }
  $26 = $gamename$addr;
  $call26 = (_strlen($26)|0);
  $sub27 = (($call26) - 1)|0;
  $arrayidx28 = (($25) + ($sub27)|0);
  HEAP8[$arrayidx28>>0] = 0;
 }
 $retval = $25;
 $29 = $retval;
 STACKTOP = sp;return ($29|0);
}
function _PrintDehackedBanners() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx4 = 0, $call3 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $deh_s = 0;
 var $i = 0, $inc = 0, $sub = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(3);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (128696 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $deh_s = $2;
  $3 = $deh_s;
  $4 = $i;
  $arrayidx1 = (128696 + ($4<<2)|0);
  $5 = HEAP32[$arrayidx1>>2]|0;
  $cmp2 = ($3|0)!=($5|0);
  if ($cmp2) {
   $6 = $deh_s;
   HEAP32[$vararg_buffer>>2] = $6;
   (_printf(132684,$vararg_buffer)|0);
   $7 = $deh_s;
   $8 = $deh_s;
   $call3 = (_strlen($8)|0);
   $sub = (($call3) - 1)|0;
   $arrayidx4 = (($7) + ($sub)|0);
   $9 = HEAP8[$arrayidx4>>0]|0;
   $conv = $9 << 24 >> 24;
   $cmp5 = ($conv|0)!=(10);
   if ($cmp5) {
    (_printf(132687,$vararg_buffer1)|0);
   }
  }
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _PrintGameVersion() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx3 = 0, $cmp = 0, $cmp2 = 0, $i = 0, $inc = 0, $vararg_buffer = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $arrayidx = (1024 + (($0*12)|0)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $cmp = ($1|0)!=(0|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $2 = $i;
  $arrayidx1 = (1024 + (($2*12)|0)|0);
  $version = ((($arrayidx1)) + 8|0);
  $3 = HEAP32[$version>>2]|0;
  $4 = HEAP32[32169]|0;
  $cmp2 = ($3|0)==($4|0);
  $5 = $i;
  if ($cmp2) {
   break;
  }
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 $arrayidx3 = (1024 + (($5*12)|0)|0);
 $6 = HEAP32[$arrayidx3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $6;
 (_printf(133577,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _D_DoomMain() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $add = 0, $add123 = 0, $add131 = 0, $add140 = 0, $add154 = 0, $add163 = 0, $add167 = 0, $add184 = 0, $add214 = 0, $add55 = 0;
 var $add60 = 0, $add79 = 0, $arrayidx = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx141 = 0, $arrayidx155 = 0, $arrayidx168 = 0, $arrayidx185 = 0, $arrayidx215 = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx74 = 0, $arrayidx80 = 0, $arrayidx97 = 0, $call1 = 0, $call105 = 0, $call107 = 0, $call112 = 0, $call114 = 0;
 var $call120 = 0, $call128 = 0, $call137 = 0, $call14 = 0, $call142 = 0, $call144 = 0, $call148 = 0, $call156 = 0, $call176 = 0, $call18 = 0, $call181 = 0, $call186 = 0, $call2 = 0, $call201 = 0, $call206 = 0, $call211 = 0, $call217 = 0, $call222 = 0, $call231 = 0, $call3 = 0;
 var $call36 = 0, $call4 = 0, $call42 = 0, $call47 = 0, $call48 = 0, $call5 = 0, $call51 = 0, $call57 = 0, $call6 = 0, $call69 = 0, $call86 = 0, $call87 = 0, $call99 = 0, $cmp = 0, $cmp100 = 0, $cmp106 = 0, $cmp108 = 0, $cmp113 = 0, $cmp115 = 0, $cmp151 = 0;
 var $cmp164 = 0, $cmp177 = 0, $cmp198 = 0, $cmp20 = 0, $cmp202 = 0, $cmp227 = 0, $cmp23 = 0, $cmp235 = 0, $cmp37 = 0, $cmp43 = 0, $cmp91 = 0, $cmp94 = 0, $cmp96 = 0, $conv = 0, $conv134 = 0, $conv161 = 0, $conv170 = 0, $demolumpname = 0, $div = 0, $div28 = 0;
 var $div30 = 0, $div32 = 0, $file = 0, $i = 0, $inc = 0, $mul = 0, $mul193 = 0, $mul194 = 0, $mul27 = 0, $mul29 = 0, $mul31 = 0, $name90 = 0, $or$cond = 0, $p = 0, $scale = 0, $sub = 0, $sub126 = 0, $sub135 = 0, $sub162 = 0, $sub171 = 0;
 var $sub73 = 0, $tobool = 0, $tobool10 = 0, $tobool121 = 0, $tobool129 = 0, $tobool138 = 0, $tobool145 = 0, $tobool149 = 0, $tobool15 = 0, $tobool182 = 0, $tobool207 = 0, $tobool212 = 0, $tobool218 = 0, $tobool223 = 0, $tobool238 = 0, $tobool240 = 0, $tobool49 = 0, $tobool53 = 0, $tobool58 = 0, $tobool7 = 0;
 var $tobool70 = 0, $tobool88 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $vararg_buffer45 = sp + 624|0;
 $vararg_buffer43 = sp + 616|0;
 $vararg_buffer41 = sp + 608|0;
 $vararg_buffer39 = sp + 600|0;
 $vararg_buffer37 = sp + 592|0;
 $vararg_buffer35 = sp + 584|0;
 $vararg_buffer33 = sp + 576|0;
 $vararg_buffer31 = sp + 568|0;
 $vararg_buffer29 = sp + 560|0;
 $vararg_buffer27 = sp + 552|0;
 $vararg_buffer25 = sp + 544|0;
 $vararg_buffer23 = sp + 536|0;
 $vararg_buffer21 = sp + 528|0;
 $vararg_buffer18 = sp + 520|0;
 $vararg_buffer15 = sp + 512|0;
 $vararg_buffer13 = sp + 504|0;
 $vararg_buffer11 = sp + 496|0;
 $vararg_buffer9 = sp + 488|0;
 $vararg_buffer7 = sp + 480|0;
 $vararg_buffer5 = sp + 472|0;
 $vararg_buffer3 = sp + 464|0;
 $vararg_buffer1 = sp + 456|0;
 $vararg_buffer = sp + 448|0;
 $file = sp + 192|0;
 $demolumpname = sp + 640|0;
 $name90 = sp;
 _I_AtExit(125,0);
 _I_PrintBanner(133766);
 (_printf(133783,$vararg_buffer)|0);
 _Z_Init();
 $call1 = (_M_CheckParm(133829)|0);
 HEAP32[99380] = $call1;
 $call2 = (_M_CheckParm(133841)|0);
 HEAP32[99381] = $call2;
 $call3 = (_M_CheckParm(133850)|0);
 HEAP32[99382] = $call3;
 $call4 = (_M_CheckParm(133856)|0);
 HEAP32[99383] = $call4;
 $0 = HEAP32[99383]|0;
 _I_DisplayFPSDots($0);
 $call5 = (_M_CheckParm(133865)|0);
 $tobool = ($call5|0)!=(0);
 if ($tobool) {
  HEAP32[99430] = 1;
 }
 $call6 = (_M_CheckParm(133877)|0);
 $tobool7 = ($call6|0)!=(0);
 if ($tobool7) {
  HEAP32[99430] = 2;
 }
 $1 = HEAP32[99383]|0;
 $tobool10 = ($1|0)!=(0);
 if ($tobool10) {
  (_printf(133887,$vararg_buffer1)|0);
 }
 _M_SetConfigDir(0);
 $call14 = (_M_CheckParm(133909)|0);
 $p = $call14;
 $tobool15 = ($call14|0)!=(0);
 if ($tobool15) {
  $scale = 200;
  $2 = $p;
  $3 = HEAP32[99713]|0;
  $sub = (($3) - 1)|0;
  $cmp = ($2|0)<($sub|0);
  if ($cmp) {
   $4 = HEAP32[99714]|0;
   $5 = $p;
   $add = (($5) + 1)|0;
   $arrayidx = (($4) + ($add<<2)|0);
   $6 = HEAP32[$arrayidx>>2]|0;
   $call18 = (_atoi($6)|0);
   $scale = $call18;
  }
  $7 = $scale;
  $cmp20 = ($7|0)<(10);
  if ($cmp20) {
   $scale = 10;
  }
  $8 = $scale;
  $cmp23 = ($8|0)>(400);
  if ($cmp23) {
   $scale = 400;
  }
  $9 = $scale;
  HEAP32[$vararg_buffer3>>2] = $9;
  (_printf(133916,$vararg_buffer3)|0);
  $10 = HEAP32[32182]|0;
  $11 = $scale;
  $mul = Math_imul($10, $11)|0;
  $div = (($mul|0) / 100)&-1;
  HEAP32[32182] = $div;
  $12 = HEAP32[(128732)>>2]|0;
  $13 = $scale;
  $mul27 = Math_imul($12, $13)|0;
  $div28 = (($mul27|0) / 100)&-1;
  HEAP32[(128732)>>2] = $div28;
  $14 = HEAP32[32184]|0;
  $15 = $scale;
  $mul29 = Math_imul($14, $15)|0;
  $div30 = (($mul29|0) / 100)&-1;
  HEAP32[32184] = $div30;
  $16 = HEAP32[(128740)>>2]|0;
  $17 = $scale;
  $mul31 = Math_imul($16, $17)|0;
  $div32 = (($mul31|0) / 100)&-1;
  HEAP32[(128740)>>2] = $div32;
 }
 (_printf(133935,$vararg_buffer5)|0);
 _V_Init();
 (_printf(133962,$vararg_buffer7)|0);
 _M_SetConfigFilenames(134001,134013);
 _D_BindVariables();
 _M_LoadDefaults();
 _I_AtExit(126,0);
 $call36 = (_D_FindIWAD(63,397424)|0);
 HEAP32[99384] = $call36;
 $18 = HEAP32[99384]|0;
 $cmp37 = ($18|0)==(0|0);
 if ($cmp37) {
  _I_Error(134033,$vararg_buffer9);
 }
 HEAP32[99358] = 0;
 (_printf(134145,$vararg_buffer11)|0);
 $19 = HEAP32[99384]|0;
 (_D_AddFile($19)|0);
 _W_CheckCorrectIWAD(0);
 _D_IdentifyVersion();
 _InitGameVersion();
 $call42 = (_W_CheckNumForName(134169)|0);
 $cmp43 = ($call42|0)>=(0);
 if ($cmp43) {
  (_printf(134178,$vararg_buffer13)|0);
  HEAP32[99376] = 1;
 }
 $call47 = (_W_ParseCommandLine()|0);
 HEAP32[99358] = $call47;
 $call48 = (_M_CheckParmWithArgs(134221,1)|0);
 $p = $call48;
 $20 = $p;
 $tobool49 = ($20|0)!=(0);
 if (!($tobool49)) {
  $call51 = (_M_CheckParmWithArgs(134231,1)|0);
  $p = $call51;
 }
 $21 = $p;
 $tobool53 = ($21|0)!=(0);
 if ($tobool53) {
  $22 = HEAP32[99714]|0;
  $23 = $p;
  $add55 = (($23) + 1)|0;
  $arrayidx56 = (($22) + ($add55<<2)|0);
  $24 = HEAP32[$arrayidx56>>2]|0;
  $call57 = (_M_StringEndsWith($24,134241)|0);
  $tobool58 = ($call57|0)!=(0);
  $25 = HEAP32[99714]|0;
  $26 = $p;
  $add60 = (($26) + 1)|0;
  $arrayidx61 = (($25) + ($add60<<2)|0);
  $27 = HEAP32[$arrayidx61>>2]|0;
  if ($tobool58) {
   (_M_StringCopy($file,$27,256)|0);
  } else {
   HEAP32[$vararg_buffer15>>2] = $27;
   (_snprintf($file,256,144362,$vararg_buffer15)|0);
  }
  $call69 = (_D_AddFile($file)|0);
  $tobool70 = ($call69|0)!=(0);
  if ($tobool70) {
   $28 = HEAP32[100199]|0;
   $29 = HEAP32[100198]|0;
   $sub73 = (($29) - 1)|0;
   $arrayidx74 = (($28) + (($sub73*28)|0)|0);
   (_M_StringCopy($demolumpname,$arrayidx74,9)|0);
  } else {
   $30 = HEAP32[99714]|0;
   $31 = $p;
   $add79 = (($31) + 1)|0;
   $arrayidx80 = (($30) + ($add79<<2)|0);
   $32 = HEAP32[$arrayidx80>>2]|0;
   (_M_StringCopy($demolumpname,$32,9)|0);
  }
  HEAP32[$vararg_buffer18>>2] = $file;
  (_printf(134246,$vararg_buffer18)|0);
 }
 _W_GenerateHashTable();
 _D_SetGameDescription();
 $33 = HEAP32[99356]|0;
 $call86 = (_D_SaveGameIWADName($33)|0);
 $call87 = (_M_GetSaveGameDir($call86)|0);
 HEAP32[99385] = $call87;
 $34 = HEAP32[99358]|0;
 $tobool88 = ($34|0)!=(0);
 L42: do {
  if ($tobool88) {
   _memcpy(($name90|0),(1152|0),184)|0;
   $35 = HEAP32[32168]|0;
   $cmp91 = ($35|0)==(0);
   if ($cmp91) {
    _I_Error(134264,$vararg_buffer21);
   }
   $36 = HEAP32[32168]|0;
   $cmp94 = ($36|0)==(1);
   if ($cmp94) {
    $i = 0;
    while(1) {
     $37 = $i;
     $cmp96 = ($37|0)<(23);
     if (!($cmp96)) {
      break L42;
     }
     $38 = $i;
     $arrayidx97 = (($name90) + ($38<<3)|0);
     $call99 = (_W_CheckNumForName($arrayidx97)|0);
     $cmp100 = ($call99|0)<(0);
     if ($cmp100) {
      _I_Error(134320,$vararg_buffer23);
     }
     $39 = $i;
     $inc = (($39) + 1)|0;
     $i = $inc;
    }
   }
  }
 } while(0);
 $call105 = (_W_CheckNumForName(134357)|0);
 $cmp106 = ($call105|0)>=(0);
 if ($cmp106) {
  label = 40;
 } else {
  $call107 = (_W_CheckNumForName(134366)|0);
  $cmp108 = ($call107|0)>=(0);
  if ($cmp108) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  _I_PrintDivider();
  (_printf(134373,$vararg_buffer25)|0);
 }
 $40 = HEAP32[99357]|0;
 _I_PrintStartupBanner($40);
 _PrintDehackedBanners();
 $call112 = (_W_CheckNumForName(135270)|0);
 $cmp113 = ($call112|0)>=(0);
 if ($cmp113) {
  $call114 = (_W_CheckNumForName(131930)|0);
  $cmp115 = ($call114|0)<(0);
  if ($cmp115) {
   (_printf(134525,$vararg_buffer27)|0);
   _I_PrintDivider();
  }
 }
 (_printf(134750,$vararg_buffer29)|0);
 _I_CheckIsScreensaver();
 _I_InitTimer();
 _I_InitJoystick();
 _I_InitSound(1);
 _I_InitMusic();
 _D_ConnectNetGame();
 HEAP32[99386] = 2;
 HEAP32[99387] = 1;
 HEAP32[99388] = 1;
 HEAP32[99389] = 0;
 $call120 = (_M_CheckParmWithArgs(134785,1)|0);
 $p = $call120;
 $41 = $p;
 $tobool121 = ($41|0)!=(0);
 if ($tobool121) {
  $42 = HEAP32[99714]|0;
  $43 = $p;
  $add123 = (($43) + 1)|0;
  $arrayidx124 = (($42) + ($add123<<2)|0);
  $44 = HEAP32[$arrayidx124>>2]|0;
  $45 = HEAP8[$44>>0]|0;
  $conv = $45 << 24 >> 24;
  $sub126 = (($conv) - 49)|0;
  HEAP32[99386] = $sub126;
  HEAP32[99389] = 1;
 }
 $call128 = (_M_CheckParmWithArgs(134792,1)|0);
 $p = $call128;
 $46 = $p;
 $tobool129 = ($46|0)!=(0);
 if ($tobool129) {
  $47 = HEAP32[99714]|0;
  $48 = $p;
  $add131 = (($48) + 1)|0;
  $arrayidx132 = (($47) + ($add131<<2)|0);
  $49 = HEAP32[$arrayidx132>>2]|0;
  $50 = HEAP8[$49>>0]|0;
  $conv134 = $50 << 24 >> 24;
  $sub135 = (($conv134) - 48)|0;
  HEAP32[99387] = $sub135;
  HEAP32[99388] = 1;
  HEAP32[99389] = 1;
 }
 HEAP32[99506] = 0;
 $call137 = (_M_CheckParmWithArgs(134801,1)|0);
 $p = $call137;
 $51 = $p;
 $tobool138 = ($51|0)!=(0);
 if ($tobool138) {
  $52 = HEAP32[99714]|0;
  $53 = $p;
  $add140 = (($53) + 1)|0;
  $arrayidx141 = (($52) + ($add140<<2)|0);
  $54 = HEAP32[$arrayidx141>>2]|0;
  $call142 = (_atoi($54)|0);
  HEAP32[99506] = $call142;
 }
 $call144 = (_M_CheckParm(135370)|0);
 $p = $call144;
 $55 = $p;
 $tobool145 = ($55|0)!=(0);
 if ($tobool145) {
  HEAP32[99506] = 20;
 }
 $call148 = (_M_CheckParmWithArgs(134808,1)|0);
 $p = $call148;
 $56 = $p;
 $tobool149 = ($56|0)!=(0);
 if ($tobool149) {
  $57 = HEAP32[32168]|0;
  $cmp151 = ($57|0)==(2);
  $58 = HEAP32[99714]|0;
  $59 = $p;
  $add154 = (($59) + 1)|0;
  $arrayidx155 = (($58) + ($add154<<2)|0);
  $60 = HEAP32[$arrayidx155>>2]|0;
  do {
   if ($cmp151) {
    $call156 = (_atoi($60)|0);
    HEAP32[99388] = $call156;
   } else {
    $61 = HEAP8[$60>>0]|0;
    $conv161 = $61 << 24 >> 24;
    $sub162 = (($conv161) - 48)|0;
    HEAP32[99387] = $sub162;
    $62 = $p;
    $add163 = (($62) + 2)|0;
    $63 = HEAP32[99713]|0;
    $cmp164 = ($add163|0)<($63|0);
    if ($cmp164) {
     $64 = HEAP32[99714]|0;
     $65 = $p;
     $add167 = (($65) + 2)|0;
     $arrayidx168 = (($64) + ($add167<<2)|0);
     $66 = HEAP32[$arrayidx168>>2]|0;
     $67 = HEAP8[$66>>0]|0;
     $conv170 = $67 << 24 >> 24;
     $sub171 = (($conv170) - 48)|0;
     HEAP32[99388] = $sub171;
     break;
    } else {
     HEAP32[99388] = 1;
     break;
    }
   }
  } while(0);
  HEAP32[99389] = 1;
 }
 $call176 = (_M_CheckParm(134814)|0);
 $p = $call176;
 $68 = $p;
 $cmp177 = ($68|0)>(0);
 if ($cmp177) {
  HEAP32[99387] = 1;
  HEAP32[99388] = 1;
  HEAP32[99389] = 1;
  HEAP32[99414] = 1;
 }
 $call181 = (_M_CheckParmWithArgs(134828,1)|0);
 $p = $call181;
 $69 = $p;
 $tobool182 = ($69|0)!=(0);
 if ($tobool182) {
  $70 = HEAP32[99714]|0;
  $71 = $p;
  $add184 = (($71) + 1)|0;
  $arrayidx185 = (($70) + ($add184<<2)|0);
  $72 = HEAP32[$arrayidx185>>2]|0;
  $call186 = (_atoi($72)|0);
  HEAP32[99390] = $call186;
 } else {
  HEAP32[99390] = -1;
 }
 (_printf(134838,$vararg_buffer31)|0);
 _M_Init();
 (_printf(134872,$vararg_buffer33)|0);
 _R_Init();
 (_printf(134908,$vararg_buffer35)|0);
 _P_Init();
 (_printf(134939,$vararg_buffer37)|0);
 $73 = HEAP32[32469]|0;
 $mul193 = $73<<3;
 $74 = HEAP32[32470]|0;
 $mul194 = $74<<3;
 _S_Init($mul193,$mul194);
 (_printf(134966,$vararg_buffer39)|0);
 _D_CheckNetGame();
 _PrintGameVersion();
 (_printf(135013,$vararg_buffer41)|0);
 _HU_Init();
 (_printf(135052,$vararg_buffer43)|0);
 _ST_Init();
 $75 = HEAP32[32168]|0;
 $cmp198 = ($75|0)==(2);
 do {
  if ($cmp198) {
   $call201 = (_W_CheckNumForName(135079)|0);
   $cmp202 = ($call201|0)<(0);
   if (!($cmp202)) {
    break;
   }
   HEAP32[99374] = 1;
  }
 } while(0);
 $call206 = (_M_CheckParmWithArgs(157181,1)|0);
 $tobool207 = ($call206|0)!=(0);
 if ($tobool207) {
  _I_AtExit(127,1);
  (_printf(135085,$vararg_buffer45)|0);
 }
 $call211 = (_M_CheckParmWithArgs(135262,1)|0);
 $p = $call211;
 $76 = $p;
 $tobool212 = ($76|0)!=(0);
 if ($tobool212) {
  $77 = HEAP32[99714]|0;
  $78 = $p;
  $add214 = (($78) + 1)|0;
  $arrayidx215 = (($77) + ($add214<<2)|0);
  $79 = HEAP32[$arrayidx215>>2]|0;
  _G_RecordDemo($79);
  HEAP32[99389] = 1;
 }
 $call217 = (_M_CheckParmWithArgs(134221,1)|0);
 $p = $call217;
 $80 = $p;
 $tobool218 = ($80|0)!=(0);
 if ($tobool218) {
  HEAP32[99429] = 1;
  _G_DeferedPlayDemo($demolumpname);
  _D_DoomLoop();
  STACKTOP = sp;return;
 }
 $call222 = (_M_CheckParmWithArgs(134231,1)|0);
 $p = $call222;
 $81 = $p;
 $tobool223 = ($81|0)!=(0);
 if ($tobool223) {
  _G_TimeDemo($demolumpname);
  _D_DoomLoop();
  STACKTOP = sp;return;
 }
 $82 = HEAP32[99390]|0;
 $cmp227 = ($82|0)>=(0);
 if ($cmp227) {
  $83 = HEAP32[99390]|0;
  $call231 = (_P_SaveGameFile($83)|0);
  (_M_StringCopy($file,$call231,256)|0);
  _G_LoadGame($file);
 }
 $84 = HEAP32[99427]|0;
 $cmp235 = ($84|0)!=(3);
 do {
  if ($cmp235) {
   $85 = HEAP32[99389]|0;
   $tobool238 = ($85|0)!=(0);
   $86 = HEAP32[99433]|0;
   $tobool240 = ($86|0)!=(0);
   $or$cond = $tobool238 | $tobool240;
   if ($or$cond) {
    $87 = HEAP32[99386]|0;
    $88 = HEAP32[99387]|0;
    $89 = HEAP32[99388]|0;
    _G_InitNew($87,$88,$89);
    break;
   } else {
    _D_StartTitle();
    break;
   }
  }
 } while(0);
 _D_DoomLoop();
 STACKTOP = sp;return;
}
function _D_Endoom() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call5 = 0, $cmp = 0, $endoom = 0, $or$cond = 0, $or$cond$not = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[32171]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99373]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool & $tobool1;
 $or$cond$not = $or$cond ^ 1;
 $tobool3 = (0)!=(0);
 $or$cond1 = $or$cond$not | $tobool3;
 if ($or$cond1) {
  STACKTOP = sp;return;
 }
 $call = (_M_CheckParm(134814)|0);
 $cmp = ($call|0)>(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $call5 = (_W_CacheLumpName(135193,1)|0);
 $endoom = $call5;
 $2 = $endoom;
 _I_Endoom($2);
 STACKTOP = sp;return;
}
function _D_AddFile($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $call1 = 0, $cmp = 0, $conv = 0, $filename$addr = 0, $handle = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $filename$addr = $filename;
 $0 = $filename$addr;
 HEAP32[$vararg_buffer>>2] = $0;
 (_printf(158276,$vararg_buffer)|0);
 $1 = $filename$addr;
 $call1 = (_W_AddFile($1)|0);
 $handle = $call1;
 $2 = $handle;
 $cmp = ($2|0)!=(0|0);
 $conv = $cmp&1;
 STACKTOP = sp;return ($conv|0);
}
function _InitGameVersion() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add25 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx13 = 0;
 var $arrayidx17 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx26 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $call = 0, $call3 = 0, $cmdline = 0, $cmdline18 = 0, $cmp = 0, $cmp15 = 0, $cmp28 = 0, $cmp31 = 0, $cmp34 = 0, $cmp35 = 0, $cmp38 = 0, $cmp41 = 0, $cmp43 = 0, $cmp53 = 0;
 var $cmp54 = 0, $cmp57 = 0, $cmp59 = 0, $cmp61 = 0, $cmp63 = 0, $cmp9 = 0, $i = 0, $inc = 0, $inc23 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $p = 0, $tobool = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr6 = 0;
 var $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_M_CheckParmWithArgs(135118,1)|0);
 $p = $call;
 $0 = $p;
 $tobool = ($0|0)!=(0);
 do {
  if ($tobool) {
   $i = 0;
   while(1) {
    $1 = $i;
    $arrayidx = (1024 + (($1*12)|0)|0);
    $2 = HEAP32[$arrayidx>>2]|0;
    $cmp = ($2|0)!=(0|0);
    if (!($cmp)) {
     break;
    }
    $3 = HEAP32[99714]|0;
    $4 = $p;
    $add = (($4) + 1)|0;
    $arrayidx1 = (($3) + ($add<<2)|0);
    $5 = HEAP32[$arrayidx1>>2]|0;
    $6 = $i;
    $arrayidx2 = (1024 + (($6*12)|0)|0);
    $cmdline = ((($arrayidx2)) + 4|0);
    $7 = HEAP32[$cmdline>>2]|0;
    $call3 = (_strcmp($5,$7)|0);
    $tobool4 = ($call3|0)!=(0);
    $8 = $i;
    if (!($tobool4)) {
     label = 5;
     break;
    }
    $inc = (($8) + 1)|0;
    $i = $inc;
   }
   if ((label|0) == 5) {
    $arrayidx6 = (1024 + (($8*12)|0)|0);
    $version = ((($arrayidx6)) + 8|0);
    $9 = HEAP32[$version>>2]|0;
    HEAP32[32169] = $9;
   }
   $10 = $i;
   $arrayidx7 = (1024 + (($10*12)|0)|0);
   $11 = HEAP32[$arrayidx7>>2]|0;
   $cmp9 = ($11|0)==(0|0);
   if ($cmp9) {
    (_printf(135131,$vararg_buffer)|0);
    $i = 0;
    while(1) {
     $12 = $i;
     $arrayidx13 = (1024 + (($12*12)|0)|0);
     $13 = HEAP32[$arrayidx13>>2]|0;
     $cmp15 = ($13|0)!=(0|0);
     if (!($cmp15)) {
      break;
     }
     $14 = $i;
     $arrayidx17 = (1024 + (($14*12)|0)|0);
     $cmdline18 = ((($arrayidx17)) + 4|0);
     $15 = HEAP32[$cmdline18>>2]|0;
     $16 = $i;
     $arrayidx19 = (1024 + (($16*12)|0)|0);
     $17 = HEAP32[$arrayidx19>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $15;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $17;
     (_printf(135157,$vararg_buffer4)|0);
     $18 = $i;
     $inc23 = (($18) + 1)|0;
     $i = $inc23;
    }
    $19 = HEAP32[99714]|0;
    $20 = $p;
    $add25 = (($20) + 1)|0;
    $arrayidx26 = (($19) + ($add25<<2)|0);
    $21 = HEAP32[$arrayidx26>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $21;
    _I_Error(135167,$vararg_buffer7);
   }
  } else {
   $22 = HEAP32[99356]|0;
   $cmp28 = ($22|0)==(4);
   if ($cmp28) {
    HEAP32[32169] = 9;
    break;
   }
   $23 = HEAP32[99356]|0;
   $cmp31 = ($23|0)==(5);
   if ($cmp31) {
    HEAP32[32169] = 5;
    break;
   }
   $24 = HEAP32[32168]|0;
   $cmp34 = ($24|0)==(0);
   $25 = HEAP32[32168]|0;
   $cmp35 = ($25|0)==(1);
   $or$cond = $cmp34 | $cmp35;
   if ($or$cond) {
    HEAP32[32169] = 4;
    break;
   }
   $26 = HEAP32[32168]|0;
   $cmp38 = ($26|0)==(3);
   if ($cmp38) {
    HEAP32[32169] = 6;
    break;
   }
   $27 = HEAP32[32168]|0;
   $cmp41 = ($27|0)==(2);
   if ($cmp41) {
    $28 = HEAP32[99356]|0;
    $cmp43 = ($28|0)==(1);
    if ($cmp43) {
     HEAP32[32169] = 4;
     break;
    } else {
     HEAP32[32169] = 7;
     break;
    }
   }
  }
 } while(0);
 $29 = HEAP32[32169]|0;
 $cmp53 = ($29>>>0)<(6);
 $30 = HEAP32[32168]|0;
 $cmp54 = ($30|0)==(3);
 $or$cond1 = $cmp53 & $cmp54;
 if ($or$cond1) {
  HEAP32[32168] = 1;
 }
 $31 = HEAP32[32169]|0;
 $cmp57 = ($31>>>0)<(7);
 $32 = HEAP32[32168]|0;
 $cmp59 = ($32|0)==(2);
 $or$cond2 = $cmp57 & $cmp59;
 if (!($or$cond2)) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[99356]|0;
 $cmp61 = ($33|0)==(2);
 $34 = HEAP32[99356]|0;
 $cmp63 = ($34|0)==(3);
 $or$cond3 = $cmp61 | $cmp63;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 HEAP32[99356] = 1;
 STACKTOP = sp;return;
}
function _D_GameMissionString($mission) {
 $mission = $mission|0;
 var $0 = 0, $1 = 0, $mission$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mission$addr = $mission;
 $0 = $mission$addr;
 do {
  switch ($0|0) {
  case 8:  {
   $retval = 135242;
   break;
  }
  case 0:  {
   $retval = 156975;
   break;
  }
  case 1:  {
   $retval = 157026;
   break;
  }
  case 2:  {
   $retval = 135205;
   break;
  }
  case 3:  {
   $retval = 135209;
   break;
  }
  case 5:  {
   $retval = 135218;
   break;
  }
  case 4:  {
   $retval = 135223;
   break;
  }
  case 6:  {
   $retval = 135228;
   break;
  }
  case 7:  {
   $retval = 135236;
   break;
  }
  default: {
   $retval = 135200;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function _D_ConnectNetGame() {
 var $call = 0, $call1 = 0, $cmp = 0, $connect_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $connect_data = sp;
 _InitConnectData($connect_data);
 $call = (_D_InitNetGame($connect_data)|0);
 HEAP32[99433] = $call;
 $call1 = (_M_CheckParm(143934)|0);
 $cmp = ($call1|0)>(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 HEAP32[99433] = 1;
 STACKTOP = sp;return;
}
function _InitConnectData($connect_data) {
 $connect_data = $connect_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call11 = 0, $call2 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0;
 var $cmp3 = 0, $cmp8 = 0, $connect_data$addr = 0, $conv = 0, $drone = 0, $drone1 = 0, $drone5 = 0, $gamemission = 0, $is_freedoom = 0, $land$ext = 0, $lowres_turn = 0, $max_players = 0, $wad_sha1sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $connect_data$addr = $connect_data;
 $0 = $connect_data$addr;
 $max_players = ((($0)) + 16|0);
 HEAP32[$max_players>>2] = 4;
 $1 = $connect_data$addr;
 $drone = ((($1)) + 12|0);
 HEAP32[$drone>>2] = 0;
 $call = (_M_CheckParm(135249)|0);
 $cmp = ($call|0)>(0);
 if ($cmp) {
  HEAP32[99983] = 1073741824;
  $2 = $connect_data$addr;
  $drone1 = ((($2)) + 12|0);
  HEAP32[$drone1>>2] = 1;
 }
 $call2 = (_M_CheckParm(135255)|0);
 $cmp3 = ($call2|0)>(0);
 if ($cmp3) {
  HEAP32[99983] = -1073741824;
  $3 = $connect_data$addr;
  $drone5 = ((($3)) + 12|0);
  HEAP32[$drone5>>2] = 1;
 }
 $4 = HEAP32[32168]|0;
 $5 = $connect_data$addr;
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[99356]|0;
 $7 = $connect_data$addr;
 $gamemission = ((($7)) + 4|0);
 HEAP32[$gamemission>>2] = $6;
 $call7 = (_M_CheckParm(135262)|0);
 $cmp8 = ($call7|0)>(0);
 if ($cmp8) {
  $call9 = (_M_CheckParm(144378)|0);
  $cmp10 = ($call9|0)==(0);
  $8 = $cmp10;
 } else {
  $8 = 0;
 }
 $land$ext = $8&1;
 $9 = $connect_data$addr;
 $lowres_turn = ((($9)) + 8|0);
 HEAP32[$lowres_turn>>2] = $land$ext;
 $10 = $connect_data$addr;
 $wad_sha1sum = ((($10)) + 24|0);
 _W_Checksum($wad_sha1sum);
 $call11 = (_W_CheckNumForName(135270)|0);
 $cmp12 = ($call11|0)>=(0);
 $conv = $cmp12&1;
 $11 = $connect_data$addr;
 $is_freedoom = ((($11)) + 20|0);
 HEAP32[$is_freedoom>>2] = $conv;
 STACKTOP = sp;return;
}
function _D_CheckNetGame() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call7 = 0, $cmp = 0, $cmp12 = 0, $cmp5 = 0, $num_players = 0, $num_players1 = 0;
 var $or$cond = 0, $settings = 0, $tobool = 0, $tobool3 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $settings = sp + 60|0;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  HEAP32[99389] = 1;
 }
 _D_RegisterLoopCallbacks(128708);
 _SaveGameSettings($settings);
 _D_StartNetGame($settings,0);
 _LoadGameSettings($settings);
 $1 = HEAP32[99386]|0;
 $2 = HEAP32[99430]|0;
 $3 = HEAP32[99388]|0;
 $4 = HEAP32[99387]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $4;
 (_printf(135279,$vararg_buffer)|0);
 $5 = HEAP32[99415]|0;
 $add = (($5) + 1)|0;
 $num_players = ((($settings)) + 60|0);
 $6 = HEAP32[$num_players>>2]|0;
 $num_players1 = ((($settings)) + 60|0);
 $7 = HEAP32[$num_players1>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $add;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $6;
 $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $7;
 (_printf(135342,$vararg_buffer4)|0);
 $8 = HEAP32[99506]|0;
 $cmp = ($8|0)>(0);
 $9 = HEAP32[99430]|0;
 $tobool3 = ($9|0)!=(0);
 $or$cond = $cmp & $tobool3;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[99506]|0;
 $cmp5 = ($10|0)==(20);
 if ($cmp5) {
  $call7 = (_M_CheckParm(135370)|0);
  $tobool8 = ($call7|0)!=(0);
  if ($tobool8) {
   (_printf(135375,$vararg_buffer9)|0);
   STACKTOP = sp;return;
  }
 }
 $11 = HEAP32[99506]|0;
 HEAP32[$vararg_buffer11>>2] = $11;
 (_printf(135432,$vararg_buffer11)|0);
 $12 = HEAP32[99506]|0;
 $cmp12 = ($12|0)>(1);
 if ($cmp12) {
  (_printf(135464,$vararg_buffer14)|0);
 }
 (_printf(135466,$vararg_buffer16)|0);
 STACKTOP = sp;return;
}
function _SaveGameSettings($settings) {
 $settings = $settings|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $deathmatch = 0, $episode = 0, $fast_monsters = 0, $gameversion = 0, $land$ext = 0, $loadgame = 0, $lowres_turn = 0, $map = 0, $nomonsters = 0, $respawn_monsters = 0, $settings$addr = 0, $skill = 0, $timelimit = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $settings$addr = $settings;
 $0 = HEAP32[99430]|0;
 $1 = $settings$addr;
 $deathmatch = ((($1)) + 8|0);
 HEAP32[$deathmatch>>2] = $0;
 $2 = HEAP32[99387]|0;
 $3 = $settings$addr;
 $episode = ((($3)) + 12|0);
 HEAP32[$episode>>2] = $2;
 $4 = HEAP32[99388]|0;
 $5 = $settings$addr;
 $map = ((($5)) + 28|0);
 HEAP32[$map>>2] = $4;
 $6 = HEAP32[99386]|0;
 $7 = $settings$addr;
 $skill = ((($7)) + 32|0);
 HEAP32[$skill>>2] = $6;
 $8 = HEAP32[99390]|0;
 $9 = $settings$addr;
 $loadgame = ((($9)) + 52|0);
 HEAP32[$loadgame>>2] = $8;
 $10 = HEAP32[32169]|0;
 $11 = $settings$addr;
 $gameversion = ((($11)) + 36|0);
 HEAP32[$gameversion>>2] = $10;
 $12 = HEAP32[99380]|0;
 $13 = $settings$addr;
 $nomonsters = ((($13)) + 16|0);
 HEAP32[$nomonsters>>2] = $12;
 $14 = HEAP32[99382]|0;
 $15 = $settings$addr;
 $fast_monsters = ((($15)) + 20|0);
 HEAP32[$fast_monsters>>2] = $14;
 $16 = HEAP32[99381]|0;
 $17 = $settings$addr;
 $respawn_monsters = ((($17)) + 24|0);
 HEAP32[$respawn_monsters>>2] = $16;
 $18 = HEAP32[99506]|0;
 $19 = $settings$addr;
 $timelimit = ((($19)) + 48|0);
 HEAP32[$timelimit>>2] = $18;
 $call = (_M_CheckParm(135262)|0);
 $cmp = ($call|0)>(0);
 if (!($cmp)) {
  $20 = 0;
  $land$ext = $20&1;
  $21 = $settings$addr;
  $lowres_turn = ((($21)) + 40|0);
  HEAP32[$lowres_turn>>2] = $land$ext;
  STACKTOP = sp;return;
 }
 $call1 = (_M_CheckParm(144378)|0);
 $cmp2 = ($call1|0)==(0);
 $20 = $cmp2;
 $land$ext = $20&1;
 $21 = $settings$addr;
 $lowres_turn = ((($21)) + 40|0);
 HEAP32[$lowres_turn>>2] = $land$ext;
 STACKTOP = sp;return;
}
function _LoadGameSettings($settings) {
 $settings = $settings|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $consoleplayer = 0, $conv = 0, $deathmatch = 0, $episode = 0, $fast_monsters = 0, $i = 0, $inc = 0, $loadgame = 0;
 var $lowres_turn = 0, $map = 0, $nomonsters = 0, $num_players = 0, $respawn_monsters = 0, $settings$addr = 0, $skill = 0, $timelimit = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $settings$addr = $settings;
 $0 = $settings$addr;
 $deathmatch = ((($0)) + 8|0);
 $1 = HEAP32[$deathmatch>>2]|0;
 HEAP32[99430] = $1;
 $2 = $settings$addr;
 $episode = ((($2)) + 12|0);
 $3 = HEAP32[$episode>>2]|0;
 HEAP32[99387] = $3;
 $4 = $settings$addr;
 $map = ((($4)) + 28|0);
 $5 = HEAP32[$map>>2]|0;
 HEAP32[99388] = $5;
 $6 = $settings$addr;
 $skill = ((($6)) + 32|0);
 $7 = HEAP32[$skill>>2]|0;
 HEAP32[99386] = $7;
 $8 = $settings$addr;
 $loadgame = ((($8)) + 52|0);
 $9 = HEAP32[$loadgame>>2]|0;
 HEAP32[99390] = $9;
 $10 = $settings$addr;
 $lowres_turn = ((($10)) + 40|0);
 $11 = HEAP32[$lowres_turn>>2]|0;
 HEAP32[99422] = $11;
 $12 = $settings$addr;
 $nomonsters = ((($12)) + 16|0);
 $13 = HEAP32[$nomonsters>>2]|0;
 HEAP32[99380] = $13;
 $14 = $settings$addr;
 $fast_monsters = ((($14)) + 20|0);
 $15 = HEAP32[$fast_monsters>>2]|0;
 HEAP32[99382] = $15;
 $16 = $settings$addr;
 $respawn_monsters = ((($16)) + 24|0);
 $17 = HEAP32[$respawn_monsters>>2]|0;
 HEAP32[99381] = $17;
 $18 = $settings$addr;
 $timelimit = ((($18)) + 48|0);
 $19 = HEAP32[$timelimit>>2]|0;
 HEAP32[99506] = $19;
 $20 = $settings$addr;
 $consoleplayer = ((($20)) + 64|0);
 $21 = HEAP32[$consoleplayer>>2]|0;
 HEAP32[99415] = $21;
 $22 = HEAP32[99422]|0;
 $tobool = ($22|0)!=(0);
 if ($tobool) {
  (_printf(135469,$vararg_buffer)|0);
 }
 $i = 0;
 while(1) {
  $23 = $i;
  $cmp = ($23>>>0)<(4);
  if (!($cmp)) {
   break;
  }
  $24 = $i;
  $25 = $settings$addr;
  $num_players = ((($25)) + 60|0);
  $26 = HEAP32[$num_players>>2]|0;
  $cmp1 = ($24>>>0)<($26>>>0);
  $conv = $cmp1&1;
  $27 = $i;
  $arrayidx = (183040 + ($27<<2)|0);
  HEAP32[$arrayidx>>2] = $conv;
  $28 = $i;
  $inc = (($28) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _RunTic($cmds,$ingame) {
 $cmds = $cmds|0;
 $ingame = $ingame|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx5 = 0, $cmds$addr = 0, $cmp = 0, $i = 0, $inc = 0, $ingame$addr = 0, $tobool = 0;
 var $tobool1 = 0, $tobool4 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmds$addr = $cmds;
 $ingame$addr = $ingame;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = HEAP32[99431]|0;
  $tobool = ($1|0)!=(0);
  if (!($tobool)) {
   $2 = $i;
   $arrayidx = (183040 + ($2<<2)|0);
   $3 = HEAP32[$arrayidx>>2]|0;
   $tobool1 = ($3|0)!=(0);
   if ($tobool1) {
    $4 = $ingame$addr;
    $5 = $i;
    $arrayidx3 = (($4) + ($5<<2)|0);
    $6 = HEAP32[$arrayidx3>>2]|0;
    $tobool4 = ($6|0)!=(0);
    if (!($tobool4)) {
     $7 = $i;
     $arrayidx5 = (183056 + (($7*288)|0)|0);
     _PlayerQuitGame($arrayidx5);
    }
   }
  }
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 $9 = $cmds$addr;
 HEAP32[99396] = $9;
 $10 = HEAP32[99375]|0;
 $tobool6 = ($10|0)!=(0);
 if (!($tobool6)) {
  _G_Ticker();
  STACKTOP = sp;return;
 }
 _D_DoAdvanceDemo();
 _G_Ticker();
 STACKTOP = sp;return;
}
function _PlayerQuitGame($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $arrayidx = 0, $arrayidx2 = 0, $conv = 0, $conv1 = 0, $message = 0, $player$addr = 0, $player_num = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (183056))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 288)&-1;
 $player_num = $sub$ptr$div;
 (_M_StringCopy(182432,135576,80)|0);
 $1 = $player_num;
 $2 = HEAP8[(182439)>>0]|0;
 $conv = $2 << 24 >> 24;
 $add = (($conv) + ($1))|0;
 $conv1 = $add&255;
 HEAP8[(182439)>>0] = $conv1;
 $3 = $player_num;
 $arrayidx = (183040 + ($3<<2)|0);
 HEAP32[$arrayidx>>2] = 0;
 $4 = HEAP32[99415]|0;
 $arrayidx2 = (183056 + (($4*288)|0)|0);
 $message = ((($arrayidx2)) + 224|0);
 HEAP32[$message>>2] = 182432;
 $5 = HEAP32[99432]|0;
 $tobool = ($5|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 (_G_CheckDemoStatus()|0);
 STACKTOP = sp;return;
}
function _F_StartFinale() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $background = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp15 = 0, $cmp23 = 0, $cmp25 = 0, $cmp28 = 0, $cmp35 = 0;
 var $cmp36 = 0, $cmp39 = 0, $cmp6 = 0, $cmp7 = 0, $cmp8 = 0, $cmp9 = 0, $cond = 0, $cond19 = 0, $cond21 = 0, $cond32 = 0, $cond34 = 0, $cond5 = 0, $episode = 0, $i = 0, $inc = 0, $level = 0, $level38 = 0, $screen = 0, $text = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[99427] = 0;
 HEAP32[99416] = 2;
 HEAP32[99491] = 0;
 HEAP32[99316] = 0;
 $0 = HEAP32[99356]|0;
 $cmp = ($0|0)==(4);
 if ($cmp) {
  $cond5 = 0;
 } else {
  $1 = HEAP32[99356]|0;
  $cmp1 = ($1|0)==(5);
  $2 = HEAP32[99356]|0;
  $cond = $cmp1 ? 1 : $2;
  $cond5 = $cond;
 }
 $cmp6 = ($cond5|0)==(0);
 if ($cmp6) {
  _S_ChangeMusic(31,1);
 } else {
  _S_ChangeMusic(65,1);
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $cmp7 = ($3>>>0)<(22);
  if (!($cmp7)) {
   break;
  }
  $4 = $i;
  $arrayidx = (1488 + (($4*20)|0)|0);
  $screen = $arrayidx;
  $5 = HEAP32[32169]|0;
  $cmp8 = ($5|0)==(9);
  if ($cmp8) {
   $6 = $screen;
   $7 = HEAP32[$6>>2]|0;
   $cmp9 = ($7|0)==(0);
   if ($cmp9) {
    $8 = $screen;
    $level = ((($8)) + 8|0);
    HEAP32[$level>>2] = 5;
   }
  }
  $9 = HEAP32[99356]|0;
  $cmp12 = ($9|0)==(4);
  if ($cmp12) {
   $cond21 = 0;
  } else {
   $10 = HEAP32[99356]|0;
   $cmp15 = ($10|0)==(5);
   $11 = HEAP32[99356]|0;
   $cond19 = $cmp15 ? 1 : $11;
   $cond21 = $cond19;
  }
  $12 = $screen;
  $13 = HEAP32[$12>>2]|0;
  $cmp23 = ($cond21|0)==($13|0);
  do {
   if ($cmp23) {
    $14 = HEAP32[99356]|0;
    $cmp25 = ($14|0)==(4);
    if ($cmp25) {
     $cond34 = 0;
    } else {
     $15 = HEAP32[99356]|0;
     $cmp28 = ($15|0)==(5);
     $16 = HEAP32[99356]|0;
     $cond32 = $cmp28 ? 1 : $16;
     $cond34 = $cond32;
    }
    $cmp35 = ($cond34|0)!=(0);
    if (!($cmp35)) {
     $17 = HEAP32[99424]|0;
     $18 = $screen;
     $episode = ((($18)) + 4|0);
     $19 = HEAP32[$episode>>2]|0;
     $cmp36 = ($17|0)==($19|0);
     if (!($cmp36)) {
      break;
     }
    }
    $20 = HEAP32[99423]|0;
    $21 = $screen;
    $level38 = ((($21)) + 8|0);
    $22 = HEAP32[$level38>>2]|0;
    $cmp39 = ($20|0)==($22|0);
    if ($cmp39) {
     $23 = $screen;
     $text = ((($23)) + 16|0);
     $24 = HEAP32[$text>>2]|0;
     HEAP32[99397] = $24;
     $25 = $screen;
     $background = ((($25)) + 12|0);
     $26 = HEAP32[$background>>2]|0;
     HEAP32[99398] = $26;
    }
   }
  } while(0);
  $27 = $i;
  $inc = (($27) + 1)|0;
  $i = $inc;
 }
 $28 = HEAP32[99397]|0;
 HEAP32[99397] = $28;
 $29 = HEAP32[99398]|0;
 HEAP32[99398] = $29;
 HEAP32[99399] = 0;
 HEAP32[99400] = 0;
 STACKTOP = sp;return;
}
function _F_Responder($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $event$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $event$addr = $event;
 $0 = HEAP32[99399]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $1 = $event$addr;
  $call = (_F_CastResponder($1)|0);
  $retval = $call;
 } else {
  $retval = 0;
 }
 $2 = $retval;
 STACKTOP = sp;return ($2|0);
}
function _F_CastResponder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx13 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx8 = 0, $cmp = 0, $deathsound = 0, $deathsound14 = 0, $deathstate = 0, $ev$addr = 0, $retval = 0, $tics = 0, $tobool = 0, $tobool9 = 0, $type12 = 0, $type3 = 0, $type7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ev$addr = $ev;
 $0 = $ev$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)!=(0);
 if ($cmp) {
  $retval = 0;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 $2 = HEAP32[99404]|0;
 $tobool = ($2|0)!=(0);
 if ($tobool) {
  $retval = 1;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 HEAP32[99404] = 1;
 $3 = HEAP32[99401]|0;
 $arrayidx = (1344 + ($3<<3)|0);
 $type3 = ((($arrayidx)) + 4|0);
 $4 = HEAP32[$type3>>2]|0;
 $arrayidx4 = (30656 + (($4*92)|0)|0);
 $deathstate = ((($arrayidx4)) + 48|0);
 $5 = HEAP32[$deathstate>>2]|0;
 $arrayidx5 = (3568 + (($5*28)|0)|0);
 HEAP32[99402] = $arrayidx5;
 $6 = HEAP32[99402]|0;
 $tics = ((($6)) + 8|0);
 $7 = HEAP32[$tics>>2]|0;
 HEAP32[99403] = $7;
 HEAP32[99405] = 0;
 HEAP32[99407] = 0;
 $8 = HEAP32[99401]|0;
 $arrayidx6 = (1344 + ($8<<3)|0);
 $type7 = ((($arrayidx6)) + 4|0);
 $9 = HEAP32[$type7>>2]|0;
 $arrayidx8 = (30656 + (($9*92)|0)|0);
 $deathsound = ((($arrayidx8)) + 56|0);
 $10 = HEAP32[$deathsound>>2]|0;
 $tobool9 = ($10|0)!=(0);
 if ($tobool9) {
  $11 = HEAP32[99401]|0;
  $arrayidx11 = (1344 + ($11<<3)|0);
  $type12 = ((($arrayidx11)) + 4|0);
  $12 = HEAP32[$type12>>2]|0;
  $arrayidx13 = (30656 + (($12*92)|0)|0);
  $deathsound14 = ((($arrayidx13)) + 56|0);
  $13 = HEAP32[$deathsound14>>2]|0;
  _S_StartSound(0,$13);
 }
 $retval = 1;
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function _F_Ticker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $buttons = 0, $call = 0, $cmd = 0;
 var $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp15 = 0, $cmp18 = 0, $cmp2 = 0, $cmp20 = 0, $cmp22 = 0, $cmp4 = 0, $cmp6 = 0, $i = 0, $inc = 0, $inc11 = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 $1 = HEAP32[99400]|0;
 $cmp1 = ($1>>>0)>(50);
 $or$cond = $cmp & $cmp1;
 do {
  if ($or$cond) {
   $i = 0;
   while(1) {
    $2 = $i;
    $cmp2 = ($2>>>0)<(4);
    if (!($cmp2)) {
     break;
    }
    $3 = $i;
    $arrayidx = (183056 + (($3*288)|0)|0);
    $cmd = ((($arrayidx)) + 8|0);
    $buttons = ((($cmd)) + 5|0);
    $4 = HEAP8[$buttons>>0]|0;
    $tobool = ($4<<24>>24)!=(0);
    if ($tobool) {
     break;
    }
    $5 = $i;
    $inc = (($5) + 1)|0;
    $i = $inc;
   }
   $6 = $i;
   $cmp4 = ($6>>>0)<(4);
   if ($cmp4) {
    $7 = HEAP32[99423]|0;
    $cmp6 = ($7|0)==(30);
    if ($cmp6) {
     _F_StartCast();
     break;
    } else {
     HEAP32[99427] = 8;
     break;
    }
   }
  }
 } while(0);
 $8 = HEAP32[99400]|0;
 $inc11 = (($8) + 1)|0;
 HEAP32[99400] = $inc11;
 $9 = HEAP32[99399]|0;
 $cmp12 = ($9|0)==(2);
 if ($cmp12) {
  _F_CastTicker();
  STACKTOP = sp;return;
 }
 $10 = HEAP32[32168]|0;
 $cmp15 = ($10|0)!=(2);
 $11 = HEAP32[99399]|0;
 $cmp18 = ($11|0)==(0);
 $or$cond1 = $cmp15 & $cmp18;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[99400]|0;
 $13 = HEAP32[99397]|0;
 $call = (_strlen($13)|0);
 $mul = ($call*3)|0;
 $add = (($mul) + 250)|0;
 $cmp20 = ($12>>>0)>($add>>>0);
 if (!($cmp20)) {
  STACKTOP = sp;return;
 }
 HEAP32[99400] = 0;
 HEAP32[99399] = 1;
 HEAP32[32172] = -1;
 $14 = HEAP32[99424]|0;
 $cmp22 = ($14|0)==(3);
 if (!($cmp22)) {
  STACKTOP = sp;return;
 }
 _S_StartMusic(30);
 STACKTOP = sp;return;
}
function _F_StartCast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $seestate = 0, $tics = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[32172] = -1;
 HEAP32[99401] = 0;
 $0 = HEAP32[99401]|0;
 $arrayidx = (1344 + ($0<<3)|0);
 $type = ((($arrayidx)) + 4|0);
 $1 = HEAP32[$type>>2]|0;
 $arrayidx1 = (30656 + (($1*92)|0)|0);
 $seestate = ((($arrayidx1)) + 12|0);
 $2 = HEAP32[$seestate>>2]|0;
 $arrayidx2 = (3568 + (($2*28)|0)|0);
 HEAP32[99402] = $arrayidx2;
 $3 = HEAP32[99402]|0;
 $tics = ((($3)) + 8|0);
 $4 = HEAP32[$tics>>2]|0;
 HEAP32[99403] = $4;
 HEAP32[99404] = 0;
 HEAP32[99399] = 2;
 HEAP32[99405] = 0;
 HEAP32[99406] = 0;
 HEAP32[99407] = 0;
 _S_ChangeMusic(63,1);
 return;
}
function _F_CastTicker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx23 = 0, $arrayidx49 = 0, $arrayidx51 = 0, $arrayidx52 = 0;
 var $arrayidx57 = 0, $arrayidx63 = 0, $arrayidx65 = 0, $arrayidx67 = 0, $arrayidx7 = 0, $arrayidx73 = 0, $arrayidx8 = 0, $arrayidx81 = 0, $arrayidx83 = 0, $arrayidx85 = 0, $arrayidx88 = 0, $arrayidx90 = 0, $arrayidx92 = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $cmp2 = 0, $cmp4 = 0, $cmp45 = 0, $cmp59 = 0;
 var $cmp79 = 0, $cmp86 = 0, $cmp96 = 0, $dec = 0, $inc = 0, $inc24 = 0, $meleestate = 0, $meleestate66 = 0, $missilestate = 0, $missilestate72 = 0, $nextstate = 0, $nextstate22 = 0, $seesound = 0, $seesound13 = 0, $seestate = 0, $seestate84 = 0, $seestate91 = 0, $sfx = 0, $spec$store$select = 0, $st = 0;
 var $tics = 0, $tics95 = 0, $tobool = 0, $tobool41 = 0, $tobool47 = 0, $tobool61 = 0, $tobool77 = 0, $type = 0, $type11 = 0, $type16 = 0, $type50 = 0, $type64 = 0, $type82 = 0, $type89 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99403]|0;
 $dec = (($0) + -1)|0;
 HEAP32[99403] = $dec;
 $cmp = ($dec|0)>(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99402]|0;
 $tics = ((($1)) + 8|0);
 $2 = HEAP32[$tics>>2]|0;
 $cmp1 = ($2|0)==(-1);
 if ($cmp1) {
  label = 4;
 } else {
  $3 = HEAP32[99402]|0;
  $nextstate = ((($3)) + 16|0);
  $4 = HEAP32[$nextstate>>2]|0;
  $cmp2 = ($4|0)==(0);
  if ($cmp2) {
   label = 4;
  } else {
   $17 = HEAP32[99402]|0;
   $cmp19 = ($17|0)==((7880)|0);
   if (!($cmp19)) {
    $18 = HEAP32[99402]|0;
    $nextstate22 = ((($18)) + 16|0);
    $19 = HEAP32[$nextstate22>>2]|0;
    $st = $19;
    $20 = $st;
    $arrayidx23 = (3568 + (($20*28)|0)|0);
    HEAP32[99402] = $arrayidx23;
    $21 = HEAP32[99405]|0;
    $inc24 = (($21) + 1)|0;
    HEAP32[99405] = $inc24;
    $22 = $st;
    do {
     switch ($22|0) {
     case 154:  {
      $sfx = 4;
      break;
     }
     case 185:  {
      $sfx = 1;
      break;
     }
     case 218:  {
      $sfx = 2;
      break;
     }
     case 256:  {
      $sfx = 54;
      break;
     }
     case 336:  {
      $sfx = 56;
      break;
     }
     case 338:  {
      $sfx = 53;
      break;
     }
     case 340:  {
      $sfx = 107;
      break;
     }
     case 377: case 380: case 383:  {
      $sfx = 16;
      break;
     }
     case 419: case 418: case 417:  {
      $sfx = 2;
      break;
     }
     case 454:  {
      $sfx = 55;
      break;
     }
     case 486:  {
      $sfx = 52;
      break;
     }
     case 505: case 567: case 538:  {
      $sfx = 16;
      break;
     }
     case 590:  {
      $sfx = 51;
      break;
     }
     case 617: case 616:  {
      $sfx = 2;
      break;
     }
     case 648:  {
      $sfx = 8;
      break;
     }
     case 689: case 687: case 685:  {
      $sfx = 14;
      break;
     }
     case 710:  {
      $sfx = 51;
      break;
     }
     default: {
      $sfx = 0;
     }
     }
    } while(0);
    $23 = $sfx;
    $tobool41 = ($23|0)!=(0);
    if ($tobool41) {
     $24 = $sfx;
     _S_StartSound(0,$24);
     label = 31;
    } else {
     label = 31;
    }
   }
  }
 }
 if ((label|0) == 4) {
  $5 = HEAP32[99401]|0;
  $inc = (($5) + 1)|0;
  HEAP32[99401] = $inc;
  HEAP32[99404] = 0;
  $6 = HEAP32[99401]|0;
  $arrayidx = (1344 + ($6<<3)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $cmp4 = ($7|0)==(0|0);
  if ($cmp4) {
   HEAP32[99401] = 0;
  }
  $8 = HEAP32[99401]|0;
  $arrayidx7 = (1344 + ($8<<3)|0);
  $type = ((($arrayidx7)) + 4|0);
  $9 = HEAP32[$type>>2]|0;
  $arrayidx8 = (30656 + (($9*92)|0)|0);
  $seesound = ((($arrayidx8)) + 16|0);
  $10 = HEAP32[$seesound>>2]|0;
  $tobool = ($10|0)!=(0);
  if ($tobool) {
   $11 = HEAP32[99401]|0;
   $arrayidx10 = (1344 + ($11<<3)|0);
   $type11 = ((($arrayidx10)) + 4|0);
   $12 = HEAP32[$type11>>2]|0;
   $arrayidx12 = (30656 + (($12*92)|0)|0);
   $seesound13 = ((($arrayidx12)) + 16|0);
   $13 = HEAP32[$seesound13>>2]|0;
   _S_StartSound(0,$13);
  }
  $14 = HEAP32[99401]|0;
  $arrayidx15 = (1344 + ($14<<3)|0);
  $type16 = ((($arrayidx15)) + 4|0);
  $15 = HEAP32[$type16>>2]|0;
  $arrayidx17 = (30656 + (($15*92)|0)|0);
  $seestate = ((($arrayidx17)) + 12|0);
  $16 = HEAP32[$seestate>>2]|0;
  $arrayidx18 = (3568 + (($16*28)|0)|0);
  HEAP32[99402] = $arrayidx18;
  HEAP32[99405] = 0;
  label = 31;
 }
 if ((label|0) == 31) {
  $25 = HEAP32[99405]|0;
  $cmp45 = ($25|0)==(12);
  do {
   if ($cmp45) {
    HEAP32[99407] = 1;
    $26 = HEAP32[99406]|0;
    $tobool47 = ($26|0)!=(0);
    $27 = HEAP32[99401]|0;
    $arrayidx49 = (1344 + ($27<<3)|0);
    $type50 = ((($arrayidx49)) + 4|0);
    $28 = HEAP32[$type50>>2]|0;
    $arrayidx51 = (30656 + (($28*92)|0)|0);
    if ($tobool47) {
     $meleestate = ((($arrayidx51)) + 40|0);
     $29 = HEAP32[$meleestate>>2]|0;
     $arrayidx52 = (3568 + (($29*28)|0)|0);
     HEAP32[99402] = $arrayidx52;
    } else {
     $missilestate = ((($arrayidx51)) + 44|0);
     $30 = HEAP32[$missilestate>>2]|0;
     $arrayidx57 = (3568 + (($30*28)|0)|0);
     HEAP32[99402] = $arrayidx57;
    }
    $31 = HEAP32[99406]|0;
    $xor = $31 ^ 1;
    HEAP32[99406] = $xor;
    $32 = HEAP32[99402]|0;
    $cmp59 = ($32|0)==(3568|0);
    if ($cmp59) {
     $33 = HEAP32[99406]|0;
     $tobool61 = ($33|0)!=(0);
     $34 = HEAP32[99401]|0;
     $arrayidx63 = (1344 + ($34<<3)|0);
     $type64 = ((($arrayidx63)) + 4|0);
     $35 = HEAP32[$type64>>2]|0;
     $arrayidx65 = (30656 + (($35*92)|0)|0);
     if ($tobool61) {
      $meleestate66 = ((($arrayidx65)) + 40|0);
      $36 = HEAP32[$meleestate66>>2]|0;
      $arrayidx67 = (3568 + (($36*28)|0)|0);
      HEAP32[99402] = $arrayidx67;
      break;
     } else {
      $missilestate72 = ((($arrayidx65)) + 44|0);
      $37 = HEAP32[$missilestate72>>2]|0;
      $arrayidx73 = (3568 + (($37*28)|0)|0);
      HEAP32[99402] = $arrayidx73;
      break;
     }
    }
   }
  } while(0);
  $38 = HEAP32[99407]|0;
  $tobool77 = ($38|0)!=(0);
  if (!($tobool77)) {
   $47 = HEAP32[99402]|0;
   $tics95 = ((($47)) + 8|0);
   $48 = HEAP32[$tics95>>2]|0;
   HEAP32[99403] = $48;
   $49 = HEAP32[99403]|0;
   $cmp96 = ($49|0)==(-1);
   $spec$store$select = $cmp96 ? 15 : $48;
   HEAP32[99403] = $spec$store$select;
   STACKTOP = sp;return;
  }
  $39 = HEAP32[99405]|0;
  $cmp79 = ($39|0)==(24);
  if (!($cmp79)) {
   $40 = HEAP32[99402]|0;
   $41 = HEAP32[99401]|0;
   $arrayidx81 = (1344 + ($41<<3)|0);
   $type82 = ((($arrayidx81)) + 4|0);
   $42 = HEAP32[$type82>>2]|0;
   $arrayidx83 = (30656 + (($42*92)|0)|0);
   $seestate84 = ((($arrayidx83)) + 12|0);
   $43 = HEAP32[$seestate84>>2]|0;
   $arrayidx85 = (3568 + (($43*28)|0)|0);
   $cmp86 = ($40|0)==($arrayidx85|0);
   if (!($cmp86)) {
    $47 = HEAP32[99402]|0;
    $tics95 = ((($47)) + 8|0);
    $48 = HEAP32[$tics95>>2]|0;
    HEAP32[99403] = $48;
    $49 = HEAP32[99403]|0;
    $cmp96 = ($49|0)==(-1);
    $spec$store$select = $cmp96 ? 15 : $48;
    HEAP32[99403] = $spec$store$select;
    STACKTOP = sp;return;
   }
  }
 }
 HEAP32[99407] = 0;
 HEAP32[99405] = 0;
 $44 = HEAP32[99401]|0;
 $arrayidx88 = (1344 + ($44<<3)|0);
 $type89 = ((($arrayidx88)) + 4|0);
 $45 = HEAP32[$type89>>2]|0;
 $arrayidx90 = (30656 + (($45*92)|0)|0);
 $seestate91 = ((($arrayidx90)) + 12|0);
 $46 = HEAP32[$seestate91>>2]|0;
 $arrayidx92 = (3568 + (($46*28)|0)|0);
 HEAP32[99402] = $arrayidx92;
 $47 = HEAP32[99402]|0;
 $tics95 = ((($47)) + 8|0);
 $48 = HEAP32[$tics95>>2]|0;
 HEAP32[99403] = $48;
 $49 = HEAP32[99403]|0;
 $cmp96 = ($49|0)==(-1);
 $spec$store$select = $cmp96 ? 15 : $48;
 HEAP32[99403] = $spec$store$select;
 STACKTOP = sp;return;
}
function _F_TextWrite() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr4 = 0, $add25 = 0, $add28 = 0;
 var $add34 = 0, $and = 0, $arrayidx = 0, $arrayidx33 = 0, $c = 0, $call = 0, $call18 = 0, $ch = 0, $cmp = 0, $cmp14 = 0, $cmp2 = 0, $cmp20 = 0, $cmp22 = 0, $cmp29 = 0, $cmp8 = 0, $conv = 0, $conv27 = 0, $count = 0, $cx = 0, $cy = 0;
 var $dec = 0, $dest = 0, $div = 0, $inc = 0, $inc6 = 0, $incdec$ptr = 0, $or$cond = 0, $shl = 0, $spec$store$select = 0, $src = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool11 = 0, $w = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = HEAP32[99398]|0;
 $call = (_W_CacheLumpName($0,8)|0);
 $src = $call;
 $1 = HEAP32[100203]|0;
 $dest = $1;
 $y = 0;
 while(1) {
  $2 = $y;
  $cmp = ($2|0)<(200);
  if (!($cmp)) {
   break;
  }
  $x = 0;
  while(1) {
   $3 = $x;
   $cmp2 = ($3|0)<(5);
   if (!($cmp2)) {
    break;
   }
   $4 = $dest;
   $5 = $src;
   $6 = $y;
   $and = $6 & 63;
   $shl = $and << 6;
   $add$ptr = (($5) + ($shl)|0);
   dest=$4; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $7 = $dest;
   $add$ptr4 = ((($7)) + 64|0);
   $dest = $add$ptr4;
   $8 = $x;
   $inc = (($8) + 1)|0;
   $x = $inc;
  }
  $9 = $y;
  $inc6 = (($9) + 1)|0;
  $y = $inc6;
 }
 _V_MarkRect(0,0,320,200);
 $cx = 10;
 $cy = 10;
 $10 = HEAP32[99397]|0;
 $ch = $10;
 $11 = HEAP32[99400]|0;
 $sub = (($11) - 10)|0;
 $div = (($sub|0) / 3)&-1;
 $count = $div;
 $12 = $count;
 $cmp8 = ($12|0)<(0);
 $spec$store$select = $cmp8 ? 0 : $div;
 $count = $spec$store$select;
 L9: while(1) {
  $13 = $count;
  $tobool = ($13|0)!=(0);
  if (!($tobool)) {
   label = 17;
   break;
  }
  $14 = $ch;
  $incdec$ptr = ((($14)) + 1|0);
  $ch = $incdec$ptr;
  $15 = HEAP8[$14>>0]|0;
  $conv = $15 << 24 >> 24;
  $c = $conv;
  $16 = $c;
  $tobool11 = ($16|0)!=(0);
  if (!($tobool11)) {
   label = 17;
   break;
  }
  $17 = $c;
  $cmp14 = ($17|0)==(10);
  do {
   if ($cmp14) {
    $cx = 10;
    $18 = $cy;
    $add = (($18) + 11)|0;
    $cy = $add;
   } else {
    $19 = $c;
    $call18 = (_toupper($19)|0);
    $sub19 = (($call18) - 33)|0;
    $c = $sub19;
    $20 = $c;
    $cmp20 = ($20|0)<(0);
    $21 = $c;
    $cmp22 = ($21|0)>(63);
    $or$cond = $cmp20 | $cmp22;
    if ($or$cond) {
     $22 = $cx;
     $add25 = (($22) + 4)|0;
     $cx = $add25;
     break;
    }
    $23 = $c;
    $arrayidx = (185888 + ($23<<2)|0);
    $24 = HEAP32[$arrayidx>>2]|0;
    $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8);
    $conv27 = $25 << 16 >> 16;
    $w = $conv27;
    $26 = $cx;
    $27 = $w;
    $add28 = (($26) + ($27))|0;
    $cmp29 = ($add28|0)>(320);
    if ($cmp29) {
     label = 17;
     break L9;
    }
    $28 = $cx;
    $29 = $cy;
    $30 = $c;
    $arrayidx33 = (185888 + ($30<<2)|0);
    $31 = HEAP32[$arrayidx33>>2]|0;
    _V_DrawPatch($28,$29,$31);
    $32 = $w;
    $33 = $cx;
    $add34 = (($33) + ($32))|0;
    $cx = $add34;
   }
  } while(0);
  $34 = $count;
  $dec = (($34) + -1)|0;
  $count = $dec;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _F_CastPrint($text) {
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add27 = 0, $add33 = 0, $add9 = 0, $arrayidx = 0, $arrayidx29 = 0, $arrayidx32 = 0, $c = 0;
 var $call = 0, $call19 = 0, $ch = 0, $cmp = 0, $cmp21 = 0, $cmp24 = 0, $cmp3 = 0, $conv = 0, $conv15 = 0, $conv31 = 0, $conv8 = 0, $cx = 0, $div = 0, $incdec$ptr = 0, $incdec$ptr14 = 0, $or$cond = 0, $or$cond1 = 0, $sub = 0, $sub10 = 0, $sub20 = 0;
 var $text$addr = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool16 = 0, $w = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $text$addr = $text;
 $0 = $text$addr;
 $ch = $0;
 $width = 0;
 while(1) {
  $1 = $ch;
  $tobool = ($1|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $2 = $ch;
  $incdec$ptr = ((($2)) + 1|0);
  $ch = $incdec$ptr;
  $3 = HEAP8[$2>>0]|0;
  $conv = $3 << 24 >> 24;
  $c = $conv;
  $4 = $c;
  $tobool1 = ($4|0)!=(0);
  if (!($tobool1)) {
   break;
  }
  $5 = $c;
  $call = (_toupper($5)|0);
  $sub = (($call) - 33)|0;
  $c = $sub;
  $6 = $c;
  $cmp = ($6|0)<(0);
  $7 = $c;
  $cmp3 = ($7|0)>(63);
  $or$cond = $cmp | $cmp3;
  if ($or$cond) {
   $8 = $width;
   $add = (($8) + 4)|0;
   $width = $add;
   continue;
  } else {
   $9 = $c;
   $arrayidx = (185888 + ($9<<2)|0);
   $10 = HEAP32[$arrayidx>>2]|0;
   $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8);
   $conv8 = $11 << 16 >> 16;
   $w = $conv8;
   $12 = $w;
   $13 = $width;
   $add9 = (($13) + ($12))|0;
   $width = $add9;
   continue;
  }
 }
 $14 = $width;
 $div = (($14|0) / 2)&-1;
 $sub10 = (160 - ($div))|0;
 $cx = $sub10;
 $15 = $text$addr;
 $ch = $15;
 while(1) {
  $16 = $ch;
  $tobool12 = ($16|0)!=(0|0);
  if (!($tobool12)) {
   label = 13;
   break;
  }
  $17 = $ch;
  $incdec$ptr14 = ((($17)) + 1|0);
  $ch = $incdec$ptr14;
  $18 = HEAP8[$17>>0]|0;
  $conv15 = $18 << 24 >> 24;
  $c = $conv15;
  $19 = $c;
  $tobool16 = ($19|0)!=(0);
  if (!($tobool16)) {
   label = 13;
   break;
  }
  $20 = $c;
  $call19 = (_toupper($20)|0);
  $sub20 = (($call19) - 33)|0;
  $c = $sub20;
  $21 = $c;
  $cmp21 = ($21|0)<(0);
  $22 = $c;
  $cmp24 = ($22|0)>(63);
  $or$cond1 = $cmp21 | $cmp24;
  if ($or$cond1) {
   $23 = $cx;
   $add27 = (($23) + 4)|0;
   $cx = $add27;
   continue;
  } else {
   $24 = $c;
   $arrayidx29 = (185888 + ($24<<2)|0);
   $25 = HEAP32[$arrayidx29>>2]|0;
   $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
   $conv31 = $26 << 16 >> 16;
   $w = $conv31;
   $27 = $cx;
   $28 = $c;
   $arrayidx32 = (185888 + ($28<<2)|0);
   $29 = HEAP32[$arrayidx32>>2]|0;
   _V_DrawPatch($27,180,$29);
   $30 = $w;
   $31 = $cx;
   $add33 = (($31) + ($30))|0;
   $cx = $add33;
   continue;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _F_CastDrawer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx2 = 0, $call = 0, $call8 = 0, $conv = 0, $conv7 = 0, $flip = 0, $flip5 = 0, $frame = 0, $lump = 0, $lump3 = 0, $patch = 0, $sprdef = 0, $sprframe = 0, $spriteframes = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $call = (_W_CacheLumpName(143482,8)|0);
 _V_DrawPatch(0,0,$call);
 $0 = HEAP32[99401]|0;
 $arrayidx = (1344 + ($0<<3)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 _F_CastPrint($1);
 $2 = HEAP32[100037]|0;
 $3 = HEAP32[99402]|0;
 $4 = HEAP32[$3>>2]|0;
 $arrayidx1 = (($2) + ($4<<3)|0);
 $sprdef = $arrayidx1;
 $5 = $sprdef;
 $spriteframes = ((($5)) + 4|0);
 $6 = HEAP32[$spriteframes>>2]|0;
 $7 = HEAP32[99402]|0;
 $frame = ((($7)) + 4|0);
 $8 = HEAP32[$frame>>2]|0;
 $and = $8 & 32767;
 $arrayidx2 = (($6) + (($and*28)|0)|0);
 $sprframe = $arrayidx2;
 $9 = $sprframe;
 $lump3 = ((($9)) + 4|0);
 $10 = HEAP16[$lump3>>1]|0;
 $conv = $10 << 16 >> 16;
 $lump = $conv;
 $11 = $sprframe;
 $flip5 = ((($11)) + 20|0);
 $12 = HEAP8[$flip5>>0]|0;
 $conv7 = $12&255;
 $flip = $conv7;
 $13 = $lump;
 $14 = HEAP32[99927]|0;
 $add = (($13) + ($14))|0;
 $call8 = (_W_CacheLumpNum($add,8)|0);
 $patch = $call8;
 $15 = $flip;
 $tobool = ($15|0)!=(0);
 $16 = $patch;
 if ($tobool) {
  _V_DrawPatchFlipped(160,170,$16);
  STACKTOP = sp;return;
 } else {
  _V_DrawPatch(160,170,$16);
  STACKTOP = sp;return;
 }
}
function _F_DrawPatchCol($x,$patch,$col) {
 $x = $x|0;
 $patch = $patch|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr1 = 0, $add$ptr10 = 0, $add$ptr13 = 0, $add$ptr14 = 0, $add$ptr3 = 0, $add$ptr6 = 0, $arrayidx = 0, $cmp = 0, $col$addr = 0, $column = 0, $columnofs = 0, $conv = 0, $conv12 = 0, $conv5 = 0, $conv7 = 0, $count = 0, $dec = 0;
 var $dest = 0, $desttop = 0, $incdec$ptr = 0, $length = 0, $length11 = 0, $mul = 0, $patch$addr = 0, $source = 0, $tobool = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $patch$addr = $patch;
 $col$addr = $col;
 $0 = $patch$addr;
 $1 = $patch$addr;
 $columnofs = ((($1)) + 8|0);
 $2 = $col$addr;
 $arrayidx = (($columnofs) + ($2<<2)|0);
 $3 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
 $add$ptr = (($0) + ($3)|0);
 $column = $add$ptr;
 $4 = HEAP32[100203]|0;
 $5 = $x$addr;
 $add$ptr1 = (($4) + ($5)|0);
 $desttop = $add$ptr1;
 while(1) {
  $6 = $column;
  $7 = HEAP8[$6>>0]|0;
  $conv = $7&255;
  $cmp = ($conv|0)!=(255);
  if (!($cmp)) {
   break;
  }
  $8 = $column;
  $add$ptr3 = ((($8)) + 3|0);
  $source = $add$ptr3;
  $9 = $desttop;
  $10 = $column;
  $11 = HEAP8[$10>>0]|0;
  $conv5 = $11&255;
  $mul = ($conv5*320)|0;
  $add$ptr6 = (($9) + ($mul)|0);
  $dest = $add$ptr6;
  $12 = $column;
  $length = ((($12)) + 1|0);
  $13 = HEAP8[$length>>0]|0;
  $conv7 = $13&255;
  $count = $conv7;
  while(1) {
   $14 = $count;
   $dec = (($14) + -1)|0;
   $count = $dec;
   $tobool = ($14|0)!=(0);
   if (!($tobool)) {
    break;
   }
   $15 = $source;
   $incdec$ptr = ((($15)) + 1|0);
   $source = $incdec$ptr;
   $16 = HEAP8[$15>>0]|0;
   $17 = $dest;
   HEAP8[$17>>0] = $16;
   $18 = $dest;
   $add$ptr10 = ((($18)) + 320|0);
   $dest = $add$ptr10;
  }
  $19 = $column;
  $20 = $column;
  $length11 = ((($20)) + 1|0);
  $21 = HEAP8[$length11>>0]|0;
  $conv12 = $21&255;
  $add$ptr13 = (($19) + ($conv12)|0);
  $add$ptr14 = ((($add$ptr13)) + 4|0);
  $column = $add$ptr14;
 }
 STACKTOP = sp;return;
}
function _F_BunnyScroll() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add9 = 0, $call = 0, $call1 = 0, $call18 = 0, $call30 = 0, $cmp = 0, $cmp13 = 0, $cmp16 = 0, $cmp22 = 0, $cmp25 = 0, $cmp3 = 0, $cmp6 = 0, $cmp7 = 0, $div = 0, $div21 = 0, $inc = 0;
 var $name = 0, $p1 = 0, $p2 = 0, $scrolled = 0, $spec$store$select = 0, $spec$store$select1 = 0, $spec$store$select2 = 0, $stage = 0, $sub = 0, $sub11 = 0, $sub2 = 0, $sub20 = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $name = sp + 24|0;
 $call = (_W_CacheLumpName(143491,5)|0);
 $p1 = $call;
 $call1 = (_W_CacheLumpName(143497,5)|0);
 $p2 = $call1;
 _V_MarkRect(0,0,320,200);
 $0 = HEAP32[99400]|0;
 $sub = (($0) - 230)|0;
 $div = (($sub|0) / 2)&-1;
 $sub2 = (320 - ($div))|0;
 $scrolled = $sub2;
 $1 = $scrolled;
 $cmp = ($1|0)>(320);
 $spec$store$select = $cmp ? 320 : $sub2;
 $scrolled = $spec$store$select;
 $2 = $scrolled;
 $cmp3 = ($2|0)<(0);
 $spec$store$select2 = $cmp3 ? 0 : $spec$store$select;
 $scrolled = $spec$store$select2;
 $x = 0;
 while(1) {
  $3 = $x;
  $cmp6 = ($3|0)<(320);
  if (!($cmp6)) {
   break;
  }
  $4 = $x;
  $5 = $scrolled;
  $add = (($4) + ($5))|0;
  $cmp7 = ($add|0)<(320);
  $6 = $x;
  if ($cmp7) {
   $7 = $p1;
   $8 = $x;
   $9 = $scrolled;
   $add9 = (($8) + ($9))|0;
   _F_DrawPatchCol($6,$7,$add9);
  } else {
   $10 = $p2;
   $11 = $x;
   $12 = $scrolled;
   $add10 = (($11) + ($12))|0;
   $sub11 = (($add10) - 320)|0;
   _F_DrawPatchCol($6,$10,$sub11);
  }
  $13 = $x;
  $inc = (($13) + 1)|0;
  $x = $inc;
 }
 $14 = HEAP32[99400]|0;
 $cmp13 = ($14>>>0)<(1130);
 if ($cmp13) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[99400]|0;
 $cmp16 = ($15>>>0)<(1180);
 if ($cmp16) {
  $call18 = (_W_CacheLumpName(143503,8)|0);
  _V_DrawPatch(108,68,$call18);
  HEAP32[99408] = 0;
  STACKTOP = sp;return;
 }
 $16 = HEAP32[99400]|0;
 $sub20 = (($16) - 1180)|0;
 $div21 = (($sub20>>>0) / 5)&-1;
 $stage = $div21;
 $17 = $stage;
 $cmp22 = ($17|0)>(6);
 $spec$store$select1 = $cmp22 ? 6 : $div21;
 $stage = $spec$store$select1;
 $18 = $stage;
 $19 = HEAP32[99408]|0;
 $cmp25 = ($18|0)>($19|0);
 if ($cmp25) {
  _S_StartSound(0,1);
  $20 = $stage;
  HEAP32[99408] = $20;
 }
 $21 = $stage;
 HEAP32[$vararg_buffer>>2] = $21;
 (_snprintf($name,10,143508,$vararg_buffer)|0);
 $call30 = (_W_CacheLumpName($name,8)|0);
 _V_DrawPatch(108,68,$call30);
 STACKTOP = sp;return;
}
function _F_Drawer() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99399]|0;
 switch ($0|0) {
 case 2:  {
  _F_CastDrawer();
  break;
 }
 case 0:  {
  _F_TextWrite();
  break;
 }
 case 1:  {
  _F_ArtScreenDrawer();
  break;
 }
 default: {
 }
 }
 return;
}
function _F_ArtScreenDrawer() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $lumpname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99424]|0;
 $cmp = ($0|0)==(3);
 if ($cmp) {
  _F_BunnyScroll();
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99424]|0;
 L5: do {
  switch ($1|0) {
  case 1:  {
   $2 = HEAP32[32168]|0;
   $cmp1 = ($2|0)==(3);
   if ($cmp1) {
    $lumpname = 151966;
    break L5;
   } else {
    $lumpname = 151978;
    break L5;
   }
   break;
  }
  case 2:  {
   $lumpname = 143514;
   break;
  }
  case 4:  {
   $lumpname = 143523;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $3 = $lumpname;
 $lumpname = $3;
 $4 = $lumpname;
 $call = (_W_CacheLumpName($4,8)|0);
 _V_DrawPatch(0,0,$call);
 STACKTOP = sp;return;
}
function _wipe_shittyColMajorXform($array,$width,$height) {
 $array = $array|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add7 = 0, $array$addr = 0, $arrayidx = 0, $arrayidx8 = 0, $call = 0, $cmp = 0, $cmp3 = 0, $dest = 0, $height$addr = 0, $inc = 0, $inc10 = 0, $mul = 0, $mul1 = 0, $mul12 = 0, $mul13 = 0, $mul5 = 0, $mul6 = 0;
 var $width$addr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $array$addr = $array;
 $width$addr = $width;
 $height$addr = $height;
 $0 = $width$addr;
 $1 = $height$addr;
 $mul = Math_imul($0, $1)|0;
 $mul1 = $mul<<1;
 $call = (_Z_Malloc($mul1,1,0)|0);
 $dest = $call;
 $y = 0;
 while(1) {
  $2 = $y;
  $3 = $height$addr;
  $cmp = ($2|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  $x = 0;
  while(1) {
   $4 = $x;
   $5 = $width$addr;
   $cmp3 = ($4|0)<($5|0);
   if (!($cmp3)) {
    break;
   }
   $6 = $array$addr;
   $7 = $y;
   $8 = $width$addr;
   $mul5 = Math_imul($7, $8)|0;
   $9 = $x;
   $add = (($mul5) + ($9))|0;
   $arrayidx = (($6) + ($add<<1)|0);
   $10 = HEAP16[$arrayidx>>1]|0;
   $11 = $dest;
   $12 = $x;
   $13 = $height$addr;
   $mul6 = Math_imul($12, $13)|0;
   $14 = $y;
   $add7 = (($mul6) + ($14))|0;
   $arrayidx8 = (($11) + ($add7<<1)|0);
   HEAP16[$arrayidx8>>1] = $10;
   $15 = $x;
   $inc = (($15) + 1)|0;
   $x = $inc;
  }
  $16 = $y;
  $inc10 = (($16) + 1)|0;
  $y = $inc10;
 }
 $17 = $array$addr;
 $18 = $dest;
 $19 = $width$addr;
 $20 = $height$addr;
 $mul12 = Math_imul($19, $20)|0;
 $mul13 = $mul12<<1;
 _memcpy(($17|0),($18|0),($mul13|0))|0;
 $21 = $dest;
 _Z_Free($21);
 STACKTOP = sp;return;
}
function _wipe_initColorXForm($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $height$addr = 0, $mul = 0, $ticks$addr = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 $0 = HEAP32[99409]|0;
 $1 = HEAP32[99410]|0;
 $2 = $width$addr;
 $3 = $height$addr;
 $mul = Math_imul($2, $3)|0;
 _memcpy(($0|0),($1|0),($mul|0))|0;
 STACKTOP = sp;return 0;
}
function _wipe_doColorXForm($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add$ptr = 0, $changed = 0, $cmp = 0, $cmp11 = 0, $cmp18 = 0, $cmp2 = 0, $cmp23 = 0, $cmp6 = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv14 = 0, $conv17 = 0, $conv21 = 0, $conv22 = 0, $conv27 = 0, $conv4 = 0, $conv5 = 0;
 var $conv9 = 0, $e = 0, $height$addr = 0, $incdec$ptr = 0, $incdec$ptr32 = 0, $lnot = 0, $lnot$ext = 0, $mul = 0, $newval = 0, $sub = 0, $ticks$addr = 0, $tobool = 0, $w = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 $changed = 0;
 $0 = HEAP32[99409]|0;
 $w = $0;
 $1 = HEAP32[99411]|0;
 $e = $1;
 while(1) {
  $2 = $w;
  $3 = HEAP32[99409]|0;
  $4 = $width$addr;
  $5 = $height$addr;
  $mul = Math_imul($4, $5)|0;
  $add$ptr = (($3) + ($mul)|0);
  $cmp = ($2|0)!=($add$ptr|0);
  if (!($cmp)) {
   break;
  }
  $6 = $w;
  $7 = HEAP8[$6>>0]|0;
  $conv = $7&255;
  $8 = $e;
  $9 = HEAP8[$8>>0]|0;
  $conv1 = $9&255;
  $cmp2 = ($conv|0)!=($conv1|0);
  do {
   if ($cmp2) {
    $10 = $w;
    $11 = HEAP8[$10>>0]|0;
    $conv4 = $11&255;
    $12 = $e;
    $13 = HEAP8[$12>>0]|0;
    $conv5 = $13&255;
    $cmp6 = ($conv4|0)>($conv5|0);
    $14 = $w;
    $15 = HEAP8[$14>>0]|0;
    $conv9 = $15&255;
    if ($cmp6) {
     $16 = $ticks$addr;
     $sub = (($conv9) - ($16))|0;
     $newval = $sub;
     $17 = $newval;
     $18 = $e;
     $19 = HEAP8[$18>>0]|0;
     $conv10 = $19&255;
     $cmp11 = ($17|0)<($conv10|0);
     if ($cmp11) {
      $20 = $e;
      $21 = HEAP8[$20>>0]|0;
      $22 = $w;
      HEAP8[$22>>0] = $21;
     } else {
      $23 = $newval;
      $conv14 = $23&255;
      $24 = $w;
      HEAP8[$24>>0] = $conv14;
     }
     $changed = 1;
     break;
    }
    $25 = $e;
    $26 = HEAP8[$25>>0]|0;
    $conv17 = $26&255;
    $cmp18 = ($conv9|0)<($conv17|0);
    if ($cmp18) {
     $27 = $w;
     $28 = HEAP8[$27>>0]|0;
     $conv21 = $28&255;
     $29 = $ticks$addr;
     $add = (($conv21) + ($29))|0;
     $newval = $add;
     $30 = $newval;
     $31 = $e;
     $32 = HEAP8[$31>>0]|0;
     $conv22 = $32&255;
     $cmp23 = ($30|0)>($conv22|0);
     if ($cmp23) {
      $33 = $e;
      $34 = HEAP8[$33>>0]|0;
      $35 = $w;
      HEAP8[$35>>0] = $34;
     } else {
      $36 = $newval;
      $conv27 = $36&255;
      $37 = $w;
      HEAP8[$37>>0] = $conv27;
     }
     $changed = 1;
    }
   }
  } while(0);
  $38 = $w;
  $incdec$ptr = ((($38)) + 1|0);
  $w = $incdec$ptr;
  $39 = $e;
  $incdec$ptr32 = ((($39)) + 1|0);
  $e = $incdec$ptr32;
 }
 $40 = $changed;
 $tobool = ($40|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 STACKTOP = sp;return ($lnot$ext|0);
}
function _wipe_exitColorXForm($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $height$addr = 0, $ticks$addr = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 STACKTOP = sp;return 0;
}
function _wipe_initMelt($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx16 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp14 = 0, $div = 0, $div1 = 0, $height$addr = 0, $i = 0, $inc = 0, $mul = 0, $mul2 = 0, $r = 0, $rem = 0, $rem5 = 0, $sub = 0, $sub6 = 0, $sub7 = 0, $ticks$addr = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 $0 = HEAP32[99409]|0;
 $1 = HEAP32[99410]|0;
 $2 = $width$addr;
 $3 = $height$addr;
 $mul = Math_imul($2, $3)|0;
 _memcpy(($0|0),($1|0),($mul|0))|0;
 $4 = HEAP32[99410]|0;
 $5 = $width$addr;
 $div = (($5|0) / 2)&-1;
 $6 = $height$addr;
 _wipe_shittyColMajorXform($4,$div,$6);
 $7 = HEAP32[99411]|0;
 $8 = $width$addr;
 $div1 = (($8|0) / 2)&-1;
 $9 = $height$addr;
 _wipe_shittyColMajorXform($7,$div1,$9);
 $10 = $width$addr;
 $mul2 = $10<<2;
 $call = (_Z_Malloc($mul2,1,0)|0);
 HEAP32[99412] = $call;
 $call3 = (_M_Random()|0);
 $rem = (($call3|0) % 16)&-1;
 $sub = (0 - ($rem))|0;
 $11 = HEAP32[99412]|0;
 HEAP32[$11>>2] = $sub;
 $i = 1;
 while(1) {
  $12 = $i;
  $13 = $width$addr;
  $cmp = ($12|0)<($13|0);
  if (!($cmp)) {
   break;
  }
  $call4 = (_M_Random()|0);
  $rem5 = (($call4|0) % 3)&-1;
  $sub6 = (($rem5) - 1)|0;
  $r = $sub6;
  $14 = HEAP32[99412]|0;
  $15 = $i;
  $sub7 = (($15) - 1)|0;
  $arrayidx8 = (($14) + ($sub7<<2)|0);
  $16 = HEAP32[$arrayidx8>>2]|0;
  $17 = $r;
  $add = (($16) + ($17))|0;
  $18 = HEAP32[99412]|0;
  $19 = $i;
  $arrayidx9 = (($18) + ($19<<2)|0);
  HEAP32[$arrayidx9>>2] = $add;
  $20 = HEAP32[99412]|0;
  $21 = $i;
  $arrayidx10 = (($20) + ($21<<2)|0);
  $22 = HEAP32[$arrayidx10>>2]|0;
  $cmp11 = ($22|0)>(0);
  $23 = HEAP32[99412]|0;
  $24 = $i;
  $arrayidx12 = (($23) + ($24<<2)|0);
  if ($cmp11) {
   HEAP32[$arrayidx12>>2] = 0;
  } else {
   $25 = HEAP32[$arrayidx12>>2]|0;
   $cmp14 = ($25|0)==(-16);
   if ($cmp14) {
    $26 = HEAP32[99412]|0;
    $27 = $i;
    $arrayidx16 = (($26) + ($27<<2)|0);
    HEAP32[$arrayidx16>>2] = -15;
   }
  }
  $28 = $i;
  $inc = (($28) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return 0;
}
function _wipe_doMelt($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add15 = 0, $add19 = 0, $add25 = 0, $add28 = 0;
 var $add33 = 0, $add42 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx24 = 0, $arrayidx27 = 0, $arrayidx30 = 0, $arrayidx31 = 0, $arrayidx34 = 0, $arrayidx35 = 0, $arrayidx41 = 0, $arrayidx6 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp11 = 0, $cmp4 = 0, $cmp7 = 0, $cond = 0, $d = 0, $dec = 0, $dec26 = 0, $dec44 = 0, $div = 0, $done = 0, $dy = 0, $height$addr = 0, $i = 0, $idx = 0, $inc = 0, $inc49 = 0, $incdec$ptr = 0, $incdec$ptr40 = 0, $j = 0;
 var $mul = 0, $mul18 = 0, $mul29 = 0, $mul32 = 0, $s = 0, $sub = 0, $sub36 = 0, $ticks$addr = 0, $tobool = 0, $tobool22 = 0, $tobool38 = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 $done = 1;
 $0 = $width$addr;
 $div = (($0|0) / 2)&-1;
 $width$addr = $div;
 while(1) {
  $1 = $ticks$addr;
  $dec = (($1) + -1)|0;
  $ticks$addr = $dec;
  $tobool = ($1|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $i = 0;
  while(1) {
   $2 = $i;
   $3 = $width$addr;
   $cmp = ($2|0)<($3|0);
   if (!($cmp)) {
    break;
   }
   $4 = HEAP32[99412]|0;
   $5 = $i;
   $arrayidx = (($4) + ($5<<2)|0);
   $6 = HEAP32[$arrayidx>>2]|0;
   $cmp1 = ($6|0)<(0);
   $7 = HEAP32[99412]|0;
   $8 = $i;
   $arrayidx2 = (($7) + ($8<<2)|0);
   $9 = HEAP32[$arrayidx2>>2]|0;
   if ($cmp1) {
    $inc = (($9) + 1)|0;
    HEAP32[$arrayidx2>>2] = $inc;
    $done = 0;
   } else {
    $10 = $height$addr;
    $cmp4 = ($9|0)<($10|0);
    if ($cmp4) {
     $11 = HEAP32[99412]|0;
     $12 = $i;
     $arrayidx6 = (($11) + ($12<<2)|0);
     $13 = HEAP32[$arrayidx6>>2]|0;
     $cmp7 = ($13|0)<(16);
     if ($cmp7) {
      $14 = HEAP32[99412]|0;
      $15 = $i;
      $arrayidx8 = (($14) + ($15<<2)|0);
      $16 = HEAP32[$arrayidx8>>2]|0;
      $add = (($16) + 1)|0;
      $cond = $add;
     } else {
      $cond = 8;
     }
     $dy = $cond;
     $17 = HEAP32[99412]|0;
     $18 = $i;
     $arrayidx9 = (($17) + ($18<<2)|0);
     $19 = HEAP32[$arrayidx9>>2]|0;
     $20 = $dy;
     $add10 = (($19) + ($20))|0;
     $21 = $height$addr;
     $cmp11 = ($add10|0)>=($21|0);
     if ($cmp11) {
      $22 = $height$addr;
      $23 = HEAP32[99412]|0;
      $24 = $i;
      $arrayidx13 = (($23) + ($24<<2)|0);
      $25 = HEAP32[$arrayidx13>>2]|0;
      $sub = (($22) - ($25))|0;
      $dy = $sub;
     }
     $26 = HEAP32[99411]|0;
     $27 = $i;
     $28 = $height$addr;
     $mul = Math_imul($27, $28)|0;
     $29 = HEAP32[99412]|0;
     $30 = $i;
     $arrayidx14 = (($29) + ($30<<2)|0);
     $31 = HEAP32[$arrayidx14>>2]|0;
     $add15 = (($mul) + ($31))|0;
     $arrayidx16 = (($26) + ($add15<<1)|0);
     $s = $arrayidx16;
     $32 = HEAP32[99409]|0;
     $33 = HEAP32[99412]|0;
     $34 = $i;
     $arrayidx17 = (($33) + ($34<<2)|0);
     $35 = HEAP32[$arrayidx17>>2]|0;
     $36 = $width$addr;
     $mul18 = Math_imul($35, $36)|0;
     $37 = $i;
     $add19 = (($mul18) + ($37))|0;
     $arrayidx20 = (($32) + ($add19<<1)|0);
     $d = $arrayidx20;
     $idx = 0;
     $38 = $dy;
     $j = $38;
     while(1) {
      $39 = $j;
      $tobool22 = ($39|0)!=(0);
      if (!($tobool22)) {
       break;
      }
      $40 = $s;
      $incdec$ptr = ((($40)) + 2|0);
      $s = $incdec$ptr;
      $41 = HEAP16[$40>>1]|0;
      $42 = $d;
      $43 = $idx;
      $arrayidx24 = (($42) + ($43<<1)|0);
      HEAP16[$arrayidx24>>1] = $41;
      $44 = $width$addr;
      $45 = $idx;
      $add25 = (($45) + ($44))|0;
      $idx = $add25;
      $46 = $j;
      $dec26 = (($46) + -1)|0;
      $j = $dec26;
     }
     $47 = $dy;
     $48 = HEAP32[99412]|0;
     $49 = $i;
     $arrayidx27 = (($48) + ($49<<2)|0);
     $50 = HEAP32[$arrayidx27>>2]|0;
     $add28 = (($50) + ($47))|0;
     HEAP32[$arrayidx27>>2] = $add28;
     $51 = HEAP32[99410]|0;
     $52 = $i;
     $53 = $height$addr;
     $mul29 = Math_imul($52, $53)|0;
     $arrayidx30 = (($51) + ($mul29<<1)|0);
     $s = $arrayidx30;
     $54 = HEAP32[99409]|0;
     $55 = HEAP32[99412]|0;
     $56 = $i;
     $arrayidx31 = (($55) + ($56<<2)|0);
     $57 = HEAP32[$arrayidx31>>2]|0;
     $58 = $width$addr;
     $mul32 = Math_imul($57, $58)|0;
     $59 = $i;
     $add33 = (($mul32) + ($59))|0;
     $arrayidx34 = (($54) + ($add33<<1)|0);
     $d = $arrayidx34;
     $idx = 0;
     $60 = $height$addr;
     $61 = HEAP32[99412]|0;
     $62 = $i;
     $arrayidx35 = (($61) + ($62<<2)|0);
     $63 = HEAP32[$arrayidx35>>2]|0;
     $sub36 = (($60) - ($63))|0;
     $j = $sub36;
     while(1) {
      $64 = $j;
      $tobool38 = ($64|0)!=(0);
      if (!($tobool38)) {
       break;
      }
      $65 = $s;
      $incdec$ptr40 = ((($65)) + 2|0);
      $s = $incdec$ptr40;
      $66 = HEAP16[$65>>1]|0;
      $67 = $d;
      $68 = $idx;
      $arrayidx41 = (($67) + ($68<<1)|0);
      HEAP16[$arrayidx41>>1] = $66;
      $69 = $width$addr;
      $70 = $idx;
      $add42 = (($70) + ($69))|0;
      $idx = $add42;
      $71 = $j;
      $dec44 = (($71) + -1)|0;
      $j = $dec44;
     }
     $done = 0;
    }
   }
   $72 = $i;
   $inc49 = (($72) + 1)|0;
   $i = $inc49;
  }
 }
 $73 = $done;
 STACKTOP = sp;return ($73|0);
}
function _wipe_exitMelt($width,$height,$ticks) {
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $2 = 0, $height$addr = 0, $ticks$addr = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 $0 = HEAP32[99412]|0;
 _Z_Free($0);
 $1 = HEAP32[99410]|0;
 _Z_Free($1);
 $2 = HEAP32[99411]|0;
 _Z_Free($2);
 STACKTOP = sp;return 0;
}
function _wipe_StartScreen($x,$y,$width,$height) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $call = 0, $height$addr = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $call = (_Z_Malloc(64000,1,0)|0);
 HEAP32[99410] = $call;
 $0 = HEAP32[99410]|0;
 _I_ReadScreen($0);
 STACKTOP = sp;return 0;
}
function _wipe_EndScreen($x,$y,$width,$height) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $height$addr = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $call = (_Z_Malloc(64000,1,0)|0);
 HEAP32[99411] = $call;
 $0 = HEAP32[99411]|0;
 _I_ReadScreen($0);
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $width$addr;
 $4 = $height$addr;
 $5 = HEAP32[99410]|0;
 _V_DrawBlock($1,$2,$3,$4,$5);
 STACKTOP = sp;return 0;
}
function _wipe_ScreenWipe($wipeno,$x,$y,$width,$height,$ticks) {
 $wipeno = $wipeno|0;
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 $ticks = $ticks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx8 = 0, $call3 = 0, $height$addr = 0, $lnot = 0, $lnot$ext = 0, $mul = 0, $mul1 = 0, $mul6 = 0, $rc = 0, $ticks$addr = 0, $tobool = 0, $tobool11 = 0, $tobool4 = 0, $width$addr = 0, $wipeno$addr = 0;
 var $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $wipeno$addr = $wipeno;
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $ticks$addr = $ticks;
 $0 = HEAP32[99413]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  HEAP32[99413] = 1;
  $1 = HEAP32[100203]|0;
  HEAP32[99409] = $1;
  $2 = $wipeno$addr;
  $mul = ($2*3)|0;
  $arrayidx = (1936 + ($mul<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $4 = $width$addr;
  $5 = $height$addr;
  $6 = $ticks$addr;
  (FUNCTION_TABLE_iiii[$3 & 255]($4,$5,$6)|0);
 }
 $7 = $width$addr;
 $8 = $height$addr;
 _V_MarkRect(0,0,$7,$8);
 $9 = $wipeno$addr;
 $mul1 = ($9*3)|0;
 $add = (($mul1) + 1)|0;
 $arrayidx2 = (1936 + ($add<<2)|0);
 $10 = HEAP32[$arrayidx2>>2]|0;
 $11 = $width$addr;
 $12 = $height$addr;
 $13 = $ticks$addr;
 $call3 = (FUNCTION_TABLE_iiii[$10 & 255]($11,$12,$13)|0);
 $rc = $call3;
 $14 = $rc;
 $tobool4 = ($14|0)!=(0);
 if (!($tobool4)) {
  $20 = HEAP32[99413]|0;
  $tobool11 = ($20|0)!=(0);
  $lnot = $tobool11 ^ 1;
  $lnot$ext = $lnot&1;
  STACKTOP = sp;return ($lnot$ext|0);
 }
 HEAP32[99413] = 0;
 $15 = $wipeno$addr;
 $mul6 = ($15*3)|0;
 $add7 = (($mul6) + 2)|0;
 $arrayidx8 = (1936 + ($add7<<2)|0);
 $16 = HEAP32[$arrayidx8>>2]|0;
 $17 = $width$addr;
 $18 = $height$addr;
 $19 = $ticks$addr;
 (FUNCTION_TABLE_iiii[$16 & 255]($17,$18,$19)|0);
 $20 = HEAP32[99413]|0;
 $tobool11 = ($20|0)!=(0);
 $lnot = $tobool11 ^ 1;
 $lnot$ext = $lnot&1;
 STACKTOP = sp;return ($lnot$ext|0);
}
function _G_BuildTiccmd($cmd,$maketic) {
 $cmd = $cmd|0;
 $maketic = $maketic|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add105 = 0, $add141 = 0, $add205 = 0, $add237 = 0, $add270 = 0, $add277 = 0, $add280 = 0, $add315 = 0, $add318 = 0, $add336 = 0, $add339 = 0, $add36 = 0, $add46 = 0, $add67 = 0;
 var $add85 = 0, $add93 = 0, $and = 0, $angleturn = 0, $angleturn283 = 0, $angleturn333 = 0, $angleturn341 = 0, $angleturn343 = 0, $angleturn65 = 0, $angleturn74 = 0, $angleturn83 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx104 = 0, $arrayidx110 = 0, $arrayidx113 = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx125 = 0;
 var $arrayidx128 = 0, $arrayidx13 = 0, $arrayidx131 = 0, $arrayidx134 = 0, $arrayidx140 = 0, $arrayidx143 = 0, $arrayidx146 = 0, $arrayidx149 = 0, $arrayidx155 = 0, $arrayidx158 = 0, $arrayidx161 = 0, $arrayidx186 = 0, $arrayidx187 = 0, $arrayidx2 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx21 = 0, $arrayidx210 = 0, $arrayidx215 = 0;
 var $arrayidx222 = 0, $arrayidx24 = 0, $arrayidx243 = 0, $arrayidx246 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx41 = 0, $arrayidx45 = 0, $arrayidx5 = 0, $arrayidx50 = 0, $arrayidx57 = 0, $arrayidx61 = 0, $arrayidx64 = 0, $arrayidx73 = 0, $arrayidx82 = 0, $arrayidx89 = 0, $arrayidx92 = 0, $arrayidx95 = 0;
 var $arrayidx98 = 0, $bstrafe = 0, $buttons = 0, $buttons164 = 0, $buttons175 = 0, $buttons179 = 0, $buttons190 = 0, $buttons195 = 0, $buttons230 = 0, $buttons263 = 0, $buttons322 = 0, $buttons329 = 0, $call = 0, $call174 = 0, $chatchar = 0, $cmd$addr = 0, $cmp = 0, $cmp101 = 0, $cmp107 = 0, $cmp122 = 0;
 var $cmp137 = 0, $cmp169 = 0, $cmp17 = 0, $cmp171 = 0, $cmp184 = 0, $cmp19 = 0, $cmp216 = 0, $cmp219 = 0, $cmp227 = 0, $cmp238 = 0, $cmp250 = 0, $cmp253 = 0, $cmp26 = 0, $cmp260 = 0, $cmp271 = 0, $cmp288 = 0, $cmp292 = 0, $cmp297 = 0, $cmp303 = 0, $cmp308 = 0;
 var $cmp43 = 0, $cmp48 = 0, $cmp70 = 0, $cmp79 = 0, $cmp8 = 0, $consistancy = 0, $conv = 0, $conv152 = 0, $conv153 = 0, $conv165 = 0, $conv167 = 0, $conv176 = 0, $conv178 = 0, $conv180 = 0, $conv182 = 0, $conv191 = 0, $conv193 = 0, $conv196 = 0, $conv198 = 0, $conv231 = 0;
 var $conv233 = 0, $conv264 = 0, $conv266 = 0, $conv284 = 0, $conv286 = 0, $conv314 = 0, $conv316 = 0, $conv317 = 0, $conv319 = 0, $conv328 = 0, $conv334 = 0, $conv335 = 0, $conv337 = 0, $conv338 = 0, $conv340 = 0, $conv342 = 0, $conv344 = 0, $conv346 = 0, $conv59 = 0, $conv66 = 0;
 var $conv68 = 0, $conv75 = 0, $conv77 = 0, $conv84 = 0, $conv86 = 0, $desired_angleturn = 0, $forward = 0, $i = 0, $inc = 0, $inc225 = 0, $inc258 = 0, $key = 0, $lor$ext = 0, $lor$ext16 = 0, $lor$ext249 = 0, $maketic$addr = 0, $mul = 0, $mul282 = 0, $or = 0, $or$cond = 0;
 var $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or166 = 0, $or177 = 0, $or181 = 0, $or192 = 0, $or197 = 0, $or232 = 0, $or265 = 0, $or327 = 0, $rem = 0, $shl = 0, $shl194 = 0, $shl326 = 0, $side = 0, $sidemove = 0;
 var $speed = 0, $strafe = 0, $sub = 0, $sub111 = 0, $sub126 = 0, $sub211 = 0, $sub285 = 0, $sub296 = 0, $sub300 = 0, $sub307 = 0, $sub311 = 0, $sub345 = 0, $sub51 = 0, $sub58 = 0, $sub76 = 0, $sub99 = 0, $tobool = 0, $tobool11 = 0, $tobool114 = 0, $tobool117 = 0;
 var $tobool120 = 0, $tobool129 = 0, $tobool132 = 0, $tobool135 = 0, $tobool14 = 0, $tobool144 = 0, $tobool147 = 0, $tobool150 = 0, $tobool156 = 0, $tobool159 = 0, $tobool162 = 0, $tobool188 = 0, $tobool202 = 0, $tobool208 = 0, $tobool213 = 0, $tobool22 = 0, $tobool223 = 0, $tobool244 = 0, $tobool247 = 0, $tobool25 = 0;
 var $tobool256 = 0, $tobool278 = 0, $tobool30 = 0, $tobool320 = 0, $tobool324 = 0, $tobool33 = 0, $tobool331 = 0, $tobool39 = 0, $tobool4 = 0, $tobool6 = 0, $tobool62 = 0, $tobool90 = 0, $tobool96 = 0, $tspeed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $cmd$addr = $cmd;
 $maketic$addr = $maketic;
 $0 = $cmd$addr;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 $1 = HEAP32[99415]|0;
 $arrayidx = (182512 + ($1<<7)|0);
 $2 = $maketic$addr;
 $rem = (($2|0) % 128)&-1;
 $arrayidx1 = (($arrayidx) + ($rem)|0);
 $3 = HEAP8[$arrayidx1>>0]|0;
 $4 = $cmd$addr;
 $consistancy = ((($4)) + 6|0);
 HEAP8[$consistancy>>0] = $3;
 $5 = HEAP32[32216]|0;
 $arrayidx2 = (184592 + ($5<<2)|0);
 $6 = HEAP32[$arrayidx2>>2]|0;
 $tobool = ($6|0)!=(0);
 if ($tobool) {
  $11 = 1;
 } else {
  $7 = HEAP32[32218]|0;
  $arrayidx3 = ((185716) + ($7<<2)|0);
  $8 = HEAP32[$arrayidx3>>2]|0;
  $tobool4 = ($8|0)!=(0);
  if ($tobool4) {
   $11 = 1;
  } else {
   $9 = HEAP32[32273]|0;
   $arrayidx5 = ((185620) + ($9<<2)|0);
   $10 = HEAP32[$arrayidx5>>2]|0;
   $tobool6 = ($10|0)!=(0);
   $11 = $tobool6;
  }
 }
 $lor$ext = $11&1;
 $strafe = $lor$ext;
 $12 = HEAP32[32217]|0;
 $cmp = ($12|0)>=(256);
 $13 = HEAP32[32275]|0;
 $cmp8 = ($13|0)>=(20);
 $or$cond = $cmp | $cmp8;
 if ($or$cond) {
  $18 = 1;
 } else {
  $14 = HEAP32[32217]|0;
  $arrayidx10 = (184592 + ($14<<2)|0);
  $15 = HEAP32[$arrayidx10>>2]|0;
  $tobool11 = ($15|0)!=(0);
  if ($tobool11) {
   $18 = 1;
  } else {
   $16 = HEAP32[32275]|0;
   $arrayidx13 = ((185620) + ($16<<2)|0);
   $17 = HEAP32[$arrayidx13>>2]|0;
   $tobool14 = ($17|0)!=(0);
   $18 = $tobool14;
  }
 }
 $lor$ext16 = $18&1;
 $speed = $lor$ext16;
 $side = 0;
 $forward = 0;
 $19 = HEAP32[99507]|0;
 $cmp17 = ($19|0)<(0);
 $20 = HEAP32[99507]|0;
 $cmp19 = ($20|0)>(0);
 $or$cond1 = $cmp17 | $cmp19;
 if ($or$cond1) {
  label = 10;
 } else {
  $21 = HEAP32[32208]|0;
  $arrayidx21 = (184592 + ($21<<2)|0);
  $22 = HEAP32[$arrayidx21>>2]|0;
  $tobool22 = ($22|0)!=(0);
  if ($tobool22) {
   label = 10;
  } else {
   $23 = HEAP32[32209]|0;
   $arrayidx24 = (184592 + ($23<<2)|0);
   $24 = HEAP32[$arrayidx24>>2]|0;
   $tobool25 = ($24|0)!=(0);
   if ($tobool25) {
    label = 10;
   } else {
    HEAP32[99508] = 0;
   }
  }
 }
 if ((label|0) == 10) {
  $25 = HEAP32[99363]|0;
  $26 = HEAP32[99508]|0;
  $add = (($26) + ($25))|0;
  HEAP32[99508] = $add;
 }
 $27 = HEAP32[99508]|0;
 $cmp26 = ($27|0)<(6);
 if ($cmp26) {
  $tspeed = 2;
 } else {
  $28 = $speed;
  $tspeed = $28;
 }
 $29 = $strafe;
 $tobool30 = ($29|0)!=(0);
 $30 = HEAP32[32208]|0;
 $arrayidx32 = (184592 + ($30<<2)|0);
 $31 = HEAP32[$arrayidx32>>2]|0;
 $tobool33 = ($31|0)!=(0);
 if ($tobool30) {
  if ($tobool33) {
   $32 = $speed;
   $arrayidx35 = (128736 + ($32<<2)|0);
   $33 = HEAP32[$arrayidx35>>2]|0;
   $34 = $side;
   $add36 = (($34) + ($33))|0;
   $side = $add36;
  }
  $35 = HEAP32[32209]|0;
  $arrayidx38 = (184592 + ($35<<2)|0);
  $36 = HEAP32[$arrayidx38>>2]|0;
  $tobool39 = ($36|0)!=(0);
  if ($tobool39) {
   $37 = $speed;
   $arrayidx41 = (128736 + ($37<<2)|0);
   $38 = HEAP32[$arrayidx41>>2]|0;
   $39 = $side;
   $sub = (($39) - ($38))|0;
   $side = $sub;
  }
  $40 = HEAP32[99507]|0;
  $cmp43 = ($40|0)>(0);
  if ($cmp43) {
   $41 = $speed;
   $arrayidx45 = (128736 + ($41<<2)|0);
   $42 = HEAP32[$arrayidx45>>2]|0;
   $43 = $side;
   $add46 = (($43) + ($42))|0;
   $side = $add46;
  }
  $44 = HEAP32[99507]|0;
  $cmp48 = ($44|0)<(0);
  if ($cmp48) {
   $45 = $speed;
   $arrayidx50 = (128736 + ($45<<2)|0);
   $46 = HEAP32[$arrayidx50>>2]|0;
   $47 = $side;
   $sub51 = (($47) - ($46))|0;
   $side = $sub51;
  }
 } else {
  if ($tobool33) {
   $48 = $tspeed;
   $arrayidx57 = (128744 + ($48<<2)|0);
   $49 = HEAP32[$arrayidx57>>2]|0;
   $50 = $cmd$addr;
   $angleturn = ((($50)) + 2|0);
   $51 = HEAP16[$angleturn>>1]|0;
   $conv = $51 << 16 >> 16;
   $sub58 = (($conv) - ($49))|0;
   $conv59 = $sub58&65535;
   HEAP16[$angleturn>>1] = $conv59;
  }
  $52 = HEAP32[32209]|0;
  $arrayidx61 = (184592 + ($52<<2)|0);
  $53 = HEAP32[$arrayidx61>>2]|0;
  $tobool62 = ($53|0)!=(0);
  if ($tobool62) {
   $54 = $tspeed;
   $arrayidx64 = (128744 + ($54<<2)|0);
   $55 = HEAP32[$arrayidx64>>2]|0;
   $56 = $cmd$addr;
   $angleturn65 = ((($56)) + 2|0);
   $57 = HEAP16[$angleturn65>>1]|0;
   $conv66 = $57 << 16 >> 16;
   $add67 = (($conv66) + ($55))|0;
   $conv68 = $add67&65535;
   HEAP16[$angleturn65>>1] = $conv68;
  }
  $58 = HEAP32[99507]|0;
  $cmp70 = ($58|0)>(0);
  if ($cmp70) {
   $59 = $tspeed;
   $arrayidx73 = (128744 + ($59<<2)|0);
   $60 = HEAP32[$arrayidx73>>2]|0;
   $61 = $cmd$addr;
   $angleturn74 = ((($61)) + 2|0);
   $62 = HEAP16[$angleturn74>>1]|0;
   $conv75 = $62 << 16 >> 16;
   $sub76 = (($conv75) - ($60))|0;
   $conv77 = $sub76&65535;
   HEAP16[$angleturn74>>1] = $conv77;
  }
  $63 = HEAP32[99507]|0;
  $cmp79 = ($63|0)<(0);
  if ($cmp79) {
   $64 = $tspeed;
   $arrayidx82 = (128744 + ($64<<2)|0);
   $65 = HEAP32[$arrayidx82>>2]|0;
   $66 = $cmd$addr;
   $angleturn83 = ((($66)) + 2|0);
   $67 = HEAP16[$angleturn83>>1]|0;
   $conv84 = $67 << 16 >> 16;
   $add85 = (($conv84) + ($65))|0;
   $conv86 = $add85&65535;
   HEAP16[$angleturn83>>1] = $conv86;
  }
 }
 $68 = HEAP32[32210]|0;
 $arrayidx89 = (184592 + ($68<<2)|0);
 $69 = HEAP32[$arrayidx89>>2]|0;
 $tobool90 = ($69|0)!=(0);
 if ($tobool90) {
  $70 = $speed;
  $arrayidx92 = (128728 + ($70<<2)|0);
  $71 = HEAP32[$arrayidx92>>2]|0;
  $72 = $forward;
  $add93 = (($72) + ($71))|0;
  $forward = $add93;
 }
 $73 = HEAP32[32211]|0;
 $arrayidx95 = (184592 + ($73<<2)|0);
 $74 = HEAP32[$arrayidx95>>2]|0;
 $tobool96 = ($74|0)!=(0);
 if ($tobool96) {
  $75 = $speed;
  $arrayidx98 = (128728 + ($75<<2)|0);
  $76 = HEAP32[$arrayidx98>>2]|0;
  $77 = $forward;
  $sub99 = (($77) - ($76))|0;
  $forward = $sub99;
 }
 $78 = HEAP32[99509]|0;
 $cmp101 = ($78|0)<(0);
 if ($cmp101) {
  $79 = $speed;
  $arrayidx104 = (128728 + ($79<<2)|0);
  $80 = HEAP32[$arrayidx104>>2]|0;
  $81 = $forward;
  $add105 = (($81) + ($80))|0;
  $forward = $add105;
 }
 $82 = HEAP32[99509]|0;
 $cmp107 = ($82|0)>(0);
 if ($cmp107) {
  $83 = $speed;
  $arrayidx110 = (128728 + ($83<<2)|0);
  $84 = HEAP32[$arrayidx110>>2]|0;
  $85 = $forward;
  $sub111 = (($85) - ($84))|0;
  $forward = $sub111;
 }
 $86 = HEAP32[32212]|0;
 $arrayidx113 = (184592 + ($86<<2)|0);
 $87 = HEAP32[$arrayidx113>>2]|0;
 $tobool114 = ($87|0)!=(0);
 if ($tobool114) {
  label = 43;
 } else {
  $88 = HEAP32[32276]|0;
  $arrayidx116 = ((185620) + ($88<<2)|0);
  $89 = HEAP32[$arrayidx116>>2]|0;
  $tobool117 = ($89|0)!=(0);
  if ($tobool117) {
   label = 43;
  } else {
   $90 = HEAP32[32220]|0;
   $arrayidx119 = ((185716) + ($90<<2)|0);
   $91 = HEAP32[$arrayidx119>>2]|0;
   $tobool120 = ($91|0)!=(0);
   $92 = HEAP32[99510]|0;
   $cmp122 = ($92|0)<(0);
   $or$cond2 = $tobool120 | $cmp122;
   if ($or$cond2) {
    label = 43;
   }
  }
 }
 if ((label|0) == 43) {
  $93 = $speed;
  $arrayidx125 = (128736 + ($93<<2)|0);
  $94 = HEAP32[$arrayidx125>>2]|0;
  $95 = $side;
  $sub126 = (($95) - ($94))|0;
  $side = $sub126;
 }
 $96 = HEAP32[32213]|0;
 $arrayidx128 = (184592 + ($96<<2)|0);
 $97 = HEAP32[$arrayidx128>>2]|0;
 $tobool129 = ($97|0)!=(0);
 if ($tobool129) {
  label = 47;
 } else {
  $98 = HEAP32[32277]|0;
  $arrayidx131 = ((185620) + ($98<<2)|0);
  $99 = HEAP32[$arrayidx131>>2]|0;
  $tobool132 = ($99|0)!=(0);
  if ($tobool132) {
   label = 47;
  } else {
   $100 = HEAP32[32221]|0;
   $arrayidx134 = ((185716) + ($100<<2)|0);
   $101 = HEAP32[$arrayidx134>>2]|0;
   $tobool135 = ($101|0)!=(0);
   $102 = HEAP32[99510]|0;
   $cmp137 = ($102|0)>(0);
   $or$cond3 = $tobool135 | $cmp137;
   if ($or$cond3) {
    label = 47;
   }
  }
 }
 if ((label|0) == 47) {
  $103 = $speed;
  $arrayidx140 = (128736 + ($103<<2)|0);
  $104 = HEAP32[$arrayidx140>>2]|0;
  $105 = $side;
  $add141 = (($105) + ($104))|0;
  $side = $add141;
 }
 $call = (_HU_dequeueChatChar()|0);
 $106 = $cmd$addr;
 $chatchar = ((($106)) + 4|0);
 HEAP8[$chatchar>>0] = $call;
 $107 = HEAP32[32214]|0;
 $arrayidx143 = (184592 + ($107<<2)|0);
 $108 = HEAP32[$arrayidx143>>2]|0;
 $tobool144 = ($108|0)!=(0);
 if ($tobool144) {
  label = 51;
 } else {
  $109 = HEAP32[99718]|0;
  $arrayidx146 = ((185716) + ($109<<2)|0);
  $110 = HEAP32[$arrayidx146>>2]|0;
  $tobool147 = ($110|0)!=(0);
  if ($tobool147) {
   label = 51;
  } else {
   $111 = HEAP32[99722]|0;
   $arrayidx149 = ((185620) + ($111<<2)|0);
   $112 = HEAP32[$arrayidx149>>2]|0;
   $tobool150 = ($112|0)!=(0);
   if ($tobool150) {
    label = 51;
   }
  }
 }
 if ((label|0) == 51) {
  $113 = $cmd$addr;
  $buttons = ((($113)) + 5|0);
  $114 = HEAP8[$buttons>>0]|0;
  $conv152 = $114&255;
  $or = $conv152 | 1;
  $conv153 = $or&255;
  HEAP8[$buttons>>0] = $conv153;
 }
 $115 = HEAP32[32215]|0;
 $arrayidx155 = (184592 + ($115<<2)|0);
 $116 = HEAP32[$arrayidx155>>2]|0;
 $tobool156 = ($116|0)!=(0);
 if ($tobool156) {
  label = 55;
 } else {
  $117 = HEAP32[32274]|0;
  $arrayidx158 = ((185620) + ($117<<2)|0);
  $118 = HEAP32[$arrayidx158>>2]|0;
  $tobool159 = ($118|0)!=(0);
  if ($tobool159) {
   label = 55;
  } else {
   $119 = HEAP32[32223]|0;
   $arrayidx161 = ((185716) + ($119<<2)|0);
   $120 = HEAP32[$arrayidx161>>2]|0;
   $tobool162 = ($120|0)!=(0);
   if ($tobool162) {
    label = 55;
   }
  }
 }
 if ((label|0) == 55) {
  $121 = $cmd$addr;
  $buttons164 = ((($121)) + 5|0);
  $122 = HEAP8[$buttons164>>0]|0;
  $conv165 = $122&255;
  $or166 = $conv165 | 2;
  $conv167 = $or166&255;
  HEAP8[$buttons164>>0] = $conv167;
  HEAP32[99511] = 0;
 }
 $123 = HEAP32[99416]|0;
 $cmp169 = ($123|0)==(0);
 $124 = HEAP32[99512]|0;
 $cmp171 = ($124|0)!=(0);
 $or$cond4 = $cmp169 & $cmp171;
 L80: do {
  if ($or$cond4) {
   $125 = HEAP32[99512]|0;
   $call174 = (_G_NextWeapon($125)|0);
   $i = $call174;
   $126 = $cmd$addr;
   $buttons175 = ((($126)) + 5|0);
   $127 = HEAP8[$buttons175>>0]|0;
   $conv176 = $127&255;
   $or177 = $conv176 | 4;
   $conv178 = $or177&255;
   HEAP8[$buttons175>>0] = $conv178;
   $128 = $i;
   $shl = $128 << 3;
   $129 = $cmd$addr;
   $buttons179 = ((($129)) + 5|0);
   $130 = HEAP8[$buttons179>>0]|0;
   $conv180 = $130&255;
   $or181 = $conv180 | $shl;
   $conv182 = $or181&255;
   HEAP8[$buttons179>>0] = $conv182;
  } else {
   $i = 0;
   while(1) {
    $131 = $i;
    $cmp184 = ($131>>>0)<(8);
    if (!($cmp184)) {
     break L80;
    }
    $132 = $i;
    $arrayidx186 = (2256 + ($132<<2)|0);
    $133 = HEAP32[$arrayidx186>>2]|0;
    $134 = HEAP32[$133>>2]|0;
    $key = $134;
    $135 = $key;
    $arrayidx187 = (184592 + ($135<<2)|0);
    $136 = HEAP32[$arrayidx187>>2]|0;
    $tobool188 = ($136|0)!=(0);
    if ($tobool188) {
     break;
    }
    $142 = $i;
    $inc = (($142) + 1)|0;
    $i = $inc;
   }
   $137 = $cmd$addr;
   $buttons190 = ((($137)) + 5|0);
   $138 = HEAP8[$buttons190>>0]|0;
   $conv191 = $138&255;
   $or192 = $conv191 | 4;
   $conv193 = $or192&255;
   HEAP8[$buttons190>>0] = $conv193;
   $139 = $i;
   $shl194 = $139 << 3;
   $140 = $cmd$addr;
   $buttons195 = ((($140)) + 5|0);
   $141 = HEAP8[$buttons195>>0]|0;
   $conv196 = $141&255;
   $or197 = $conv196 | $shl194;
   $conv198 = $or197&255;
   HEAP8[$buttons195>>0] = $conv198;
  }
 } while(0);
 HEAP32[99512] = 0;
 $143 = HEAP32[32219]|0;
 $arrayidx201 = ((185716) + ($143<<2)|0);
 $144 = HEAP32[$arrayidx201>>2]|0;
 $tobool202 = ($144|0)!=(0);
 if ($tobool202) {
  $145 = $speed;
  $arrayidx204 = (128728 + ($145<<2)|0);
  $146 = HEAP32[$arrayidx204>>2]|0;
  $147 = $forward;
  $add205 = (($147) + ($146))|0;
  $forward = $add205;
 }
 $148 = HEAP32[32222]|0;
 $arrayidx207 = ((185716) + ($148<<2)|0);
 $149 = HEAP32[$arrayidx207>>2]|0;
 $tobool208 = ($149|0)!=(0);
 if ($tobool208) {
  $150 = $speed;
  $arrayidx210 = (128728 + ($150<<2)|0);
  $151 = HEAP32[$arrayidx210>>2]|0;
  $152 = $forward;
  $sub211 = (($152) - ($151))|0;
  $forward = $sub211;
 }
 $153 = HEAP32[32281]|0;
 $tobool213 = ($153|0)!=(0);
 do {
  if ($tobool213) {
   $154 = HEAP32[32219]|0;
   $arrayidx215 = ((185716) + ($154<<2)|0);
   $155 = HEAP32[$arrayidx215>>2]|0;
   $156 = HEAP32[99513]|0;
   $cmp216 = ($155|0)!=($156|0);
   $157 = HEAP32[99514]|0;
   $cmp219 = ($157|0)>(1);
   $or$cond5 = $cmp216 & $cmp219;
   do {
    if ($or$cond5) {
     $158 = HEAP32[32219]|0;
     $arrayidx222 = ((185716) + ($158<<2)|0);
     $159 = HEAP32[$arrayidx222>>2]|0;
     HEAP32[99513] = $159;
     $160 = HEAP32[99513]|0;
     $tobool223 = ($160|0)!=(0);
     if ($tobool223) {
      $161 = HEAP32[99511]|0;
      $inc225 = (($161) + 1)|0;
      HEAP32[99511] = $inc225;
     }
     $162 = HEAP32[99511]|0;
     $cmp227 = ($162|0)==(2);
     if ($cmp227) {
      $163 = $cmd$addr;
      $buttons230 = ((($163)) + 5|0);
      $164 = HEAP8[$buttons230>>0]|0;
      $conv231 = $164&255;
      $or232 = $conv231 | 2;
      $conv233 = $or232&255;
      HEAP8[$buttons230>>0] = $conv233;
      HEAP32[99511] = 0;
      break;
     } else {
      HEAP32[99514] = 0;
      break;
     }
    } else {
     $165 = HEAP32[99363]|0;
     $166 = HEAP32[99514]|0;
     $add237 = (($166) + ($165))|0;
     HEAP32[99514] = $add237;
     $167 = HEAP32[99514]|0;
     $cmp238 = ($167|0)>(20);
     if (!($cmp238)) {
      break;
     }
     HEAP32[99511] = 0;
     HEAP32[99513] = 0;
    }
   } while(0);
   $168 = HEAP32[32218]|0;
   $arrayidx243 = ((185716) + ($168<<2)|0);
   $169 = HEAP32[$arrayidx243>>2]|0;
   $tobool244 = ($169|0)!=(0);
   if ($tobool244) {
    $172 = 1;
   } else {
    $170 = HEAP32[32273]|0;
    $arrayidx246 = ((185620) + ($170<<2)|0);
    $171 = HEAP32[$arrayidx246>>2]|0;
    $tobool247 = ($171|0)!=(0);
    $172 = $tobool247;
   }
   $lor$ext249 = $172&1;
   $bstrafe = $lor$ext249;
   $173 = $bstrafe;
   $174 = HEAP32[99515]|0;
   $cmp250 = ($173|0)!=($174|0);
   $175 = HEAP32[99516]|0;
   $cmp253 = ($175|0)>(1);
   $or$cond6 = $cmp250 & $cmp253;
   if (!($or$cond6)) {
    $182 = HEAP32[99363]|0;
    $183 = HEAP32[99516]|0;
    $add270 = (($183) + ($182))|0;
    HEAP32[99516] = $add270;
    $184 = HEAP32[99516]|0;
    $cmp271 = ($184|0)>(20);
    if (!($cmp271)) {
     break;
    }
    HEAP32[99517] = 0;
    HEAP32[99515] = 0;
    break;
   }
   $176 = $bstrafe;
   HEAP32[99515] = $176;
   $177 = HEAP32[99515]|0;
   $tobool256 = ($177|0)!=(0);
   if ($tobool256) {
    $178 = HEAP32[99517]|0;
    $inc258 = (($178) + 1)|0;
    HEAP32[99517] = $inc258;
   }
   $179 = HEAP32[99517]|0;
   $cmp260 = ($179|0)==(2);
   if ($cmp260) {
    $180 = $cmd$addr;
    $buttons263 = ((($180)) + 5|0);
    $181 = HEAP8[$buttons263>>0]|0;
    $conv264 = $181&255;
    $or265 = $conv264 | 2;
    $conv266 = $or265&255;
    HEAP8[$buttons263>>0] = $conv266;
    HEAP32[99517] = 0;
    break;
   } else {
    HEAP32[99516] = 0;
    break;
   }
  }
 } while(0);
 $185 = HEAP32[99417]|0;
 $186 = $forward;
 $add277 = (($186) + ($185))|0;
 $forward = $add277;
 $187 = $strafe;
 $tobool278 = ($187|0)!=(0);
 $188 = HEAP32[99418]|0;
 if ($tobool278) {
  $mul = $188<<1;
  $189 = $side;
  $add280 = (($189) + ($mul))|0;
  $side = $add280;
 } else {
  $mul282 = $188<<3;
  $190 = $cmd$addr;
  $angleturn283 = ((($190)) + 2|0);
  $191 = HEAP16[$angleturn283>>1]|0;
  $conv284 = $191 << 16 >> 16;
  $sub285 = (($conv284) - ($mul282))|0;
  $conv286 = $sub285&65535;
  HEAP16[$angleturn283>>1] = $conv286;
 }
 $192 = HEAP32[99418]|0;
 $cmp288 = ($192|0)==(0);
 if ($cmp288) {
  HEAP32[99419] = 0;
 }
 HEAP32[99417] = 0;
 HEAP32[99418] = 0;
 $193 = $forward;
 $194 = HEAP32[(128732)>>2]|0;
 $cmp292 = ($193|0)>($194|0);
 do {
  if ($cmp292) {
   $195 = HEAP32[(128732)>>2]|0;
   $forward = $195;
  } else {
   $196 = $forward;
   $197 = HEAP32[(128732)>>2]|0;
   $sub296 = (0 - ($197))|0;
   $cmp297 = ($196|0)<($sub296|0);
   if (!($cmp297)) {
    break;
   }
   $198 = HEAP32[(128732)>>2]|0;
   $sub300 = (0 - ($198))|0;
   $forward = $sub300;
  }
 } while(0);
 $199 = $side;
 $200 = HEAP32[(128732)>>2]|0;
 $cmp303 = ($199|0)>($200|0);
 do {
  if ($cmp303) {
   $201 = HEAP32[(128732)>>2]|0;
   $side = $201;
  } else {
   $202 = $side;
   $203 = HEAP32[(128732)>>2]|0;
   $sub307 = (0 - ($203))|0;
   $cmp308 = ($202|0)<($sub307|0);
   if (!($cmp308)) {
    break;
   }
   $204 = HEAP32[(128732)>>2]|0;
   $sub311 = (0 - ($204))|0;
   $side = $sub311;
  }
 } while(0);
 $205 = $forward;
 $206 = $cmd$addr;
 $207 = HEAP8[$206>>0]|0;
 $conv314 = $207 << 24 >> 24;
 $add315 = (($conv314) + ($205))|0;
 $conv316 = $add315&255;
 HEAP8[$206>>0] = $conv316;
 $208 = $side;
 $209 = $cmd$addr;
 $sidemove = ((($209)) + 1|0);
 $210 = HEAP8[$sidemove>>0]|0;
 $conv317 = $210 << 24 >> 24;
 $add318 = (($conv317) + ($208))|0;
 $conv319 = $add318&255;
 HEAP8[$sidemove>>0] = $conv319;
 $211 = HEAP32[99420]|0;
 $tobool320 = ($211|0)!=(0);
 if ($tobool320) {
  HEAP32[99420] = 0;
  $212 = $cmd$addr;
  $buttons322 = ((($212)) + 5|0);
  HEAP8[$buttons322>>0] = -127;
 }
 $213 = HEAP32[99421]|0;
 $tobool324 = ($213|0)!=(0);
 if ($tobool324) {
  HEAP32[99421] = 0;
  $214 = HEAP32[99518]|0;
  $shl326 = $214 << 2;
  $or327 = 130 | $shl326;
  $conv328 = $or327&255;
  $215 = $cmd$addr;
  $buttons329 = ((($215)) + 5|0);
  HEAP8[$buttons329>>0] = $conv328;
 }
 $216 = HEAP32[99422]|0;
 $tobool331 = ($216|0)!=(0);
 if (!($tobool331)) {
  STACKTOP = sp;return;
 }
 $217 = $cmd$addr;
 $angleturn333 = ((($217)) + 2|0);
 $218 = HEAP16[$angleturn333>>1]|0;
 $conv334 = $218 << 16 >> 16;
 $219 = HEAP16[200746]|0;
 $conv335 = $219 << 16 >> 16;
 $add336 = (($conv334) + ($conv335))|0;
 $conv337 = $add336&65535;
 $desired_angleturn = $conv337;
 $220 = $desired_angleturn;
 $conv338 = $220 << 16 >> 16;
 $add339 = (($conv338) + 128)|0;
 $and = $add339 & 65280;
 $conv340 = $and&65535;
 $221 = $cmd$addr;
 $angleturn341 = ((($221)) + 2|0);
 HEAP16[$angleturn341>>1] = $conv340;
 $222 = $desired_angleturn;
 $conv342 = $222 << 16 >> 16;
 $223 = $cmd$addr;
 $angleturn343 = ((($223)) + 2|0);
 $224 = HEAP16[$angleturn343>>1]|0;
 $conv344 = $224 << 16 >> 16;
 $sub345 = (($conv342) - ($conv344))|0;
 $conv346 = $sub345&65535;
 HEAP16[200746] = $conv346;
 STACKTOP = sp;return;
}
function _G_NextWeapon($direction) {
 $direction = $direction|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add10 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx5 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp4 = 0, $cmp7 = 0, $direction$addr = 0, $i = 0, $inc = 0, $lnot = 0, $pendingweapon = 0, $pendingweapon3 = 0, $readyweapon = 0, $rem = 0;
 var $start_i = 0, $tobool = 0, $weapon = 0, $weapon_num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $direction$addr = $direction;
 $0 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($0*288)|0)|0);
 $pendingweapon = ((($arrayidx)) + 124|0);
 $1 = HEAP32[$pendingweapon>>2]|0;
 $cmp = ($1|0)==(10);
 $2 = HEAP32[99415]|0;
 $arrayidx1 = (183056 + (($2*288)|0)|0);
 if ($cmp) {
  $readyweapon = ((($arrayidx1)) + 120|0);
  $3 = HEAP32[$readyweapon>>2]|0;
  $weapon = $3;
 } else {
  $pendingweapon3 = ((($arrayidx1)) + 124|0);
  $4 = HEAP32[$pendingweapon3>>2]|0;
  $weapon = $4;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $cmp4 = ($5>>>0)<(9);
  if (!($cmp4)) {
   break;
  }
  $6 = $i;
  $arrayidx5 = (2288 + ($6<<3)|0);
  $7 = HEAP32[$arrayidx5>>2]|0;
  $8 = $weapon;
  $cmp7 = ($7|0)==($8|0);
  if ($cmp7) {
   break;
  }
  $9 = $i;
  $inc = (($9) + 1)|0;
  $i = $inc;
 }
 $10 = $i;
 $start_i = $10;
 while(1) {
  $11 = $direction$addr;
  $12 = $i;
  $add = (($12) + ($11))|0;
  $i = $add;
  $13 = $i;
  $add10 = (($13) + 9)|0;
  $rem = (($add10>>>0) % 9)&-1;
  $i = $rem;
  $14 = $i;
  $15 = $start_i;
  $cmp11 = ($14|0)!=($15|0);
  if (!($cmp11)) {
   label = 11;
   break;
  }
  $16 = $i;
  $arrayidx12 = (2288 + ($16<<3)|0);
  $17 = HEAP32[$arrayidx12>>2]|0;
  $call = (_WeaponSelectable($17)|0);
  $tobool = ($call|0)!=(0);
  $lnot = $tobool ^ 1;
  if (!($lnot)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  $18 = $i;
  $arrayidx14 = (2288 + ($18<<3)|0);
  $weapon_num = ((($arrayidx14)) + 4|0);
  $19 = HEAP32[$weapon_num>>2]|0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _WeaponSelectable($weapon) {
 $weapon = $weapon|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx21 = 0;
 var $arrayidx23 = 0, $arrayidx26 = 0, $arrayidx27 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp19 = 0, $cmp2 = 0, $cmp7 = 0, $cmp8 = 0, $cmp9 = 0, $cond = 0, $cond6 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $powers = 0, $retval = 0, $tobool = 0;
 var $tobool24 = 0, $tobool28 = 0, $weapon$addr = 0, $weaponowned = 0, $weaponowned22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $weapon$addr = $weapon;
 $0 = $weapon$addr;
 $cmp = ($0|0)==(8);
 if ($cmp) {
  $1 = HEAP32[99356]|0;
  $cmp1 = ($1|0)==(4);
  if ($cmp1) {
   $cond6 = 0;
  } else {
   $2 = HEAP32[99356]|0;
   $cmp2 = ($2|0)==(5);
   $3 = HEAP32[99356]|0;
   $cond = $cmp2 ? 1 : $3;
   $cond6 = $cond;
  }
  $cmp7 = ($cond6|0)==(0);
  if ($cmp7) {
   $retval = 0;
   $16 = $retval;
   STACKTOP = sp;return ($16|0);
  }
 }
 $4 = $weapon$addr;
 $cmp8 = ($4|0)==(5);
 $5 = $weapon$addr;
 $cmp9 = ($5|0)==(6);
 $or$cond = $cmp8 | $cmp9;
 $6 = HEAP32[99356]|0;
 $cmp11 = ($6|0)==(0);
 $or$cond1 = $or$cond & $cmp11;
 $7 = HEAP32[32168]|0;
 $cmp13 = ($7|0)==(0);
 $or$cond2 = $or$cond1 & $cmp13;
 if ($or$cond2) {
  $retval = 0;
  $16 = $retval;
  STACKTOP = sp;return ($16|0);
 }
 $8 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($8*288)|0)|0);
 $weaponowned = ((($arrayidx)) + 128|0);
 $9 = $weapon$addr;
 $arrayidx16 = (($weaponowned) + ($9<<2)|0);
 $10 = HEAP32[$arrayidx16>>2]|0;
 $tobool = ($10|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $16 = $retval;
  STACKTOP = sp;return ($16|0);
 }
 $11 = $weapon$addr;
 $cmp19 = ($11|0)==(0);
 if ($cmp19) {
  $12 = HEAP32[99415]|0;
  $arrayidx21 = (183056 + (($12*288)|0)|0);
  $weaponowned22 = ((($arrayidx21)) + 128|0);
  $arrayidx23 = ((($weaponowned22)) + 28|0);
  $13 = HEAP32[$arrayidx23>>2]|0;
  $tobool24 = ($13|0)!=(0);
  if ($tobool24) {
   $14 = HEAP32[99415]|0;
   $arrayidx26 = (183056 + (($14*288)|0)|0);
   $powers = ((($arrayidx26)) + 52|0);
   $arrayidx27 = ((($powers)) + 4|0);
   $15 = HEAP32[$arrayidx27>>2]|0;
   $tobool28 = ($15|0)!=(0);
   if (!($tobool28)) {
    $retval = 0;
    $16 = $retval;
    STACKTOP = sp;return ($16|0);
   }
  }
 }
 $retval = 1;
 $16 = $retval;
 STACKTOP = sp;return ($16|0);
}
function _G_DoLoadLevel() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $arrayidx26 = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp14 = 0, $cmp18 = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $frags = 0;
 var $i = 0, $inc = 0, $message = 0, $or$cond = 0, $playerstate = 0, $playerstate21 = 0, $skytexturename = 0, $tobool = 0, $tobool24 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_R_FlatNumForName(143530)|0);
 HEAP32[100032] = $call;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $1 = HEAP32[32169]|0;
  $cmp1 = ($1|0)==(8);
  $2 = HEAP32[32169]|0;
  $cmp2 = ($2|0)==(9);
  $or$cond = $cmp1 | $cmp2;
  if ($or$cond) {
   $3 = HEAP32[99423]|0;
   $cmp3 = ($3|0)<(12);
   do {
    if ($cmp3) {
     $skytexturename = 143537;
    } else {
     $4 = HEAP32[99423]|0;
     $cmp5 = ($4|0)<(21);
     if ($cmp5) {
      $skytexturename = 143542;
      break;
     } else {
      $skytexturename = 143547;
      break;
     }
    }
   } while(0);
   $5 = $skytexturename;
   $skytexturename = $5;
   $6 = $skytexturename;
   $call9 = (_R_TextureNumForName($6)|0);
   HEAP32[100033] = $call9;
  }
 }
 $7 = HEAP32[32172]|0;
 $cmp11 = ($7|0)==(0);
 if ($cmp11) {
  HEAP32[32172] = -1;
 }
 HEAP32[99416] = 0;
 $i = 0;
 while(1) {
  $8 = $i;
  $cmp14 = ($8|0)<(4);
  if (!($cmp14)) {
   break;
  }
  $9 = $i;
  $arrayidx = (183024 + ($9<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  $10 = $i;
  $arrayidx15 = (183040 + ($10<<2)|0);
  $11 = HEAP32[$arrayidx15>>2]|0;
  $tobool = ($11|0)!=(0);
  if ($tobool) {
   $12 = $i;
   $arrayidx17 = (183056 + (($12*288)|0)|0);
   $playerstate = ((($arrayidx17)) + 4|0);
   $13 = HEAP32[$playerstate>>2]|0;
   $cmp18 = ($13|0)==(1);
   if ($cmp18) {
    $14 = $i;
    $arrayidx20 = (183056 + (($14*288)|0)|0);
    $playerstate21 = ((($arrayidx20)) + 4|0);
    HEAP32[$playerstate21>>2] = 2;
   }
  }
  $15 = $i;
  $arrayidx23 = (183056 + (($15*288)|0)|0);
  $frags = ((($arrayidx23)) + 104|0);
  ;HEAP32[$frags>>2]=0|0;HEAP32[$frags+4>>2]=0|0;HEAP32[$frags+8>>2]=0|0;HEAP32[$frags+12>>2]=0|0;
  $16 = $i;
  $inc = (($16) + 1)|0;
  $i = $inc;
 }
 $17 = HEAP32[99424]|0;
 $18 = HEAP32[99423]|0;
 $19 = HEAP32[99425]|0;
 _P_SetupLevel($17,$18,0,$19);
 $20 = HEAP32[99415]|0;
 HEAP32[99426] = $20;
 HEAP32[99427] = 0;
 _Z_CheckHeap();
 _memset((184592|0),0,1024)|0;
 HEAP32[99510] = 0;
 HEAP32[99509] = 0;
 HEAP32[99507] = 0;
 HEAP32[99417] = 0;
 HEAP32[99418] = 0;
 HEAP32[99428] = 0;
 HEAP32[99421] = 0;
 HEAP32[99420] = 0;
 dest=185712; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=185616; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $21 = HEAP32[99414]|0;
 $tobool24 = ($21|0)!=(0);
 if (!($tobool24)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[99415]|0;
 $arrayidx26 = (183056 + (($22*288)|0)|0);
 $message = ((($arrayidx26)) + 224|0);
 HEAP32[$message>>2] = 143552;
 STACKTOP = sp;return;
}
function _G_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add100 = 0, $arrayidx = 0, $arrayidx87 = 0, $arrayidx95 = 0, $call = 0, $call41 = 0, $call45 = 0, $call52 = 0, $call62 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp17 = 0, $cmp20 = 0, $cmp23 = 0, $cmp29 = 0, $cmp3 = 0, $cmp36 = 0, $cmp50 = 0, $cmp6 = 0;
 var $cmp60 = 0, $cmp65 = 0, $cmp68 = 0, $cmp71 = 0, $cmp74 = 0, $cmp80 = 0, $cmp84 = 0, $cmp9 = 0, $cmp92 = 0, $data1 = 0, $data1104 = 0, $data125 = 0, $data131 = 0, $data167 = 0, $data173 = 0, $data179 = 0, $data183 = 0, $data186 = 0, $data191 = 0, $data194 = 0;
 var $data198 = 0, $data2 = 0, $data2105 = 0, $data299 = 0, $data3 = 0, $data3106 = 0, $data4 = 0, $div = 0, $div102 = 0, $ev$addr = 0, $inc = 0, $mul = 0, $mul101 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $retval = 0, $spec$store$select = 0, $tobool = 0, $tobool13 = 0;
 var $tobool15 = 0, $tobool26 = 0, $tobool32 = 0, $tobool38 = 0, $tobool42 = 0, $tobool46 = 0, $tobool5 = 0, $tobool53 = 0, $tobool57 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ev$addr = $ev;
 $0 = HEAP32[99416]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $1 = $ev$addr;
  $2 = HEAP32[$1>>2]|0;
  $cmp1 = ($2|0)==(0);
  if ($cmp1) {
   $3 = $ev$addr;
   $data1 = ((($3)) + 4|0);
   $4 = HEAP32[$data1>>2]|0;
   $5 = HEAP32[32229]|0;
   $cmp3 = ($4|0)==($5|0);
   if ($cmp3) {
    $6 = HEAP32[99429]|0;
    $tobool = ($6|0)==(0);
    $7 = HEAP32[99430]|0;
    $tobool5 = ($7|0)!=(0);
    $or$cond = $tobool & $tobool5;
    if (!($or$cond)) {
     while(1) {
      $8 = HEAP32[99426]|0;
      $inc = (($8) + 1)|0;
      HEAP32[99426] = $inc;
      $9 = HEAP32[99426]|0;
      $cmp6 = ($9|0)==(4);
      $spec$store$select = $cmp6 ? 0 : $inc;
      HEAP32[99426] = $spec$store$select;
      $10 = HEAP32[99426]|0;
      $arrayidx = (183040 + ($10<<2)|0);
      $11 = HEAP32[$arrayidx>>2]|0;
      $tobool8 = ($11|0)!=(0);
      if ($tobool8) {
       break;
      }
      $12 = HEAP32[99426]|0;
      $13 = HEAP32[99415]|0;
      $cmp9 = ($12|0)!=($13|0);
      if (!($cmp9)) {
       break;
      }
     }
     $retval = 1;
     $78 = $retval;
     STACKTOP = sp;return ($78|0);
    }
   }
  }
 }
 $14 = HEAP32[99427]|0;
 $cmp11 = ($14|0)!=(0);
 $15 = HEAP32[99429]|0;
 $tobool13 = ($15|0)!=(0);
 $or$cond1 = $cmp11 | $tobool13;
 if (!($or$cond1)) {
  $16 = HEAP32[99431]|0;
  $tobool15 = ($16|0)!=(0);
  $17 = HEAP32[99416]|0;
  $cmp17 = ($17|0)==(3);
  $or$cond2 = $tobool15 | $cmp17;
  if ($or$cond2) {
   $18 = $ev$addr;
   $19 = HEAP32[$18>>2]|0;
   $cmp20 = ($19|0)==(0);
   do {
    if (!($cmp20)) {
     $20 = $ev$addr;
     $21 = HEAP32[$20>>2]|0;
     $cmp23 = ($21|0)==(2);
     if ($cmp23) {
      $22 = $ev$addr;
      $data125 = ((($22)) + 4|0);
      $23 = HEAP32[$data125>>2]|0;
      $tobool26 = ($23|0)!=(0);
      if ($tobool26) {
       break;
      }
     }
     $24 = $ev$addr;
     $25 = HEAP32[$24>>2]|0;
     $cmp29 = ($25|0)==(3);
     if ($cmp29) {
      $26 = $ev$addr;
      $data131 = ((($26)) + 4|0);
      $27 = HEAP32[$data131>>2]|0;
      $tobool32 = ($27|0)!=(0);
      if ($tobool32) {
       break;
      }
     }
     $retval = 0;
     $78 = $retval;
     STACKTOP = sp;return ($78|0);
    }
   } while(0);
   _M_StartControlPanel();
   $retval = 1;
   $78 = $retval;
   STACKTOP = sp;return ($78|0);
  }
 }
 $28 = HEAP32[99416]|0;
 $cmp36 = ($28|0)==(0);
 if ($cmp36) {
  $29 = $ev$addr;
  $call = (_HU_Responder($29)|0);
  $tobool38 = ($call|0)!=(0);
  if ($tobool38) {
   $retval = 1;
   $78 = $retval;
   STACKTOP = sp;return ($78|0);
  }
  $30 = $ev$addr;
  $call41 = (_ST_Responder($30)|0);
  $tobool42 = ($call41|0)!=(0);
  if ($tobool42) {
   $retval = 1;
   $78 = $retval;
   STACKTOP = sp;return ($78|0);
  }
  $31 = $ev$addr;
  $call45 = (_AM_Responder($31)|0);
  $tobool46 = ($call45|0)!=(0);
  if ($tobool46) {
   $retval = 1;
   $78 = $retval;
   STACKTOP = sp;return ($78|0);
  }
 }
 $32 = HEAP32[99416]|0;
 $cmp50 = ($32|0)==(2);
 if ($cmp50) {
  $33 = $ev$addr;
  $call52 = (_F_Responder($33)|0);
  $tobool53 = ($call52|0)!=(0);
  if ($tobool53) {
   $retval = 1;
   $78 = $retval;
   STACKTOP = sp;return ($78|0);
  }
 }
 $34 = HEAP32[99414]|0;
 $tobool57 = ($34|0)!=(0);
 if ($tobool57) {
  $35 = $ev$addr;
  $36 = HEAP32[$35>>2]|0;
  $cmp60 = ($36|0)==(2);
  if ($cmp60) {
   $37 = $ev$addr;
   $data2 = ((($37)) + 8|0);
   $38 = HEAP32[$data2>>2]|0;
   $call62 = (Math_abs(($38|0))|0);
   HEAP32[99419] = $call62;
  }
 }
 $39 = $ev$addr;
 $40 = HEAP32[$39>>2]|0;
 $cmp65 = ($40|0)==(0);
 if ($cmp65) {
  $41 = $ev$addr;
  $data167 = ((($41)) + 4|0);
  $42 = HEAP32[$data167>>2]|0;
  $43 = HEAP32[99719]|0;
  $cmp68 = ($42|0)==($43|0);
  if ($cmp68) {
   HEAP32[99512] = -1;
  } else {
   label = 34;
  }
 } else {
  label = 34;
 }
 if ((label|0) == 34) {
  $44 = $ev$addr;
  $45 = HEAP32[$44>>2]|0;
  $cmp71 = ($45|0)==(0);
  if ($cmp71) {
   $46 = $ev$addr;
   $data173 = ((($46)) + 4|0);
   $47 = HEAP32[$data173>>2]|0;
   $48 = HEAP32[99720]|0;
   $cmp74 = ($47|0)==($48|0);
   if ($cmp74) {
    HEAP32[99512] = 1;
   }
  }
 }
 $49 = $ev$addr;
 $50 = HEAP32[$49>>2]|0;
 switch ($50|0) {
 case 0:  {
  $51 = $ev$addr;
  $data179 = ((($51)) + 4|0);
  $52 = HEAP32[$data179>>2]|0;
  $53 = HEAP32[32227]|0;
  $cmp80 = ($52|0)==($53|0);
  if ($cmp80) {
   HEAP32[99420] = 1;
  } else {
   $54 = $ev$addr;
   $data183 = ((($54)) + 4|0);
   $55 = HEAP32[$data183>>2]|0;
   $cmp84 = ($55|0)<(256);
   if ($cmp84) {
    $56 = $ev$addr;
    $data186 = ((($56)) + 4|0);
    $57 = HEAP32[$data186>>2]|0;
    $arrayidx87 = (184592 + ($57<<2)|0);
    HEAP32[$arrayidx87>>2] = 1;
   }
  }
  $retval = 1;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
  break;
 }
 case 1:  {
  $58 = $ev$addr;
  $data191 = ((($58)) + 4|0);
  $59 = HEAP32[$data191>>2]|0;
  $cmp92 = ($59|0)<(256);
  if ($cmp92) {
   $60 = $ev$addr;
   $data194 = ((($60)) + 4|0);
   $61 = HEAP32[$data194>>2]|0;
   $arrayidx95 = (184592 + ($61<<2)|0);
   HEAP32[$arrayidx95>>2] = 0;
  }
  $retval = 0;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
  break;
 }
 case 2:  {
  $62 = $ev$addr;
  $data198 = ((($62)) + 4|0);
  $63 = HEAP32[$data198>>2]|0;
  _SetMouseButtons($63);
  $64 = $ev$addr;
  $data299 = ((($64)) + 8|0);
  $65 = HEAP32[$data299>>2]|0;
  $66 = HEAP32[32282]|0;
  $add = (($66) + 5)|0;
  $mul = Math_imul($65, $add)|0;
  $div = (($mul|0) / 10)&-1;
  HEAP32[99418] = $div;
  $67 = $ev$addr;
  $data3 = ((($67)) + 12|0);
  $68 = HEAP32[$data3>>2]|0;
  $69 = HEAP32[32282]|0;
  $add100 = (($69) + 5)|0;
  $mul101 = Math_imul($68, $add100)|0;
  $div102 = (($mul101|0) / 10)&-1;
  HEAP32[99417] = $div102;
  $retval = 1;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
  break;
 }
 case 3:  {
  $70 = $ev$addr;
  $data1104 = ((($70)) + 4|0);
  $71 = HEAP32[$data1104>>2]|0;
  _SetJoyButtons($71);
  $72 = $ev$addr;
  $data2105 = ((($72)) + 8|0);
  $73 = HEAP32[$data2105>>2]|0;
  HEAP32[99507] = $73;
  $74 = $ev$addr;
  $data3106 = ((($74)) + 12|0);
  $75 = HEAP32[$data3106>>2]|0;
  HEAP32[99509] = $75;
  $76 = $ev$addr;
  $data4 = ((($76)) + 16|0);
  $77 = HEAP32[$data4>>2]|0;
  HEAP32[99510] = $77;
  $retval = 1;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
  break;
 }
 default: {
  $retval = 0;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
 }
 }
 return (0)|0;
}
function _SetMouseButtons($buttons_mask) {
 $buttons_mask = $buttons_mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx11 = 0, $button_on = 0, $buttons_mask$addr = 0, $cmp = 0, $cmp1 = 0;
 var $cmp3 = 0, $cmp6 = 0, $conv = 0, $i = 0, $inc = 0, $or$cond = 0, $shl = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buttons_mask$addr = $buttons_mask;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(8);
  if (!($cmp)) {
   break;
  }
  $1 = $buttons_mask$addr;
  $2 = $i;
  $shl = 1 << $2;
  $and = $1 & $shl;
  $cmp1 = ($and|0)!=(0);
  $conv = $cmp1&1;
  $button_on = $conv;
  $3 = $i;
  $arrayidx = ((185716) + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($4|0)==(0);
  $5 = $button_on;
  $tobool2 = ($5|0)!=(0);
  $or$cond = $tobool & $tobool2;
  do {
   if ($or$cond) {
    $6 = $i;
    $7 = HEAP32[32224]|0;
    $cmp3 = ($6|0)==($7|0);
    if ($cmp3) {
     HEAP32[99512] = -1;
     break;
    }
    $8 = $i;
    $9 = HEAP32[32225]|0;
    $cmp6 = ($8|0)==($9|0);
    if ($cmp6) {
     HEAP32[99512] = 1;
    }
   }
  } while(0);
  $10 = $button_on;
  $11 = $i;
  $arrayidx11 = ((185716) + ($11<<2)|0);
  HEAP32[$arrayidx11>>2] = $10;
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _SetJoyButtons($buttons_mask) {
 $buttons_mask = $buttons_mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx11 = 0, $button_on = 0, $buttons_mask$addr = 0, $cmp = 0, $cmp1 = 0;
 var $cmp3 = 0, $cmp6 = 0, $conv = 0, $i = 0, $inc = 0, $or$cond = 0, $shl = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buttons_mask$addr = $buttons_mask;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(20);
  if (!($cmp)) {
   break;
  }
  $1 = $buttons_mask$addr;
  $2 = $i;
  $shl = 1 << $2;
  $and = $1 & $shl;
  $cmp1 = ($and|0)!=(0);
  $conv = $cmp1&1;
  $button_on = $conv;
  $3 = $i;
  $arrayidx = ((185620) + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($4|0)==(0);
  $5 = $button_on;
  $tobool2 = ($5|0)!=(0);
  $or$cond = $tobool & $tobool2;
  do {
   if ($or$cond) {
    $6 = $i;
    $7 = HEAP32[32278]|0;
    $cmp3 = ($6|0)==($7|0);
    if ($cmp3) {
     HEAP32[99512] = -1;
     break;
    }
    $8 = $i;
    $9 = HEAP32[32279]|0;
    $cmp6 = ($8|0)==($9|0);
    if ($cmp6) {
     HEAP32[99512] = 1;
    }
   }
  } while(0);
  $10 = $button_on;
  $11 = $i;
  $arrayidx11 = ((185620) + ($11<<2)|0);
  HEAP32[$arrayidx11>>2] = $10;
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _G_Ticker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $and = 0, $and106 = 0;
 var $and121 = 0, $and99 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx102 = 0, $arrayidx117 = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx32 = 0, $arrayidx41 = 0, $arrayidx44 = 0, $arrayidx45 = 0, $arrayidx47 = 0, $arrayidx59 = 0, $arrayidx60 = 0, $arrayidx68 = 0, $arrayidx69 = 0, $arrayidx72 = 0;
 var $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx79 = 0, $arrayidx81 = 0, $arrayidx82 = 0, $arrayidx93 = 0, $arrayidx96 = 0, $buf = 0, $buttons = 0, $buttons104 = 0, $buttons119 = 0, $cmd = 0, $cmd103 = 0, $cmd118 = 0, $cmd21 = 0, $cmd97 = 0, $cmp = 0, $cmp129 = 0, $cmp132 = 0, $cmp15 = 0;
 var $cmp2 = 0, $cmp29 = 0, $cmp3 = 0, $cmp34 = 0, $cmp38 = 0, $cmp56 = 0, $cmp63 = 0, $cmp90 = 0, $consistancy = 0, $consistancy66 = 0, $conv = 0, $conv105 = 0, $conv120 = 0, $conv61 = 0, $conv62 = 0, $conv67 = 0, $conv70 = 0, $conv77 = 0, $conv80 = 0, $conv98 = 0;
 var $div = 0, $i = 0, $inc = 0, $inc127 = 0, $inc87 = 0, $message = 0, $message46 = 0, $or$cond = 0, $or$cond1 = 0, $playerstate = 0, $rem = 0, $rem37 = 0, $rem53 = 0, $shr = 0, $shr122 = 0, $tobool = 0, $tobool100 = 0, $tobool108 = 0, $tobool113 = 0, $tobool18 = 0;
 var $tobool23 = 0, $tobool26 = 0, $tobool42 = 0, $tobool49 = 0, $tobool51 = 0, $tobool54 = 0, $tobool73 = 0, $tobool94 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, $x = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   $3 = $i;
   $arrayidx1 = (183056 + (($3*288)|0)|0);
   $playerstate = ((($arrayidx1)) + 4|0);
   $4 = HEAP32[$playerstate>>2]|0;
   $cmp2 = ($4|0)==(2);
   if ($cmp2) {
    $5 = $i;
    _G_DoReborn($5);
   }
  }
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 while(1) {
  $7 = HEAP32[99427]|0;
  $cmp3 = ($7|0)!=(0);
  if (!($cmp3)) {
   break;
  }
  $8 = HEAP32[99427]|0;
  switch ($8|0) {
  case 1:  {
   _G_DoLoadLevel();
   break;
  }
  case 2:  {
   _G_DoNewGame();
   break;
  }
  case 3:  {
   _G_DoLoadGame();
   break;
  }
  case 4:  {
   _G_DoSaveGame();
   break;
  }
  case 5:  {
   _G_DoPlayDemo();
   break;
  }
  case 6:  {
   _G_DoCompleted();
   break;
  }
  case 7:  {
   _F_StartFinale();
   break;
  }
  case 8:  {
   _G_DoWorldDone();
   break;
  }
  case 9:  {
   _V_ScreenShot(143574);
   $9 = HEAP32[99415]|0;
   $arrayidx12 = (183056 + (($9*288)|0)|0);
   $message = ((($arrayidx12)) + 224|0);
   HEAP32[$message>>2] = 143586;
   HEAP32[99427] = 0;
   break;
  }
  default: {
  }
  }
 }
 $10 = HEAP32[99365]|0;
 $11 = HEAP32[99363]|0;
 $div = (($10|0) / ($11|0))&-1;
 $rem = (($div|0) % 128)&-1;
 $buf = $rem;
 $i = 0;
 while(1) {
  $12 = $i;
  $cmp15 = ($12|0)<(4);
  if (!($cmp15)) {
   break;
  }
  $13 = $i;
  $arrayidx17 = (183040 + ($13<<2)|0);
  $14 = HEAP32[$arrayidx17>>2]|0;
  $tobool18 = ($14|0)!=(0);
  do {
   if ($tobool18) {
    $15 = $i;
    $arrayidx20 = (183056 + (($15*288)|0)|0);
    $cmd21 = ((($arrayidx20)) + 8|0);
    $cmd = $cmd21;
    $16 = $cmd;
    $17 = HEAP32[99396]|0;
    $18 = $i;
    $arrayidx22 = (($17) + ($18<<4)|0);
    ;HEAP32[$16>>2]=HEAP32[$arrayidx22>>2]|0;HEAP32[$16+4>>2]=HEAP32[$arrayidx22+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$arrayidx22+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$arrayidx22+12>>2]|0;
    $19 = HEAP32[99431]|0;
    $tobool23 = ($19|0)!=(0);
    if ($tobool23) {
     $20 = $cmd;
     _G_ReadDemoTiccmd($20);
    }
    $21 = HEAP32[99432]|0;
    $tobool26 = ($21|0)!=(0);
    if ($tobool26) {
     $22 = $cmd;
     _G_WriteDemoTiccmd($22);
    }
    $23 = $cmd;
    $24 = HEAP8[$23>>0]|0;
    $conv = $24 << 24 >> 24;
    $cmp29 = ($conv|0)>(50);
    if ($cmp29) {
     $25 = $i;
     $arrayidx32 = (183024 + ($25<<2)|0);
     HEAP32[$arrayidx32>>2] = 1;
    }
    $26 = HEAP32[99365]|0;
    $and = $26 & 31;
    $cmp34 = ($and|0)==(0);
    if ($cmp34) {
     $27 = HEAP32[99365]|0;
     $shr = $27 >> 5;
     $rem37 = (($shr|0) % 4)&-1;
     $28 = $i;
     $cmp38 = ($rem37|0)==($28|0);
     if ($cmp38) {
      $29 = $i;
      $arrayidx41 = (183024 + ($29<<2)|0);
      $30 = HEAP32[$arrayidx41>>2]|0;
      $tobool42 = ($30|0)!=(0);
      if ($tobool42) {
       $31 = $i;
       $arrayidx44 = (2416 + ($31<<2)|0);
       $32 = HEAP32[$arrayidx44>>2]|0;
       HEAP32[$vararg_buffer>>2] = $32;
       (_M_snprintf(185760,80,143598,$vararg_buffer)|0);
       $33 = HEAP32[99415]|0;
       $arrayidx45 = (183056 + (($33*288)|0)|0);
       $message46 = ((($arrayidx45)) + 224|0);
       HEAP32[$message46>>2] = 185760;
       $34 = $i;
       $arrayidx47 = (183024 + ($34<<2)|0);
       HEAP32[$arrayidx47>>2] = 0;
      }
     }
    }
    $35 = HEAP32[99433]|0;
    $tobool49 = ($35|0)==(0);
    $36 = HEAP32[99434]|0;
    $tobool51 = ($36|0)!=(0);
    $or$cond = $tobool49 | $tobool51;
    if (!($or$cond)) {
     $37 = HEAP32[99365]|0;
     $38 = HEAP32[99363]|0;
     $rem53 = (($37|0) % ($38|0))&-1;
     $tobool54 = ($rem53|0)!=(0);
     if (!($tobool54)) {
      $39 = HEAP32[99365]|0;
      $cmp56 = ($39|0)>(128);
      if ($cmp56) {
       $40 = $i;
       $arrayidx59 = (182512 + ($40<<7)|0);
       $41 = $buf;
       $arrayidx60 = (($arrayidx59) + ($41)|0);
       $42 = HEAP8[$arrayidx60>>0]|0;
       $conv61 = $42&255;
       $43 = $cmd;
       $consistancy = ((($43)) + 6|0);
       $44 = HEAP8[$consistancy>>0]|0;
       $conv62 = $44&255;
       $cmp63 = ($conv61|0)!=($conv62|0);
       if ($cmp63) {
        $45 = $cmd;
        $consistancy66 = ((($45)) + 6|0);
        $46 = HEAP8[$consistancy66>>0]|0;
        $conv67 = $46&255;
        $47 = $i;
        $arrayidx68 = (182512 + ($47<<7)|0);
        $48 = $buf;
        $arrayidx69 = (($arrayidx68) + ($48)|0);
        $49 = HEAP8[$arrayidx69>>0]|0;
        $conv70 = $49&255;
        HEAP32[$vararg_buffer2>>2] = $conv67;
        $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
        HEAP32[$vararg_ptr5>>2] = $conv70;
        _I_Error(143611,$vararg_buffer2);
       }
      }
      $50 = $i;
      $arrayidx72 = (183056 + (($50*288)|0)|0);
      $51 = HEAP32[$arrayidx72>>2]|0;
      $tobool73 = ($51|0)!=(0|0);
      if ($tobool73) {
       $52 = $i;
       $arrayidx75 = (183056 + (($52*288)|0)|0);
       $53 = HEAP32[$arrayidx75>>2]|0;
       $x = ((($53)) + 12|0);
       $54 = HEAP32[$x>>2]|0;
       $conv77 = $54&255;
       $55 = $i;
       $arrayidx78 = (182512 + ($55<<7)|0);
       $56 = $buf;
       $arrayidx79 = (($arrayidx78) + ($56)|0);
       HEAP8[$arrayidx79>>0] = $conv77;
       break;
      } else {
       $57 = HEAP32[99744]|0;
       $conv80 = $57&255;
       $58 = $i;
       $arrayidx81 = (182512 + ($58<<7)|0);
       $59 = $buf;
       $arrayidx82 = (($arrayidx81) + ($59)|0);
       HEAP8[$arrayidx82>>0] = $conv80;
       break;
      }
     }
    }
   }
  } while(0);
  $60 = $i;
  $inc87 = (($60) + 1)|0;
  $i = $inc87;
 }
 $i = 0;
 while(1) {
  $61 = $i;
  $cmp90 = ($61|0)<(4);
  if (!($cmp90)) {
   break;
  }
  $62 = $i;
  $arrayidx93 = (183040 + ($62<<2)|0);
  $63 = HEAP32[$arrayidx93>>2]|0;
  $tobool94 = ($63|0)!=(0);
  L57: do {
   if ($tobool94) {
    $64 = $i;
    $arrayidx96 = (183056 + (($64*288)|0)|0);
    $cmd97 = ((($arrayidx96)) + 8|0);
    $buttons = ((($cmd97)) + 5|0);
    $65 = HEAP8[$buttons>>0]|0;
    $conv98 = $65&255;
    $and99 = $conv98 & 128;
    $tobool100 = ($and99|0)!=(0);
    if ($tobool100) {
     $66 = $i;
     $arrayidx102 = (183056 + (($66*288)|0)|0);
     $cmd103 = ((($arrayidx102)) + 8|0);
     $buttons104 = ((($cmd103)) + 5|0);
     $67 = HEAP8[$buttons104>>0]|0;
     $conv105 = $67&255;
     $and106 = $conv105 & 3;
     switch ($and106|0) {
     case 1:  {
      $68 = HEAP32[99428]|0;
      $xor = $68 ^ 1;
      HEAP32[99428] = $xor;
      $69 = HEAP32[99428]|0;
      $tobool108 = ($69|0)!=(0);
      if ($tobool108) {
       _S_PauseSound();
       break L57;
      } else {
       _S_ResumeSound();
       break L57;
      }
      break;
     }
     case 2:  {
      $70 = HEAP8[185840]|0;
      $tobool113 = ($70<<24>>24)!=(0);
      if (!($tobool113)) {
       (_M_StringCopy(185840,143649,32)|0);
      }
      $71 = $i;
      $arrayidx117 = (183056 + (($71*288)|0)|0);
      $cmd118 = ((($arrayidx117)) + 8|0);
      $buttons119 = ((($cmd118)) + 5|0);
      $72 = HEAP8[$buttons119>>0]|0;
      $conv120 = $72&255;
      $and121 = $conv120 & 28;
      $shr122 = $and121 >> 2;
      HEAP32[99518] = $shr122;
      HEAP32[99427] = 4;
      break L57;
      break;
     }
     default: {
      break L57;
     }
     }
    }
   }
  } while(0);
  $73 = $i;
  $inc127 = (($73) + 1)|0;
  $i = $inc127;
 }
 $74 = HEAP32[99435]|0;
 $cmp129 = ($74|0)==(1);
 $75 = HEAP32[99416]|0;
 $cmp132 = ($75|0)!=(1);
 $or$cond1 = $cmp129 & $cmp132;
 if ($or$cond1) {
  _WI_End();
 }
 $76 = HEAP32[99416]|0;
 HEAP32[99435] = $76;
 $77 = HEAP32[99416]|0;
 switch ($77|0) {
 case 0:  {
  _P_Ticker();
  _ST_Ticker();
  _AM_Ticker();
  _HU_Ticker();
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _WI_Ticker();
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  _F_Ticker();
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  _D_PageTicker();
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _G_DoReborn($playernum) {
 $playernum = $playernum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add14 = 0, $arrayidx = 0, $arrayidx12 = 0;
 var $arrayidx13 = 0, $arrayidx16 = 0, $arrayidx19 = 0, $arrayidx3 = 0, $arrayidx6 = 0, $arrayidx8 = 0, $call = 0, $call9 = 0, $cmp = 0, $conv = 0, $conv15 = 0, $i = 0, $inc = 0, $player = 0, $playernum$addr = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool4 = 0, $type = 0;
 var $type17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $playernum$addr = $playernum;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  HEAP32[99427] = 1;
  STACKTOP = sp;return;
 }
 $1 = $playernum$addr;
 $arrayidx = (183056 + (($1*288)|0)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $player = ((($2)) + 132|0);
 HEAP32[$player>>2] = 0;
 $3 = HEAP32[99430]|0;
 $tobool1 = ($3|0)!=(0);
 $4 = $playernum$addr;
 if ($tobool1) {
  _G_DeathMatchSpawnPlayer($4);
  STACKTOP = sp;return;
 }
 $5 = $playernum$addr;
 $arrayidx3 = (192048 + (($5*10)|0)|0);
 $call = (_G_CheckSpot($4,$arrayidx3)|0);
 $tobool4 = ($call|0)!=(0);
 if ($tobool4) {
  $6 = $playernum$addr;
  $arrayidx6 = (192048 + (($6*10)|0)|0);
  _P_SpawnPlayer($arrayidx6);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $cmp = ($7|0)<(4);
  $8 = $playernum$addr;
  if (!($cmp)) {
   label = 12;
   break;
  }
  $9 = $i;
  $arrayidx8 = (192048 + (($9*10)|0)|0);
  $call9 = (_G_CheckSpot($8,$arrayidx8)|0);
  $tobool10 = ($call9|0)!=(0);
  if ($tobool10) {
   label = 10;
   break;
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 10) {
  $10 = $playernum$addr;
  $add = (($10) + 1)|0;
  $conv = $add&65535;
  $11 = $i;
  $arrayidx12 = (192048 + (($11*10)|0)|0);
  $type = ((($arrayidx12)) + 6|0);
  HEAP16[$type>>1] = $conv;
  $12 = $i;
  $arrayidx13 = (192048 + (($12*10)|0)|0);
  _P_SpawnPlayer($arrayidx13);
  $13 = $i;
  $add14 = (($13) + 1)|0;
  $conv15 = $add14&65535;
  $14 = $i;
  $arrayidx16 = (192048 + (($14*10)|0)|0);
  $type17 = ((($arrayidx16)) + 6|0);
  HEAP16[$type17>>1] = $conv15;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $arrayidx19 = (192048 + (($8*10)|0)|0);
  _P_SpawnPlayer($arrayidx19);
  STACKTOP = sp;return;
 }
}
function _G_DoNewGame() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99431] = 0;
 HEAP32[99434] = 0;
 HEAP32[99433] = 0;
 HEAP32[99430] = 0;
 HEAP32[(183052)>>2] = 0;
 HEAP32[(183048)>>2] = 0;
 HEAP32[(183044)>>2] = 0;
 HEAP32[99381] = 0;
 HEAP32[99382] = 0;
 HEAP32[99380] = 0;
 HEAP32[99415] = 0;
 $0 = HEAP32[99492]|0;
 $1 = HEAP32[99493]|0;
 $2 = HEAP32[99494]|0;
 _G_InitNew($0,$1,$2);
 HEAP32[99427] = 0;
 return;
}
function _G_DoLoadGame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0, $savedleveltime = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[99427] = 0;
 $call = (_fopen(184336,159202)|0);
 HEAP32[99835] = $call;
 $0 = HEAP32[99835]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 HEAP32[99836] = 0;
 $call1 = (_P_ReadSaveGameHeader()|0);
 $tobool = ($call1|0)!=(0);
 if (!($tobool)) {
  $1 = HEAP32[99835]|0;
  (_fclose($1)|0);
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99905]|0;
 $savedleveltime = $2;
 $3 = HEAP32[99425]|0;
 $4 = HEAP32[99424]|0;
 $5 = HEAP32[99423]|0;
 _G_InitNew($3,$4,$5);
 $6 = $savedleveltime;
 HEAP32[99905] = $6;
 _P_UnArchivePlayers();
 _P_UnArchiveWorld();
 _P_UnArchiveThinkers();
 _P_UnArchiveSpecials();
 $call5 = (_P_ReadSaveGameEOF()|0);
 $tobool6 = ($call5|0)!=(0);
 if (!($tobool6)) {
  _I_Error(144272,$vararg_buffer);
 }
 $7 = HEAP32[99835]|0;
 (_fclose($7)|0);
 $8 = HEAP32[99971]|0;
 $tobool10 = ($8|0)!=(0);
 if ($tobool10) {
  _R_ExecuteSetViewSize();
 }
 _R_FillBackScreen();
 STACKTOP = sp;return;
}
function _G_DoSaveGame() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0;
 var $call2 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cmp13 = 0, $cmp5 = 0, $cmp9 = 0, $message = 0, $recovery_savegame_file = 0, $savegame_file = 0, $temp_savegame_file = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $recovery_savegame_file = 0;
 $call = (_P_TempSaveGameFile()|0);
 $temp_savegame_file = $call;
 $0 = HEAP32[99518]|0;
 $call1 = (_P_SaveGameFile($0)|0);
 $savegame_file = $call1;
 $1 = $temp_savegame_file;
 $call2 = (_fopen($1,152932)|0);
 HEAP32[99835] = $call2;
 $2 = HEAP32[99835]|0;
 $cmp = ($2|0)==(0|0);
 if ($cmp) {
  $call3 = (_M_TempFile(144071)|0);
  $recovery_savegame_file = $call3;
  $3 = $recovery_savegame_file;
  $call4 = (_fopen($3,152932)|0);
  HEAP32[99835] = $call4;
  $4 = HEAP32[99835]|0;
  $cmp5 = ($4|0)==(0|0);
  if ($cmp5) {
   $5 = $temp_savegame_file;
   $6 = $recovery_savegame_file;
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   _I_Error(144084,$vararg_buffer);
  }
 }
 HEAP32[99836] = 0;
 _P_WriteSaveGameHeader(185840);
 _P_ArchivePlayers();
 _P_ArchiveWorld();
 _P_ArchiveThinkers();
 _P_ArchiveSpecials();
 _P_WriteSaveGameEOF();
 $7 = HEAP32[32189]|0;
 $tobool = ($7|0)!=(0);
 if ($tobool) {
  $8 = HEAP32[99835]|0;
  $call8 = (_ftell($8)|0);
  $cmp9 = ($call8|0)>(180224);
  if ($cmp9) {
   _I_Error(144138,$vararg_buffer2);
  }
 }
 $9 = HEAP32[99835]|0;
 (_fclose($9)|0);
 $10 = $recovery_savegame_file;
 $cmp13 = ($10|0)!=(0|0);
 if (!($cmp13)) {
  $13 = $savegame_file;
  (_remove($13)|0);
  $14 = $temp_savegame_file;
  $15 = $savegame_file;
  (_rename($14,$15)|0);
  HEAP32[99427] = 0;
  (_M_StringCopy(185840,401520,32)|0);
  $16 = HEAP32[99415]|0;
  $arrayidx = (183056 + (($16*288)|0)|0);
  $message = ((($arrayidx)) + 224|0);
  HEAP32[$message>>2] = 144260;
  _R_FillBackScreen();
  STACKTOP = sp;return;
 }
 $11 = $temp_savegame_file;
 $12 = $recovery_savegame_file;
 HEAP32[$vararg_buffer4>>2] = $11;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $12;
 _I_Error(144162,$vararg_buffer4);
 $13 = $savegame_file;
 (_remove($13)|0);
 $14 = $temp_savegame_file;
 $15 = $savegame_file;
 (_rename($14,$15)|0);
 HEAP32[99427] = 0;
 (_M_StringCopy(185840,401520,32)|0);
 $16 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($16*288)|0)|0);
 $message = ((($arrayidx)) + 224|0);
 HEAP32[$message>>2] = 144260;
 _R_FillBackScreen();
 STACKTOP = sp;return;
}
function _G_DoPlayDemo() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call31 = 0, $call35 = 0, $call40 = 0, $call7 = 0;
 var $call8 = 0, $cmp = 0, $cmp27 = 0, $cmp3 = 0, $cmp32 = 0, $cmp36 = 0, $conv = 0, $conv12 = 0, $conv14 = 0, $conv16 = 0, $conv18 = 0, $conv20 = 0, $conv22 = 0, $conv24 = 0, $conv26 = 0, $conv30 = 0, $demoversion = 0, $episode = 0, $i = 0, $inc = 0;
 var $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr13 = 0, $incdec$ptr15 = 0, $incdec$ptr17 = 0, $incdec$ptr19 = 0, $incdec$ptr21 = 0, $incdec$ptr23 = 0, $incdec$ptr25 = 0, $incdec$ptr29 = 0, $map = 0, $message = 0, $skill = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 HEAP32[99427] = 0;
 $0 = HEAP32[99502]|0;
 $call = (_W_CacheLumpName($0,1)|0);
 HEAP32[99497] = $call;
 HEAP32[99501] = $call;
 $1 = HEAP32[99497]|0;
 $incdec$ptr = ((($1)) + 1|0);
 HEAP32[99497] = $incdec$ptr;
 $2 = HEAP8[$1>>0]|0;
 $conv = $2&255;
 $demoversion = $conv;
 $3 = $demoversion;
 $call1 = (_G_VanillaVersionCode()|0);
 $cmp = ($3|0)==($call1|0);
 do {
  if ($cmp) {
   HEAP32[99498] = 0;
  } else {
   $4 = $demoversion;
   $cmp3 = ($4|0)==(111);
   if ($cmp3) {
    HEAP32[99498] = 1;
    break;
   } else {
    $message = 143717;
    $5 = $message;
    $6 = $demoversion;
    $call7 = (_G_VanillaVersionCode()|0);
    $7 = $demoversion;
    $call8 = (_DemoVersionDescription($7)|0);
    HEAP32[$vararg_buffer>>2] = $6;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $call7;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call8;
    (_printf($5,$vararg_buffer)|0);
    break;
   }
  }
 } while(0);
 $8 = HEAP32[99497]|0;
 $incdec$ptr11 = ((($8)) + 1|0);
 HEAP32[99497] = $incdec$ptr11;
 $9 = HEAP8[$8>>0]|0;
 $conv12 = $9&255;
 $skill = $conv12;
 $10 = HEAP32[99497]|0;
 $incdec$ptr13 = ((($10)) + 1|0);
 HEAP32[99497] = $incdec$ptr13;
 $11 = HEAP8[$10>>0]|0;
 $conv14 = $11&255;
 $episode = $conv14;
 $12 = HEAP32[99497]|0;
 $incdec$ptr15 = ((($12)) + 1|0);
 HEAP32[99497] = $incdec$ptr15;
 $13 = HEAP8[$12>>0]|0;
 $conv16 = $13&255;
 $map = $conv16;
 $14 = HEAP32[99497]|0;
 $incdec$ptr17 = ((($14)) + 1|0);
 HEAP32[99497] = $incdec$ptr17;
 $15 = HEAP8[$14>>0]|0;
 $conv18 = $15&255;
 HEAP32[99430] = $conv18;
 $16 = HEAP32[99497]|0;
 $incdec$ptr19 = ((($16)) + 1|0);
 HEAP32[99497] = $incdec$ptr19;
 $17 = HEAP8[$16>>0]|0;
 $conv20 = $17&255;
 HEAP32[99381] = $conv20;
 $18 = HEAP32[99497]|0;
 $incdec$ptr21 = ((($18)) + 1|0);
 HEAP32[99497] = $incdec$ptr21;
 $19 = HEAP8[$18>>0]|0;
 $conv22 = $19&255;
 HEAP32[99382] = $conv22;
 $20 = HEAP32[99497]|0;
 $incdec$ptr23 = ((($20)) + 1|0);
 HEAP32[99497] = $incdec$ptr23;
 $21 = HEAP8[$20>>0]|0;
 $conv24 = $21&255;
 HEAP32[99380] = $conv24;
 $22 = HEAP32[99497]|0;
 $incdec$ptr25 = ((($22)) + 1|0);
 HEAP32[99497] = $incdec$ptr25;
 $23 = HEAP8[$22>>0]|0;
 $conv26 = $23&255;
 HEAP32[99415] = $conv26;
 $i = 0;
 while(1) {
  $24 = $i;
  $cmp27 = ($24|0)<(4);
  if (!($cmp27)) {
   break;
  }
  $25 = HEAP32[99497]|0;
  $incdec$ptr29 = ((($25)) + 1|0);
  HEAP32[99497] = $incdec$ptr29;
  $26 = HEAP8[$25>>0]|0;
  $conv30 = $26&255;
  $27 = $i;
  $arrayidx = (183040 + ($27<<2)|0);
  HEAP32[$arrayidx>>2] = $conv30;
  $28 = $i;
  $inc = (($28) + 1)|0;
  $i = $inc;
 }
 $29 = HEAP32[(183044)>>2]|0;
 $tobool = ($29|0)!=(0);
 if (!($tobool)) {
  $call31 = (_M_CheckParm(143934)|0);
  $cmp32 = ($call31|0)>(0);
  if (!($cmp32)) {
   $call35 = (_M_CheckParm(143944)|0);
   $cmp36 = ($call35|0)>(0);
   if (!($cmp36)) {
    HEAP32[32181] = 0;
    $30 = $skill;
    $31 = $episode;
    $32 = $map;
    _G_InitNew($30,$31,$32);
    HEAP32[32181] = 1;
    $call40 = (_I_GetTime()|0);
    HEAP32[99503] = $call40;
    HEAP32[99496] = 0;
    HEAP32[99431] = 1;
    STACKTOP = sp;return;
   }
  }
 }
 HEAP32[99433] = 1;
 HEAP32[99434] = 1;
 HEAP32[32181] = 0;
 $30 = $skill;
 $31 = $episode;
 $32 = $map;
 _G_InitNew($30,$31,$32);
 HEAP32[32181] = 1;
 $call40 = (_I_GetTime()|0);
 HEAP32[99503] = $call40;
 HEAP32[99496] = 0;
 HEAP32[99431] = 1;
 STACKTOP = sp;return;
}
function _G_DoCompleted() {
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx32 = 0, $arrayidx38 = 0, $arrayidx70 = 0, $arrayidx74 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx85 = 0, $arrayidx86 = 0, $arrayidx87 = 0, $arrayidx88 = 0, $arrayidx89 = 0, $arrayidx90 = 0, $arrayidx91 = 0, $arrayidx92 = 0, $arrayidx93 = 0, $arrayidx94 = 0;
 var $arrayidx95 = 0, $cmp = 0, $cmp13 = 0, $cmp21 = 0, $cmp22 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp4 = 0, $cmp41 = 0, $cmp56 = 0, $cmp6 = 0, $cmp67 = 0, $cmp72 = 0, $cmp8 = 0, $cmp83 = 0, $didsecret = 0, $didsecret33 = 0, $didsecret39 = 0, $frags = 0;
 var $frags96 = 0, $i = 0, $inc = 0, $inc17 = 0, $inc35 = 0, $inc99 = 0, $itemcount = 0, $killcount = 0, $mul = 0, $mul76 = 0, $mul79 = 0, $or$cond = 0, $or$cond1 = 0, $secretcount = 0, $sitems = 0, $skills = 0, $ssecret = 0, $stime = 0, $sub = 0, $sub40 = 0;
 var $sub69 = 0, $switch = 0, $tobool = 0, $tobool1 = 0, $tobool43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[99427] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   $3 = $i;
   _G_PlayerFinishLevel($3);
  }
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 $5 = HEAP32[99316]|0;
 $tobool1 = ($5|0)!=(0);
 if ($tobool1) {
  _AM_Stop();
 }
 $6 = HEAP32[32168]|0;
 $cmp4 = ($6|0)!=(2);
 L11: do {
  if ($cmp4) {
   $7 = HEAP32[32169]|0;
   $cmp6 = ($7|0)==(9);
   $8 = HEAP32[99423]|0;
   if ($cmp6) {
    $cmp8 = ($8|0)==(5);
    if (!($cmp8)) {
     break;
    }
    HEAP32[99427] = 7;
    STACKTOP = sp;return;
   }
   switch ($8|0) {
   case 8:  {
    HEAP32[99427] = 7;
    STACKTOP = sp;return;
    break;
   }
   case 9:  {
    break;
   }
   default: {
    break L11;
   }
   }
   $i = 0;
   while(1) {
    $9 = $i;
    $cmp13 = ($9|0)<(4);
    if (!($cmp13)) {
     break L11;
    }
    $10 = $i;
    $arrayidx15 = (183056 + (($10*288)|0)|0);
    $didsecret = ((($arrayidx15)) + 284|0);
    HEAP32[$didsecret>>2] = 1;
    $11 = $i;
    $inc17 = (($11) + 1)|0;
    $i = $inc17;
   }
  }
 } while(0);
 $12 = HEAP32[99423]|0;
 $cmp21 = ($12|0)==(8);
 $13 = HEAP32[32168]|0;
 $cmp22 = ($13|0)!=(2);
 $or$cond = $cmp21 & $cmp22;
 if ($or$cond) {
  HEAP32[99427] = 7;
  STACKTOP = sp;return;
 }
 $14 = HEAP32[99423]|0;
 $cmp25 = ($14|0)==(9);
 $15 = HEAP32[32168]|0;
 $cmp27 = ($15|0)!=(2);
 $or$cond1 = $cmp25 & $cmp27;
 L30: do {
  if ($or$cond1) {
   $i = 0;
   while(1) {
    $16 = $i;
    $cmp30 = ($16|0)<(4);
    if (!($cmp30)) {
     break L30;
    }
    $17 = $i;
    $arrayidx32 = (183056 + (($17*288)|0)|0);
    $didsecret33 = ((($arrayidx32)) + 284|0);
    HEAP32[$didsecret33>>2] = 1;
    $18 = $i;
    $inc35 = (($18) + 1)|0;
    $i = $inc35;
   }
  }
 } while(0);
 $19 = HEAP32[99415]|0;
 $arrayidx38 = (183056 + (($19*288)|0)|0);
 $didsecret39 = ((($arrayidx38)) + 284|0);
 $20 = HEAP32[$didsecret39>>2]|0;
 HEAP32[(397756)>>2] = $20;
 $21 = HEAP32[99424]|0;
 $sub = (($21) - 1)|0;
 HEAP32[99438] = $sub;
 $22 = HEAP32[99423]|0;
 $sub40 = (($22) - 1)|0;
 HEAP32[(397760)>>2] = $sub40;
 $23 = HEAP32[32168]|0;
 $cmp41 = ($23|0)==(2);
 $24 = HEAP32[99437]|0;
 $tobool43 = ($24|0)!=(0);
 L36: do {
  if ($cmp41) {
   $25 = HEAP32[99423]|0;
   if ($tobool43) {
    switch ($25|0) {
    case 15:  {
     HEAP32[(397764)>>2] = 30;
     break L36;
     break;
    }
    case 31:  {
     HEAP32[(397764)>>2] = 31;
     break L36;
     break;
    }
    default: {
     break L36;
    }
    }
   } else {
    $$off = (($25) + -31)|0;
    $switch = ($$off>>>0)<(2);
    if ($switch) {
     HEAP32[(397764)>>2] = 15;
     break;
    } else {
     $26 = HEAP32[99423]|0;
     HEAP32[(397764)>>2] = $26;
     break;
    }
   }
  } else {
   if ($tobool43) {
    HEAP32[(397764)>>2] = 8;
    break;
   }
   $27 = HEAP32[99423]|0;
   $cmp56 = ($27|0)==(9);
   if (!($cmp56)) {
    $29 = HEAP32[99423]|0;
    HEAP32[(397764)>>2] = $29;
    break;
   }
   $28 = HEAP32[99424]|0;
   switch ($28|0) {
   case 1:  {
    HEAP32[(397764)>>2] = 3;
    break L36;
    break;
   }
   case 2:  {
    HEAP32[(397764)>>2] = 5;
    break L36;
    break;
   }
   case 3:  {
    HEAP32[(397764)>>2] = 6;
    break L36;
    break;
   }
   case 4:  {
    HEAP32[(397764)>>2] = 2;
    break L36;
    break;
   }
   default: {
    break L36;
   }
   }
  }
 } while(0);
 $30 = HEAP32[99488]|0;
 HEAP32[(397768)>>2] = $30;
 $31 = HEAP32[99489]|0;
 HEAP32[(397772)>>2] = $31;
 $32 = HEAP32[99490]|0;
 HEAP32[(397776)>>2] = $32;
 HEAP32[(397780)>>2] = 0;
 $33 = HEAP32[32168]|0;
 $cmp67 = ($33|0)==(2);
 do {
  if ($cmp67) {
   $34 = HEAP32[99423]|0;
   $sub69 = (($34) - 1)|0;
   $arrayidx70 = (2128 + ($sub69<<2)|0);
   $35 = HEAP32[$arrayidx70>>2]|0;
   $mul = ($35*35)|0;
   HEAP32[(397784)>>2] = $mul;
  } else {
   $36 = HEAP32[99424]|0;
   $cmp72 = ($36|0)<(4);
   if ($cmp72) {
    $37 = HEAP32[99424]|0;
    $arrayidx74 = (1968 + (($37*40)|0)|0);
    $38 = HEAP32[99423]|0;
    $arrayidx75 = (($arrayidx74) + ($38<<2)|0);
    $39 = HEAP32[$arrayidx75>>2]|0;
    $mul76 = ($39*35)|0;
    HEAP32[(397784)>>2] = $mul76;
    break;
   } else {
    $40 = HEAP32[99423]|0;
    $arrayidx78 = (2128 + ($40<<2)|0);
    $41 = HEAP32[$arrayidx78>>2]|0;
    $mul79 = ($41*35)|0;
    HEAP32[(397784)>>2] = $mul79;
    break;
   }
  }
 } while(0);
 $42 = HEAP32[99415]|0;
 HEAP32[(397788)>>2] = $42;
 $i = 0;
 while(1) {
  $43 = $i;
  $cmp83 = ($43|0)<(4);
  if (!($cmp83)) {
   break;
  }
  $44 = $i;
  $arrayidx85 = (183040 + ($44<<2)|0);
  $45 = HEAP32[$arrayidx85>>2]|0;
  $46 = $i;
  $arrayidx86 = ((397792) + (($46*40)|0)|0);
  HEAP32[$arrayidx86>>2] = $45;
  $47 = $i;
  $arrayidx87 = (183056 + (($47*288)|0)|0);
  $killcount = ((($arrayidx87)) + 212|0);
  $48 = HEAP32[$killcount>>2]|0;
  $49 = $i;
  $arrayidx88 = ((397792) + (($49*40)|0)|0);
  $skills = ((($arrayidx88)) + 4|0);
  HEAP32[$skills>>2] = $48;
  $50 = $i;
  $arrayidx89 = (183056 + (($50*288)|0)|0);
  $itemcount = ((($arrayidx89)) + 216|0);
  $51 = HEAP32[$itemcount>>2]|0;
  $52 = $i;
  $arrayidx90 = ((397792) + (($52*40)|0)|0);
  $sitems = ((($arrayidx90)) + 8|0);
  HEAP32[$sitems>>2] = $51;
  $53 = $i;
  $arrayidx91 = (183056 + (($53*288)|0)|0);
  $secretcount = ((($arrayidx91)) + 220|0);
  $54 = HEAP32[$secretcount>>2]|0;
  $55 = $i;
  $arrayidx92 = ((397792) + (($55*40)|0)|0);
  $ssecret = ((($arrayidx92)) + 12|0);
  HEAP32[$ssecret>>2] = $54;
  $56 = HEAP32[99905]|0;
  $57 = $i;
  $arrayidx93 = ((397792) + (($57*40)|0)|0);
  $stime = ((($arrayidx93)) + 16|0);
  HEAP32[$stime>>2] = $56;
  $58 = $i;
  $arrayidx94 = ((397792) + (($58*40)|0)|0);
  $frags = ((($arrayidx94)) + 20|0);
  $59 = $i;
  $arrayidx95 = (183056 + (($59*288)|0)|0);
  $frags96 = ((($arrayidx95)) + 104|0);
  ;HEAP32[$frags>>2]=HEAP32[$frags96>>2]|0;HEAP32[$frags+4>>2]=HEAP32[$frags96+4>>2]|0;HEAP32[$frags+8>>2]=HEAP32[$frags96+8>>2]|0;HEAP32[$frags+12>>2]=HEAP32[$frags96+12>>2]|0;
  $60 = $i;
  $inc99 = (($60) + 1)|0;
  $i = $inc99;
 }
 HEAP32[99416] = 1;
 HEAP32[99491] = 0;
 HEAP32[99316] = 0;
 _StatCopy(397752);
 _WI_Start(397752);
 STACKTOP = sp;return;
}
function _G_DoWorldDone() {
 var $0 = 0, $add = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99416] = 0;
 $0 = HEAP32[(397764)>>2]|0;
 $add = (($0) + 1)|0;
 HEAP32[99423] = $add;
 _G_DoLoadLevel();
 HEAP32[99427] = 0;
 HEAP32[99491] = 1;
 return;
}
function _G_ReadDemoTiccmd($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $angleturn = 0, $angleturn15 = 0, $angleturn8 = 0, $buttons = 0, $cmd$addr = 0, $cmp = 0, $conv = 0, $conv10 = 0, $conv12 = 0, $conv14 = 0, $conv5 = 0, $conv7 = 0, $conv9 = 0, $incdec$ptr = 0, $incdec$ptr17 = 0, $incdec$ptr2 = 0, $incdec$ptr4 = 0, $incdec$ptr6 = 0, $or = 0, $shl = 0;
 var $shl13 = 0, $sidemove = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmd$addr = $cmd;
 $0 = HEAP32[99497]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv = $1&255;
 $cmp = ($conv|0)==(128);
 if ($cmp) {
  (_G_CheckDemoStatus()|0);
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99497]|0;
 $incdec$ptr = ((($2)) + 1|0);
 HEAP32[99497] = $incdec$ptr;
 $3 = HEAP8[$2>>0]|0;
 $4 = $cmd$addr;
 HEAP8[$4>>0] = $3;
 $5 = HEAP32[99497]|0;
 $incdec$ptr2 = ((($5)) + 1|0);
 HEAP32[99497] = $incdec$ptr2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $cmd$addr;
 $sidemove = ((($7)) + 1|0);
 HEAP8[$sidemove>>0] = $6;
 $8 = HEAP32[99498]|0;
 $tobool = ($8|0)!=(0);
 $9 = HEAP32[99497]|0;
 $incdec$ptr4 = ((($9)) + 1|0);
 HEAP32[99497] = $incdec$ptr4;
 $10 = HEAP8[$9>>0]|0;
 if ($tobool) {
  $conv5 = $10&255;
  $11 = $cmd$addr;
  $angleturn = ((($11)) + 2|0);
  HEAP16[$angleturn>>1] = $conv5;
  $12 = HEAP32[99497]|0;
  $incdec$ptr6 = ((($12)) + 1|0);
  HEAP32[99497] = $incdec$ptr6;
  $13 = HEAP8[$12>>0]|0;
  $conv7 = $13&255;
  $shl = $conv7 << 8;
  $14 = $cmd$addr;
  $angleturn8 = ((($14)) + 2|0);
  $15 = HEAP16[$angleturn8>>1]|0;
  $conv9 = $15 << 16 >> 16;
  $or = $conv9 | $shl;
  $conv10 = $or&65535;
  HEAP16[$angleturn8>>1] = $conv10;
 } else {
  $conv12 = $10&255;
  $shl13 = $conv12 << 8;
  $conv14 = $shl13&65535;
  $16 = $cmd$addr;
  $angleturn15 = ((($16)) + 2|0);
  HEAP16[$angleturn15>>1] = $conv14;
 }
 $17 = HEAP32[99497]|0;
 $incdec$ptr17 = ((($17)) + 1|0);
 HEAP32[99497] = $incdec$ptr17;
 $18 = HEAP8[$17>>0]|0;
 $19 = $cmd$addr;
 $buttons = ((($19)) + 5|0);
 HEAP8[$buttons>>0] = $18;
 STACKTOP = sp;return;
}
function _G_WriteDemoTiccmd($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and = 0, $and8 = 0, $angleturn = 0, $angleturn6 = 0, $arrayidx = 0, $buttons = 0, $cmd$addr = 0, $cmp = 0, $conv = 0, $conv14 = 0, $conv4 = 0, $conv7 = 0, $conv9 = 0, $demo_start = 0;
 var $incdec$ptr = 0, $incdec$ptr1 = 0, $incdec$ptr10 = 0, $incdec$ptr15 = 0, $incdec$ptr17 = 0, $incdec$ptr5 = 0, $shr = 0, $shr13 = 0, $sidemove = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmd$addr = $cmd;
 $0 = HEAP32[32228]|0;
 $arrayidx = (184592 + ($0<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  (_G_CheckDemoStatus()|0);
 }
 $2 = HEAP32[99497]|0;
 $demo_start = $2;
 $3 = $cmd$addr;
 $4 = HEAP8[$3>>0]|0;
 $5 = HEAP32[99497]|0;
 $incdec$ptr = ((($5)) + 1|0);
 HEAP32[99497] = $incdec$ptr;
 HEAP8[$5>>0] = $4;
 $6 = $cmd$addr;
 $sidemove = ((($6)) + 1|0);
 $7 = HEAP8[$sidemove>>0]|0;
 $8 = HEAP32[99497]|0;
 $incdec$ptr1 = ((($8)) + 1|0);
 HEAP32[99497] = $incdec$ptr1;
 HEAP8[$8>>0] = $7;
 $9 = HEAP32[99498]|0;
 $tobool2 = ($9|0)!=(0);
 $10 = $cmd$addr;
 $angleturn = ((($10)) + 2|0);
 $11 = HEAP16[$angleturn>>1]|0;
 $conv = $11 << 16 >> 16;
 if ($tobool2) {
  $and = $conv & 255;
  $conv4 = $and&255;
  $12 = HEAP32[99497]|0;
  $incdec$ptr5 = ((($12)) + 1|0);
  HEAP32[99497] = $incdec$ptr5;
  HEAP8[$12>>0] = $conv4;
  $13 = $cmd$addr;
  $angleturn6 = ((($13)) + 2|0);
  $14 = HEAP16[$angleturn6>>1]|0;
  $conv7 = $14 << 16 >> 16;
  $shr = $conv7 >> 8;
  $and8 = $shr & 255;
  $conv9 = $and8&255;
  $15 = HEAP32[99497]|0;
  $incdec$ptr10 = ((($15)) + 1|0);
  HEAP32[99497] = $incdec$ptr10;
  HEAP8[$15>>0] = $conv9;
 } else {
  $shr13 = $conv >> 8;
  $conv14 = $shr13&255;
  $16 = HEAP32[99497]|0;
  $incdec$ptr15 = ((($16)) + 1|0);
  HEAP32[99497] = $incdec$ptr15;
  HEAP8[$16>>0] = $conv14;
 }
 $17 = $cmd$addr;
 $buttons = ((($17)) + 5|0);
 $18 = HEAP8[$buttons>>0]|0;
 $19 = HEAP32[99497]|0;
 $incdec$ptr17 = ((($19)) + 1|0);
 HEAP32[99497] = $incdec$ptr17;
 HEAP8[$19>>0] = $18;
 $20 = $demo_start;
 HEAP32[99497] = $20;
 $21 = HEAP32[99497]|0;
 $22 = HEAP32[99499]|0;
 $add$ptr = ((($22)) + -16|0);
 $cmp = ($21>>>0)>($add$ptr>>>0);
 do {
  if ($cmp) {
   $23 = HEAP32[32190]|0;
   $tobool20 = ($23|0)!=(0);
   if (!($tobool20)) {
    _IncreaseDemoBuffer();
    break;
   }
   (_G_CheckDemoStatus()|0);
   STACKTOP = sp;return;
  }
 } while(0);
 $24 = $cmd$addr;
 _G_ReadDemoTiccmd($24);
 STACKTOP = sp;return;
}
function _G_CheckDemoStatus() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0;
 var $call = 0, $conv = 0.0, $conv1 = 0.0, $conv2 = 0.0, $div = 0.0, $endtime = 0, $fps = 0.0, $incdec$ptr = 0, $mul = 0.0, $realtics = 0, $retval = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool3 = 0, $tobool5 = 0, $tobool9 = 0, $vararg_buffer = 0;
 var $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99505]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $call = (_I_GetTime()|0);
  $endtime = $call;
  $1 = $endtime;
  $2 = HEAP32[99503]|0;
  $sub = (($1) - ($2))|0;
  $realtics = $sub;
  $3 = HEAP32[99365]|0;
  $conv = (+($3|0));
  $mul = $conv * 35.0;
  $4 = $realtics;
  $conv1 = (+($4|0));
  $div = $mul / $conv1;
  $fps = $div;
  HEAP32[99505] = 0;
  HEAP32[99431] = 0;
  $5 = HEAP32[99365]|0;
  $6 = $realtics;
  $7 = $fps;
  $conv2 = $7;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $conv2;
  _I_Error(143658,$vararg_buffer);
 }
 $8 = HEAP32[99431]|0;
 $tobool3 = ($8|0)!=(0);
 if (!($tobool3)) {
  $11 = HEAP32[99432]|0;
  $tobool9 = ($11|0)!=(0);
  if ($tobool9) {
   $12 = HEAP32[99497]|0;
   $incdec$ptr = ((($12)) + 1|0);
   HEAP32[99497] = $incdec$ptr;
   HEAP8[$12>>0] = -128;
   $13 = HEAP32[99500]|0;
   $14 = HEAP32[99501]|0;
   $15 = HEAP32[99497]|0;
   $16 = HEAP32[99501]|0;
   $sub$ptr$lhs$cast = $15;
   $sub$ptr$rhs$cast = $16;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   (_M_WriteFile($13,$14,$sub$ptr$sub)|0);
   $17 = HEAP32[99501]|0;
   _Z_Free($17);
   HEAP32[99432] = 0;
   $18 = HEAP32[99500]|0;
   HEAP32[$vararg_buffer3>>2] = $18;
   _I_Error(143700,$vararg_buffer3);
  }
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $9 = HEAP32[99502]|0;
 _W_ReleaseLumpName($9);
 HEAP32[99431] = 0;
 HEAP32[99434] = 0;
 HEAP32[99433] = 0;
 HEAP32[99430] = 0;
 HEAP32[(183052)>>2] = 0;
 HEAP32[(183048)>>2] = 0;
 HEAP32[(183044)>>2] = 0;
 HEAP32[99381] = 0;
 HEAP32[99382] = 0;
 HEAP32[99380] = 0;
 HEAP32[99415] = 0;
 $10 = HEAP32[99429]|0;
 $tobool5 = ($10|0)!=(0);
 if ($tobool5) {
  _I_Quit();
 } else {
  _D_AdvanceDemo();
 }
 $retval = 1;
 $19 = $retval;
 STACKTOP = sp;return ($19|0);
}
function _IncreaseDemoBuffer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $current_length = 0, $mul = 0;
 var $new_demobuffer = 0, $new_demop = 0, $new_length = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast1 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast2 = 0, $sub$ptr$sub = 0, $sub$ptr$sub3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99499]|0;
 $1 = HEAP32[99501]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $current_length = $sub$ptr$sub;
 $2 = $current_length;
 $mul = $2<<1;
 $new_length = $mul;
 $3 = $new_length;
 $call = (_Z_Malloc($3,1,0)|0);
 $new_demobuffer = $call;
 $4 = $new_demobuffer;
 $5 = HEAP32[99497]|0;
 $6 = HEAP32[99501]|0;
 $sub$ptr$lhs$cast1 = $5;
 $sub$ptr$rhs$cast2 = $6;
 $sub$ptr$sub3 = (($sub$ptr$lhs$cast1) - ($sub$ptr$rhs$cast2))|0;
 $add$ptr = (($4) + ($sub$ptr$sub3)|0);
 $new_demop = $add$ptr;
 $7 = $new_demobuffer;
 $8 = HEAP32[99501]|0;
 $9 = $current_length;
 _memcpy(($7|0),($8|0),($9|0))|0;
 $10 = HEAP32[99501]|0;
 _Z_Free($10);
 $11 = $new_demobuffer;
 HEAP32[99501] = $11;
 $12 = $new_demop;
 HEAP32[99497] = $12;
 $13 = HEAP32[99501]|0;
 $14 = $new_length;
 $add$ptr4 = (($13) + ($14)|0);
 HEAP32[99499] = $add$ptr4;
 STACKTOP = sp;return;
}
function _G_PlayerFinishLevel($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $bonuscount = 0, $cards = 0, $damagecount = 0, $extralight = 0, $fixedcolormap = 0, $flags = 0, $p = 0, $player$addr = 0;
 var $powers = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $arrayidx = (183056 + (($0*288)|0)|0);
 $p = $arrayidx;
 $1 = $p;
 $powers = ((($1)) + 52|0);
 ;HEAP32[$powers>>2]=0|0;HEAP32[$powers+4>>2]=0|0;HEAP32[$powers+8>>2]=0|0;HEAP32[$powers+12>>2]=0|0;HEAP32[$powers+16>>2]=0|0;HEAP32[$powers+20>>2]=0|0;
 $2 = $p;
 $cards = ((($2)) + 76|0);
 ;HEAP32[$cards>>2]=0|0;HEAP32[$cards+4>>2]=0|0;HEAP32[$cards+8>>2]=0|0;HEAP32[$cards+12>>2]=0|0;HEAP32[$cards+16>>2]=0|0;HEAP32[$cards+20>>2]=0|0;
 $3 = $p;
 $4 = HEAP32[$3>>2]|0;
 $flags = ((($4)) + 104|0);
 $5 = HEAP32[$flags>>2]|0;
 $and = $5 & -262145;
 HEAP32[$flags>>2] = $and;
 $6 = $p;
 $extralight = ((($6)) + 240|0);
 HEAP32[$extralight>>2] = 0;
 $7 = $p;
 $fixedcolormap = ((($7)) + 244|0);
 HEAP32[$fixedcolormap>>2] = 0;
 $8 = $p;
 $damagecount = ((($8)) + 228|0);
 HEAP32[$damagecount>>2] = 0;
 $9 = $p;
 $bonuscount = ((($9)) + 232|0);
 HEAP32[$bonuscount>>2] = 0;
 STACKTOP = sp;return;
}
function _G_VanillaVersionCode() {
 var $0 = 0, $1 = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[32169]|0;
 switch ($0|0) {
 case 0:  {
  _I_Error(144032,$vararg_buffer);
  label = 3;
  break;
 }
 case 1:  {
  label = 3;
  break;
 }
 case 2:  {
  $retval = 107;
  break;
 }
 case 3:  {
  $retval = 108;
  break;
 }
 default: {
  $retval = 109;
 }
 }
 if ((label|0) == 3) {
  $retval = 106;
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function _DemoVersionDescription($version) {
 $version = $version|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp6 = 0, $div = 0, $or$cond = 0, $rem = 0, $retval = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $version$addr = $version;
 $0 = $version$addr;
 L1: do {
  switch ($0|0) {
  case 104:  {
   $retval = 143958;
   break;
  }
  case 105:  {
   $retval = 143963;
   break;
  }
  case 106:  {
   $retval = 143968;
   break;
  }
  case 107:  {
   $retval = 143980;
   break;
  }
  case 108:  {
   $retval = 143991;
   break;
  }
  case 109:  {
   $retval = 143996;
   break;
  }
  default: {
   $1 = $version$addr;
   $cmp = ($1|0)>=(0);
   $2 = $version$addr;
   $cmp6 = ($2|0)<=(4);
   $or$cond = $cmp & $cmp6;
   if ($or$cond) {
    $retval = 144001;
    break L1;
   } else {
    $3 = $version$addr;
    $div = (($3|0) / 100)&-1;
    $4 = $version$addr;
    $rem = (($4|0) % 100)&-1;
    HEAP32[$vararg_buffer>>2] = $div;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $rem;
    (_M_snprintf(185872,16,144016,$vararg_buffer)|0);
    $retval = 185872;
    break L1;
   }
  }
  }
 } while(0);
 $5 = $retval;
 STACKTOP = sp;return ($5|0);
}
function _G_InitNew($skill,$episode,$map) {
 $skill = $skill|0;
 $episode = $episode|0;
 $map = $map|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx47 = 0, $arrayidx57 = 0;
 var $call = 0, $cmp = 0, $cmp11 = 0, $cmp15 = 0, $cmp16 = 0, $cmp19 = 0, $cmp22 = 0, $cmp24 = 0, $cmp27 = 0, $cmp3 = 0, $cmp34 = 0, $cmp36 = 0, $cmp38 = 0, $cmp40 = 0, $cmp42 = 0, $cmp45 = 0, $cmp5 = 0, $cmp55 = 0, $cmp61 = 0, $cmp63 = 0;
 var $cmp66 = 0, $cmp8 = 0, $episode$addr = 0, $i = 0, $inc = 0, $inc50 = 0, $inc59 = 0, $map$addr = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $playerstate = 0, $shl = 0, $shr = 0, $skill$addr = 0, $skytexturename = 0, $tics = 0, $tics48 = 0;
 var $tobool = 0, $tobool28 = 0, $tobool32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $skill$addr = $skill;
 $episode$addr = $episode;
 $map$addr = $map;
 $0 = HEAP32[99428]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  HEAP32[99428] = 0;
  _S_ResumeSound();
 }
 $1 = $skill$addr;
 $cmp = ($1|0)>(4);
 if ($cmp) {
  $skill$addr = 4;
 }
 $2 = HEAP32[32169]|0;
 $cmp3 = ($2>>>0)>=(6);
 $3 = $episode$addr;
 if ($cmp3) {
  $cmp5 = ($3|0)==(0);
  if ($cmp5) {
   $episode$addr = 4;
  }
 } else {
  $cmp8 = ($3|0)<(1);
  if ($cmp8) {
   $episode$addr = 1;
  }
  $4 = $episode$addr;
  $cmp11 = ($4|0)>(3);
  if ($cmp11) {
   $episode$addr = 3;
  }
 }
 $5 = $episode$addr;
 $cmp15 = ($5|0)>(1);
 $6 = HEAP32[32168]|0;
 $cmp16 = ($6|0)==(0);
 $or$cond = $cmp15 & $cmp16;
 if ($or$cond) {
  $episode$addr = 1;
 }
 $7 = $map$addr;
 $cmp19 = ($7|0)<(1);
 if ($cmp19) {
  $map$addr = 1;
 }
 $8 = $map$addr;
 $cmp22 = ($8|0)>(9);
 $9 = HEAP32[32168]|0;
 $cmp24 = ($9|0)!=(2);
 $or$cond1 = $cmp22 & $cmp24;
 if ($or$cond1) {
  $map$addr = 9;
 }
 _M_ClearRandom();
 $10 = $skill$addr;
 $cmp27 = ($10|0)==(4);
 $11 = HEAP32[99381]|0;
 $tobool28 = ($11|0)!=(0);
 $or$cond2 = $cmp27 | $tobool28;
 if ($or$cond2) {
  HEAP32[99495] = 1;
 } else {
  HEAP32[99495] = 0;
 }
 $12 = HEAP32[99382]|0;
 $tobool32 = ($12|0)!=(0);
 if ($tobool32) {
  label = 23;
 } else {
  $13 = $skill$addr;
  $cmp34 = ($13|0)==(4);
  $14 = HEAP32[99425]|0;
  $cmp36 = ($14|0)!=(4);
  $or$cond3 = $cmp34 & $cmp36;
  if ($or$cond3) {
   label = 23;
  } else {
   $19 = $skill$addr;
   $cmp40 = ($19|0)!=(4);
   $20 = HEAP32[99425]|0;
   $cmp42 = ($20|0)==(4);
   $or$cond4 = $cmp40 & $cmp42;
   if ($or$cond4) {
    $i = 477;
    while(1) {
     $21 = $i;
     $cmp45 = ($21|0)<=(489);
     if (!($cmp45)) {
      break;
     }
     $22 = $i;
     $arrayidx47 = (3568 + (($22*28)|0)|0);
     $tics48 = ((($arrayidx47)) + 8|0);
     $23 = HEAP32[$tics48>>2]|0;
     $shl = $23 << 1;
     HEAP32[$tics48>>2] = $shl;
     $24 = $i;
     $inc50 = (($24) + 1)|0;
     $i = $inc50;
    }
    HEAP32[(32188)>>2] = 983040;
    HEAP32[(33660)>>2] = 655360;
    HEAP32[(33568)>>2] = 655360;
   }
  }
 }
 if ((label|0) == 23) {
  $i = 477;
  while(1) {
   $15 = $i;
   $cmp38 = ($15|0)<=(489);
   if (!($cmp38)) {
    break;
   }
   $16 = $i;
   $arrayidx = (3568 + (($16*28)|0)|0);
   $tics = ((($arrayidx)) + 8|0);
   $17 = HEAP32[$tics>>2]|0;
   $shr = $17 >> 1;
   HEAP32[$tics>>2] = $shr;
   $18 = $i;
   $inc = (($18) + 1)|0;
   $i = $inc;
  }
  HEAP32[(32188)>>2] = 1310720;
  HEAP32[(33660)>>2] = 1310720;
  HEAP32[(33568)>>2] = 1310720;
 }
 $i = 0;
 while(1) {
  $25 = $i;
  $cmp55 = ($25|0)<(4);
  if (!($cmp55)) {
   break;
  }
  $26 = $i;
  $arrayidx57 = (183056 + (($26*288)|0)|0);
  $playerstate = ((($arrayidx57)) + 4|0);
  HEAP32[$playerstate>>2] = 2;
  $27 = $i;
  $inc59 = (($27) + 1)|0;
  $i = $inc59;
 }
 HEAP32[99496] = 1;
 HEAP32[99428] = 0;
 HEAP32[99431] = 0;
 HEAP32[99316] = 0;
 HEAP32[99491] = 1;
 $28 = $episode$addr;
 HEAP32[99424] = $28;
 $29 = $map$addr;
 HEAP32[99423] = $29;
 $30 = $skill$addr;
 HEAP32[99425] = $30;
 HEAP32[99491] = 1;
 $31 = HEAP32[32168]|0;
 $cmp61 = ($31|0)==(2);
 L48: do {
  if ($cmp61) {
   $32 = HEAP32[99423]|0;
   $cmp63 = ($32|0)<(12);
   if ($cmp63) {
    $skytexturename = 143537;
    break;
   }
   $33 = HEAP32[99423]|0;
   $cmp66 = ($33|0)<(21);
   if ($cmp66) {
    $skytexturename = 143542;
    break;
   } else {
    $skytexturename = 143547;
    break;
   }
  } else {
   $34 = HEAP32[99424]|0;
   switch ($34|0) {
   case 4:  {
    $skytexturename = 143953;
    break L48;
    break;
   }
   case 2:  {
    $skytexturename = 143542;
    break L48;
    break;
   }
   case 3:  {
    $skytexturename = 143547;
    break L48;
    break;
   }
   default: {
    $skytexturename = 143537;
    break L48;
   }
   }
  }
 } while(0);
 $35 = $skytexturename;
 $skytexturename = $35;
 $36 = $skytexturename;
 $call = (_R_TextureNumForName($36)|0);
 HEAP32[100033] = $call;
 _G_DoLoadLevel();
 STACKTOP = sp;return;
}
function _G_DeathMatchSpawnPlayer($playernum) {
 $playernum = $playernum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $call = 0, $call2 = 0, $cmp = 0;
 var $cmp1 = 0, $conv = 0, $i = 0, $inc = 0, $j = 0, $playernum$addr = 0, $rem = 0, $selections = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $type = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $playernum$addr = $playernum;
 $0 = HEAP32[99861]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (191936))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 10)&-1;
 $selections = $sub$ptr$div;
 $1 = $selections;
 $cmp = ($1|0)<(4);
 if ($cmp) {
  $2 = $selections;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(144319,$vararg_buffer);
 }
 $j = 0;
 while(1) {
  $3 = $j;
  $cmp1 = ($3|0)<(20);
  if (!($cmp1)) {
   label = 8;
   break;
  }
  $call = (_P_Random()|0);
  $4 = $selections;
  $rem = (($call|0) % ($4|0))&-1;
  $i = $rem;
  $5 = $playernum$addr;
  $6 = $i;
  $arrayidx = (191936 + (($6*10)|0)|0);
  $call2 = (_G_CheckSpot($5,$arrayidx)|0);
  $tobool = ($call2|0)!=(0);
  if ($tobool) {
   label = 6;
   break;
  }
  $10 = $j;
  $inc = (($10) + 1)|0;
  $j = $inc;
 }
 if ((label|0) == 6) {
  $7 = $playernum$addr;
  $add = (($7) + 1)|0;
  $conv = $add&65535;
  $8 = $i;
  $arrayidx4 = (191936 + (($8*10)|0)|0);
  $type = ((($arrayidx4)) + 6|0);
  HEAP16[$type>>1] = $conv;
  $9 = $i;
  $arrayidx5 = (191936 + (($9*10)|0)|0);
  _P_SpawnPlayer($arrayidx5);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $11 = $playernum$addr;
  $arrayidx7 = (192048 + (($11*10)|0)|0);
  _P_SpawnPlayer($arrayidx7);
  STACKTOP = sp;return;
 }
}
function _G_CheckSpot($playernum,$mthing) {
 $playernum = $playernum|0;
 $mthing = $mthing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add49 = 0, $an = 0, $angle = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx24 = 0, $arrayidx32 = 0, $arrayidx34 = 0, $arrayidx37 = 0, $arrayidx45 = 0, $arrayidx46 = 0, $arrayidx51 = 0, $arrayidx8 = 0, $call = 0, $call39 = 0, $call50 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp29 = 0, $cmp52 = 0, $cmp6 = 0, $conv = 0, $conv12 = 0, $conv19 = 0, $conv22 = 0, $conv40 = 0, $div = 0, $i = 0, $inc = 0, $inc38 = 0, $mo = 0, $mthing$addr = 0, $mul = 0, $mul47 = 0, $mul48 = 0, $playernum$addr = 0;
 var $rem = 0, $rem36 = 0, $retval = 0, $shl = 0, $shl13 = 0, $shl20 = 0, $shl23 = 0, $ss = 0, $tobool = 0, $tobool26 = 0, $vararg_buffer = 0, $viewz = 0, $x = 0, $x4 = 0, $xa = 0, $y = 0, $y10 = 0, $y11 = 0, $y21 = 0, $ya = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $playernum$addr = $playernum;
 $mthing$addr = $mthing;
 $0 = $playernum$addr;
 $arrayidx = (183056 + (($0*288)|0)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  $i = 0;
  while(1) {
   $2 = $i;
   $3 = $playernum$addr;
   $cmp = ($2|0)<($3|0);
   if (!($cmp)) {
    label = 8;
    break;
   }
   $4 = $i;
   $arrayidx2 = (183056 + (($4*288)|0)|0);
   $5 = HEAP32[$arrayidx2>>2]|0;
   $x4 = ((($5)) + 12|0);
   $6 = HEAP32[$x4>>2]|0;
   $7 = $mthing$addr;
   $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
   $conv = $8 << 16 >> 16;
   $shl = $conv << 16;
   $cmp6 = ($6|0)==($shl|0);
   if ($cmp6) {
    $9 = $i;
    $arrayidx8 = (183056 + (($9*288)|0)|0);
    $10 = HEAP32[$arrayidx8>>2]|0;
    $y10 = ((($10)) + 16|0);
    $11 = HEAP32[$y10>>2]|0;
    $12 = $mthing$addr;
    $y11 = ((($12)) + 2|0);
    $13 = HEAPU8[$y11>>0]|(HEAPU8[$y11+1>>0]<<8);
    $conv12 = $13 << 16 >> 16;
    $shl13 = $conv12 << 16;
    $cmp14 = ($11|0)==($shl13|0);
    if ($cmp14) {
     label = 6;
     break;
    }
   }
   $14 = $i;
   $inc = (($14) + 1)|0;
   $i = $inc;
  }
  if ((label|0) == 6) {
   $retval = 0;
   $62 = $retval;
   STACKTOP = sp;return ($62|0);
  }
  else if ((label|0) == 8) {
   $retval = 1;
   $62 = $retval;
   STACKTOP = sp;return ($62|0);
  }
 }
 $15 = $mthing$addr;
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8);
 $conv19 = $16 << 16 >> 16;
 $shl20 = $conv19 << 16;
 $x = $shl20;
 $17 = $mthing$addr;
 $y21 = ((($17)) + 2|0);
 $18 = HEAPU8[$y21>>0]|(HEAPU8[$y21+1>>0]<<8);
 $conv22 = $18 << 16 >> 16;
 $shl23 = $conv22 << 16;
 $y = $shl23;
 $19 = $playernum$addr;
 $arrayidx24 = (183056 + (($19*288)|0)|0);
 $20 = HEAP32[$arrayidx24>>2]|0;
 $21 = $x;
 $22 = $y;
 $call = (_P_CheckPosition($20,$21,$22)|0);
 $tobool26 = ($call|0)!=(0);
 if (!($tobool26)) {
  $retval = 0;
  $62 = $retval;
  STACKTOP = sp;return ($62|0);
 }
 $23 = HEAP32[99436]|0;
 $cmp29 = ($23|0)>=(32);
 if ($cmp29) {
  $24 = HEAP32[99436]|0;
  $rem = (($24|0) % 32)&-1;
  $arrayidx32 = (184208 + ($rem<<2)|0);
  $25 = HEAP32[$arrayidx32>>2]|0;
  _P_RemoveMobj($25);
 }
 $26 = $playernum$addr;
 $arrayidx34 = (183056 + (($26*288)|0)|0);
 $27 = HEAP32[$arrayidx34>>2]|0;
 $28 = HEAP32[99436]|0;
 $rem36 = (($28|0) % 32)&-1;
 $arrayidx37 = (184208 + ($rem36<<2)|0);
 HEAP32[$arrayidx37>>2] = $27;
 $29 = HEAP32[99436]|0;
 $inc38 = (($29) + 1)|0;
 HEAP32[99436] = $inc38;
 $30 = $x;
 $31 = $y;
 $call39 = (_R_PointInSubsector($30,$31)|0);
 $ss = $call39;
 $32 = $mthing$addr;
 $angle = ((($32)) + 4|0);
 $33 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $conv40 = $33 << 16 >> 16;
 $div = (($conv40|0) / 45)&-1;
 $mul = $div<<10;
 $an = $mul;
 $34 = $an;
 $35 = (($34) - 0)|0;
 $36 = $35 >>> 10;
 $37 = $35 << 22;
 $38 = $36 | $37;
 switch ($38|0) {
 case 4:  {
  $39 = HEAP32[(66608)>>2]|0;
  $xa = $39;
  $40 = HEAP32[14604]|0;
  $ya = $40;
  break;
 }
 case 5:  {
  $41 = HEAP32[(70704)>>2]|0;
  $xa = $41;
  $42 = HEAP32[(62512)>>2]|0;
  $ya = $42;
  break;
 }
 case 6:  {
  $43 = HEAP32[18700]|0;
  $xa = $43;
  $44 = HEAP32[(66608)>>2]|0;
  $ya = $44;
  break;
 }
 case 7:  {
  $45 = HEAP32[(78896)>>2]|0;
  $xa = $45;
  $46 = HEAP32[(70704)>>2]|0;
  $ya = $46;
  break;
 }
 case 3: case 2: case 1: case 0:  {
  $47 = $an;
  $arrayidx45 = ((82992) + ($47<<2)|0);
  $48 = HEAP32[$arrayidx45>>2]|0;
  $xa = $48;
  $49 = $an;
  $arrayidx46 = (74800 + ($49<<2)|0);
  $50 = HEAP32[$arrayidx46>>2]|0;
  $ya = $50;
  break;
 }
 default: {
  $51 = $an;
  HEAP32[$vararg_buffer>>2] = $51;
  _I_Error(144285,$vararg_buffer);
  $ya = 0;
  $xa = 0;
 }
 }
 $52 = $x;
 $53 = $xa;
 $mul47 = ($53*20)|0;
 $add = (($52) + ($mul47))|0;
 $54 = $y;
 $55 = $ya;
 $mul48 = ($55*20)|0;
 $add49 = (($54) + ($mul48))|0;
 $56 = $ss;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $call50 = (_P_SpawnMobj($add,$add49,$58,39)|0);
 $mo = $call50;
 $59 = HEAP32[99415]|0;
 $arrayidx51 = (183056 + (($59*288)|0)|0);
 $viewz = ((($arrayidx51)) + 24|0);
 $60 = HEAP32[$viewz>>2]|0;
 $cmp52 = ($60|0)!=(1);
 if ($cmp52) {
  $61 = $mo;
  _S_StartSound($61,35);
 }
 $retval = 1;
 $62 = $retval;
 STACKTOP = sp;return ($62|0);
}
function _G_PlayerReborn($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ammo = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx25 = 0;
 var $arrayidx3 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $attackdown = 0, $cmp = 0, $frags = 0, $frags1 = 0, $frags11 = 0, $health = 0, $i = 0, $inc = 0, $itemcount = 0, $itemcount17 = 0, $itemcount6 = 0, $killcount = 0, $killcount15 = 0, $killcount4 = 0, $maxammo = 0, $p = 0;
 var $pendingweapon = 0, $player$addr = 0, $playerstate = 0, $readyweapon = 0, $secretcount = 0, $secretcount19 = 0, $secretcount8 = 0, $usedown = 0, $weaponowned = 0, $weaponowned21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $frags = sp;
 $player$addr = $player;
 $0 = $player$addr;
 $arrayidx = (183056 + (($0*288)|0)|0);
 $frags1 = ((($arrayidx)) + 104|0);
 ;HEAP32[$frags>>2]=HEAP32[$frags1>>2]|0;HEAP32[$frags+4>>2]=HEAP32[$frags1+4>>2]|0;HEAP32[$frags+8>>2]=HEAP32[$frags1+8>>2]|0;HEAP32[$frags+12>>2]=HEAP32[$frags1+12>>2]|0;
 $1 = $player$addr;
 $arrayidx3 = (183056 + (($1*288)|0)|0);
 $killcount4 = ((($arrayidx3)) + 212|0);
 $2 = HEAP32[$killcount4>>2]|0;
 $killcount = $2;
 $3 = $player$addr;
 $arrayidx5 = (183056 + (($3*288)|0)|0);
 $itemcount6 = ((($arrayidx5)) + 216|0);
 $4 = HEAP32[$itemcount6>>2]|0;
 $itemcount = $4;
 $5 = $player$addr;
 $arrayidx7 = (183056 + (($5*288)|0)|0);
 $secretcount8 = ((($arrayidx7)) + 220|0);
 $6 = HEAP32[$secretcount8>>2]|0;
 $secretcount = $6;
 $7 = $player$addr;
 $arrayidx9 = (183056 + (($7*288)|0)|0);
 $p = $arrayidx9;
 $8 = $p;
 _memset(($8|0),0,288)|0;
 $9 = $player$addr;
 $arrayidx10 = (183056 + (($9*288)|0)|0);
 $frags11 = ((($arrayidx10)) + 104|0);
 ;HEAP32[$frags11>>2]=HEAP32[$frags>>2]|0;HEAP32[$frags11+4>>2]=HEAP32[$frags+4>>2]|0;HEAP32[$frags11+8>>2]=HEAP32[$frags+8>>2]|0;HEAP32[$frags11+12>>2]=HEAP32[$frags+12>>2]|0;
 $10 = $killcount;
 $11 = $player$addr;
 $arrayidx14 = (183056 + (($11*288)|0)|0);
 $killcount15 = ((($arrayidx14)) + 212|0);
 HEAP32[$killcount15>>2] = $10;
 $12 = $itemcount;
 $13 = $player$addr;
 $arrayidx16 = (183056 + (($13*288)|0)|0);
 $itemcount17 = ((($arrayidx16)) + 216|0);
 HEAP32[$itemcount17>>2] = $12;
 $14 = $secretcount;
 $15 = $player$addr;
 $arrayidx18 = (183056 + (($15*288)|0)|0);
 $secretcount19 = ((($arrayidx18)) + 220|0);
 HEAP32[$secretcount19>>2] = $14;
 $16 = $p;
 $attackdown = ((($16)) + 196|0);
 HEAP32[$attackdown>>2] = 1;
 $17 = $p;
 $usedown = ((($17)) + 200|0);
 HEAP32[$usedown>>2] = 1;
 $18 = $p;
 $playerstate = ((($18)) + 4|0);
 HEAP32[$playerstate>>2] = 0;
 $19 = $p;
 $health = ((($19)) + 40|0);
 HEAP32[$health>>2] = 100;
 $20 = $p;
 $pendingweapon = ((($20)) + 124|0);
 HEAP32[$pendingweapon>>2] = 1;
 $21 = $p;
 $readyweapon = ((($21)) + 120|0);
 HEAP32[$readyweapon>>2] = 1;
 $22 = $p;
 $weaponowned = ((($22)) + 128|0);
 HEAP32[$weaponowned>>2] = 1;
 $23 = $p;
 $weaponowned21 = ((($23)) + 128|0);
 $arrayidx22 = ((($weaponowned21)) + 4|0);
 HEAP32[$arrayidx22>>2] = 1;
 $24 = $p;
 $ammo = ((($24)) + 164|0);
 HEAP32[$ammo>>2] = 50;
 $i = 0;
 while(1) {
  $25 = $i;
  $cmp = ($25|0)<(4);
  if (!($cmp)) {
   break;
  }
  $26 = $i;
  $arrayidx24 = (49472 + ($26<<2)|0);
  $27 = HEAP32[$arrayidx24>>2]|0;
  $28 = $p;
  $maxammo = ((($28)) + 180|0);
  $29 = $i;
  $arrayidx25 = (($maxammo) + ($29<<2)|0);
  HEAP32[$arrayidx25>>2] = $27;
  $30 = $i;
  $inc = (($30) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _G_ScreenShot() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99427] = 9;
 return;
}
function _G_ExitLevel() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99437] = 0;
 HEAP32[99427] = 6;
 return;
}
function _G_SecretExitLevel() {
 var $0 = 0, $call = 0, $cmp = 0, $cmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $call = (_W_CheckNumForName(144356)|0);
  $cmp1 = ($call|0)<(0);
  if ($cmp1) {
   HEAP32[99437] = 0;
   HEAP32[99427] = 6;
   return;
  }
 }
 HEAP32[99437] = 1;
 HEAP32[99427] = 6;
 return;
}
function _G_WorldDone() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $cmp = 0, $didsecret = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99427] = 8;
 $0 = HEAP32[99437]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99415]|0;
  $arrayidx = (183056 + (($1*288)|0)|0);
  $didsecret = ((($arrayidx)) + 284|0);
  HEAP32[$didsecret>>2] = 1;
 }
 $2 = HEAP32[32168]|0;
 $cmp = ($2|0)==(2);
 if (!($cmp)) {
  return;
 }
 $3 = HEAP32[99423]|0;
 switch ($3|0) {
 case 31: case 15:  {
  label = 5;
  break;
 }
 case 30: case 20: case 11: case 6:  {
  break;
 }
 default: {
  return;
 }
 }
 if ((label|0) == 5) {
  $4 = HEAP32[99437]|0;
  $tobool2 = ($4|0)!=(0);
  if (!($tobool2)) {
   return;
  }
 }
 _F_StartFinale();
 return;
}
function _G_LoadGame($name) {
 $name = $name|0;
 var $0 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $0 = $name$addr;
 (_M_StringCopy(184336,$0,256)|0);
 HEAP32[99427] = 3;
 STACKTOP = sp;return;
}
function _G_SaveGame($slot,$description) {
 $slot = $slot|0;
 $description = $description|0;
 var $0 = 0, $1 = 0, $description$addr = 0, $slot$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $slot$addr = $slot;
 $description$addr = $description;
 $0 = $slot$addr;
 HEAP32[99518] = $0;
 $1 = $description$addr;
 (_M_StringCopy(185840,$1,32)|0);
 HEAP32[99421] = 1;
 STACKTOP = sp;return;
}
function _G_DeferedInitNew($skill,$episode,$map) {
 $skill = $skill|0;
 $episode = $episode|0;
 $map = $map|0;
 var $0 = 0, $1 = 0, $2 = 0, $episode$addr = 0, $map$addr = 0, $skill$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $skill$addr = $skill;
 $episode$addr = $episode;
 $map$addr = $map;
 $0 = $skill$addr;
 HEAP32[99492] = $0;
 $1 = $episode$addr;
 HEAP32[99493] = $1;
 $2 = $map$addr;
 HEAP32[99494] = $2;
 HEAP32[99427] = 2;
 STACKTOP = sp;return;
}
function _G_RecordDemo($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $call5 = 0;
 var $call6 = 0, $demoname_size = 0, $i = 0, $maxsize = 0, $mul = 0, $name$addr = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $name$addr = $name;
 HEAP32[99496] = 0;
 $0 = $name$addr;
 $call = (_strlen($0)|0);
 $add = (($call) + 5)|0;
 $demoname_size = $add;
 $1 = $demoname_size;
 $call1 = (_Z_Malloc($1,1,0)|0);
 HEAP32[99500] = $call1;
 $2 = HEAP32[99500]|0;
 $3 = $demoname_size;
 $4 = $name$addr;
 HEAP32[$vararg_buffer>>2] = $4;
 (_M_snprintf($2,$3,144362,$vararg_buffer)|0);
 $maxsize = 131072;
 $call3 = (_M_CheckParmWithArgs(144369,1)|0);
 $i = $call3;
 $5 = $i;
 $tobool = ($5|0)!=(0);
 if ($tobool) {
  $6 = HEAP32[99714]|0;
  $7 = $i;
  $add4 = (($7) + 1)|0;
  $arrayidx = (($6) + ($add4<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $call5 = (_atoi($8)|0);
  $mul = $call5<<10;
  $maxsize = $mul;
 }
 $9 = $maxsize;
 $call6 = (_Z_Malloc($9,1,0)|0);
 HEAP32[99501] = $call6;
 $10 = HEAP32[99501]|0;
 $11 = $maxsize;
 $add$ptr = (($10) + ($11)|0);
 HEAP32[99499] = $add$ptr;
 HEAP32[99432] = 1;
 STACKTOP = sp;return;
}
function _G_BeginRecording() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp21 = 0, $conv = 0, $conv11 = 0, $conv13 = 0, $conv15 = 0, $conv17 = 0, $conv19 = 0, $conv23 = 0, $conv3 = 0, $conv5 = 0;
 var $conv7 = 0, $conv9 = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr12 = 0, $incdec$ptr14 = 0, $incdec$ptr16 = 0, $incdec$ptr18 = 0, $incdec$ptr20 = 0, $incdec$ptr24 = 0, $incdec$ptr4 = 0, $incdec$ptr6 = 0, $incdec$ptr8 = 0, $lnot = 0, $lnot$ext = 0, $tobool = 0, $tobool1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_M_CheckParm(144378)|0);
 $cmp = ($call|0)!=(0);
 $conv = $cmp&1;
 HEAP32[99498] = $conv;
 $0 = HEAP32[99498]|0;
 $tobool = ($0|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 HEAP32[99422] = $lnot$ext;
 $1 = HEAP32[99501]|0;
 HEAP32[99497] = $1;
 $2 = HEAP32[99498]|0;
 $tobool1 = ($2|0)!=(0);
 if ($tobool1) {
  $3 = HEAP32[99497]|0;
  $incdec$ptr = ((($3)) + 1|0);
  HEAP32[99497] = $incdec$ptr;
  HEAP8[$3>>0] = 111;
 } else {
  $call2 = (_G_VanillaVersionCode()|0);
  $conv3 = $call2&255;
  $4 = HEAP32[99497]|0;
  $incdec$ptr4 = ((($4)) + 1|0);
  HEAP32[99497] = $incdec$ptr4;
  HEAP8[$4>>0] = $conv3;
 }
 $5 = HEAP32[99425]|0;
 $conv5 = $5&255;
 $6 = HEAP32[99497]|0;
 $incdec$ptr6 = ((($6)) + 1|0);
 HEAP32[99497] = $incdec$ptr6;
 HEAP8[$6>>0] = $conv5;
 $7 = HEAP32[99424]|0;
 $conv7 = $7&255;
 $8 = HEAP32[99497]|0;
 $incdec$ptr8 = ((($8)) + 1|0);
 HEAP32[99497] = $incdec$ptr8;
 HEAP8[$8>>0] = $conv7;
 $9 = HEAP32[99423]|0;
 $conv9 = $9&255;
 $10 = HEAP32[99497]|0;
 $incdec$ptr10 = ((($10)) + 1|0);
 HEAP32[99497] = $incdec$ptr10;
 HEAP8[$10>>0] = $conv9;
 $11 = HEAP32[99430]|0;
 $conv11 = $11&255;
 $12 = HEAP32[99497]|0;
 $incdec$ptr12 = ((($12)) + 1|0);
 HEAP32[99497] = $incdec$ptr12;
 HEAP8[$12>>0] = $conv11;
 $13 = HEAP32[99381]|0;
 $conv13 = $13&255;
 $14 = HEAP32[99497]|0;
 $incdec$ptr14 = ((($14)) + 1|0);
 HEAP32[99497] = $incdec$ptr14;
 HEAP8[$14>>0] = $conv13;
 $15 = HEAP32[99382]|0;
 $conv15 = $15&255;
 $16 = HEAP32[99497]|0;
 $incdec$ptr16 = ((($16)) + 1|0);
 HEAP32[99497] = $incdec$ptr16;
 HEAP8[$16>>0] = $conv15;
 $17 = HEAP32[99380]|0;
 $conv17 = $17&255;
 $18 = HEAP32[99497]|0;
 $incdec$ptr18 = ((($18)) + 1|0);
 HEAP32[99497] = $incdec$ptr18;
 HEAP8[$18>>0] = $conv17;
 $19 = HEAP32[99415]|0;
 $conv19 = $19&255;
 $20 = HEAP32[99497]|0;
 $incdec$ptr20 = ((($20)) + 1|0);
 HEAP32[99497] = $incdec$ptr20;
 HEAP8[$20>>0] = $conv19;
 $i = 0;
 while(1) {
  $21 = $i;
  $cmp21 = ($21|0)<(4);
  if (!($cmp21)) {
   break;
  }
  $22 = $i;
  $arrayidx = (183040 + ($22<<2)|0);
  $23 = HEAP32[$arrayidx>>2]|0;
  $conv23 = $23&255;
  $24 = HEAP32[99497]|0;
  $incdec$ptr24 = ((($24)) + 1|0);
  HEAP32[99497] = $incdec$ptr24;
  HEAP8[$24>>0] = $conv23;
  $25 = $i;
  $inc = (($25) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _G_DeferedPlayDemo($name) {
 $name = $name|0;
 var $0 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $0 = $name$addr;
 HEAP32[99502] = $0;
 HEAP32[99427] = 5;
 STACKTOP = sp;return;
}
function _G_TimeDemo($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (_M_CheckParm(144388)|0);
 HEAP32[99504] = $call;
 HEAP32[99505] = 1;
 HEAP32[99362] = 1;
 $0 = $name$addr;
 HEAP32[99502] = $0;
 HEAP32[99427] = 5;
 STACKTOP = sp;return;
}
function _HUlib_clearTextLine($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $l = 0, $len = 0, $needsupdate = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 $len = ((($0)) + 100|0);
 HEAP32[$len>>2] = 0;
 $1 = $t$addr;
 $l = ((($1)) + 16|0);
 HEAP8[$l>>0] = 0;
 $2 = $t$addr;
 $needsupdate = ((($2)) + 104|0);
 HEAP32[$needsupdate>>2] = 1;
 STACKTOP = sp;return;
}
function _HUlib_initTextLine($t,$x,$y,$f,$sc) {
 $t = $t|0;
 $x = $x|0;
 $y = $y|0;
 $f = $f|0;
 $sc = $sc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $f$addr = 0, $f3 = 0, $sc$addr = 0, $sc4 = 0, $t$addr = 0, $x$addr = 0, $y$addr = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $t$addr = $t;
 $x$addr = $x;
 $y$addr = $y;
 $f$addr = $f;
 $sc$addr = $sc;
 $0 = $x$addr;
 $1 = $t$addr;
 HEAP32[$1>>2] = $0;
 $2 = $y$addr;
 $3 = $t$addr;
 $y2 = ((($3)) + 4|0);
 HEAP32[$y2>>2] = $2;
 $4 = $f$addr;
 $5 = $t$addr;
 $f3 = ((($5)) + 8|0);
 HEAP32[$f3>>2] = $4;
 $6 = $sc$addr;
 $7 = $t$addr;
 $sc4 = ((($7)) + 12|0);
 HEAP32[$sc4>>2] = $6;
 $8 = $t$addr;
 _HUlib_clearTextLine($8);
 STACKTOP = sp;return;
}
function _HUlib_addCharToTextLine($t,$ch) {
 $t = $t|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $ch$addr = 0, $cmp = 0, $inc = 0, $l = 0, $l2 = 0, $len = 0, $len1 = 0;
 var $len3 = 0, $needsupdate = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $ch$addr = $ch;
 $0 = $t$addr;
 $len = ((($0)) + 100|0);
 $1 = HEAP32[$len>>2]|0;
 $cmp = ($1|0)==(80);
 if ($cmp) {
  $retval = 0;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 } else {
  $2 = $ch$addr;
  $3 = $t$addr;
  $l = ((($3)) + 16|0);
  $4 = $t$addr;
  $len1 = ((($4)) + 100|0);
  $5 = HEAP32[$len1>>2]|0;
  $inc = (($5) + 1)|0;
  HEAP32[$len1>>2] = $inc;
  $arrayidx = (($l) + ($5)|0);
  HEAP8[$arrayidx>>0] = $2;
  $6 = $t$addr;
  $l2 = ((($6)) + 16|0);
  $7 = $t$addr;
  $len3 = ((($7)) + 100|0);
  $8 = HEAP32[$len3>>2]|0;
  $arrayidx4 = (($l2) + ($8)|0);
  HEAP8[$arrayidx4>>0] = 0;
  $9 = $t$addr;
  $needsupdate = ((($9)) + 104|0);
  HEAP32[$needsupdate>>2] = 4;
  $retval = 1;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _HUlib_delCharFromTextLine($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $dec = 0, $l = 0, $len = 0, $len1 = 0, $needsupdate = 0, $retval = 0, $t$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 $len = ((($0)) + 100|0);
 $1 = HEAP32[$len>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = $t$addr;
  $l = ((($2)) + 16|0);
  $3 = $t$addr;
  $len1 = ((($3)) + 100|0);
  $4 = HEAP32[$len1>>2]|0;
  $dec = (($4) + -1)|0;
  HEAP32[$len1>>2] = $dec;
  $arrayidx = (($l) + ($dec)|0);
  HEAP8[$arrayidx>>0] = 0;
  $5 = $t$addr;
  $needsupdate = ((($5)) + 104|0);
  HEAP32[$needsupdate>>2] = 4;
  $retval = 1;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 } else {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _HUlib_drawTextLine($l,$drawcursor) {
 $l = $l|0;
 $drawcursor = $drawcursor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add26 = 0, $add27 = 0, $add40 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx25 = 0, $arrayidx37 = 0;
 var $arrayidx48 = 0, $c = 0, $call = 0, $cmp = 0, $cmp12 = 0, $cmp18 = 0, $cmp28 = 0, $cmp41 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0, $conv11 = 0, $conv14 = 0, $conv17 = 0, $conv22 = 0, $conv3 = 0, $conv39 = 0, $conv4 = 0, $conv7 = 0, $drawcursor$addr = 0;
 var $f = 0, $f21 = 0, $f34 = 0, $f45 = 0, $i = 0, $inc = 0, $l$addr = 0, $l2 = 0, $len = 0, $sc = 0, $sc15 = 0, $sc23 = 0, $sc35 = 0, $sc46 = 0, $sub = 0, $sub24 = 0, $sub36 = 0, $sub47 = 0, $tobool = 0, $w = 0;
 var $x = 0, $y = 0, $y44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $l$addr = $l;
 $drawcursor$addr = $drawcursor;
 $0 = $l$addr;
 $1 = HEAP32[$0>>2]|0;
 $x = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $l$addr;
  $len = ((($3)) + 100|0);
  $4 = HEAP32[$len>>2]|0;
  $cmp = ($2|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $l$addr;
  $l2 = ((($5)) + 16|0);
  $6 = $i;
  $arrayidx = (($l2) + ($6)|0);
  $7 = HEAP8[$arrayidx>>0]|0;
  $conv = $7 << 24 >> 24;
  $call = (_toupper($conv)|0);
  $conv3 = $call&255;
  $c = $conv3;
  $8 = $c;
  $conv4 = $8&255;
  $cmp5 = ($conv4|0)!=(32);
  if ($cmp5) {
   $9 = $c;
   $conv7 = $9&255;
   $10 = $l$addr;
   $sc = ((($10)) + 12|0);
   $11 = HEAP32[$sc>>2]|0;
   $cmp8 = ($conv7|0)>=($11|0);
   if ($cmp8) {
    $12 = $c;
    $conv11 = $12&255;
    $cmp12 = ($conv11|0)<=(95);
    if ($cmp12) {
     $13 = $l$addr;
     $f = ((($13)) + 8|0);
     $14 = HEAP32[$f>>2]|0;
     $15 = $c;
     $conv14 = $15&255;
     $16 = $l$addr;
     $sc15 = ((($16)) + 12|0);
     $17 = HEAP32[$sc15>>2]|0;
     $sub = (($conv14) - ($17))|0;
     $arrayidx16 = (($14) + ($sub<<2)|0);
     $18 = HEAP32[$arrayidx16>>2]|0;
     $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8);
     $conv17 = $19 << 16 >> 16;
     $w = $conv17;
     $20 = $x;
     $21 = $w;
     $add = (($20) + ($21))|0;
     $cmp18 = ($add|0)>(320);
     if ($cmp18) {
      break;
     }
     $22 = $x;
     $23 = $l$addr;
     $y = ((($23)) + 4|0);
     $24 = HEAP32[$y>>2]|0;
     $25 = $l$addr;
     $f21 = ((($25)) + 8|0);
     $26 = HEAP32[$f21>>2]|0;
     $27 = $c;
     $conv22 = $27&255;
     $28 = $l$addr;
     $sc23 = ((($28)) + 12|0);
     $29 = HEAP32[$sc23>>2]|0;
     $sub24 = (($conv22) - ($29))|0;
     $arrayidx25 = (($26) + ($sub24<<2)|0);
     $30 = HEAP32[$arrayidx25>>2]|0;
     _V_DrawPatchDirect($22,$24,$30);
     $31 = $w;
     $32 = $x;
     $add26 = (($32) + ($31))|0;
     $x = $add26;
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $33 = $x;
   $add27 = (($33) + 4)|0;
   $x = $add27;
   $34 = $x;
   $cmp28 = ($34|0)>=(320);
   if ($cmp28) {
    break;
   }
  }
  $35 = $i;
  $inc = (($35) + 1)|0;
  $i = $inc;
 }
 $36 = $drawcursor$addr;
 $tobool = ($36|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $37 = $x;
 $38 = $l$addr;
 $f34 = ((($38)) + 8|0);
 $39 = HEAP32[$f34>>2]|0;
 $40 = $l$addr;
 $sc35 = ((($40)) + 12|0);
 $41 = HEAP32[$sc35>>2]|0;
 $sub36 = (95 - ($41))|0;
 $arrayidx37 = (($39) + ($sub36<<2)|0);
 $42 = HEAP32[$arrayidx37>>2]|0;
 $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8);
 $conv39 = $43 << 16 >> 16;
 $add40 = (($37) + ($conv39))|0;
 $cmp41 = ($add40|0)<=(320);
 if (!($cmp41)) {
  STACKTOP = sp;return;
 }
 $44 = $x;
 $45 = $l$addr;
 $y44 = ((($45)) + 4|0);
 $46 = HEAP32[$y44>>2]|0;
 $47 = $l$addr;
 $f45 = ((($47)) + 8|0);
 $48 = HEAP32[$f45>>2]|0;
 $49 = $l$addr;
 $sc46 = ((($49)) + 12|0);
 $50 = HEAP32[$sc46>>2]|0;
 $sub47 = (95 - ($50))|0;
 $arrayidx48 = (($48) + ($sub47<<2)|0);
 $51 = HEAP32[$arrayidx48>>2]|0;
 _V_DrawPatchDirect($44,$46,$51);
 STACKTOP = sp;return;
}
function _HUlib_eraseTextLine($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add14 = 0, $add15 = 0, $add16 = 0, $add6 = 0, $cmp = 0;
 var $cmp11 = 0, $cmp8 = 0, $conv = 0, $dec = 0, $f = 0, $height = 0, $inc = 0, $l$addr = 0, $lh = 0, $mul = 0, $needsupdate = 0, $needsupdate18 = 0, $needsupdate21 = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, $tobool19 = 0, $tobool3 = 0, $y = 0, $y4 = 0;
 var $y5 = 0, $yoffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $l$addr = $l;
 $0 = HEAP32[99316]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[99958]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool & $tobool1;
 L1: do {
  if ($or$cond) {
   $2 = $l$addr;
   $needsupdate = ((($2)) + 104|0);
   $3 = HEAP32[$needsupdate>>2]|0;
   $tobool3 = ($3|0)!=(0);
   if ($tobool3) {
    $4 = $l$addr;
    $f = ((($4)) + 8|0);
    $5 = HEAP32[$f>>2]|0;
    $6 = HEAP32[$5>>2]|0;
    $height = ((($6)) + 2|0);
    $7 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
    $conv = $7 << 16 >> 16;
    $add = (($conv) + 1)|0;
    $lh = $add;
    $8 = $l$addr;
    $y4 = ((($8)) + 4|0);
    $9 = HEAP32[$y4>>2]|0;
    $y = $9;
    $10 = $y;
    $mul = ($10*320)|0;
    $yoffset = $mul;
    while(1) {
     $11 = $y;
     $12 = $l$addr;
     $y5 = ((($12)) + 4|0);
     $13 = HEAP32[$y5>>2]|0;
     $14 = $lh;
     $add6 = (($13) + ($14))|0;
     $cmp = ($11|0)<($add6|0);
     if (!($cmp)) {
      break L1;
     }
     $15 = $y;
     $16 = HEAP32[99959]|0;
     $cmp8 = ($15|0)<($16|0);
     if ($cmp8) {
      label = 7;
     } else {
      $17 = $y;
      $18 = HEAP32[99959]|0;
      $19 = HEAP32[99946]|0;
      $add10 = (($18) + ($19))|0;
      $cmp11 = ($17|0)>=($add10|0);
      if ($cmp11) {
       label = 7;
      } else {
       $21 = $yoffset;
       $22 = HEAP32[99958]|0;
       _R_VideoErase($21,$22);
       $23 = $yoffset;
       $24 = HEAP32[99958]|0;
       $add14 = (($23) + ($24))|0;
       $25 = HEAP32[99961]|0;
       $add15 = (($add14) + ($25))|0;
       $26 = HEAP32[99958]|0;
       _R_VideoErase($add15,$26);
      }
     }
     if ((label|0) == 7) {
      label = 0;
      $20 = $yoffset;
      _R_VideoErase($20,320);
     }
     $27 = $y;
     $inc = (($27) + 1)|0;
     $y = $inc;
     $28 = $yoffset;
     $add16 = (($28) + 320)|0;
     $yoffset = $add16;
    }
   }
  }
 } while(0);
 $29 = $l$addr;
 $needsupdate18 = ((($29)) + 104|0);
 $30 = HEAP32[$needsupdate18>>2]|0;
 $tobool19 = ($30|0)!=(0);
 if (!($tobool19)) {
  STACKTOP = sp;return;
 }
 $31 = $l$addr;
 $needsupdate21 = ((($31)) + 104|0);
 $32 = HEAP32[$needsupdate21>>2]|0;
 $dec = (($32) + -1)|0;
 HEAP32[$needsupdate21>>2] = $dec;
 STACKTOP = sp;return;
}
function _HUlib_initSText($s,$x,$y,$h,$font,$startchar,$on) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $h = $h|0;
 $font = $font|0;
 $startchar = $startchar|0;
 $on = $on|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $arrayidx = 0, $cl = 0, $cmp = 0, $conv = 0, $font$addr = 0, $h$addr = 0, $h1 = 0, $height = 0, $i = 0, $inc = 0, $laston = 0, $mul = 0, $on$addr = 0, $on2 = 0, $s$addr = 0, $startchar$addr = 0, $sub = 0, $x$addr = 0, $y$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $s$addr = $s;
 $x$addr = $x;
 $y$addr = $y;
 $h$addr = $h;
 $font$addr = $font;
 $startchar$addr = $startchar;
 $on$addr = $on;
 $0 = $h$addr;
 $1 = $s$addr;
 $h1 = ((($1)) + 432|0);
 HEAP32[$h1>>2] = $0;
 $2 = $on$addr;
 $3 = $s$addr;
 $on2 = ((($3)) + 440|0);
 HEAP32[$on2>>2] = $2;
 $4 = $s$addr;
 $laston = ((($4)) + 444|0);
 HEAP32[$laston>>2] = 1;
 $5 = $s$addr;
 $cl = ((($5)) + 436|0);
 HEAP32[$cl>>2] = 0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $h$addr;
  $cmp = ($6|0)<($7|0);
  if (!($cmp)) {
   break;
  }
  $8 = $s$addr;
  $9 = $i;
  $arrayidx = (($8) + (($9*108)|0)|0);
  $10 = $x$addr;
  $11 = $y$addr;
  $12 = $i;
  $13 = $font$addr;
  $14 = HEAP32[$13>>2]|0;
  $height = ((($14)) + 2|0);
  $15 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv = $15 << 16 >> 16;
  $add = (($conv) + 1)|0;
  $mul = Math_imul($12, $add)|0;
  $sub = (($11) - ($mul))|0;
  $16 = $font$addr;
  $17 = $startchar$addr;
  _HUlib_initTextLine($arrayidx,$10,$sub,$16,$17);
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _HUlib_addLineToSText($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx6 = 0, $cl = 0, $cl1 = 0, $cl2 = 0, $cmp = 0;
 var $cmp4 = 0, $h = 0, $h3 = 0, $i = 0, $inc = 0, $inc7 = 0, $needsupdate = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $cl = ((($0)) + 436|0);
 $1 = HEAP32[$cl>>2]|0;
 $inc = (($1) + 1)|0;
 HEAP32[$cl>>2] = $inc;
 $2 = $s$addr;
 $h = ((($2)) + 432|0);
 $3 = HEAP32[$h>>2]|0;
 $cmp = ($inc|0)==($3|0);
 if ($cmp) {
  $4 = $s$addr;
  $cl1 = ((($4)) + 436|0);
  HEAP32[$cl1>>2] = 0;
 }
 $5 = $s$addr;
 $6 = $s$addr;
 $cl2 = ((($6)) + 436|0);
 $7 = HEAP32[$cl2>>2]|0;
 $arrayidx = (($5) + (($7*108)|0)|0);
 _HUlib_clearTextLine($arrayidx);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $s$addr;
  $h3 = ((($9)) + 432|0);
  $10 = HEAP32[$h3>>2]|0;
  $cmp4 = ($8|0)<($10|0);
  if (!($cmp4)) {
   break;
  }
  $11 = $s$addr;
  $12 = $i;
  $arrayidx6 = (($11) + (($12*108)|0)|0);
  $needsupdate = ((($arrayidx6)) + 104|0);
  HEAP32[$needsupdate>>2] = 4;
  $13 = $i;
  $inc7 = (($13) + 1)|0;
  $i = $inc7;
 }
 STACKTOP = sp;return;
}
function _HUlib_addMessageToSText($s,$prefix,$msg) {
 $s = $s|0;
 $prefix = $prefix|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx7 = 0, $cl = 0, $cl6 = 0;
 var $incdec$ptr = 0, $incdec$ptr8 = 0, $msg$addr = 0, $prefix$addr = 0, $s$addr = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $prefix$addr = $prefix;
 $msg$addr = $msg;
 $0 = $s$addr;
 _HUlib_addLineToSText($0);
 $1 = $prefix$addr;
 $tobool = ($1|0)!=(0|0);
 L1: do {
  if ($tobool) {
   while(1) {
    $2 = $prefix$addr;
    $3 = HEAP8[$2>>0]|0;
    $tobool1 = ($3<<24>>24)!=(0);
    if (!($tobool1)) {
     break L1;
    }
    $4 = $s$addr;
    $5 = $s$addr;
    $cl = ((($5)) + 436|0);
    $6 = HEAP32[$cl>>2]|0;
    $arrayidx = (($4) + (($6*108)|0)|0);
    $7 = $prefix$addr;
    $incdec$ptr = ((($7)) + 1|0);
    $prefix$addr = $incdec$ptr;
    $8 = HEAP8[$7>>0]|0;
    (_HUlib_addCharToTextLine($arrayidx,$8)|0);
   }
  }
 } while(0);
 while(1) {
  $9 = $msg$addr;
  $10 = HEAP8[$9>>0]|0;
  $tobool3 = ($10<<24>>24)!=(0);
  if (!($tobool3)) {
   break;
  }
  $11 = $s$addr;
  $12 = $s$addr;
  $cl6 = ((($12)) + 436|0);
  $13 = HEAP32[$cl6>>2]|0;
  $arrayidx7 = (($11) + (($13*108)|0)|0);
  $14 = $msg$addr;
  $incdec$ptr8 = ((($14)) + 1|0);
  $msg$addr = $incdec$ptr8;
  $15 = HEAP8[$14>>0]|0;
  (_HUlib_addCharToTextLine($arrayidx7,$15)|0);
 }
 STACKTOP = sp;return;
}
function _HUlib_drawSText($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $cl = 0;
 var $cmp = 0, $cmp1 = 0, $h = 0, $h3 = 0, $i = 0, $idx = 0, $inc = 0, $l = 0, $on = 0, $s$addr = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $on = ((($0)) + 440|0);
 $1 = HEAP32[$on>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $s$addr;
  $h = ((($4)) + 432|0);
  $5 = HEAP32[$h>>2]|0;
  $cmp = ($3|0)<($5|0);
  if (!($cmp)) {
   break;
  }
  $6 = $s$addr;
  $cl = ((($6)) + 436|0);
  $7 = HEAP32[$cl>>2]|0;
  $8 = $i;
  $sub = (($7) - ($8))|0;
  $idx = $sub;
  $9 = $idx;
  $cmp1 = ($9|0)<(0);
  if ($cmp1) {
   $10 = $s$addr;
   $h3 = ((($10)) + 432|0);
   $11 = HEAP32[$h3>>2]|0;
   $12 = $idx;
   $add = (($12) + ($11))|0;
   $idx = $add;
  }
  $13 = $s$addr;
  $14 = $idx;
  $arrayidx = (($13) + (($14*108)|0)|0);
  $l = $arrayidx;
  $15 = $l;
  _HUlib_drawTextLine($15,0);
  $16 = $i;
  $inc = (($16) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _HUlib_eraseSText($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $cmp = 0, $h = 0;
 var $i = 0, $inc = 0, $laston = 0, $laston5 = 0, $needsupdate = 0, $on = 0, $on4 = 0, $s$addr = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $s$addr;
  $h = ((($1)) + 432|0);
  $2 = HEAP32[$h>>2]|0;
  $cmp = ($0|0)<($2|0);
  $3 = $s$addr;
  if (!($cmp)) {
   break;
  }
  $laston = ((($3)) + 444|0);
  $4 = HEAP32[$laston>>2]|0;
  $tobool = ($4|0)!=(0);
  if ($tobool) {
   $5 = $s$addr;
   $on = ((($5)) + 440|0);
   $6 = HEAP32[$on>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $tobool1 = ($7|0)!=(0);
   if (!($tobool1)) {
    $8 = $s$addr;
    $9 = $i;
    $arrayidx = (($8) + (($9*108)|0)|0);
    $needsupdate = ((($arrayidx)) + 104|0);
    HEAP32[$needsupdate>>2] = 4;
   }
  }
  $10 = $s$addr;
  $11 = $i;
  $arrayidx3 = (($10) + (($11*108)|0)|0);
  _HUlib_eraseTextLine($arrayidx3);
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $on4 = ((($3)) + 440|0);
 $13 = HEAP32[$on4>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $s$addr;
 $laston5 = ((($15)) + 444|0);
 HEAP32[$laston5>>2] = $14;
 STACKTOP = sp;return;
}
function _HUlib_initIText($it,$x,$y,$font,$startchar,$on) {
 $it = $it|0;
 $x = $x|0;
 $y = $y|0;
 $font = $font|0;
 $startchar = $startchar|0;
 $on = $on|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $font$addr = 0, $it$addr = 0, $laston = 0, $lm = 0, $on$addr = 0, $on1 = 0, $startchar$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $it$addr = $it;
 $x$addr = $x;
 $y$addr = $y;
 $font$addr = $font;
 $startchar$addr = $startchar;
 $on$addr = $on;
 $0 = $it$addr;
 $lm = ((($0)) + 108|0);
 HEAP32[$lm>>2] = 0;
 $1 = $on$addr;
 $2 = $it$addr;
 $on1 = ((($2)) + 112|0);
 HEAP32[$on1>>2] = $1;
 $3 = $it$addr;
 $laston = ((($3)) + 116|0);
 HEAP32[$laston>>2] = 1;
 $4 = $it$addr;
 $5 = $x$addr;
 $6 = $y$addr;
 $7 = $font$addr;
 $8 = $startchar$addr;
 _HUlib_initTextLine($4,$5,$6,$7,$8);
 STACKTOP = sp;return;
}
function _HUlib_delCharFromIText($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $it$addr = 0, $len = 0, $lm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $it$addr = $it;
 $0 = $it$addr;
 $len = ((($0)) + 100|0);
 $1 = HEAP32[$len>>2]|0;
 $2 = $it$addr;
 $lm = ((($2)) + 108|0);
 $3 = HEAP32[$lm>>2]|0;
 $cmp = ($1|0)!=($3|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $4 = $it$addr;
 (_HUlib_delCharFromTextLine($4)|0);
 STACKTOP = sp;return;
}
function _HUlib_resetIText($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $it$addr = 0, $lm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $it$addr = $it;
 $0 = $it$addr;
 $lm = ((($0)) + 108|0);
 HEAP32[$lm>>2] = 0;
 $1 = $it$addr;
 _HUlib_clearTextLine($1);
 STACKTOP = sp;return;
}
function _HUlib_keyInIText($it,$ch) {
 $it = $it|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $ch$addr = 0, $cmp = 0, $cmp14 = 0, $cmp5 = 0, $cmp9 = 0, $conv = 0, $conv1 = 0, $conv13 = 0, $conv2 = 0, $conv4 = 0;
 var $conv8 = 0, $it$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $it$addr = $it;
 $ch$addr = $ch;
 $0 = $ch$addr;
 $conv = $0&255;
 $call = (_toupper($conv)|0);
 $conv1 = $call&255;
 $ch$addr = $conv1;
 $1 = $ch$addr;
 $conv2 = $1&255;
 $cmp = ($conv2|0)>=(32);
 if ($cmp) {
  $2 = $ch$addr;
  $conv4 = $2&255;
  $cmp5 = ($conv4|0)<=(95);
  if ($cmp5) {
   $3 = $it$addr;
   $4 = $ch$addr;
   (_HUlib_addCharToTextLine($3,$4)|0);
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $5 = $ch$addr;
   $conv8 = $5&255;
   $cmp9 = ($conv8|0)==(127);
   if ($cmp9) {
    $6 = $it$addr;
    _HUlib_delCharFromIText($6);
    break;
   }
   $7 = $ch$addr;
   $conv13 = $7&255;
   $cmp14 = ($conv13|0)!=(13);
   if ($cmp14) {
    $retval = 0;
    $8 = $retval;
    STACKTOP = sp;return ($8|0);
   }
  }
 } while(0);
 $retval = 1;
 $8 = $retval;
 STACKTOP = sp;return ($8|0);
}
function _HUlib_drawIText($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $it$addr = 0, $l = 0, $on = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $it$addr = $it;
 $0 = $it$addr;
 $l = $0;
 $1 = $it$addr;
 $on = ((($1)) + 112|0);
 $2 = HEAP32[$on>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $tobool = ($3|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $4 = $l;
 _HUlib_drawTextLine($4,1);
 STACKTOP = sp;return;
}
function _HUlib_eraseIText($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $it$addr = 0, $laston = 0, $laston4 = 0, $needsupdate = 0, $on = 0, $on3 = 0, $tobool = 0, $tobool1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $it$addr = $it;
 $0 = $it$addr;
 $laston = ((($0)) + 116|0);
 $1 = HEAP32[$laston>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = $it$addr;
  $on = ((($2)) + 112|0);
  $3 = HEAP32[$on>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $tobool1 = ($4|0)!=(0);
  if (!($tobool1)) {
   $5 = $it$addr;
   $needsupdate = ((($5)) + 104|0);
   HEAP32[$needsupdate>>2] = 4;
  }
 }
 $6 = $it$addr;
 _HUlib_eraseTextLine($6);
 $7 = $it$addr;
 $on3 = ((($7)) + 112|0);
 $8 = HEAP32[$on3>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $it$addr;
 $laston4 = ((($10)) + 116|0);
 HEAP32[$laston4>>2] = $9;
 STACKTOP = sp;return;
}
function _HU_Init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $buffer = 0, $call2 = 0, $cmp = 0, $i = 0, $inc = 0, $inc3 = 0, $j = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $buffer = sp + 12|0;
 $j = 33;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(63);
  if (!($cmp)) {
   break;
  }
  $1 = $j;
  $inc = (($1) + 1)|0;
  $j = $inc;
  HEAP32[$vararg_buffer>>2] = $1;
  (_snprintf($buffer,9,147351,$vararg_buffer)|0);
  $call2 = (_W_CacheLumpName($buffer,1)|0);
  $2 = $i;
  $arrayidx = (185888 + ($2<<2)|0);
  HEAP32[$arrayidx>>2] = $call2;
  $3 = $i;
  $inc3 = (($3) + 1)|0;
  $i = $inc3;
 }
 STACKTOP = sp;return;
}
function _HU_Stop() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99521] = 0;
 return;
}
function _HU_Start() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add16 = 0, $add20 = 0, $add31 = 0, $add33 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx21 = 0, $arrayidx26 = 0;
 var $arrayidx36 = 0, $cmp = 0, $cmp2 = 0, $cmp22 = 0, $cmp34 = 0, $cond = 0, $cond7 = 0, $conv = 0, $conv30 = 0, $height = 0, $height29 = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $mul = 0, $mul32 = 0, $s = 0, $sub = 0, $sub12 = 0, $sub15 = 0;
 var $sub19 = 0, $sub25 = 0, $sub8 = 0, $sub9 = 0, $tobool = 0, $tobool28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99521]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  _HU_Stop();
 }
 $1 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($1*288)|0)|0);
 HEAP32[99522] = $arrayidx;
 HEAP32[99523] = 0;
 HEAP32[99519] = 0;
 HEAP32[99524] = 0;
 HEAP32[99520] = 0;
 _HUlib_initSText(398100,0,0,1,185888,33,398092);
 $2 = HEAP32[46472]|0;
 $height = ((($2)) + 2|0);
 $3 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv = $3 << 16 >> 16;
 $sub = (167 - ($conv))|0;
 _HUlib_initTextLine(398548,0,$sub,185888,33);
 $4 = HEAP32[99356]|0;
 $cmp = ($4|0)==(4);
 if ($cmp) {
  $cond7 = 0;
 } else {
  $5 = HEAP32[99356]|0;
  $cmp2 = ($5|0)==(5);
  $6 = HEAP32[99356]|0;
  $cond = $cmp2 ? 1 : $6;
  $cond7 = $cond;
 }
 switch ($cond7|0) {
 case 0:  {
  $7 = HEAP32[99424]|0;
  $sub8 = (($7) - 1)|0;
  $mul = ($sub8*9)|0;
  $8 = HEAP32[99423]|0;
  $add = (($mul) + ($8))|0;
  $sub9 = (($add) - 1)|0;
  $arrayidx10 = (2432 + ($sub9<<2)|0);
  $9 = HEAP32[$arrayidx10>>2]|0;
  $s = $9;
  break;
 }
 case 1:  {
  $10 = HEAP32[99423]|0;
  $sub12 = (($10) - 1)|0;
  $arrayidx13 = (2624 + ($sub12<<2)|0);
  $11 = HEAP32[$arrayidx13>>2]|0;
  $s = $11;
  break;
 }
 case 3:  {
  $12 = HEAP32[99423]|0;
  $sub15 = (($12) - 1)|0;
  $add16 = (($sub15) + 32)|0;
  $arrayidx17 = (2624 + ($add16<<2)|0);
  $13 = HEAP32[$arrayidx17>>2]|0;
  $s = $13;
  break;
 }
 case 2:  {
  $14 = HEAP32[99423]|0;
  $sub19 = (($14) - 1)|0;
  $add20 = (($sub19) + 64)|0;
  $arrayidx21 = (2624 + ($add20<<2)|0);
  $15 = HEAP32[$arrayidx21>>2]|0;
  $s = $15;
  break;
 }
 default: {
  $s = 147361;
 }
 }
 $16 = HEAP32[32169]|0;
 $cmp22 = ($16|0)==(9);
 if ($cmp22) {
  $17 = HEAP32[99423]|0;
  $sub25 = (($17) - 1)|0;
  $arrayidx26 = (2432 + ($sub25<<2)|0);
  $18 = HEAP32[$arrayidx26>>2]|0;
  $s = $18;
 }
 $19 = $s;
 $s = $19;
 while(1) {
  $20 = $s;
  $21 = HEAP8[$20>>0]|0;
  $tobool28 = ($21<<24>>24)!=(0);
  if (!($tobool28)) {
   break;
  }
  $22 = $s;
  $incdec$ptr = ((($22)) + 1|0);
  $s = $incdec$ptr;
  $23 = HEAP8[$22>>0]|0;
  (_HUlib_addCharToTextLine(398548,$23)|0);
 }
 $24 = HEAP32[46472]|0;
 $height29 = ((($24)) + 2|0);
 $25 = HEAPU8[$height29>>0]|(HEAPU8[$height29+1>>0]<<8);
 $conv30 = $25 << 16 >> 16;
 $add31 = (($conv30) + 1)|0;
 $mul32 = $add31;
 $add33 = (0 + ($mul32))|0;
 _HUlib_initIText(398656,0,$add33,185888,33,398080);
 $i = 0;
 while(1) {
  $26 = $i;
  $cmp34 = ($26|0)<(4);
  if (!($cmp34)) {
   break;
  }
  $27 = $i;
  $arrayidx36 = (186144 + (($27*120)|0)|0);
  _HUlib_initIText($arrayidx36,0,0,0,0,398776);
  $28 = $i;
  $inc = (($28) + 1)|0;
  $i = $inc;
 }
 HEAP32[99521] = 1;
 STACKTOP = sp;return;
}
function _HU_Drawer() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _HUlib_drawSText(398100);
 _HUlib_drawIText(398656);
 $0 = HEAP32[99316]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  return;
 }
 _HUlib_drawTextLine(398548,0);
 return;
}
function _HU_Erase() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _HUlib_eraseSText(398100);
 _HUlib_eraseIText(398656);
 _HUlib_eraseTextLine(398548);
 return;
}
function _HU_Ticker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx25 = 0, $arrayidx32 = 0, $arrayidx33 = 0, $arrayidx40 = 0, $arrayidx43 = 0, $arrayidx48 = 0, $arrayidx53 = 0, $arrayidx54 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $c = 0, $call = 0, $chatchar = 0, $chatchar68 = 0, $cmd = 0;
 var $cmd67 = 0, $cmp = 0, $cmp23 = 0, $cmp29 = 0, $cmp37 = 0, $cmp45 = 0, $cmp50 = 0, $cmp57 = 0, $conv = 0, $conv28 = 0, $conv36 = 0, $conv44 = 0, $conv49 = 0, $dec = 0, $i = 0, $inc = 0, $l56 = 0, $len = 0, $message = 0, $message14 = 0;
 var $message15 = 0, $message9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $rc = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool12 = 0, $tobool18 = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool3 = 0, $tobool34 = 0, $tobool41 = 0, $tobool5 = 0, $tobool7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99695]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99695]|0;
  $dec = (($1) + -1)|0;
  HEAP32[99695] = $dec;
  $tobool1 = ($dec|0)!=(0);
  if (!($tobool1)) {
   HEAP32[99523] = 0;
   HEAP32[99524] = 0;
  }
 }
 $2 = HEAP32[32283]|0;
 $tobool2 = ($2|0)!=(0);
 $3 = HEAP32[99519]|0;
 $tobool3 = ($3|0)!=(0);
 $or$cond = $tobool2 | $tobool3;
 do {
  if ($or$cond) {
   $4 = HEAP32[99522]|0;
   $message = ((($4)) + 224|0);
   $5 = HEAP32[$message>>2]|0;
   $tobool5 = ($5|0)==(0|0);
   $6 = HEAP32[99524]|0;
   $tobool7 = ($6|0)!=(0);
   $or$cond1 = $tobool5 | $tobool7;
   if ($or$cond1) {
    $7 = HEAP32[99522]|0;
    $message9 = ((($7)) + 224|0);
    $8 = HEAP32[$message9>>2]|0;
    $tobool10 = ($8|0)!=(0|0);
    $9 = HEAP32[99519]|0;
    $tobool12 = ($9|0)!=(0);
    $or$cond2 = $tobool10 & $tobool12;
    if (!($or$cond2)) {
     break;
    }
   }
   $10 = HEAP32[99522]|0;
   $message14 = ((($10)) + 224|0);
   $11 = HEAP32[$message14>>2]|0;
   _HUlib_addMessageToSText(398100,0,$11);
   $12 = HEAP32[99522]|0;
   $message15 = ((($12)) + 224|0);
   HEAP32[$message15>>2] = 0;
   HEAP32[99523] = 1;
   HEAP32[99695] = 140;
   $13 = HEAP32[99519]|0;
   HEAP32[99524] = $13;
   HEAP32[99519] = 0;
  }
 } while(0);
 $14 = HEAP32[99433]|0;
 $tobool18 = ($14|0)!=(0);
 if (!($tobool18)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $cmp = ($15|0)<(4);
  if (!($cmp)) {
   break;
  }
  $16 = $i;
  $arrayidx = (183040 + ($16<<2)|0);
  $17 = HEAP32[$arrayidx>>2]|0;
  $tobool20 = ($17|0)!=(0);
  if ($tobool20) {
   $18 = $i;
   $19 = HEAP32[99415]|0;
   $cmp23 = ($18|0)!=($19|0);
   if ($cmp23) {
    $20 = $i;
    $arrayidx25 = (183056 + (($20*288)|0)|0);
    $cmd = ((($arrayidx25)) + 8|0);
    $chatchar = ((($cmd)) + 4|0);
    $21 = HEAP8[$chatchar>>0]|0;
    $c = $21;
    $conv = $21 << 24 >> 24;
    $tobool26 = ($conv|0)!=(0);
    if ($tobool26) {
     $22 = $c;
     $conv28 = $22 << 24 >> 24;
     $cmp29 = ($conv28|0)<=(5);
     if ($cmp29) {
      $23 = $c;
      $24 = $i;
      $arrayidx32 = (401506 + ($24)|0);
      HEAP8[$arrayidx32>>0] = $23;
     } else {
      $25 = $i;
      $arrayidx33 = (186144 + (($25*120)|0)|0);
      $26 = $c;
      $call = (_HUlib_keyInIText($arrayidx33,$26)|0);
      $rc = $call;
      $27 = $rc;
      $tobool34 = ($27|0)!=(0);
      if ($tobool34) {
       $28 = $c;
       $conv36 = $28 << 24 >> 24;
       $cmp37 = ($conv36|0)==(13);
       if ($cmp37) {
        $29 = $i;
        $arrayidx40 = (186144 + (($29*120)|0)|0);
        $len = ((($arrayidx40)) + 100|0);
        $30 = HEAP32[$len>>2]|0;
        $tobool41 = ($30|0)!=(0);
        do {
         if ($tobool41) {
          $31 = $i;
          $arrayidx43 = (401506 + ($31)|0);
          $32 = HEAP8[$arrayidx43>>0]|0;
          $conv44 = $32 << 24 >> 24;
          $33 = HEAP32[99415]|0;
          $add = (($33) + 1)|0;
          $cmp45 = ($conv44|0)==($add|0);
          if (!($cmp45)) {
           $34 = $i;
           $arrayidx48 = (401506 + ($34)|0);
           $35 = HEAP8[$arrayidx48>>0]|0;
           $conv49 = $35 << 24 >> 24;
           $cmp50 = ($conv49|0)==(5);
           if (!($cmp50)) {
            break;
           }
          }
          $36 = $i;
          $arrayidx53 = (2416 + ($36<<2)|0);
          $37 = HEAP32[$arrayidx53>>2]|0;
          $38 = $i;
          $arrayidx54 = (186144 + (($38*120)|0)|0);
          $l56 = ((($arrayidx54)) + 16|0);
          _HUlib_addMessageToSText(398100,$37,$l56);
          HEAP32[99524] = 1;
          HEAP32[99523] = 1;
          HEAP32[99695] = 140;
          $39 = HEAP32[32168]|0;
          $cmp57 = ($39|0)==(2);
          if ($cmp57) {
           _S_StartSound(0,108);
           break;
          } else {
           _S_StartSound(0,87);
           break;
          }
         }
        } while(0);
        $40 = $i;
        $arrayidx63 = (186144 + (($40*120)|0)|0);
        _HUlib_resetIText($arrayidx63);
       }
      }
     }
     $41 = $i;
     $arrayidx66 = (183056 + (($41*288)|0)|0);
     $cmd67 = ((($arrayidx66)) + 8|0);
     $chatchar68 = ((($cmd67)) + 4|0);
     HEAP8[$chatchar68>>0] = 0;
    }
   }
  }
  $42 = $i;
  $inc = (($42) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _HU_queueChatChar($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add1 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $c$addr = 0, $cmp = 0, $message = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = HEAP32[99696]|0;
 $add = (($0) + 1)|0;
 $and = $add & 127;
 $1 = HEAP32[99697]|0;
 $cmp = ($and|0)==($1|0);
 if ($cmp) {
  $2 = HEAP32[99522]|0;
  $message = ((($2)) + 224|0);
  HEAP32[$message>>2] = 147375;
  STACKTOP = sp;return;
 } else {
  $3 = $c$addr;
  $4 = HEAP32[99696]|0;
  $arrayidx = (186624 + ($4)|0);
  HEAP8[$arrayidx>>0] = $3;
  $5 = HEAP32[99696]|0;
  $add1 = (($5) + 1)|0;
  $and2 = $add1 & 127;
  HEAP32[99696] = $and2;
  STACKTOP = sp;return;
 }
}
function _HU_dequeueChatChar() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $and = 0, $arrayidx = 0, $c = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99696]|0;
 $1 = HEAP32[99697]|0;
 $cmp = ($0|0)!=($1|0);
 if ($cmp) {
  $2 = HEAP32[99697]|0;
  $arrayidx = (186624 + ($2)|0);
  $3 = HEAP8[$arrayidx>>0]|0;
  $c = $3;
  $4 = HEAP32[99697]|0;
  $add = (($4) + 1)|0;
  $and = $add & 127;
  HEAP32[99697] = $and;
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 } else {
  $c = 0;
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _HU_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add45 = 0, $arrayidx = 0, $arrayidx35 = 0, $arrayidx39 = 0, $arrayidx95 = 0, $arrayidx98 = 0, $c = 0, $call103 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp10 = 0, $cmp108 = 0, $cmp118 = 0, $cmp16 = 0, $cmp21 = 0, $cmp27 = 0, $cmp3 = 0, $cmp31 = 0, $cmp36 = 0, $cmp42 = 0, $cmp48 = 0, $cmp5 = 0, $cmp52 = 0, $cmp56 = 0, $cmp61 = 0, $cmp66 = 0, $cmp7 = 0, $cmp91 = 0, $conv = 0;
 var $conv102 = 0, $conv107 = 0, $conv117 = 0, $conv46 = 0, $conv89 = 0, $conv90 = 0, $data1 = 0, $data115 = 0, $data12 = 0, $data14 = 0, $data188 = 0, $data2 = 0, $data2101 = 0, $data234 = 0, $eatkey = 0, $ev$addr = 0, $i = 0, $idxprom = 0, $idxprom97 = 0, $inc = 0;
 var $inc51 = 0, $inc80 = 0, $incdec$ptr = 0, $macromessage = 0, $message = 0, $message114 = 0, $message59 = 0, $message64 = 0, $message69 = 0, $message99 = 0, $numplayers = 0, $or$cond = 0, $retval = 0, $sub = 0, $tobool = 0, $tobool104 = 0, $tobool111 = 0, $tobool20 = 0, $tobool25 = 0, $tobool40 = 0;
 var $tobool86 = 0, $tobool96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ev$addr = $ev;
 $eatkey = 0;
 $numplayers = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $3 = $numplayers;
  $add = (($3) + ($2))|0;
  $numplayers = $add;
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 $5 = $ev$addr;
 $data1 = ((($5)) + 4|0);
 $6 = HEAP32[$data1>>2]|0;
 $cmp1 = ($6|0)==(182);
 if ($cmp1) {
  $retval = 0;
  $69 = $retval;
  STACKTOP = sp;return ($69|0);
 }
 $7 = $ev$addr;
 $data12 = ((($7)) + 4|0);
 $8 = HEAP32[$data12>>2]|0;
 $cmp3 = ($8|0)==(184);
 if (!($cmp3)) {
  $9 = $ev$addr;
  $data14 = ((($9)) + 4|0);
  $10 = HEAP32[$data14>>2]|0;
  $cmp5 = ($10|0)==(184);
  if (!($cmp5)) {
   $13 = $ev$addr;
   $14 = HEAP32[$13>>2]|0;
   $cmp10 = ($14|0)!=(0);
   if ($cmp10) {
    $retval = 0;
    $69 = $retval;
    STACKTOP = sp;return ($69|0);
   }
   $15 = HEAP32[99520]|0;
   $tobool = ($15|0)!=(0);
   L16: do {
    if ($tobool) {
     $47 = HEAP32[99698]|0;
     $tobool86 = ($47|0)!=(0);
     $48 = $ev$addr;
     if ($tobool86) {
      $data188 = ((($48)) + 4|0);
      $49 = HEAP32[$data188>>2]|0;
      $sub = (($49) - 48)|0;
      $conv89 = $sub&255;
      $c = $conv89;
      $50 = $c;
      $conv90 = $50&255;
      $cmp91 = ($conv90|0)>(9);
      if ($cmp91) {
       $retval = 0;
       $69 = $retval;
       STACKTOP = sp;return ($69|0);
      }
      $51 = $c;
      $idxprom = $51&255;
      $arrayidx95 = (2368 + ($idxprom<<2)|0);
      $52 = HEAP32[$arrayidx95>>2]|0;
      $macromessage = $52;
      _HU_queueChatChar(13);
      while(1) {
       $53 = $macromessage;
       $54 = HEAP8[$53>>0]|0;
       $tobool96 = ($54<<24>>24)!=(0);
       if (!($tobool96)) {
        break;
       }
       $55 = $macromessage;
       $incdec$ptr = ((($55)) + 1|0);
       $macromessage = $incdec$ptr;
       $56 = HEAP8[$55>>0]|0;
       _HU_queueChatChar($56);
      }
      _HU_queueChatChar(13);
      HEAP32[99520] = 0;
      $57 = $c;
      $idxprom97 = $57&255;
      $arrayidx98 = (2368 + ($idxprom97<<2)|0);
      $58 = HEAP32[$arrayidx98>>2]|0;
      (_M_StringCopy(186752,$58,81)|0);
      $59 = HEAP32[99522]|0;
      $message99 = ((($59)) + 224|0);
      HEAP32[$message99>>2] = 186752;
      $eatkey = 1;
      break;
     } else {
      $data2101 = ((($48)) + 8|0);
      $60 = HEAP32[$data2101>>2]|0;
      $conv102 = $60&255;
      $c = $conv102;
      $61 = $c;
      $call103 = (_HUlib_keyInIText(398656,$61)|0);
      $eatkey = $call103;
      $62 = $eatkey;
      $tobool104 = ($62|0)!=(0);
      if ($tobool104) {
       $63 = $c;
       _HU_queueChatChar($63);
      }
      $64 = $c;
      $conv107 = $64&255;
      $cmp108 = ($conv107|0)==(13);
      if ($cmp108) {
       HEAP32[99520] = 0;
       $65 = HEAP32[(398756)>>2]|0;
       $tobool111 = ($65|0)!=(0);
       if (!($tobool111)) {
        break;
       }
       (_M_StringCopy(186752,(398672),81)|0);
       $66 = HEAP32[99522]|0;
       $message114 = ((($66)) + 224|0);
       HEAP32[$message114>>2] = 186752;
       break;
      } else {
       $67 = $c;
       $conv117 = $67&255;
       $cmp118 = ($conv117|0)==(27);
       if (!($cmp118)) {
        break;
       }
       HEAP32[99520] = 0;
       break;
      }
     }
    } else {
     $16 = $ev$addr;
     $data115 = ((($16)) + 4|0);
     $17 = HEAP32[$data115>>2]|0;
     $18 = HEAP32[32226]|0;
     $cmp16 = ($17|0)==($18|0);
     if ($cmp16) {
      HEAP32[99523] = 1;
      HEAP32[99695] = 140;
      $eatkey = 1;
      break;
     }
     $19 = HEAP32[99433]|0;
     $tobool20 = ($19|0)!=(0);
     if ($tobool20) {
      $20 = $ev$addr;
      $data2 = ((($20)) + 8|0);
      $21 = HEAP32[$data2>>2]|0;
      $22 = HEAP32[32230]|0;
      $cmp21 = ($21|0)==($22|0);
      if ($cmp21) {
       HEAP32[99520] = 1;
       $eatkey = 1;
       _HUlib_resetIText(398656);
       _HU_queueChatChar(5);
       break;
      }
     }
     $23 = HEAP32[99433]|0;
     $tobool25 = ($23|0)!=(0);
     $24 = $numplayers;
     $cmp27 = ($24|0)>(2);
     $or$cond = $tobool25 & $cmp27;
     if ($or$cond) {
      $i = 0;
      L46: while(1) {
       $25 = $i;
       $cmp31 = ($25|0)<(4);
       if (!($cmp31)) {
        break L16;
       }
       $26 = $ev$addr;
       $data234 = ((($26)) + 8|0);
       $27 = HEAP32[$data234>>2]|0;
       $28 = $i;
       $arrayidx35 = (186848 + ($28<<2)|0);
       $29 = HEAP32[$arrayidx35>>2]|0;
       $cmp36 = ($27|0)==($29|0);
       do {
        if ($cmp36) {
         $30 = $i;
         $arrayidx39 = (183040 + ($30<<2)|0);
         $31 = HEAP32[$arrayidx39>>2]|0;
         $tobool40 = ($31|0)!=(0);
         if ($tobool40) {
          $32 = $i;
          $33 = HEAP32[99415]|0;
          $cmp42 = ($32|0)!=($33|0);
          if ($cmp42) {
           break L46;
          }
         }
         $35 = $i;
         $36 = HEAP32[99415]|0;
         $cmp48 = ($35|0)==($36|0);
         if ($cmp48) {
          $37 = HEAP32[99699]|0;
          $inc51 = (($37) + 1)|0;
          HEAP32[99699] = $inc51;
          $38 = HEAP32[99699]|0;
          $cmp52 = ($38|0)<(3);
          if ($cmp52) {
           $39 = HEAP32[99522]|0;
           $message = ((($39)) + 224|0);
           HEAP32[$message>>2] = 147392;
           break;
          }
          $40 = HEAP32[99699]|0;
          $cmp56 = ($40|0)<(6);
          if ($cmp56) {
           $41 = HEAP32[99522]|0;
           $message59 = ((($41)) + 224|0);
           HEAP32[$message59>>2] = 147415;
           break;
          }
          $42 = HEAP32[99699]|0;
          $cmp61 = ($42|0)<(9);
          if ($cmp61) {
           $43 = HEAP32[99522]|0;
           $message64 = ((($43)) + 224|0);
           HEAP32[$message64>>2] = 147428;
           break;
          }
          $44 = HEAP32[99699]|0;
          $cmp66 = ($44|0)<(32);
          $45 = HEAP32[99522]|0;
          $message69 = ((($45)) + 224|0);
          if ($cmp66) {
           HEAP32[$message69>>2] = 147447;
           break;
          } else {
           HEAP32[$message69>>2] = 147465;
           break;
          }
         }
        }
       } while(0);
       $46 = $i;
       $inc80 = (($46) + 1)|0;
       $i = $inc80;
      }
      HEAP32[99520] = 1;
      $eatkey = 1;
      _HUlib_resetIText(398656);
      $34 = $i;
      $add45 = (($34) + 1)|0;
      $conv46 = $add45&255;
      _HU_queueChatChar($conv46);
     }
    }
   } while(0);
   $68 = $eatkey;
   $retval = $68;
   $69 = $retval;
   STACKTOP = sp;return ($69|0);
  }
 }
 $11 = $ev$addr;
 $12 = HEAP32[$11>>2]|0;
 $cmp7 = ($12|0)==(0);
 $conv = $cmp7&1;
 HEAP32[99698] = $conv;
 $retval = 0;
 $69 = $retval;
 STACKTOP = sp;return ($69|0);
}
function _I_Endoom($endoom_data) {
 $endoom_data = $endoom_data|0;
 var $0 = 0, $call = 0, $endoom_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $endoom_data$addr = $endoom_data;
 $0 = $endoom_data$addr;
 $call = _emscripten_asm_const_ii(0,($0|0))|0;
 STACKTOP = sp;return;
}
function _I_InitJoystick() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_BindJoystickVariables() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $name = sp;
 _M_BindVariable(150268,398800);
 _M_BindVariable(149183,128764);
 _M_BindVariable(149198,398804);
 _M_BindVariable(149232,128768);
 _M_BindVariable(149266,128772);
 _M_BindVariable(149214,398808);
 _M_BindVariable(149248,398812);
 _M_BindVariable(149287,398816);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  HEAP32[$vararg_buffer>>2] = $1;
  (_M_snprintf($name,32,148193,$vararg_buffer)|0);
  $2 = $i;
  $arrayidx = (43264 + ($2<<2)|0);
  _M_BindVariable($name,$arrayidx);
  $3 = $i;
  $inc = (($3) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _I_InitSound($use_sfx_prefix) {
 $use_sfx_prefix = $use_sfx_prefix|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $call4 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $conv3 = 0, $conv6 = 0, $nomusic = 0, $nosfx = 0, $nosound = 0, $or$cond = 0, $tobool = 0, $tobool15 = 0, $tobool18 = 0;
 var $tobool7 = 0, $use_sfx_prefix$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $use_sfx_prefix$addr = $use_sfx_prefix;
 $call = (_M_CheckParm(148220)|0);
 $cmp = ($call|0)>(0);
 $conv = $cmp&1;
 $nosound = $conv;
 $call1 = (_M_CheckParm(148229)|0);
 $cmp2 = ($call1|0)>(0);
 $conv3 = $cmp2&1;
 $nosfx = $conv3;
 $call4 = (_M_CheckParm(148236)|0);
 $cmp5 = ($call4|0)>(0);
 $conv6 = $cmp5&1;
 $nomusic = $conv6;
 $0 = $nosound;
 $tobool = ($0|0)!=(0);
 $tobool7 = (0)!=(0);
 $or$cond = $tobool | $tobool7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $1 = $nosfx;
 $tobool15 = ($1|0)!=(0);
 if (!($tobool15)) {
  $2 = $use_sfx_prefix$addr;
  _InitSfxModule($2);
 }
 $3 = $nomusic;
 $tobool18 = ($3|0)!=(0);
 if ($tobool18) {
  STACKTOP = sp;return;
 }
 _InitMusicModule();
 STACKTOP = sp;return;
}
function _InitSfxModule($use_sfx_prefix) {
 $use_sfx_prefix = $use_sfx_prefix|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $Init = 0, $call = 0, $call4 = 0, $cmp = 0, $i = 0, $inc = 0, $num_sound_devices = 0, $tobool = 0, $tobool5 = 0, $use_sfx_prefix$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $use_sfx_prefix$addr = $use_sfx_prefix;
 $i = 0;
 while(1) {
  $cmp = (0|0)!=(0|0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $0 = HEAP32[32199]|0;
  $1 = HEAP32[0>>2]|0;
  $num_sound_devices = ((0) + 4|0);
  $2 = HEAP32[$num_sound_devices>>2]|0;
  $call = (_SndDeviceInList($0,$1,$2)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   $Init = ((0) + 8|0);
   $3 = HEAP32[$Init>>2]|0;
   $4 = $use_sfx_prefix$addr;
   $call4 = (FUNCTION_TABLE_ii[$3 & 255]($4)|0);
   $tobool5 = ($call4|0)!=(0);
   if ($tobool5) {
    break;
   }
  }
  $5 = $i;
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _InitMusicModule() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _SndDeviceInList($device,$list,$len) {
 $device = $device|0;
 $list = $list|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $device$addr = 0, $i = 0, $inc = 0, $len$addr = 0, $list$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $device$addr = $device;
 $list$addr = $list;
 $len$addr = $len;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $len$addr;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $2 = $device$addr;
  $3 = $list$addr;
  $4 = $i;
  $arrayidx = (($3) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($2|0)==($5|0);
  if ($cmp1) {
   label = 4;
   break;
  }
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $retval = 1;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 else if ((label|0) == 6) {
  $retval = 0;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function _I_ShutdownSound() {
 var $0 = 0, $1 = 0, $Shutdown = 0, $Shutdown3 = 0, $cmp = 0, $cmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = (0|0)!=(0|0);
 if ($cmp) {
  $Shutdown = ((0) + 12|0);
  $0 = HEAP32[$Shutdown>>2]|0;
  FUNCTION_TABLE_v[$0 & 255]();
 }
 $cmp1 = (0|0)!=(0|0);
 if (!($cmp1)) {
  return;
 }
 $Shutdown3 = ((0) + 12|0);
 $1 = HEAP32[$Shutdown3>>2]|0;
 FUNCTION_TABLE_v[$1 & 255]();
 return;
}
function _I_GetSfxLumpNum($sfxinfo) {
 $sfxinfo = $sfxinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $GetSfxLumpNum = 0, $call = 0, $cmp = 0, $retval = 0, $sfxinfo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sfxinfo$addr = $sfxinfo;
 $cmp = (0|0)!=(0|0);
 if ($cmp) {
  $GetSfxLumpNum = ((0) + 16|0);
  $0 = HEAP32[$GetSfxLumpNum>>2]|0;
  $1 = $sfxinfo$addr;
  $call = (FUNCTION_TABLE_ii[$0 & 255]($1)|0);
  $retval = $call;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 } else {
  $retval = 0;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _I_UpdateSound() {
 var $0 = 0, $1 = 0, $2 = 0, $Poll = 0, $Poll4 = 0, $Update = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = (0|0)!=(0|0);
 if ($cmp) {
  $Update = ((0) + 20|0);
  $0 = HEAP32[$Update>>2]|0;
  FUNCTION_TABLE_v[$0 & 255]();
 }
 $cmp1 = (0|0)!=(0|0);
 if (!($cmp1)) {
  return;
 }
 $Poll = ((0) + 48|0);
 $1 = HEAP32[$Poll>>2]|0;
 $cmp2 = ($1|0)!=(0|0);
 if (!($cmp2)) {
  return;
 }
 $Poll4 = ((0) + 48|0);
 $2 = HEAP32[$Poll4>>2]|0;
 FUNCTION_TABLE_v[$2 & 255]();
 return;
}
function _I_UpdateSoundParams($channel,$vol,$sep) {
 $channel = $channel|0;
 $vol = $vol|0;
 $sep = $sep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $UpdateSoundParams = 0, $channel$addr = 0, $cmp = 0, $sep$addr = 0, $vol$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vol$addr = sp + 4|0;
 $sep$addr = sp;
 $channel$addr = $channel;
 HEAP32[$vol$addr>>2] = $vol;
 HEAP32[$sep$addr>>2] = $sep;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 _CheckVolumeSeparation($vol$addr,$sep$addr);
 $UpdateSoundParams = ((0) + 24|0);
 $0 = HEAP32[$UpdateSoundParams>>2]|0;
 $1 = $channel$addr;
 $2 = HEAP32[$vol$addr>>2]|0;
 $3 = HEAP32[$sep$addr>>2]|0;
 FUNCTION_TABLE_viii[$0 & 0]($1,$2,$3);
 STACKTOP = sp;return;
}
function _CheckVolumeSeparation($vol,$sep) {
 $vol = $vol|0;
 $sep = $sep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp7 = 0, $sep$addr = 0, $vol$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vol$addr = $vol;
 $sep$addr = $sep;
 $0 = $sep$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)<(0);
 $2 = $sep$addr;
 if ($cmp) {
  HEAP32[$2>>2] = 0;
 } else {
  $3 = HEAP32[$2>>2]|0;
  $cmp1 = ($3|0)>(254);
  if ($cmp1) {
   $4 = $sep$addr;
   HEAP32[$4>>2] = 254;
  }
 }
 $5 = $vol$addr;
 $6 = HEAP32[$5>>2]|0;
 $cmp4 = ($6|0)<(0);
 $7 = $vol$addr;
 if ($cmp4) {
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$7>>2]|0;
 $cmp7 = ($8|0)>(127);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $9 = $vol$addr;
 HEAP32[$9>>2] = 127;
 STACKTOP = sp;return;
}
function _I_StartSound($sfxinfo,$channel,$vol,$sep) {
 $sfxinfo = $sfxinfo|0;
 $channel = $channel|0;
 $vol = $vol|0;
 $sep = $sep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $StartSound = 0, $call = 0, $channel$addr = 0, $cmp = 0, $retval = 0, $sep$addr = 0, $sfxinfo$addr = 0, $vol$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vol$addr = sp + 4|0;
 $sep$addr = sp;
 $sfxinfo$addr = $sfxinfo;
 $channel$addr = $channel;
 HEAP32[$vol$addr>>2] = $vol;
 HEAP32[$sep$addr>>2] = $sep;
 $cmp = (0|0)!=(0|0);
 if ($cmp) {
  _CheckVolumeSeparation($vol$addr,$sep$addr);
  $StartSound = ((0) + 28|0);
  $0 = HEAP32[$StartSound>>2]|0;
  $1 = $sfxinfo$addr;
  $2 = $channel$addr;
  $3 = HEAP32[$vol$addr>>2]|0;
  $4 = HEAP32[$sep$addr>>2]|0;
  $call = (FUNCTION_TABLE_iiiii[$0 & 127]($1,$2,$3,$4)|0);
  $retval = $call;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 } else {
  $retval = 0;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _I_StopSound($channel) {
 $channel = $channel|0;
 var $0 = 0, $1 = 0, $StopSound = 0, $channel$addr = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $channel$addr = $channel;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $StopSound = ((0) + 32|0);
 $0 = HEAP32[$StopSound>>2]|0;
 $1 = $channel$addr;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 STACKTOP = sp;return;
}
function _I_SoundIsPlaying($channel) {
 $channel = $channel|0;
 var $0 = 0, $1 = 0, $2 = 0, $SoundIsPlaying = 0, $call = 0, $channel$addr = 0, $cmp = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $channel$addr = $channel;
 $cmp = (0|0)!=(0|0);
 if ($cmp) {
  $SoundIsPlaying = ((0) + 36|0);
  $0 = HEAP32[$SoundIsPlaying>>2]|0;
  $1 = $channel$addr;
  $call = (FUNCTION_TABLE_ii[$0 & 255]($1)|0);
  $retval = $call;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 } else {
  $retval = 0;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _I_PrecacheSounds($sounds,$num_sounds) {
 $sounds = $sounds|0;
 $num_sounds = $num_sounds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $CacheSounds = 0, $CacheSounds2 = 0, $cmp = 0, $cmp1 = 0, $num_sounds$addr = 0, $sounds$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sounds$addr = $sounds;
 $num_sounds$addr = $num_sounds;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $CacheSounds = ((0) + 40|0);
 $0 = HEAP32[$CacheSounds>>2]|0;
 $cmp1 = ($0|0)!=(0|0);
 if (!($cmp1)) {
  STACKTOP = sp;return;
 }
 $CacheSounds2 = ((0) + 40|0);
 $1 = HEAP32[$CacheSounds2>>2]|0;
 $2 = $sounds$addr;
 $3 = $num_sounds$addr;
 FUNCTION_TABLE_vii[$1 & 255]($2,$3);
 STACKTOP = sp;return;
}
function _I_InitMusic() {
 var $0 = 0, $Init = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  return;
 }
 $Init = ((0) + 8|0);
 $0 = HEAP32[$Init>>2]|0;
 (FUNCTION_TABLE_i[$0 & 127]()|0);
 return;
}
function _I_ShutdownMusic() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SetMusicVolume($volume) {
 $volume = $volume|0;
 var $0 = 0, $1 = 0, $SetMusicVolume = 0, $cmp = 0, $volume$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $volume$addr = $volume;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $SetMusicVolume = ((0) + 16|0);
 $0 = HEAP32[$SetMusicVolume>>2]|0;
 $1 = $volume$addr;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 STACKTOP = sp;return;
}
function _I_PauseSong() {
 var $0 = 0, $PauseMusic = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  return;
 }
 $PauseMusic = ((0) + 20|0);
 $0 = HEAP32[$PauseMusic>>2]|0;
 FUNCTION_TABLE_v[$0 & 255]();
 return;
}
function _I_ResumeSong() {
 var $0 = 0, $ResumeMusic = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  return;
 }
 $ResumeMusic = ((0) + 24|0);
 $0 = HEAP32[$ResumeMusic>>2]|0;
 FUNCTION_TABLE_v[$0 & 255]();
 return;
}
function _I_RegisterSong($data,$len) {
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $RegisterSong = 0, $call = 0, $cmp = 0, $data$addr = 0, $len$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $data$addr = $data;
 $len$addr = $len;
 $cmp = (0|0)!=(0|0);
 if ($cmp) {
  $RegisterSong = ((0) + 28|0);
  $0 = HEAP32[$RegisterSong>>2]|0;
  $1 = $data$addr;
  $2 = $len$addr;
  $call = (FUNCTION_TABLE_iii[$0 & 0]($1,$2)|0);
  $retval = $call;
  $3 = $retval;
  STACKTOP = sp;return ($3|0);
 } else {
  $retval = 0;
  $3 = $retval;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function _I_UnRegisterSong($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $UnRegisterSong = 0, $cmp = 0, $handle$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $handle$addr = $handle;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $UnRegisterSong = ((0) + 32|0);
 $0 = HEAP32[$UnRegisterSong>>2]|0;
 $1 = $handle$addr;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 STACKTOP = sp;return;
}
function _I_PlaySong($handle,$looping) {
 $handle = $handle|0;
 $looping = $looping|0;
 var $0 = 0, $1 = 0, $2 = 0, $PlaySong = 0, $cmp = 0, $handle$addr = 0, $looping$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $handle$addr = $handle;
 $looping$addr = $looping;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $PlaySong = ((0) + 36|0);
 $0 = HEAP32[$PlaySong>>2]|0;
 $1 = $handle$addr;
 $2 = $looping$addr;
 FUNCTION_TABLE_vii[$0 & 255]($1,$2);
 STACKTOP = sp;return;
}
function _I_StopSong() {
 var $0 = 0, $StopSong = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = (0|0)!=(0|0);
 if (!($cmp)) {
  return;
 }
 $StopSong = ((0) + 40|0);
 $0 = HEAP32[$StopSong>>2]|0;
 FUNCTION_TABLE_v[$0 & 255]();
 return;
}
function _I_BindSoundVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(150340,128792);
 _M_BindVariable(150356,128796);
 _M_BindVariable(150370,398820);
 _M_BindVariable(150381,398824);
 _M_BindVariable(150391,398828);
 _M_BindVariable(150401,398832);
 _M_BindVariable(149014,128784);
 _M_BindVariable(149034,128788);
 _M_BindVariable(148985,128776);
 _M_BindVariable(149000,128780);
 return;
}
function _I_AtExit($func,$run_on_error) {
 $func = $func|0;
 $run_on_error = $run_on_error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $entry1 = 0, $func$addr = 0, $next = 0, $run_on_error$addr = 0, $run_on_error3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $func$addr = $func;
 $run_on_error$addr = $run_on_error;
 $call = (_malloc(12)|0);
 $entry1 = $call;
 $0 = $func$addr;
 $1 = $entry1;
 HEAP32[$1>>2] = $0;
 $2 = $run_on_error$addr;
 $3 = $entry1;
 $run_on_error3 = ((($3)) + 4|0);
 HEAP32[$run_on_error3>>2] = $2;
 $4 = HEAP32[99709]|0;
 $5 = $entry1;
 $next = ((($5)) + 8|0);
 HEAP32[$next>>2] = $4;
 $6 = $entry1;
 HEAP32[99709] = $6;
 STACKTOP = sp;return;
}
function _I_Tactile($on,$off,$total) {
 $on = $on|0;
 $off = $off|0;
 $total = $total|0;
 var $off$addr = 0, $on$addr = 0, $total$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $on$addr = $on;
 $off$addr = $off;
 $total$addr = $total;
 STACKTOP = sp;return;
}
function _I_ZoneBase($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $default_ram = 0, $min_ram = 0;
 var $p = 0, $size$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $zonemem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $size$addr = $size;
 $call = (_M_CheckParmWithArgs(148245,1)|0);
 $p = $call;
 $0 = $p;
 $cmp = ($0|0)>(0);
 if ($cmp) {
  $1 = HEAP32[99714]|0;
  $2 = $p;
  $add = (($2) + 1)|0;
  $arrayidx = (($1) + ($add<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $call1 = (_atoi($3)|0);
  $default_ram = $call1;
  $4 = $default_ram;
  $min_ram = $4;
 } else {
  $default_ram = 6;
  $min_ram = 6;
 }
 $5 = $size$addr;
 $6 = $default_ram;
 $7 = $min_ram;
 $call2 = (_AutoAllocMemory($5,$6,$7)|0);
 $zonemem = $call2;
 $8 = $zonemem;
 $9 = $size$addr;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 (_printf(148249,$vararg_buffer)|0);
 $11 = $zonemem;
 STACKTOP = sp;return ($11|0);
}
function _AutoAllocMemory($size,$default_ram,$min_ram) {
 $size = $size|0;
 $default_ram = $default_ram|0;
 $min_ram = $min_ram|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $default_ram$addr = 0, $min_ram$addr = 0, $mul = 0, $mul2 = 0, $size$addr = 0;
 var $sub = 0, $vararg_buffer = 0, $zonemem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $size$addr = $size;
 $default_ram$addr = $default_ram;
 $min_ram$addr = $min_ram;
 $zonemem = 0;
 while(1) {
  $0 = $zonemem;
  $cmp = ($0|0)==(0|0);
  if (!($cmp)) {
   break;
  }
  $1 = $default_ram$addr;
  $2 = $min_ram$addr;
  $cmp1 = ($1|0)<($2|0);
  if ($cmp1) {
   $3 = $default_ram$addr;
   HEAP32[$vararg_buffer>>2] = $3;
   _I_Error(148289,$vararg_buffer);
  }
  $4 = $default_ram$addr;
  $mul = $4<<10;
  $mul2 = $mul<<10;
  $5 = $size$addr;
  HEAP32[$5>>2] = $mul2;
  $6 = $size$addr;
  $7 = HEAP32[$6>>2]|0;
  $call = (_malloc($7)|0);
  $zonemem = $call;
  $8 = $zonemem;
  $cmp3 = ($8|0)==(0|0);
  if ($cmp3) {
   $9 = $default_ram$addr;
   $sub = (($9) - 1)|0;
   $default_ram$addr = $sub;
  }
 }
 $10 = $zonemem;
 STACKTOP = sp;return ($10|0);
}
function _I_Error($error,$varargs) {
 $error = $error|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argptr = 0, $call20 = 0, $call23 = 0, $cmp = 0;
 var $entry1 = 0, $error$addr = 0, $exit_gui_popup = 0, $lnot = 0, $lnot$ext = 0, $msgbuf = 0, $next = 0, $run_on_error = 0, $tobool = 0, $tobool17 = 0, $tobool21 = 0, $tobool22 = 0, $tobool24 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $vararg_buffer1 = sp + 536|0;
 $vararg_buffer = sp + 528|0;
 $msgbuf = sp + 16|0;
 $argptr = sp;
 $error$addr = $error;
 $0 = HEAP32[99710]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[32479]|0;
  (_fprintf($1,148331,$vararg_buffer)|0);
 } else {
  HEAP32[99710] = 1;
 }
 HEAP32[$argptr>>2] = $varargs;
 $2 = HEAP32[32479]|0;
 $3 = $error$addr;
 (_vfprintf($2,$3,$argptr)|0);
 $4 = HEAP32[32479]|0;
 (_fprintf($4,148377,$vararg_buffer1)|0);
 $5 = HEAP32[32479]|0;
 (_fflush($5)|0);
 HEAP32[$argptr>>2] = $varargs;
 _memset(($msgbuf|0),0,512)|0;
 $6 = $error$addr;
 (_M_vsnprintf($msgbuf,512,$6,$argptr)|0);
 $7 = HEAP32[99709]|0;
 $entry1 = $7;
 while(1) {
  $8 = $entry1;
  $cmp = ($8|0)!=(0|0);
  if (!($cmp)) {
   break;
  }
  $9 = $entry1;
  $run_on_error = ((($9)) + 4|0);
  $10 = HEAP32[$run_on_error>>2]|0;
  $tobool17 = ($10|0)!=(0);
  if ($tobool17) {
   $11 = $entry1;
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_v[$12 & 255]();
  }
  $13 = $entry1;
  $next = ((($13)) + 8|0);
  $14 = HEAP32[$next>>2]|0;
  $entry1 = $14;
 }
 $call20 = (_M_ParmExists(148380)|0);
 $tobool21 = ($call20|0)!=(0);
 $lnot = $tobool21 ^ 1;
 $lnot$ext = $lnot&1;
 $exit_gui_popup = $lnot$ext;
 $15 = $exit_gui_popup;
 $tobool22 = ($15|0)!=(0);
 if ($tobool22) {
  $call23 = (_I_ConsoleStdout()|0);
  $tobool24 = ($call23|0)!=(0);
  if (!($tobool24)) {
   (_ZenityErrorBox($msgbuf)|0);
  }
 }
 while(1) {
 }
}
function _I_ConsoleStdout() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _ZenityErrorBox($message) {
 $message = $message|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add3 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call6 = 0, $errorboxpath = 0, $escaped_message = 0;
 var $message$addr = 0, $result = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $message$addr = $message;
 $call = (_ZenityAvailable()|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $0 = $message$addr;
  $call1 = (_EscapeShellString($0)|0);
  $escaped_message = $call1;
  $1 = $escaped_message;
  $call2 = (_strlen($1)|0);
  $add = (15 + ($call2))|0;
  $add3 = (($add) + 19)|0;
  HEAP32[99711] = $add3;
  $2 = HEAP32[99711]|0;
  $call4 = (_malloc($2)|0);
  $errorboxpath = $call4;
  $3 = $errorboxpath;
  $4 = HEAP32[99711]|0;
  $5 = $escaped_message;
  HEAP32[$vararg_buffer>>2] = 148408;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  (_M_snprintf($3,$4,148387,$vararg_buffer)|0);
  $6 = $errorboxpath;
  $call6 = (_system(($6|0))|0);
  $result = $call6;
  $7 = $errorboxpath;
  _free($7);
  $8 = $escaped_message;
  _free($8);
  $9 = $result;
  $retval = $9;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 } else {
  $retval = 0;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _ZenityAvailable() {
 var $call = 0, $cmp = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_system((148429|0))|0);
 $cmp = ($call|0)==(0);
 $conv = $cmp&1;
 return ($conv|0);
}
function _EscapeShellString($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $call = 0, $call1 = 0, $call4 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $conv3 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr7 = 0, $incdec$ptr8 = 0, $incdec$ptr9 = 0, $mul = 0, $r = 0, $result = 0, $s = 0, $string$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $string$addr = $string;
 $0 = $string$addr;
 $call = (_strlen($0)|0);
 $mul = $call<<1;
 $add = (($mul) + 3)|0;
 $call1 = (_malloc($add)|0);
 $result = $call1;
 $1 = $result;
 $r = $1;
 $2 = $r;
 HEAP8[$2>>0] = 34;
 $3 = $r;
 $incdec$ptr = ((($3)) + 1|0);
 $r = $incdec$ptr;
 $4 = $string$addr;
 $s = $4;
 while(1) {
  $5 = $s;
  $6 = HEAP8[$5>>0]|0;
  $conv = $6 << 24 >> 24;
  $cmp = ($conv|0)!=(0);
  if (!($cmp)) {
   break;
  }
  $7 = $s;
  $8 = HEAP8[$7>>0]|0;
  $conv3 = $8 << 24 >> 24;
  $call4 = (_strchr(148424,$conv3)|0);
  $cmp5 = ($call4|0)!=(0|0);
  if ($cmp5) {
   $9 = $r;
   HEAP8[$9>>0] = 92;
   $10 = $r;
   $incdec$ptr7 = ((($10)) + 1|0);
   $r = $incdec$ptr7;
  }
  $11 = $s;
  $12 = HEAP8[$11>>0]|0;
  $13 = $r;
  HEAP8[$13>>0] = $12;
  $14 = $r;
  $incdec$ptr8 = ((($14)) + 1|0);
  $r = $incdec$ptr8;
  $15 = $s;
  $incdec$ptr9 = ((($15)) + 1|0);
  $s = $incdec$ptr9;
 }
 $16 = $r;
 HEAP8[$16>>0] = 34;
 $17 = $r;
 $incdec$ptr10 = ((($17)) + 1|0);
 $r = $incdec$ptr10;
 $18 = $r;
 HEAP8[$18>>0] = 0;
 $19 = $result;
 STACKTOP = sp;return ($19|0);
}
function _I_PrintBanner($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $div = 0, $i = 0, $inc = 0, $msg$addr = 0, $spaces = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $msg$addr = $msg;
 $0 = $msg$addr;
 $call = (_strlen($0)|0);
 $div = (($call>>>0) / 2)&-1;
 $sub = (35 - ($div))|0;
 $spaces = $sub;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $spaces;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  (_putchar(32)|0);
  $3 = $i;
  $inc = (($3) + 1)|0;
  $i = $inc;
 }
 $4 = $msg$addr;
 (_puts($4)|0);
 STACKTOP = sp;return;
}
function _I_PrintDivider() {
 var $0 = 0, $1 = 0, $cmp = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(75);
  if (!($cmp)) {
   break;
  }
  (_putchar(61)|0);
  $1 = $i;
  $inc = (($1) + 1)|0;
  $i = $inc;
 }
 (_putchar(10)|0);
 STACKTOP = sp;return;
}
function _I_PrintStartupBanner($gamedescription) {
 $gamedescription = $gamedescription|0;
 var $0 = 0, $gamedescription$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $gamedescription$addr = $gamedescription;
 _I_PrintDivider();
 $0 = $gamedescription$addr;
 _I_PrintBanner($0);
 _I_PrintDivider();
 (_printf(148468,$vararg_buffer)|0);
 _I_PrintDivider();
 STACKTOP = sp;return;
}
function _I_Quit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $entry1 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99709]|0;
 $entry1 = $0;
 while(1) {
  $1 = $entry1;
  $cmp = ($1|0)!=(0|0);
  if (!($cmp)) {
   break;
  }
  $2 = $entry1;
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_v[$3 & 255]();
  $4 = $entry1;
  $next = ((($4)) + 8|0);
  $5 = HEAP32[$next>>2]|0;
  $entry1 = $5;
 }
 STACKTOP = sp;return;
}
function _I_GetMemoryValue($offset,$value,$size) {
 $offset = $offset|0;
 $value = $value|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add38 = 0, $add45 = 0, $add5 = 0, $add50 = 0, $add55 = 0, $arrayidx = 0, $arrayidx11 = 0;
 var $arrayidx18 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx34 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx43 = 0, $arrayidx46 = 0, $arrayidx51 = 0, $arrayidx56 = 0, $arrayidx6 = 0, $call = 0, $call12 = 0, $call2 = 0, $call7 = 0, $cmp = 0, $cmp16 = 0, $cmp17 = 0, $cmp20 = 0, $conv = 0;
 var $conv26 = 0, $conv37 = 0, $conv40 = 0, $conv41 = 0, $conv44 = 0, $conv47 = 0, $conv52 = 0, $conv57 = 0, $i = 0, $inc = 0, $inc27 = 0, $inc29 = 0, $offset$addr = 0, $or = 0, $or49 = 0, $or54 = 0, $or59 = 0, $p = 0, $retval = 0, $shl = 0;
 var $shl48 = 0, $shl53 = 0, $shl58 = 0, $size$addr = 0, $tobool = 0, $tobool13 = 0, $tobool3 = 0, $tobool8 = 0, $val = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $val = sp;
 $offset$addr = $offset;
 $value$addr = $value;
 $size$addr = $size;
 $0 = HEAP32[32200]|0;
 $tobool = ($0|0)!=(0);
 do {
  if ($tobool) {
   HEAP32[32200] = 0;
   $i = 0;
   $call = (_M_CheckParmWithArgs(148747,1)|0);
   $p = $call;
   $1 = $p;
   $cmp = ($1|0)>(0);
   if ($cmp) {
    $2 = HEAP32[99714]|0;
    $3 = $p;
    $add = (($3) + 1)|0;
    $arrayidx = (($2) + ($add<<2)|0);
    $4 = HEAP32[$arrayidx>>2]|0;
    $call2 = (_strcasecmp($4,148755)|0);
    $tobool3 = ($call2|0)!=(0);
    if (!($tobool3)) {
     HEAP32[32201] = 148762;
    }
    $5 = HEAP32[99714]|0;
    $6 = $p;
    $add5 = (($6) + 1)|0;
    $arrayidx6 = (($5) + ($add5<<2)|0);
    $7 = HEAP32[$arrayidx6>>2]|0;
    $call7 = (_strcasecmp($7,148772)|0);
    $tobool8 = ($call7|0)!=(0);
    if (!($tobool8)) {
     HEAP32[32201] = 148778;
     break;
    }
    $8 = HEAP32[99714]|0;
    $9 = $p;
    $add10 = (($9) + 1)|0;
    $arrayidx11 = (($8) + ($add10<<2)|0);
    $10 = HEAP32[$arrayidx11>>2]|0;
    $call12 = (_strcasecmp($10,148788)|0);
    $tobool13 = ($call12|0)!=(0);
    if (!($tobool13)) {
     HEAP32[32201] = 148795;
     break;
    }
    $i = 0;
    while(1) {
     $11 = $i;
     $cmp16 = ($11|0)<(10);
     if (!($cmp16)) {
      break;
     }
     $12 = $p;
     $inc = (($12) + 1)|0;
     $p = $inc;
     $13 = $p;
     $14 = HEAP32[99713]|0;
     $cmp17 = ($13|0)>=($14|0);
     if ($cmp17) {
      break;
     }
     $15 = HEAP32[99714]|0;
     $16 = $p;
     $arrayidx18 = (($15) + ($16<<2)|0);
     $17 = HEAP32[$arrayidx18>>2]|0;
     $18 = HEAP8[$17>>0]|0;
     $conv = $18 << 24 >> 24;
     $cmp20 = ($conv|0)==(45);
     if ($cmp20) {
      break;
     }
     $19 = HEAP32[99714]|0;
     $20 = $p;
     $arrayidx24 = (($19) + ($20<<2)|0);
     $21 = HEAP32[$arrayidx24>>2]|0;
     (_M_StrToInt($21,$val)|0);
     $22 = HEAP32[$val>>2]|0;
     $conv26 = $22&255;
     $23 = $i;
     $inc27 = (($23) + 1)|0;
     $i = $inc27;
     $arrayidx28 = (401510 + ($23)|0);
     HEAP8[$arrayidx28>>0] = $conv26;
     $24 = $i;
     $inc29 = (($24) + 1)|0;
     $i = $inc29;
    }
    HEAP32[32201] = 401510;
   }
  }
 } while(0);
 $25 = $size$addr;
 switch ($25|0) {
 case 1:  {
  $26 = HEAP32[32201]|0;
  $27 = $offset$addr;
  $arrayidx34 = (($26) + ($27)|0);
  $28 = HEAP8[$arrayidx34>>0]|0;
  $29 = $value$addr;
  HEAP8[$29>>0] = $28;
  $retval = 1;
  $50 = $retval;
  STACKTOP = sp;return ($50|0);
  break;
 }
 case 2:  {
  $30 = HEAP32[32201]|0;
  $31 = $offset$addr;
  $arrayidx36 = (($30) + ($31)|0);
  $32 = HEAP8[$arrayidx36>>0]|0;
  $conv37 = $32&255;
  $33 = HEAP32[32201]|0;
  $34 = $offset$addr;
  $add38 = (($34) + 1)|0;
  $arrayidx39 = (($33) + ($add38)|0);
  $35 = HEAP8[$arrayidx39>>0]|0;
  $conv40 = $35&255;
  $shl = $conv40 << 8;
  $or = $conv37 | $shl;
  $conv41 = $or&65535;
  $36 = $value$addr;
  HEAP16[$36>>1] = $conv41;
  $retval = 1;
  $50 = $retval;
  STACKTOP = sp;return ($50|0);
  break;
 }
 case 4:  {
  $37 = HEAP32[32201]|0;
  $38 = $offset$addr;
  $arrayidx43 = (($37) + ($38)|0);
  $39 = HEAP8[$arrayidx43>>0]|0;
  $conv44 = $39&255;
  $40 = HEAP32[32201]|0;
  $41 = $offset$addr;
  $add45 = (($41) + 1)|0;
  $arrayidx46 = (($40) + ($add45)|0);
  $42 = HEAP8[$arrayidx46>>0]|0;
  $conv47 = $42&255;
  $shl48 = $conv47 << 8;
  $or49 = $conv44 | $shl48;
  $43 = HEAP32[32201]|0;
  $44 = $offset$addr;
  $add50 = (($44) + 2)|0;
  $arrayidx51 = (($43) + ($add50)|0);
  $45 = HEAP8[$arrayidx51>>0]|0;
  $conv52 = $45&255;
  $shl53 = $conv52 << 16;
  $or54 = $or49 | $shl53;
  $46 = HEAP32[32201]|0;
  $47 = $offset$addr;
  $add55 = (($47) + 3)|0;
  $arrayidx56 = (($46) + ($add55)|0);
  $48 = HEAP8[$arrayidx56>>0]|0;
  $conv57 = $48&255;
  $shl58 = $conv57 << 24;
  $or59 = $or54 | $shl58;
  $49 = $value$addr;
  HEAP32[$49>>2] = $or59;
  $retval = 1;
  $50 = $retval;
  STACKTOP = sp;return ($50|0);
  break;
 }
 default: {
  $retval = 0;
  $50 = $retval;
  STACKTOP = sp;return ($50|0);
 }
 }
 return (0)|0;
}
function _I_GetTicks() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_DG_GetTicksMs()|0);
 return ($call|0);
}
function _I_GetTime() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $div = 0, $mul = 0, $sub = 0, $ticks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_I_GetTicks()|0);
 $ticks = $call;
 $0 = HEAP32[99712]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $1 = $ticks;
  HEAP32[99712] = $1;
 }
 $2 = HEAP32[99712]|0;
 $3 = $ticks;
 $sub = (($3) - ($2))|0;
 $ticks = $sub;
 $4 = $ticks;
 $mul = ($4*35)|0;
 $div = (($mul>>>0) / 1000)&-1;
 STACKTOP = sp;return ($div|0);
}
function _I_GetTimeMS() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $sub = 0, $ticks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_I_GetTicks()|0);
 $ticks = $call;
 $0 = HEAP32[99712]|0;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $1 = $ticks;
  HEAP32[99712] = $1;
 }
 $2 = $ticks;
 $3 = HEAP32[99712]|0;
 $sub = (($2) - ($3))|0;
 STACKTOP = sp;return ($sub|0);
}
function _I_Sleep($ms) {
 $ms = $ms|0;
 var $0 = 0, $ms$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ms$addr = $ms;
 $0 = $ms$addr;
 _DG_SleepMs($0);
 STACKTOP = sp;return;
}
function _I_WaitVBL($count) {
 $count = $count|0;
 var $count$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $count$addr = $count;
 STACKTOP = sp;return;
}
function _I_InitTimer() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _M_CheckParmWithArgs($check,$num_args) {
 $check = $check|0;
 $num_args = $num_args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $call = 0, $check$addr = 0, $cmp = 0, $i = 0, $inc = 0, $num_args$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $check$addr = $check;
 $num_args$addr = $num_args;
 $i = 1;
 while(1) {
  $0 = $i;
  $1 = HEAP32[99713]|0;
  $2 = $num_args$addr;
  $sub = (($1) - ($2))|0;
  $cmp = ($0|0)<($sub|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = $check$addr;
  $4 = HEAP32[99714]|0;
  $5 = $i;
  $arrayidx = (($4) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $call = (_strcasecmp($3,$6)|0);
  $tobool = ($call|0)!=(0);
  $7 = $i;
  if (!($tobool)) {
   label = 4;
   break;
  }
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $retval = $7;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 else if ((label|0) == 6) {
  $retval = 0;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _M_ParmExists($check) {
 $check = $check|0;
 var $0 = 0, $call = 0, $check$addr = 0, $cmp = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $check$addr = $check;
 $0 = $check$addr;
 $call = (_M_CheckParm($0)|0);
 $cmp = ($call|0)!=(0);
 $conv = $cmp&1;
 STACKTOP = sp;return ($conv|0);
}
function _M_CheckParm($check) {
 $check = $check|0;
 var $0 = 0, $call = 0, $check$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $check$addr = $check;
 $0 = $check$addr;
 $call = (_M_CheckParmWithArgs($0,0)|0);
 STACKTOP = sp;return ($call|0);
}
function _M_FindResponseFile() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 1;
 while(1) {
  $0 = $i;
  $1 = HEAP32[99713]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99714]|0;
  $3 = $i;
  $arrayidx = (($2) + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $conv = $5 << 24 >> 24;
  $cmp2 = ($conv|0)==(64);
  if ($cmp2) {
   $6 = $i;
   _LoadResponseFile($6);
  }
  $7 = $i;
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _LoadResponseFile($argv_index) {
 $argv_index = $argv_index|0;
 var $argv_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $argv_index$addr = $argv_index;
 STACKTOP = sp;return;
}
function _M_ClearBox($box) {
 $box = $box|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx3 = 0, $box$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $box$addr = $box;
 $0 = $box$addr;
 $arrayidx = ((($0)) + 12|0);
 HEAP32[$arrayidx>>2] = -2147483648;
 $1 = $box$addr;
 HEAP32[$1>>2] = -2147483648;
 $2 = $box$addr;
 $arrayidx2 = ((($2)) + 8|0);
 HEAP32[$arrayidx2>>2] = 2147483647;
 $3 = $box$addr;
 $arrayidx3 = ((($3)) + 4|0);
 HEAP32[$arrayidx3>>2] = 2147483647;
 STACKTOP = sp;return;
}
function _M_AddToBox($box,$x,$y) {
 $box = $box|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx2 = 0;
 var $arrayidx5 = 0, $arrayidx7 = 0, $box$addr = 0, $cmp = 0, $cmp13 = 0, $cmp3 = 0, $cmp8 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $box$addr = $box;
 $x$addr = $x;
 $y$addr = $y;
 $0 = $x$addr;
 $1 = $box$addr;
 $arrayidx = ((($1)) + 8|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($0|0)<($2|0);
 $3 = $x$addr;
 $4 = $box$addr;
 if ($cmp) {
  $arrayidx1 = ((($4)) + 8|0);
  HEAP32[$arrayidx1>>2] = $3;
 } else {
  $arrayidx2 = ((($4)) + 12|0);
  $5 = HEAP32[$arrayidx2>>2]|0;
  $cmp3 = ($3|0)>($5|0);
  if ($cmp3) {
   $6 = $x$addr;
   $7 = $box$addr;
   $arrayidx5 = ((($7)) + 12|0);
   HEAP32[$arrayidx5>>2] = $6;
  }
 }
 $8 = $y$addr;
 $9 = $box$addr;
 $arrayidx7 = ((($9)) + 4|0);
 $10 = HEAP32[$arrayidx7>>2]|0;
 $cmp8 = ($8|0)<($10|0);
 $11 = $y$addr;
 $12 = $box$addr;
 if ($cmp8) {
  $arrayidx10 = ((($12)) + 4|0);
  HEAP32[$arrayidx10>>2] = $11;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$12>>2]|0;
 $cmp13 = ($11|0)>($13|0);
 if (!($cmp13)) {
  STACKTOP = sp;return;
 }
 $14 = $y$addr;
 $15 = $box$addr;
 HEAP32[$15>>2] = $14;
 STACKTOP = sp;return;
}
function _cht_CheckCheat($cht,$key) {
 $cht = $cht|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx23 = 0, $call = 0, $call31 = 0;
 var $call4 = 0, $chars_read = 0, $chars_read13 = 0, $chars_read28 = 0, $chars_read41 = 0, $chars_read8 = 0, $cht$addr = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp19 = 0, $cmp32 = 0, $cmp37 = 0, $cmp5 = 0, $conv = 0, $conv9 = 0, $inc = 0, $inc25 = 0, $key$addr = 0, $param_chars_read = 0;
 var $param_chars_read17 = 0, $param_chars_read22 = 0, $param_chars_read24 = 0, $param_chars_read35 = 0, $param_chars_read40 = 0, $parameter_buf = 0, $parameter_chars = 0, $parameter_chars18 = 0, $parameter_chars36 = 0, $retval = 0, $sequence_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cht$addr = $cht;
 $key$addr = $key;
 $0 = $cht$addr;
 $parameter_chars = ((($0)) + 32|0);
 $1 = HEAP32[$parameter_chars>>2]|0;
 $cmp = ($1|0)>(0);
 if ($cmp) {
  $2 = $cht$addr;
  $call = (_strlen($2)|0);
  $3 = $cht$addr;
  $sequence_len = ((($3)) + 28|0);
  $4 = HEAP32[$sequence_len>>2]|0;
  $cmp1 = ($call>>>0)<($4>>>0);
  if ($cmp1) {
   $retval = 0;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 $5 = $cht$addr;
 $chars_read = ((($5)) + 36|0);
 $6 = HEAP32[$chars_read>>2]|0;
 $7 = $cht$addr;
 $call4 = (_strlen($7)|0);
 $cmp5 = ($6>>>0)<($call4>>>0);
 if ($cmp5) {
  $8 = $key$addr;
  $conv = $8 << 24 >> 24;
  $9 = $cht$addr;
  $10 = $cht$addr;
  $chars_read8 = ((($10)) + 36|0);
  $11 = HEAP32[$chars_read8>>2]|0;
  $arrayidx = (($9) + ($11)|0);
  $12 = HEAP8[$arrayidx>>0]|0;
  $conv9 = $12 << 24 >> 24;
  $cmp10 = ($conv|0)==($conv9|0);
  $13 = $cht$addr;
  $chars_read13 = ((($13)) + 36|0);
  if ($cmp10) {
   $14 = HEAP32[$chars_read13>>2]|0;
   $inc = (($14) + 1)|0;
   HEAP32[$chars_read13>>2] = $inc;
  } else {
   HEAP32[$chars_read13>>2] = 0;
  }
  $15 = $cht$addr;
  $param_chars_read = ((($15)) + 40|0);
  HEAP32[$param_chars_read>>2] = 0;
 } else {
  $16 = $cht$addr;
  $param_chars_read17 = ((($16)) + 40|0);
  $17 = HEAP32[$param_chars_read17>>2]|0;
  $18 = $cht$addr;
  $parameter_chars18 = ((($18)) + 32|0);
  $19 = HEAP32[$parameter_chars18>>2]|0;
  $cmp19 = ($17|0)<($19|0);
  if ($cmp19) {
   $20 = $key$addr;
   $21 = $cht$addr;
   $parameter_buf = ((($21)) + 44|0);
   $22 = $cht$addr;
   $param_chars_read22 = ((($22)) + 40|0);
   $23 = HEAP32[$param_chars_read22>>2]|0;
   $arrayidx23 = (($parameter_buf) + ($23)|0);
   HEAP8[$arrayidx23>>0] = $20;
   $24 = $cht$addr;
   $param_chars_read24 = ((($24)) + 40|0);
   $25 = HEAP32[$param_chars_read24>>2]|0;
   $inc25 = (($25) + 1)|0;
   HEAP32[$param_chars_read24>>2] = $inc25;
  }
 }
 $26 = $cht$addr;
 $chars_read28 = ((($26)) + 36|0);
 $27 = HEAP32[$chars_read28>>2]|0;
 $28 = $cht$addr;
 $call31 = (_strlen($28)|0);
 $cmp32 = ($27>>>0)>=($call31>>>0);
 if ($cmp32) {
  $29 = $cht$addr;
  $param_chars_read35 = ((($29)) + 40|0);
  $30 = HEAP32[$param_chars_read35>>2]|0;
  $31 = $cht$addr;
  $parameter_chars36 = ((($31)) + 32|0);
  $32 = HEAP32[$parameter_chars36>>2]|0;
  $cmp37 = ($30|0)>=($32|0);
  if ($cmp37) {
   $33 = $cht$addr;
   $param_chars_read40 = ((($33)) + 40|0);
   HEAP32[$param_chars_read40>>2] = 0;
   $34 = $cht$addr;
   $chars_read41 = ((($34)) + 36|0);
   HEAP32[$chars_read41>>2] = 0;
   $retval = 1;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 $retval = 0;
 $35 = $retval;
 STACKTOP = sp;return ($35|0);
}
function _cht_GetParam($cht,$buffer) {
 $cht = $cht|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $buffer$addr = 0, $cht$addr = 0, $parameter_buf = 0, $parameter_chars = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cht$addr = $cht;
 $buffer$addr = $buffer;
 $0 = $buffer$addr;
 $1 = $cht$addr;
 $parameter_buf = ((($1)) + 44|0);
 $2 = $cht$addr;
 $parameter_chars = ((($2)) + 32|0);
 $3 = HEAP32[$parameter_chars>>2]|0;
 _memcpy(($0|0),($parameter_buf|0),($3|0))|0;
 STACKTOP = sp;return;
}
function _M_SetConfigFilenames($main_config,$extra_config) {
 $main_config = $main_config|0;
 $extra_config = $extra_config|0;
 var $0 = 0, $1 = 0, $extra_config$addr = 0, $main_config$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $main_config$addr = $main_config;
 $extra_config$addr = $extra_config;
 $0 = $main_config$addr;
 HEAP32[99716] = $0;
 $1 = $extra_config$addr;
 HEAP32[99717] = $1;
 STACKTOP = sp;return;
}
function _M_SaveDefaults() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _SaveDefaultCollection(128808);
 _SaveDefaultCollection(128820);
 return;
}
function _SaveDefaultCollection($collection) {
 $collection = $collection|0;
 var $collection$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $collection$addr = $collection;
 STACKTOP = sp;return;
}
function _M_LoadDefaults() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add7 = 0, $arrayidx = 0, $arrayidx8 = 0, $call = 0;
 var $call11 = 0, $call2 = 0, $call4 = 0, $i = 0, $tobool = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $call = (_M_CheckParmWithArgs(150576,1)|0);
 $i = $call;
 $0 = $i;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99714]|0;
  $2 = $i;
  $add = (($2) + 1)|0;
  $arrayidx = (($1) + ($add<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  HEAP32[(128816)>>2] = $3;
  $4 = HEAP32[(128816)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_printf(150584,$vararg_buffer)|0);
 } else {
  $5 = HEAP32[99715]|0;
  $6 = HEAP32[99716]|0;
  HEAP32[$vararg_buffer1>>2] = $6;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 0;
  $call2 = (_M_StringJoin($5,$vararg_buffer1)|0);
  HEAP32[(128816)>>2] = $call2;
 }
 $7 = HEAP32[(128816)>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $7;
 (_printf(150603,$vararg_buffer5)|0);
 $call4 = (_M_CheckParmWithArgs(150624,1)|0);
 $i = $call4;
 $8 = $i;
 $tobool5 = ($8|0)!=(0);
 if ($tobool5) {
  $9 = HEAP32[99714]|0;
  $10 = $i;
  $add7 = (($10) + 1)|0;
  $arrayidx8 = (($9) + ($add7<<2)|0);
  $11 = HEAP32[$arrayidx8>>2]|0;
  HEAP32[(128828)>>2] = $11;
  $12 = HEAP32[(128828)>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $12;
  (_printf(150637,$vararg_buffer8)|0);
  _LoadDefaultCollection(128808);
  _LoadDefaultCollection(128820);
  STACKTOP = sp;return;
 } else {
  $13 = HEAP32[99715]|0;
  $14 = HEAP32[99717]|0;
  HEAP32[$vararg_buffer11>>2] = $14;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = 0;
  $call11 = (_M_StringJoin($13,$vararg_buffer11)|0);
  HEAP32[(128828)>>2] = $call11;
  _LoadDefaultCollection(128808);
  _LoadDefaultCollection(128820);
  STACKTOP = sp;return;
 }
}
function _LoadDefaultCollection($collection) {
 $collection = $collection|0;
 var $collection$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $collection$addr = $collection;
 STACKTOP = sp;return;
}
function _M_BindVariable($name,$location) {
 $name = $name|0;
 $location = $location|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $bound = 0, $call = 0, $location$addr = 0, $location1 = 0, $name$addr = 0, $variable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $location$addr = $location;
 $0 = $name$addr;
 $call = (_GetDefaultForName($0)|0);
 $variable = $call;
 $1 = $location$addr;
 $2 = $variable;
 $location1 = ((($2)) + 4|0);
 HEAP32[$location1>>2] = $1;
 $3 = $variable;
 $bound = ((($3)) + 20|0);
 HEAP32[$bound>>2] = 1;
 STACKTOP = sp;return;
}
function _GetDefaultForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $name$addr = 0, $result = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $name$addr = $name;
 $0 = $name$addr;
 $call = (_SearchCollection(128808,$0)|0);
 $result = $call;
 $1 = $result;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $2 = $name$addr;
  $call1 = (_SearchCollection(128820,$2)|0);
  $result = $call1;
 }
 $3 = $result;
 $cmp2 = ($3|0)==(0|0);
 if (!($cmp2)) {
  $5 = $result;
  STACKTOP = sp;return ($5|0);
 }
 $4 = $name$addr;
 HEAP32[$vararg_buffer>>2] = $4;
 _I_Error(150675,$vararg_buffer);
 $5 = $result;
 STACKTOP = sp;return ($5|0);
}
function _SearchCollection($collection,$name) {
 $collection = $collection|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $call = 0, $cmp = 0, $collection$addr = 0, $i = 0, $inc = 0;
 var $name$addr = 0, $numdefaults = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $collection$addr = $collection;
 $name$addr = $name;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $collection$addr;
  $numdefaults = ((($1)) + 4|0);
  $2 = HEAP32[$numdefaults>>2]|0;
  $cmp = ($0|0)<($2|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = $name$addr;
  $4 = $collection$addr;
  $5 = HEAP32[$4>>2]|0;
  $6 = $i;
  $arrayidx = (($5) + (($6*24)|0)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $call = (_strcmp($3,$7)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $8 = $collection$addr;
  $9 = HEAP32[$8>>2]|0;
  $10 = $i;
  $arrayidx3 = (($9) + (($10*24)|0)|0);
  $retval = $arrayidx3;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 6) {
  $retval = 0;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _M_SetConfigDir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $dir$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $dir$addr = $dir;
 $0 = $dir$addr;
 $cmp = ($0|0)!=(0|0);
 if ($cmp) {
  $1 = $dir$addr;
  HEAP32[99715] = $1;
 } else {
  $call = (_GetDefaultConfigDir()|0);
  HEAP32[99715] = $call;
 }
 $2 = HEAP32[99715]|0;
 $call1 = (_strcmp($2,401520)|0);
 $cmp2 = ($call1|0)!=(0);
 if (!($cmp2)) {
  $4 = HEAP32[99715]|0;
  _M_MakeDirectory($4);
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99715]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 (_printf(150712,$vararg_buffer)|0);
 $4 = HEAP32[99715]|0;
 _M_MakeDirectory($4);
 STACKTOP = sp;return;
}
function _GetDefaultConfigDir() {
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx1 = 0, $call = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_malloc(2)|0);
 $result = $call;
 $0 = $result;
 HEAP8[$0>>0] = 46;
 $1 = $result;
 $arrayidx1 = ((($1)) + 1|0);
 HEAP8[$arrayidx1>>0] = 0;
 $2 = $result;
 STACKTOP = sp;return ($2|0);
}
function _M_GetSaveGameDir($iwadname) {
 $iwadname = $iwadname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $call2 = 0, $iwadname$addr = 0, $savegamedir = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iwadname$addr = $iwadname;
 $0 = HEAP32[99715]|0;
 $call = (_strcmp($0,401520)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99715]|0;
  HEAP32[$vararg_buffer>>2] = 152940;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 150750;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $call2 = (_M_StringJoin($1,$vararg_buffer)|0);
  $savegamedir = $call2;
  $2 = $savegamedir;
  _M_MakeDirectory($2);
  $3 = $savegamedir;
  HEAP32[$vararg_buffer3>>2] = $3;
  (_printf(150761,$vararg_buffer3)|0);
  $4 = $savegamedir;
  STACKTOP = sp;return ($4|0);
 } else {
  $call1 = (___strdup(401520)|0);
  $savegamedir = $call1;
  $4 = $savegamedir;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _M_BindBaseControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(150785,128832);
 _M_BindVariable(150795,128836);
 _M_BindVariable(150804,128840);
 _M_BindVariable(150811,128844);
 _M_BindVariable(150820,128848);
 _M_BindVariable(150835,128852);
 _M_BindVariable(150851,128856);
 _M_BindVariable(150860,128860);
 _M_BindVariable(150868,128864);
 _M_BindVariable(150879,128868);
 _M_BindVariable(150889,398872);
 _M_BindVariable(150901,128872);
 _M_BindVariable(150915,128876);
 _M_BindVariable(150930,398888);
 _M_BindVariable(150940,129092);
 _M_BindVariable(150952,129096);
 _M_BindVariable(150961,129100);
 _M_BindVariable(150972,129120);
 _M_BindVariable(150991,129104);
 _M_BindVariable(151007,129108);
 _M_BindVariable(151024,128880);
 _M_BindVariable(151042,128884);
 _M_BindVariable(151061,128892);
 _M_BindVariable(151072,128888);
 _M_BindVariable(151088,129124);
 _M_BindVariable(151099,128908);
 _M_BindVariable(151109,128904);
 return;
}
function _M_BindWeaponControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(151129,128924);
 _M_BindVariable(151141,128928);
 _M_BindVariable(151153,128932);
 _M_BindVariable(151165,128936);
 _M_BindVariable(151177,128940);
 _M_BindVariable(151189,128944);
 _M_BindVariable(151201,128948);
 _M_BindVariable(151213,128952);
 _M_BindVariable(151225,398876);
 _M_BindVariable(151240,398880);
 _M_BindVariable(151255,129112);
 _M_BindVariable(151271,129116);
 _M_BindVariable(151287,128896);
 _M_BindVariable(151305,128900);
 return;
}
function _M_BindMapControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(151323,128956);
 _M_BindVariable(151337,128960);
 _M_BindVariable(151351,128964);
 _M_BindVariable(151364,128968);
 _M_BindVariable(151377,128972);
 _M_BindVariable(151392,128976);
 _M_BindVariable(151408,128980);
 _M_BindVariable(151423,128984);
 _M_BindVariable(151439,128988);
 _M_BindVariable(151454,128992);
 _M_BindVariable(151467,128996);
 _M_BindVariable(151480,129000);
 return;
}
function _M_BindMenuControls() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _M_BindVariable(151498,129004);
 _M_BindVariable(151516,129008);
 _M_BindVariable(151528,129012);
 _M_BindVariable(151542,129016);
 _M_BindVariable(151556,129020);
 _M_BindVariable(151571,129024);
 _M_BindVariable(151585,129028);
 _M_BindVariable(151602,129032);
 _M_BindVariable(151619,129036);
 _M_BindVariable(151634,129040);
 _M_BindVariable(151648,129044);
 _M_BindVariable(151662,129048);
 _M_BindVariable(151676,129052);
 _M_BindVariable(151692,129056);
 _M_BindVariable(151708,129060);
 _M_BindVariable(151723,129064);
 _M_BindVariable(151740,129068);
 _M_BindVariable(151758,129072);
 _M_BindVariable(151773,129076);
 _M_BindVariable(151787,129080);
 _M_BindVariable(151802,129084);
 _M_BindVariable(151821,129088);
 _M_BindVariable(151840,398884);
 _M_BindVariable(151860,128912);
 _M_BindVariable(151874,128916);
 return;
}
function _M_BindChatControls($num_players) {
 $num_players = $num_players|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $name = 0, $num_players$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $name = sp;
 $num_players$addr = $num_players;
 _M_BindVariable(151882,128920);
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $num_players$addr;
  $cmp = ($0>>>0)<($1>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = $i;
  $add = (($2) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $add;
  (_M_snprintf($name,32,151896,$vararg_buffer)|0);
  $3 = $i;
  $arrayidx = (186848 + ($3<<2)|0);
  _M_BindVariable($name,$arrayidx);
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _M_ApplyPlatformDefaults() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FixedMul($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $b$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 $3 = $b$addr;
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 $6 = (___muldi3(($0|0),($2|0),($3|0),($5|0))|0);
 $7 = (getTempRet0() | 0);
 $8 = (_bitshift64Ashr(($6|0),($7|0),16)|0);
 $9 = (getTempRet0() | 0);
 STACKTOP = sp;return ($8|0);
}
function _FixedDiv($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $b$addr = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $result = 0, $retval = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $result = sp;
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $call = (Math_abs(($0|0))|0);
 $shr = $call >> 14;
 $1 = $b$addr;
 $call1 = (Math_abs(($1|0))|0);
 $cmp = ($shr|0)>=($call1|0);
 $2 = $a$addr;
 if ($cmp) {
  $3 = $b$addr;
  $xor = $2 ^ $3;
  $cmp2 = ($xor|0)<(0);
  $cond = $cmp2 ? -2147483648 : 2147483647;
  $retval = $cond;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 } else {
  $4 = ($2|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_bitshift64Shl(($2|0),($5|0),16)|0);
  $7 = (getTempRet0() | 0);
  $8 = $b$addr;
  $9 = ($8|0)<(0);
  $10 = $9 << 31 >> 31;
  $11 = (___divdi3(($6|0),($7|0),($8|0),($10|0))|0);
  $12 = (getTempRet0() | 0);
  $13 = $result;
  $14 = $13;
  HEAP32[$14>>2] = $11;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  $17 = $result;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $retval = $19;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _M_NewGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $choice$addr = 0, $cmp = 0, $cmp2 = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)==(0);
 $1 = HEAP32[99431]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool | $tobool1;
 if (!($or$cond)) {
  _M_StartMessage(152408,0,0);
  STACKTOP = sp;return;
 }
 $2 = HEAP32[32168]|0;
 $cmp = ($2|0)==(2);
 $3 = HEAP32[32169]|0;
 $cmp2 = ($3|0)==(9);
 $or$cond1 = $cmp | $cmp2;
 if ($or$cond1) {
  _M_SetupNextMenu(129332);
  STACKTOP = sp;return;
 } else {
  _M_SetupNextMenu(129356);
  STACKTOP = sp;return;
 }
}
function _M_Options($choice) {
 $choice = $choice|0;
 var $choice$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 _M_SetupNextMenu(129268);
 STACKTOP = sp;return;
}
function _M_LoadGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $choice$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  _M_StartMessage(152128,0,0);
  STACKTOP = sp;return;
 } else {
  _M_SetupNextMenu(129244);
  _M_ReadSaveStrings();
  STACKTOP = sp;return;
 }
}
function _M_SaveGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $choice$addr = 0, $cmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = HEAP32[99496]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99416]|0;
  $cmp = ($1|0)!=(0);
  if (!($cmp)) {
   _M_SetupNextMenu(129220);
   _M_ReadSaveStrings();
  }
 } else {
  _M_StartMessage(152020,0,0);
 }
 STACKTOP = sp;return;
}
function _M_ReadThis($choice) {
 $choice = $choice|0;
 var $choice$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $choice$addr = 0;
 _M_SetupNextMenu(129148);
 STACKTOP = sp;return;
}
function _M_QuitDOOM($choice) {
 $choice = $choice|0;
 var $call = 0, $choice$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $choice$addr = $choice;
 $call = (_M_SelectEndMessage()|0);
 HEAP32[$vararg_buffer>>2] = $call;
 (_snprintf(186880,160,151936,$vararg_buffer)|0);
 _M_StartMessage(186880,128,1);
 STACKTOP = sp;return;
}
function _M_SelectEndMessage() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $cmp6 = 0, $cond = 0, $cond5 = 0, $endmsg = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99356]|0;
 $cmp = ($0|0)==(4);
 if ($cmp) {
  $cond5 = 0;
 } else {
  $1 = HEAP32[99356]|0;
  $cmp1 = ($1|0)==(5);
  $2 = HEAP32[99356]|0;
  $cond = $cmp1 ? 1 : $2;
  $cond5 = $cond;
 }
 $cmp6 = ($cond5|0)==(0);
 if ($cmp6) {
  $endmsg = 448;
 } else {
  $endmsg = 480;
 }
 $3 = $endmsg;
 $4 = HEAP32[99365]|0;
 $rem = (($4|0) % 8)&-1;
 $arrayidx = (($3) + ($rem<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _M_QuitResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $and = 0, $arrayidx = 0, $arrayidx6 = 0, $cmp = 0, $cmp2 = 0, $key$addr = 0, $shr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $1 = HEAP32[32258]|0;
 $cmp = ($0|0)!=($1|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99433]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  $3 = HEAP32[32168]|0;
  $cmp2 = ($3|0)==(2);
  $4 = HEAP32[99365]|0;
  $shr = $4 >> 2;
  $and = $shr & 7;
  if ($cmp2) {
   $arrayidx = (48272 + ($and<<2)|0);
   $5 = HEAP32[$arrayidx>>2]|0;
   _S_StartSound(0,$5);
  } else {
   $arrayidx6 = (48304 + ($and<<2)|0);
   $6 = HEAP32[$arrayidx6>>2]|0;
   _S_StartSound(0,$6);
  }
  _I_WaitVBL(105);
 }
 _I_Quit();
 STACKTOP = sp;return;
}
function _M_StartMessage($string,$routine,$input) {
 $string = $string|0;
 $routine = $routine|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $input$addr = 0, $routine$addr = 0, $string$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $string$addr = $string;
 $routine$addr = $routine;
 $input$addr = $input;
 $0 = HEAP32[99724]|0;
 HEAP32[99725] = $0;
 HEAP32[99726] = 1;
 $1 = $string$addr;
 HEAP32[99727] = $1;
 $2 = $routine$addr;
 HEAP32[99728] = $2;
 $3 = $input$addr;
 HEAP32[99729] = $3;
 HEAP32[99724] = 1;
 STACKTOP = sp;return;
}
function _M_SetupNextMenu($menudef) {
 $menudef = $menudef|0;
 var $0 = 0, $1 = 0, $2 = 0, $lastOn = 0, $menudef$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $menudef$addr = $menudef;
 $0 = $menudef$addr;
 HEAP32[99730] = $0;
 $1 = HEAP32[99730]|0;
 $lastOn = ((($1)) + 20|0);
 $2 = HEAP16[$lastOn>>1]|0;
 HEAP16[200747] = $2;
 STACKTOP = sp;return;
}
function _M_DrawReadThis1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cmp = 0, $conv = 0, $conv3 = 0, $lumpname = 0, $skullx = 0, $skully = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $lumpname = 151966;
 $skullx = 330;
 $skully = 175;
 HEAP32[99731] = 1;
 $0 = HEAP32[32169]|0;
 L1: do {
  switch ($0|0) {
  case 5: case 4: case 3: case 2: case 1:  {
   $1 = HEAP32[32168]|0;
   $cmp = ($1|0)==(2);
   if ($cmp) {
    $lumpname = 151973;
    $skullx = 330;
    $skully = 165;
    break L1;
   } else {
    $lumpname = 151978;
    $skullx = 280;
    $skully = 185;
    break L1;
   }
   break;
  }
  case 9: case 6:  {
   $lumpname = 151984;
   break;
  }
  case 8: case 7:  {
   $lumpname = 151973;
   break;
  }
  default: {
   _I_Error(151990,$vararg_buffer);
  }
  }
 } while(0);
 $2 = $lumpname;
 $lumpname = $2;
 $3 = $lumpname;
 $call = (_W_CacheLumpName($3,8)|0);
 _V_DrawPatchDirect(0,0,$call);
 $4 = $skullx;
 $conv = $4&65535;
 HEAP16[(129164)>>1] = $conv;
 $5 = $skully;
 $conv3 = $5&65535;
 HEAP16[(129166)>>1] = $conv3;
 STACKTOP = sp;return;
}
function _M_ReadThis2($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $choice$addr = 0, $cmp = 0, $cmp1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = HEAP32[32169]|0;
 $cmp = ($0>>>0)<=(4);
 $1 = HEAP32[32168]|0;
 $cmp1 = ($1|0)!=(2);
 $or$cond = $cmp & $cmp1;
 if ($or$cond) {
  $choice$addr = 0;
  _M_SetupNextMenu(129196);
  STACKTOP = sp;return;
 } else {
  _M_FinishReadThis(0);
  STACKTOP = sp;return;
 }
}
function _M_FinishReadThis($choice) {
 $choice = $choice|0;
 var $choice$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $choice$addr = 0;
 _M_SetupNextMenu(129172);
 STACKTOP = sp;return;
}
function _M_DrawReadThis2() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99731] = 1;
 $call = (_W_CacheLumpName(151984,8)|0);
 _V_DrawPatchDirect(0,0,$call);
 return;
}
function _M_DrawMainMenu() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(152013,8)|0);
 _V_DrawPatchDirect(94,2,$call);
 return;
}
function _M_ReadSaveStrings() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx7 = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp4 = 0, $handle = 0, $i = 0, $inc = 0, $name = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $name = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(6);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $call = (_P_SaveGameFile($1)|0);
  (_M_StringCopy($name,$call,256)|0);
  $call3 = (_fopen($name,159202)|0);
  $handle = $call3;
  $2 = $handle;
  $cmp4 = ($2|0)==(0|0);
  $3 = $i;
  $arrayidx = (187040 + (($3*24)|0)|0);
  if ($cmp4) {
   (_M_StringCopy($arrayidx,152072,24)|0);
   $4 = $i;
   $arrayidx7 = (48400 + (($4*20)|0)|0);
   HEAP16[$arrayidx7>>1] = 0;
  } else {
   $5 = $handle;
   (_fread($arrayidx,1,24,$5)|0);
   $6 = $handle;
   (_fclose($6)|0);
   $7 = $i;
   $arrayidx11 = (48400 + (($7*20)|0)|0);
   HEAP16[$arrayidx11>>1] = 1;
  }
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _M_LoadSelect($choice) {
 $choice = $choice|0;
 var $0 = 0, $call = 0, $choice$addr = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $name = sp;
 $choice$addr = $choice;
 $0 = $choice$addr;
 $call = (_P_SaveGameFile($0)|0);
 (_M_StringCopy($name,$call,256)|0);
 _G_LoadGame($name);
 _M_ClearMenus();
 STACKTOP = sp;return;
}
function _M_ClearMenus() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99724] = 0;
 return;
}
function _M_DrawSave() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add13 = 0, $add5 = 0, $arrayidx = 0;
 var $arrayidx6 = 0, $call = 0, $call8 = 0, $cmp = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv2 = 0, $conv3 = 0, $conv9 = 0, $i = 0, $inc = 0, $mul = 0, $mul12 = 0, $mul4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_W_CacheLumpName(152083,8)|0);
 _V_DrawPatchDirect(72,28,$call);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(6);
  if (!($cmp)) {
   break;
  }
  $1 = HEAP16[(129260)>>1]|0;
  $conv = $1 << 16 >> 16;
  $2 = HEAP16[(129262)>>1]|0;
  $conv1 = $2 << 16 >> 16;
  $3 = $i;
  $mul = $3<<4;
  $add = (($conv1) + ($mul))|0;
  _M_DrawSaveLoadBorder($conv,$add);
  $4 = HEAP16[(129260)>>1]|0;
  $conv2 = $4 << 16 >> 16;
  $5 = HEAP16[(129262)>>1]|0;
  $conv3 = $5 << 16 >> 16;
  $6 = $i;
  $mul4 = $6<<4;
  $add5 = (($conv3) + ($mul4))|0;
  $7 = $i;
  $arrayidx = (187040 + (($7*24)|0)|0);
  _M_WriteText($conv2,$add5,$arrayidx);
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 $9 = HEAP32[99732]|0;
 $tobool = ($9|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[99733]|0;
 $arrayidx6 = (187040 + (($10*24)|0)|0);
 $call8 = (_M_StringWidth($arrayidx6)|0);
 $i = $call8;
 $11 = HEAP16[(129260)>>1]|0;
 $conv9 = $11 << 16 >> 16;
 $12 = $i;
 $add10 = (($conv9) + ($12))|0;
 $13 = HEAP16[(129262)>>1]|0;
 $conv11 = $13 << 16 >> 16;
 $14 = HEAP32[99733]|0;
 $mul12 = $14<<4;
 $add13 = (($conv11) + ($mul12))|0;
 _M_WriteText($add10,$add13,152091);
 STACKTOP = sp;return;
}
function _M_DrawSaveLoadBorder($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add1 = 0, $add3 = 0, $call = 0, $call2 = 0, $call5 = 0, $cmp = 0, $i = 0, $inc = 0, $sub = 0, $x$addr = 0, $y$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = $x$addr;
 $sub = (($0) - 8)|0;
 $1 = $y$addr;
 $add = (($1) + 7)|0;
 $call = (_W_CacheLumpName(152093,8)|0);
 _V_DrawPatchDirect($sub,$add,$call);
 $i = 0;
 while(1) {
  $2 = $i;
  $cmp = ($2|0)<(24);
  $3 = $x$addr;
  $4 = $y$addr;
  $add1 = (($4) + 7)|0;
  if (!($cmp)) {
   break;
  }
  $call2 = (_W_CacheLumpName(152102,8)|0);
  _V_DrawPatchDirect($3,$add1,$call2);
  $5 = $x$addr;
  $add3 = (($5) + 8)|0;
  $x$addr = $add3;
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 $call5 = (_W_CacheLumpName(152111,8)|0);
 _V_DrawPatchDirect($3,$add1,$call5);
 STACKTOP = sp;return;
}
function _M_WriteText($x,$y,$string) {
 $x = $x|0;
 $y = $y|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $add18 = 0, $add9 = 0, $arrayidx = 0, $arrayidx17 = 0, $c = 0, $call = 0, $ch = 0, $cmp = 0, $cmp13 = 0, $cmp4 = 0, $cmp6 = 0, $conv = 0, $conv11 = 0, $cx = 0;
 var $cy = 0, $incdec$ptr = 0, $or$cond = 0, $string$addr = 0, $sub = 0, $tobool = 0, $w = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $string$addr = $string;
 $0 = $string$addr;
 $ch = $0;
 $1 = $x$addr;
 $cx = $1;
 $2 = $y$addr;
 $cy = $2;
 while(1) {
  $3 = $ch;
  $incdec$ptr = ((($3)) + 1|0);
  $ch = $incdec$ptr;
  $4 = HEAP8[$3>>0]|0;
  $conv = $4 << 24 >> 24;
  $c = $conv;
  $5 = $c;
  $tobool = ($5|0)!=(0);
  if (!($tobool)) {
   label = 9;
   break;
  }
  $6 = $c;
  $cmp = ($6|0)==(10);
  if ($cmp) {
   $7 = $x$addr;
   $cx = $7;
   $8 = $cy;
   $add = (($8) + 12)|0;
   $cy = $add;
   continue;
  }
  $9 = $c;
  $call = (_toupper($9)|0);
  $sub = (($call) - 33)|0;
  $c = $sub;
  $10 = $c;
  $cmp4 = ($10|0)<(0);
  $11 = $c;
  $cmp6 = ($11|0)>=(63);
  $or$cond = $cmp4 | $cmp6;
  if ($or$cond) {
   $12 = $cx;
   $add9 = (($12) + 4)|0;
   $cx = $add9;
   continue;
  }
  $13 = $c;
  $arrayidx = (185888 + ($13<<2)|0);
  $14 = HEAP32[$arrayidx>>2]|0;
  $15 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
  $conv11 = $15 << 16 >> 16;
  $w = $conv11;
  $16 = $cx;
  $17 = $w;
  $add12 = (($16) + ($17))|0;
  $cmp13 = ($add12|0)>(320);
  if ($cmp13) {
   label = 9;
   break;
  }
  $18 = $cx;
  $19 = $cy;
  $20 = $c;
  $arrayidx17 = (185888 + ($20<<2)|0);
  $21 = HEAP32[$arrayidx17>>2]|0;
  _V_DrawPatchDirect($18,$19,$21);
  $22 = $w;
  $23 = $cx;
  $add18 = (($23) + ($22))|0;
  $cx = $add18;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _M_StringWidth($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add8 = 0, $arrayidx = 0, $arrayidx6 = 0, $c = 0, $call = 0;
 var $call1 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $conv = 0, $conv7 = 0, $i = 0, $inc = 0, $or$cond = 0, $string$addr = 0, $sub = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $string$addr = $string;
 $w = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $string$addr;
  $call = (_strlen($1)|0);
  $cmp = ($0>>>0)<($call>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = $string$addr;
  $3 = $i;
  $arrayidx = (($2) + ($3)|0);
  $4 = HEAP8[$arrayidx>>0]|0;
  $conv = $4 << 24 >> 24;
  $call1 = (_toupper($conv)|0);
  $sub = (($call1) - 33)|0;
  $c = $sub;
  $5 = $c;
  $cmp2 = ($5|0)<(0);
  $6 = $c;
  $cmp4 = ($6|0)>=(63);
  $or$cond = $cmp2 | $cmp4;
  if ($or$cond) {
   $7 = $w;
   $add = (($7) + 4)|0;
   $w = $add;
  } else {
   $8 = $c;
   $arrayidx6 = (185888 + ($8<<2)|0);
   $9 = HEAP32[$arrayidx6>>2]|0;
   $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
   $conv7 = $10 << 16 >> 16;
   $11 = $w;
   $add8 = (($11) + ($conv7))|0;
   $w = $add8;
  }
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $13 = $w;
 STACKTOP = sp;return ($13|0);
}
function _M_DrawLoad() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add5 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $conv3 = 0, $i = 0, $inc = 0;
 var $mul = 0, $mul4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_W_CacheLumpName(152120,8)|0);
 _V_DrawPatchDirect(72,28,$call);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(6);
  if (!($cmp)) {
   break;
  }
  $1 = HEAP16[(129260)>>1]|0;
  $conv = $1 << 16 >> 16;
  $2 = HEAP16[(129262)>>1]|0;
  $conv1 = $2 << 16 >> 16;
  $3 = $i;
  $mul = $3<<4;
  $add = (($conv1) + ($mul))|0;
  _M_DrawSaveLoadBorder($conv,$add);
  $4 = HEAP16[(129260)>>1]|0;
  $conv2 = $4 << 16 >> 16;
  $5 = HEAP16[(129262)>>1]|0;
  $conv3 = $5 << 16 >> 16;
  $6 = $i;
  $mul4 = $6<<4;
  $add5 = (($conv3) + ($mul4))|0;
  $7 = $i;
  $arrayidx = (187040 + (($7*24)|0)|0);
  _M_WriteText($conv2,$add5,$arrayidx);
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _M_SaveSelect($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $call3 = 0, $call8 = 0, $choice$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 HEAP32[99732] = 1;
 $0 = $choice$addr;
 HEAP32[99733] = $0;
 $1 = $choice$addr;
 $arrayidx = (187040 + (($1*24)|0)|0);
 (_M_StringCopy(187280,$arrayidx,24)|0);
 $2 = $choice$addr;
 $arrayidx1 = (187040 + (($2*24)|0)|0);
 $call3 = (_strcmp($arrayidx1,152072)|0);
 $tobool = ($call3|0)!=(0);
 if (!($tobool)) {
  $3 = $choice$addr;
  $arrayidx4 = (187040 + (($3*24)|0)|0);
  HEAP8[$arrayidx4>>0] = 0;
 }
 $4 = $choice$addr;
 $arrayidx6 = (187040 + (($4*24)|0)|0);
 $call8 = (_strlen($arrayidx6)|0);
 HEAP32[99734] = $call8;
 STACKTOP = sp;return;
}
function _M_DrawOptions() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $add15 = 0, $add2 = 0, $add5 = 0, $add7 = 0;
 var $arrayidx = 0, $arrayidx8 = 0, $call = 0, $call3 = 0, $call9 = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv11 = 0, $conv13 = 0, $conv14 = 0, $conv4 = 0, $conv6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(152181,8)|0);
 _V_DrawPatchDirect(108,15,$call);
 $0 = HEAP16[(129284)>>1]|0;
 $conv = $0 << 16 >> 16;
 $add = (($conv) + 175)|0;
 $1 = HEAP16[(129286)>>1]|0;
 $conv1 = $1 << 16 >> 16;
 $add2 = (($conv1) + 32)|0;
 $2 = HEAP32[99723]|0;
 $arrayidx = (129292 + ($2<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $call3 = (_W_CacheLumpName($3,8)|0);
 _V_DrawPatchDirect($add,$add2,$call3);
 $4 = HEAP16[(129284)>>1]|0;
 $conv4 = $4 << 16 >> 16;
 $add5 = (($conv4) + 120)|0;
 $5 = HEAP16[(129286)>>1]|0;
 $conv6 = $5 << 16 >> 16;
 $add7 = (($conv6) + 16)|0;
 $6 = HEAP32[32283]|0;
 $arrayidx8 = (129300 + ($6<<2)|0);
 $7 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_W_CacheLumpName($7,8)|0);
 _V_DrawPatchDirect($add5,$add7,$call9);
 $8 = HEAP16[(129284)>>1]|0;
 $conv10 = $8 << 16 >> 16;
 $9 = HEAP16[(129286)>>1]|0;
 $conv11 = $9 << 16 >> 16;
 $add12 = (($conv11) + 96)|0;
 $10 = HEAP32[32282]|0;
 _M_DrawThermo($conv10,$add12,10,$10);
 $11 = HEAP16[(129284)>>1]|0;
 $conv13 = $11 << 16 >> 16;
 $12 = HEAP16[(129286)>>1]|0;
 $conv14 = $12 << 16 >> 16;
 $add15 = (($conv14) + 64)|0;
 $13 = HEAP32[99735]|0;
 _M_DrawThermo($conv13,$add15,9,$13);
 return;
}
function _M_DrawThermo($x,$y,$thermWidth,$thermDot) {
 $x = $x|0;
 $y = $y|0;
 $thermWidth = $thermWidth|0;
 $thermDot = $thermDot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add2 = 0, $add4 = 0, $add5 = 0, $call = 0, $call1 = 0, $call3 = 0;
 var $call6 = 0, $cmp = 0, $i = 0, $inc = 0, $mul = 0, $thermDot$addr = 0, $thermWidth$addr = 0, $x$addr = 0, $xx = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $thermWidth$addr = $thermWidth;
 $thermDot$addr = $thermDot;
 $0 = $x$addr;
 $xx = $0;
 $1 = $xx;
 $2 = $y$addr;
 $call = (_W_CacheLumpName(152190,8)|0);
 _V_DrawPatchDirect($1,$2,$call);
 $3 = $xx;
 $add = (($3) + 8)|0;
 $xx = $add;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $thermWidth$addr;
  $cmp = ($4|0)<($5|0);
  $6 = $xx;
  $7 = $y$addr;
  if (!($cmp)) {
   break;
  }
  $call1 = (_W_CacheLumpName(152199,8)|0);
  _V_DrawPatchDirect($6,$7,$call1);
  $8 = $xx;
  $add2 = (($8) + 8)|0;
  $xx = $add2;
  $9 = $i;
  $inc = (($9) + 1)|0;
  $i = $inc;
 }
 $call3 = (_W_CacheLumpName(152208,8)|0);
 _V_DrawPatchDirect($6,$7,$call3);
 $10 = $x$addr;
 $add4 = (($10) + 8)|0;
 $11 = $thermDot$addr;
 $mul = $11<<3;
 $add5 = (($add4) + ($mul))|0;
 $12 = $y$addr;
 $call6 = (_W_CacheLumpName(152217,8)|0);
 _V_DrawPatchDirect($add5,$12,$call6);
 STACKTOP = sp;return;
}
function _M_EndGame($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $choice$addr = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $choice$addr = 0;
 $0 = HEAP32[99496]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  _S_StartSound(0,34);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99433]|0;
 $tobool1 = ($1|0)!=(0);
 if ($tobool1) {
  _M_StartMessage(152315,0,0);
  STACKTOP = sp;return;
 } else {
  _M_StartMessage(152354,129,1);
  STACKTOP = sp;return;
 }
}
function _M_ChangeMessages($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx1 = 0, $choice$addr = 0, $message2 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $choice$addr = 0;
 $0 = HEAP32[32283]|0;
 $sub = (1 - ($0))|0;
 HEAP32[32283] = $sub;
 $1 = HEAP32[32283]|0;
 $tobool = ($1|0)!=(0);
 $2 = HEAP32[99415]|0;
 $arrayidx1 = (183056 + (($2*288)|0)|0);
 $message2 = ((($arrayidx1)) + 224|0);
 if ($tobool) {
  HEAP32[$message2>>2] = 152303;
  HEAP32[99519] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[$message2>>2] = 152290;
  HEAP32[99519] = 1;
  STACKTOP = sp;return;
 }
}
function _M_ChangeDetail($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx1 = 0, $choice$addr = 0, $message2 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $choice$addr = 0;
 $0 = HEAP32[99723]|0;
 $sub = (1 - ($0))|0;
 HEAP32[99723] = $sub;
 $1 = HEAP32[32284]|0;
 $2 = HEAP32[99723]|0;
 _R_SetViewSize($1,$2);
 $3 = HEAP32[99723]|0;
 $tobool = ($3|0)!=(0);
 $4 = HEAP32[99415]|0;
 $arrayidx1 = (183056 + (($4*288)|0)|0);
 $message2 = ((($arrayidx1)) + 224|0);
 if ($tobool) {
  HEAP32[$message2>>2] = 152279;
  STACKTOP = sp;return;
 } else {
  HEAP32[$message2>>2] = 152267;
  STACKTOP = sp;return;
 }
}
function _M_SizeDisplay($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $choice$addr = 0, $cmp = 0, $cmp3 = 0, $dec = 0, $dec1 = 0, $inc = 0, $inc5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = $choice$addr;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[99735]|0;
  $cmp = ($1|0)>(0);
  if ($cmp) {
   $2 = HEAP32[32284]|0;
   $dec = (($2) + -1)|0;
   HEAP32[32284] = $dec;
   $3 = HEAP32[99735]|0;
   $dec1 = (($3) + -1)|0;
   HEAP32[99735] = $dec1;
  }
  break;
 }
 case 1:  {
  $4 = HEAP32[99735]|0;
  $cmp3 = ($4|0)<(8);
  if ($cmp3) {
   $5 = HEAP32[32284]|0;
   $inc = (($5) + 1)|0;
   HEAP32[32284] = $inc;
   $6 = HEAP32[99735]|0;
   $inc5 = (($6) + 1)|0;
   HEAP32[99735] = $inc5;
  }
  break;
 }
 default: {
 }
 }
 $7 = HEAP32[32284]|0;
 $8 = HEAP32[99723]|0;
 _R_SetViewSize($7,$8);
 STACKTOP = sp;return;
}
function _M_ChangeSensitivity($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $choice$addr = 0, $cmp = 0, $dec = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = $choice$addr;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[32282]|0;
  $tobool = ($1|0)!=(0);
  if ($tobool) {
   $2 = HEAP32[32282]|0;
   $dec = (($2) + -1)|0;
   HEAP32[32282] = $dec;
  }
  break;
 }
 case 1:  {
  $3 = HEAP32[32282]|0;
  $cmp = ($3|0)<(9);
  if ($cmp) {
   $4 = HEAP32[32282]|0;
   $inc = (($4) + 1)|0;
   HEAP32[32282] = $inc;
  }
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _M_Sound($choice) {
 $choice = $choice|0;
 var $choice$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 _M_SetupNextMenu(129308);
 STACKTOP = sp;return;
}
function _M_DrawSound() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add4 = 0, $call = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $conv3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(152260,8)|0);
 _V_DrawPatchDirect(60,38,$call);
 $0 = HEAP16[(129324)>>1]|0;
 $conv = $0 << 16 >> 16;
 $1 = HEAP16[(129326)>>1]|0;
 $conv1 = $1 << 16 >> 16;
 $add = (($conv1) + 16)|0;
 $2 = HEAP32[32469]|0;
 _M_DrawThermo($conv,$add,16,$2);
 $3 = HEAP16[(129324)>>1]|0;
 $conv2 = $3 << 16 >> 16;
 $4 = HEAP16[(129326)>>1]|0;
 $conv3 = $4 << 16 >> 16;
 $add4 = (($conv3) + 48)|0;
 $5 = HEAP32[32470]|0;
 _M_DrawThermo($conv2,$add4,16,$5);
 return;
}
function _M_SfxVol($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $choice$addr = 0, $cmp = 0, $dec = 0, $inc = 0, $mul = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = $choice$addr;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[32469]|0;
  $tobool = ($1|0)!=(0);
  if ($tobool) {
   $2 = HEAP32[32469]|0;
   $dec = (($2) + -1)|0;
   HEAP32[32469] = $dec;
  }
  break;
 }
 case 1:  {
  $3 = HEAP32[32469]|0;
  $cmp = ($3|0)<(15);
  if ($cmp) {
   $4 = HEAP32[32469]|0;
   $inc = (($4) + 1)|0;
   HEAP32[32469] = $inc;
  }
  break;
 }
 default: {
 }
 }
 $5 = HEAP32[32469]|0;
 $mul = $5<<3;
 _S_SetSfxVolume($mul);
 STACKTOP = sp;return;
}
function _M_MusicVol($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $choice$addr = 0, $cmp = 0, $dec = 0, $inc = 0, $mul = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = $choice$addr;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[32470]|0;
  $tobool = ($1|0)!=(0);
  if ($tobool) {
   $2 = HEAP32[32470]|0;
   $dec = (($2) + -1)|0;
   HEAP32[32470] = $dec;
  }
  break;
 }
 case 1:  {
  $3 = HEAP32[32470]|0;
  $cmp = ($3|0)<(15);
  if ($cmp) {
   $4 = HEAP32[32470]|0;
   $inc = (($4) + 1)|0;
   HEAP32[32470] = $inc;
  }
  break;
 }
 default: {
 }
 }
 $5 = HEAP32[32470]|0;
 $mul = $5<<3;
 _S_SetMusicVolume($mul);
 STACKTOP = sp;return;
}
function _M_EndGameResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $key$addr = 0, $lastOn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $1 = HEAP32[32258]|0;
 $cmp = ($0|0)!=($1|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP16[200747]|0;
 $3 = HEAP32[99730]|0;
 $lastOn = ((($3)) + 20|0);
 HEAP16[$lastOn>>1] = $2;
 _M_ClearMenus();
 _D_StartTitle();
 STACKTOP = sp;return;
}
function _M_DrawEpisode() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(152474,8)|0);
 _V_DrawPatchDirect(54,38,$call);
 return;
}
function _M_Episode($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $choice$addr = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $choice$addr = $choice;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(0);
 $1 = $choice$addr;
 $tobool = ($1|0)!=(0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  _M_StartMessage(152483,0,0);
  _M_SetupNextMenu(129148);
  STACKTOP = sp;return;
 }
 $2 = HEAP32[32168]|0;
 $cmp1 = ($2|0)==(1);
 $3 = $choice$addr;
 $cmp3 = ($3|0)>(2);
 $or$cond1 = $cmp1 & $cmp3;
 if ($or$cond1) {
  $4 = HEAP32[32479]|0;
  (_fprintf($4,152575,$vararg_buffer)|0);
  $choice$addr = 0;
 }
 $5 = $choice$addr;
 HEAP32[99736] = $5;
 _M_SetupNextMenu(129332);
 STACKTOP = sp;return;
}
function _M_DrawNewGame() {
 var $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(152621,8)|0);
 _V_DrawPatchDirect(96,14,$call);
 $call1 = (_W_CacheLumpName(152628,8)|0);
 _V_DrawPatchDirect(54,38,$call1);
 return;
}
function _M_ChooseSkill($choice) {
 $choice = $choice|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $choice$addr = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $choice$addr = $choice;
 $0 = $choice$addr;
 $cmp = ($0|0)==(4);
 if ($cmp) {
  _M_StartMessage(152636,130,1);
  STACKTOP = sp;return;
 } else {
  $1 = $choice$addr;
  $2 = HEAP32[99736]|0;
  $add = (($2) + 1)|0;
  _G_DeferedInitNew($1,$add,1);
  _M_ClearMenus();
  STACKTOP = sp;return;
 }
}
function _M_VerifyNightmare($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $key$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $1 = HEAP32[32258]|0;
 $cmp = ($0|0)!=($1|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99736]|0;
 $add = (($2) + 1)|0;
 _G_DeferedInitNew(4,$add,1);
 _M_ClearMenus();
 STACKTOP = sp;return;
}
function _M_DoSave($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $slot$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $slot$addr = $slot;
 $0 = $slot$addr;
 $1 = $slot$addr;
 $arrayidx = (187040 + (($1*24)|0)|0);
 _G_SaveGame($0,$arrayidx);
 _M_ClearMenus();
 $2 = HEAP32[99737]|0;
 $cmp = ($2|0)==(-2);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $3 = $slot$addr;
 HEAP32[99737] = $3;
 STACKTOP = sp;return;
}
function _M_QuickSaveResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $key$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $1 = HEAP32[32258]|0;
 $cmp = ($0|0)==($1|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99737]|0;
 _M_DoSave($2);
 _S_StartSound(0,24);
 STACKTOP = sp;return;
}
function _M_QuickSave() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $cmp3 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99496]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  _S_StartSound(0,34);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99416]|0;
 $cmp = ($1|0)!=(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99737]|0;
 $cmp3 = ($2|0)<(0);
 if ($cmp3) {
  _M_StartControlPanel();
  _M_ReadSaveStrings();
  _M_SetupNextMenu(129220);
  HEAP32[99737] = -2;
  STACKTOP = sp;return;
 } else {
  $3 = HEAP32[99737]|0;
  $arrayidx = (187040 + (($3*24)|0)|0);
  HEAP32[$vararg_buffer>>2] = $arrayidx;
  (_snprintf(187312,80,152708,$vararg_buffer)|0);
  _M_StartMessage(187312,131,1);
  STACKTOP = sp;return;
 }
}
function _M_StartControlPanel() {
 var $0 = 0, $1 = 0, $2 = 0, $lastOn = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99724]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  return;
 }
 HEAP32[99724] = 1;
 HEAP32[99730] = 129172;
 $1 = HEAP32[99730]|0;
 $lastOn = ((($1)) + 20|0);
 $2 = HEAP16[$lastOn>>1]|0;
 HEAP16[200747] = $2;
 return;
}
function _M_QuickLoadResponse($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $key$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $1 = HEAP32[32258]|0;
 $cmp = ($0|0)==($1|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99737]|0;
 _M_LoadSelect($2);
 _S_StartSound(0,24);
 STACKTOP = sp;return;
}
function _M_QuickLoad() {
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $cmp = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  _M_StartMessage(152761,0,0);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99737]|0;
 $cmp = ($1|0)<(0);
 if ($cmp) {
  _M_StartMessage(152813,0,0);
  STACKTOP = sp;return;
 } else {
  $2 = HEAP32[99737]|0;
  $arrayidx = (187040 + (($2*24)|0)|0);
  HEAP32[$vararg_buffer>>2] = $arrayidx;
  (_snprintf(187312,80,152868,$vararg_buffer)|0);
  _M_StartMessage(187312,132,1);
  STACKTOP = sp;return;
 }
}
function _M_StringHeight($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp4 = 0, $conv = 0, $conv3 = 0, $h = 0;
 var $height = 0, $height1 = 0, $i = 0, $inc = 0, $string$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $string$addr = $string;
 $0 = HEAP32[46472]|0;
 $height1 = ((($0)) + 2|0);
 $1 = HEAPU8[$height1>>0]|(HEAPU8[$height1+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $height = $conv;
 $2 = $height;
 $h = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $string$addr;
  $call = (_strlen($4)|0);
  $cmp = ($3>>>0)<($call>>>0);
  if (!($cmp)) {
   break;
  }
  $5 = $string$addr;
  $6 = $i;
  $arrayidx = (($5) + ($6)|0);
  $7 = HEAP8[$arrayidx>>0]|0;
  $conv3 = $7 << 24 >> 24;
  $cmp4 = ($conv3|0)==(10);
  if ($cmp4) {
   $8 = $height;
   $9 = $h;
   $add = (($9) + ($8))|0;
   $h = $add;
  }
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 $11 = $h;
 STACKTOP = sp;return ($11|0);
}
function _M_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $add = 0, $add102 = 0, $add106 = 0, $add107 = 0, $add115 = 0, $add122 = 0, $add317 = 0, $add33 = 0, $add39 = 0, $add45 = 0, $add458 = 0, $add52 = 0, $add59 = 0, $add68 = 0, $add78 = 0, $add82 = 0, $add85 = 0;
 var $add89 = 0, $add90 = 0, $add94 = 0, $add99 = 0, $alphaKey = 0, $alphaKey479 = 0, $and = 0, $and111 = 0, $and118 = 0, $and55 = 0, $and64 = 0, $arrayidx = 0, $arrayidx140 = 0, $arrayidx143 = 0, $arrayidx146 = 0, $arrayidx170 = 0, $arrayidx175 = 0, $arrayidx176 = 0, $arrayidx177 = 0, $arrayidx178 = 0;
 var $arrayidx288 = 0, $arrayidx290 = 0, $arrayidx326 = 0, $arrayidx347 = 0, $arrayidx359 = 0, $arrayidx364 = 0, $arrayidx372 = 0, $arrayidx381 = 0, $arrayidx387 = 0, $arrayidx395 = 0, $arrayidx404 = 0, $arrayidx410 = 0, $arrayidx417 = 0, $arrayidx425 = 0, $arrayidx464 = 0, $arrayidx478 = 0, $call = 0, $call105 = 0, $call114 = 0, $call121 = 0;
 var $call154 = 0, $call172 = 0, $call27 = 0, $call291 = 0, $call32 = 0, $call38 = 0, $call44 = 0, $call454 = 0, $call51 = 0, $call58 = 0, $call67 = 0, $call74 = 0, $call81 = 0, $call88 = 0, $call98 = 0, $ch = 0, $cmp = 0, $cmp103 = 0, $cmp126 = 0, $cmp133 = 0;
 var $cmp138 = 0, $cmp155 = 0, $cmp158 = 0, $cmp16 = 0, $cmp161 = 0, $cmp164 = 0, $cmp166 = 0, $cmp168 = 0, $cmp173 = 0, $cmp185 = 0, $cmp188 = 0, $cmp191 = 0, $cmp194 = 0, $cmp2 = 0, $cmp205 = 0, $cmp208 = 0, $cmp21 = 0, $cmp211 = 0, $cmp217 = 0, $cmp226 = 0;
 var $cmp23 = 0, $cmp235 = 0, $cmp238 = 0, $cmp244 = 0, $cmp248 = 0, $cmp25 = 0, $cmp252 = 0, $cmp256 = 0, $cmp260 = 0, $cmp264 = 0, $cmp268 = 0, $cmp272 = 0, $cmp276 = 0, $cmp280 = 0, $cmp284 = 0, $cmp3 = 0, $cmp30 = 0, $cmp308 = 0, $cmp313 = 0, $cmp320 = 0;
 var $cmp328 = 0, $cmp331 = 0, $cmp350 = 0, $cmp354 = 0, $cmp36 = 0, $cmp367 = 0, $cmp376 = 0, $cmp390 = 0, $cmp399 = 0, $cmp42 = 0, $cmp420 = 0, $cmp436 = 0, $cmp441 = 0, $cmp451 = 0, $cmp461 = 0, $cmp466 = 0, $cmp474 = 0, $cmp481 = 0, $cmp6 = 0, $cmp61 = 0;
 var $cmp65 = 0, $cmp72 = 0, $cmp75 = 0, $cmp79 = 0, $cmp86 = 0, $cmp96 = 0, $conv = 0, $conv316 = 0, $conv318 = 0, $conv327 = 0, $conv338 = 0, $conv340 = 0, $conv349 = 0, $conv366 = 0, $conv389 = 0, $conv412 = 0, $conv419 = 0, $conv432 = 0, $conv457 = 0, $conv460 = 0;
 var $conv465 = 0, $conv469 = 0, $conv473 = 0, $conv480 = 0, $conv484 = 0, $data1 = 0, $data1110 = 0, $data1117 = 0, $data1128 = 0, $data148 = 0, $data15 = 0, $data154 = 0, $data163 = 0, $data2 = 0, $data2129 = 0, $data241 = 0, $data293 = 0, $data3 = 0, $data329 = 0, $data377 = 0;
 var $dec = 0, $dec342 = 0, $ev$addr = 0, $i = 0, $idxprom = 0, $idxprom346 = 0, $idxprom358 = 0, $idxprom363 = 0, $idxprom371 = 0, $idxprom380 = 0, $idxprom386 = 0, $idxprom394 = 0, $idxprom403 = 0, $idxprom409 = 0, $idxprom416 = 0, $idxprom424 = 0, $inc = 0, $inc283 = 0, $inc324 = 0, $inc471 = 0;
 var $inc487 = 0, $key = 0, $lastOn = 0, $lastOn439 = 0, $lastOn444 = 0, $lastOn448 = 0, $menuitems = 0, $menuitems345 = 0, $menuitems357 = 0, $menuitems362 = 0, $menuitems370 = 0, $menuitems379 = 0, $menuitems385 = 0, $menuitems393 = 0, $menuitems402 = 0, $menuitems408 = 0, $menuitems415 = 0, $menuitems423 = 0, $menuitems463 = 0, $menuitems477 = 0;
 var $message = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $prevMenu = 0, $prevMenu447 = 0, $retval = 0, $routine = 0, $routine373 = 0, $routine382 = 0, $routine396 = 0, $routine405 = 0, $routine426 = 0, $shl = 0, $spec$store$select = 0, $sub = 0;
 var $sub100 = 0, $sub157 = 0, $sub160 = 0, $sub319 = 0, $sub339 = 0, $sub83 = 0, $sub95 = 0, $tobool = 0, $tobool112 = 0, $tobool119 = 0, $tobool12 = 0, $tobool136 = 0, $tobool14 = 0, $tobool148 = 0, $tobool151 = 0, $tobool181 = 0, $tobool183 = 0, $tobool199 = 0, $tobool203 = 0, $tobool215 = 0;
 var $tobool220 = 0, $tobool222 = 0, $tobool229 = 0, $tobool231 = 0, $tobool306 = 0, $tobool335 = 0, $tobool360 = 0, $tobool383 = 0, $tobool406 = 0, $tobool413 = 0, $tobool445 = 0, $tobool455 = 0, $tobool49 = 0, $tobool56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ev$addr = $ev;
 $0 = HEAP32[99414]|0;
 $tobool = ($0|0)!=(0);
 $1 = $ev$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)==(4);
 if ($tobool) {
  do {
   if (!($cmp)) {
    $3 = $ev$addr;
    $4 = HEAP32[$3>>2]|0;
    $cmp2 = ($4|0)==(0);
    if ($cmp2) {
     $5 = $ev$addr;
     $data1 = ((($5)) + 4|0);
     $6 = HEAP32[$data1>>2]|0;
     $7 = HEAP32[32251]|0;
     $cmp3 = ($6|0)==($7|0);
     if ($cmp3) {
      break;
     }
     $8 = $ev$addr;
     $data15 = ((($8)) + 4|0);
     $9 = HEAP32[$data15>>2]|0;
     $10 = HEAP32[32269]|0;
     $cmp6 = ($9|0)==($10|0);
     if ($cmp6) {
      break;
     }
    }
    $retval = 0;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
  } while(0);
  _I_Quit();
  $retval = 1;
  $262 = $retval;
  STACKTOP = sp;return ($262|0);
 }
 if ($cmp) {
  $11 = HEAP32[99724]|0;
  $tobool12 = ($11|0)!=(0);
  $12 = HEAP32[99726]|0;
  $tobool14 = ($12|0)!=(0);
  $or$cond = $tobool12 & $tobool14;
  $13 = HEAP32[99728]|0;
  $cmp16 = ($13|0)==(128|0);
  $or$cond1 = $or$cond & $cmp16;
  if ($or$cond1) {
   $14 = HEAP32[32258]|0;
   _M_QuitResponse($14);
  } else {
   _S_StartSound(0,23);
   _M_QuitDOOM(0);
  }
  $retval = 1;
  $262 = $retval;
  STACKTOP = sp;return ($262|0);
 }
 $ch = 0;
 $key = -1;
 $15 = $ev$addr;
 $16 = HEAP32[$15>>2]|0;
 $cmp21 = ($16|0)==(3);
 if ($cmp21) {
  $17 = HEAP32[99738]|0;
  $call = (_I_GetTime()|0);
  $cmp23 = ($17|0)<($call|0);
  if ($cmp23) {
   $18 = $ev$addr;
   $data3 = ((($18)) + 12|0);
   $19 = HEAP32[$data3>>2]|0;
   $cmp25 = ($19|0)<(0);
   if ($cmp25) {
    $20 = HEAP32[32252]|0;
    $key = $20;
    $call27 = (_I_GetTime()|0);
    $add = (($call27) + 5)|0;
    HEAP32[99738] = $add;
   } else {
    $21 = $ev$addr;
    $data329 = ((($21)) + 12|0);
    $22 = HEAP32[$data329>>2]|0;
    $cmp30 = ($22|0)>(0);
    if ($cmp30) {
     $23 = HEAP32[32253]|0;
     $key = $23;
     $call32 = (_I_GetTime()|0);
     $add33 = (($call32) + 5)|0;
     HEAP32[99738] = $add33;
    }
   }
   $24 = $ev$addr;
   $data2 = ((($24)) + 8|0);
   $25 = HEAP32[$data2>>2]|0;
   $cmp36 = ($25|0)<(0);
   if ($cmp36) {
    $26 = HEAP32[32254]|0;
    $key = $26;
    $call38 = (_I_GetTime()|0);
    $add39 = (($call38) + 2)|0;
    HEAP32[99738] = $add39;
   } else {
    $27 = $ev$addr;
    $data241 = ((($27)) + 8|0);
    $28 = HEAP32[$data241>>2]|0;
    $cmp42 = ($28|0)>(0);
    if ($cmp42) {
     $29 = HEAP32[32255]|0;
     $key = $29;
     $call44 = (_I_GetTime()|0);
     $add45 = (($call44) + 2)|0;
     HEAP32[99738] = $add45;
    }
   }
   $30 = $ev$addr;
   $data148 = ((($30)) + 4|0);
   $31 = HEAP32[$data148>>2]|0;
   $and = $31 & 1;
   $tobool49 = ($and|0)!=(0);
   if ($tobool49) {
    $32 = HEAP32[32257]|0;
    $key = $32;
    $call51 = (_I_GetTime()|0);
    $add52 = (($call51) + 5)|0;
    HEAP32[99738] = $add52;
   }
   $33 = $ev$addr;
   $data154 = ((($33)) + 4|0);
   $34 = HEAP32[$data154>>2]|0;
   $and55 = $34 & 2;
   $tobool56 = ($and55|0)!=(0);
   if ($tobool56) {
    $35 = HEAP32[32256]|0;
    $key = $35;
    $call58 = (_I_GetTime()|0);
    $add59 = (($call58) + 5)|0;
    HEAP32[99738] = $add59;
   }
   $36 = HEAP32[32280]|0;
   $cmp61 = ($36|0)>=(0);
   if ($cmp61) {
    $37 = $ev$addr;
    $data163 = ((($37)) + 4|0);
    $38 = HEAP32[$data163>>2]|0;
    $39 = HEAP32[32280]|0;
    $shl = 1 << $39;
    $and64 = $38 & $shl;
    $cmp65 = ($and64|0)!=(0);
    if ($cmp65) {
     $40 = HEAP32[32251]|0;
     $key = $40;
     $call67 = (_I_GetTime()|0);
     $add68 = (($call67) + 5)|0;
     HEAP32[99738] = $add68;
    }
   }
  } else {
   label = 30;
  }
 } else {
  label = 30;
 }
 do {
  if ((label|0) == 30) {
   $41 = $ev$addr;
   $42 = HEAP32[$41>>2]|0;
   $cmp72 = ($42|0)==(2);
   if ($cmp72) {
    $43 = HEAP32[99739]|0;
    $call74 = (_I_GetTime()|0);
    $cmp75 = ($43|0)<($call74|0);
    if ($cmp75) {
     $44 = $ev$addr;
     $data377 = ((($44)) + 12|0);
     $45 = HEAP32[$data377>>2]|0;
     $46 = HEAP32[99740]|0;
     $add78 = (($46) + ($45))|0;
     HEAP32[99740] = $add78;
     $47 = HEAP32[99740]|0;
     $48 = HEAP32[99741]|0;
     $sub = (($48) - 30)|0;
     $cmp79 = ($47|0)<($sub|0);
     if ($cmp79) {
      $49 = HEAP32[32253]|0;
      $key = $49;
      $call81 = (_I_GetTime()|0);
      $add82 = (($call81) + 5)|0;
      HEAP32[99739] = $add82;
      $50 = HEAP32[99741]|0;
      $sub83 = (($50) - 30)|0;
      HEAP32[99741] = $sub83;
      HEAP32[99740] = $sub83;
     } else {
      $51 = HEAP32[99740]|0;
      $52 = HEAP32[99741]|0;
      $add85 = (($52) + 30)|0;
      $cmp86 = ($51|0)>($add85|0);
      if ($cmp86) {
       $53 = HEAP32[32252]|0;
       $key = $53;
       $call88 = (_I_GetTime()|0);
       $add89 = (($call88) + 5)|0;
       HEAP32[99739] = $add89;
       $54 = HEAP32[99741]|0;
       $add90 = (($54) + 30)|0;
       HEAP32[99741] = $add90;
       HEAP32[99740] = $add90;
      }
     }
     $55 = $ev$addr;
     $data293 = ((($55)) + 8|0);
     $56 = HEAP32[$data293>>2]|0;
     $57 = HEAP32[99742]|0;
     $add94 = (($57) + ($56))|0;
     HEAP32[99742] = $add94;
     $58 = HEAP32[99742]|0;
     $59 = HEAP32[99743]|0;
     $sub95 = (($59) - 30)|0;
     $cmp96 = ($58|0)<($sub95|0);
     if ($cmp96) {
      $60 = HEAP32[32254]|0;
      $key = $60;
      $call98 = (_I_GetTime()|0);
      $add99 = (($call98) + 5)|0;
      HEAP32[99739] = $add99;
      $61 = HEAP32[99743]|0;
      $sub100 = (($61) - 30)|0;
      HEAP32[99743] = $sub100;
      HEAP32[99742] = $sub100;
     } else {
      $62 = HEAP32[99742]|0;
      $63 = HEAP32[99743]|0;
      $add102 = (($63) + 30)|0;
      $cmp103 = ($62|0)>($add102|0);
      if ($cmp103) {
       $64 = HEAP32[32255]|0;
       $key = $64;
       $call105 = (_I_GetTime()|0);
       $add106 = (($call105) + 5)|0;
       HEAP32[99739] = $add106;
       $65 = HEAP32[99743]|0;
       $add107 = (($65) + 30)|0;
       HEAP32[99743] = $add107;
       HEAP32[99742] = $add107;
      }
     }
     $66 = $ev$addr;
     $data1110 = ((($66)) + 4|0);
     $67 = HEAP32[$data1110>>2]|0;
     $and111 = $67 & 1;
     $tobool112 = ($and111|0)!=(0);
     if ($tobool112) {
      $68 = HEAP32[32257]|0;
      $key = $68;
      $call114 = (_I_GetTime()|0);
      $add115 = (($call114) + 15)|0;
      HEAP32[99739] = $add115;
     }
     $69 = $ev$addr;
     $data1117 = ((($69)) + 4|0);
     $70 = HEAP32[$data1117>>2]|0;
     $and118 = $70 & 2;
     $tobool119 = ($and118|0)!=(0);
     if (!($tobool119)) {
      break;
     }
     $71 = HEAP32[32256]|0;
     $key = $71;
     $call121 = (_I_GetTime()|0);
     $add122 = (($call121) + 15)|0;
     HEAP32[99739] = $add122;
     break;
    }
   }
   $72 = $ev$addr;
   $73 = HEAP32[$72>>2]|0;
   $cmp126 = ($73|0)==(0);
   if ($cmp126) {
    $74 = $ev$addr;
    $data1128 = ((($74)) + 4|0);
    $75 = HEAP32[$data1128>>2]|0;
    $key = $75;
    $76 = $ev$addr;
    $data2129 = ((($76)) + 8|0);
    $77 = HEAP32[$data2129>>2]|0;
    $ch = $77;
   }
  }
 } while(0);
 $78 = $key;
 $cmp133 = ($78|0)==(-1);
 if ($cmp133) {
  $retval = 0;
  $262 = $retval;
  STACKTOP = sp;return ($262|0);
 }
 $79 = HEAP32[99732]|0;
 $tobool136 = ($79|0)!=(0);
 if ($tobool136) {
  $80 = $key;
  L70: do {
   switch ($80|0) {
   case 127:  {
    $81 = HEAP32[99734]|0;
    $cmp138 = ($81|0)>(0);
    if ($cmp138) {
     $82 = HEAP32[99734]|0;
     $dec = (($82) + -1)|0;
     HEAP32[99734] = $dec;
     $83 = HEAP32[99733]|0;
     $arrayidx = (187040 + (($83*24)|0)|0);
     $84 = HEAP32[99734]|0;
     $arrayidx140 = (($arrayidx) + ($84)|0);
     HEAP8[$arrayidx140>>0] = 0;
    }
    break;
   }
   case 27:  {
    HEAP32[99732] = 0;
    $85 = HEAP32[99733]|0;
    $arrayidx143 = (187040 + (($85*24)|0)|0);
    (_M_StringCopy($arrayidx143,187280,24)|0);
    break;
   }
   case 13:  {
    HEAP32[99732] = 0;
    $86 = HEAP32[99733]|0;
    $arrayidx146 = (187040 + (($86*24)|0)|0);
    $87 = HEAP8[$arrayidx146>>0]|0;
    $tobool148 = ($87<<24>>24)!=(0);
    if ($tobool148) {
     $88 = HEAP32[99733]|0;
     _M_DoSave($88);
    }
    break;
   }
   default: {
    $tobool151 = (1)!=(0);
    if ($tobool151) {
     $89 = $key;
     $ch = $89;
    }
    $90 = $ch;
    $call154 = (_toupper($90)|0);
    $ch = $call154;
    $91 = $ch;
    $cmp155 = ($91|0)!=(32);
    if ($cmp155) {
     $92 = $ch;
     $sub157 = (($92) - 33)|0;
     $cmp158 = ($sub157|0)<(0);
     if ($cmp158) {
      break L70;
     }
     $93 = $ch;
     $sub160 = (($93) - 33)|0;
     $cmp161 = ($sub160|0)>=(63);
     if ($cmp161) {
      break L70;
     }
    }
    $94 = $ch;
    $cmp164 = ($94|0)>=(32);
    $95 = $ch;
    $cmp166 = ($95|0)<=(127);
    $or$cond2 = $cmp164 & $cmp166;
    $96 = HEAP32[99734]|0;
    $cmp168 = ($96|0)<(23);
    $or$cond3 = $or$cond2 & $cmp168;
    if ($or$cond3) {
     $97 = HEAP32[99733]|0;
     $arrayidx170 = (187040 + (($97*24)|0)|0);
     $call172 = (_M_StringWidth($arrayidx170)|0);
     $cmp173 = ($call172|0)<(176);
     if ($cmp173) {
      $98 = $ch;
      $conv = $98&255;
      $99 = HEAP32[99733]|0;
      $arrayidx175 = (187040 + (($99*24)|0)|0);
      $100 = HEAP32[99734]|0;
      $inc = (($100) + 1)|0;
      HEAP32[99734] = $inc;
      $arrayidx176 = (($arrayidx175) + ($100)|0);
      HEAP8[$arrayidx176>>0] = $conv;
      $101 = HEAP32[99733]|0;
      $arrayidx177 = (187040 + (($101*24)|0)|0);
      $102 = HEAP32[99734]|0;
      $arrayidx178 = (($arrayidx177) + ($102)|0);
      HEAP8[$arrayidx178>>0] = 0;
     }
    }
   }
   }
  } while(0);
  $retval = 1;
  $262 = $retval;
  STACKTOP = sp;return ($262|0);
 }
 $103 = HEAP32[99726]|0;
 $tobool181 = ($103|0)!=(0);
 if ($tobool181) {
  $104 = HEAP32[99729]|0;
  $tobool183 = ($104|0)!=(0);
  if ($tobool183) {
   $105 = $key;
   $cmp185 = ($105|0)!=(32);
   $106 = $key;
   $cmp188 = ($106|0)!=(27);
   $or$cond4 = $cmp185 & $cmp188;
   if ($or$cond4) {
    $107 = $key;
    $108 = HEAP32[32258]|0;
    $cmp191 = ($107|0)!=($108|0);
    if ($cmp191) {
     $109 = $key;
     $110 = HEAP32[32259]|0;
     $cmp194 = ($109|0)!=($110|0);
     if ($cmp194) {
      $retval = 0;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
    }
   }
  }
  $111 = HEAP32[99725]|0;
  HEAP32[99724] = $111;
  HEAP32[99726] = 0;
  $112 = HEAP32[99728]|0;
  $tobool199 = ($112|0)!=(0|0);
  if ($tobool199) {
   $113 = HEAP32[99728]|0;
   $114 = $key;
   FUNCTION_TABLE_vi[$113 & 255]($114);
  }
  HEAP32[99724] = 0;
  _S_StartSound(0,24);
  $retval = 1;
  $262 = $retval;
  STACKTOP = sp;return ($262|0);
 }
 $115 = HEAP32[99383]|0;
 $tobool203 = ($115|0)!=(0);
 if ($tobool203) {
  $116 = $key;
  $117 = HEAP32[32260]|0;
  $cmp205 = ($116|0)==($117|0);
  if (!($cmp205)) {
   label = 75;
  }
 } else {
  label = 75;
 }
 do {
  if ((label|0) == 75) {
   $118 = $key;
   $cmp208 = ($118|0)!=(0);
   if ($cmp208) {
    $119 = $key;
    $120 = HEAP32[99721]|0;
    $cmp211 = ($119|0)==($120|0);
    if ($cmp211) {
     break;
    }
   }
   $121 = HEAP32[99724]|0;
   $tobool215 = ($121|0)!=(0);
   do {
    if (!($tobool215)) {
     $122 = $key;
     $123 = HEAP32[32272]|0;
     $cmp217 = ($122|0)==($123|0);
     if ($cmp217) {
      $124 = HEAP32[99316]|0;
      $tobool220 = ($124|0)!=(0);
      $125 = HEAP32[99520]|0;
      $tobool222 = ($125|0)!=(0);
      $or$cond5 = $tobool220 | $tobool222;
      if ($or$cond5) {
       $retval = 0;
       $262 = $retval;
       STACKTOP = sp;return ($262|0);
      } else {
       _M_SizeDisplay(0);
       _S_StartSound(0,22);
       $retval = 1;
       $262 = $retval;
       STACKTOP = sp;return ($262|0);
      }
     }
     $126 = $key;
     $127 = HEAP32[32271]|0;
     $cmp226 = ($126|0)==($127|0);
     if ($cmp226) {
      $128 = HEAP32[99316]|0;
      $tobool229 = ($128|0)!=(0);
      $129 = HEAP32[99520]|0;
      $tobool231 = ($129|0)!=(0);
      $or$cond6 = $tobool229 | $tobool231;
      if ($or$cond6) {
       $retval = 0;
       $262 = $retval;
       STACKTOP = sp;return ($262|0);
      } else {
       _M_SizeDisplay(1);
       _S_StartSound(0,22);
       $retval = 1;
       $262 = $retval;
       STACKTOP = sp;return ($262|0);
      }
     }
     $130 = $key;
     $131 = HEAP32[32260]|0;
     $cmp235 = ($130|0)==($131|0);
     if ($cmp235) {
      _M_StartControlPanel();
      $132 = HEAP32[32168]|0;
      $cmp238 = ($132|0)==(3);
      if ($cmp238) {
       HEAP32[99730] = 129196;
      } else {
       HEAP32[99730] = 129148;
      }
      HEAP16[200747] = 0;
      _S_StartSound(0,23);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $133 = $key;
     $134 = HEAP32[32261]|0;
     $cmp244 = ($133|0)==($134|0);
     if ($cmp244) {
      _M_StartControlPanel();
      _S_StartSound(0,23);
      _M_SaveGame(0);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $135 = $key;
     $136 = HEAP32[32262]|0;
     $cmp248 = ($135|0)==($136|0);
     if ($cmp248) {
      _M_StartControlPanel();
      _S_StartSound(0,23);
      _M_LoadGame(0);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $137 = $key;
     $138 = HEAP32[32263]|0;
     $cmp252 = ($137|0)==($138|0);
     if ($cmp252) {
      _M_StartControlPanel();
      HEAP32[99730] = 129308;
      HEAP16[200747] = 0;
      _S_StartSound(0,23);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $139 = $key;
     $140 = HEAP32[32264]|0;
     $cmp256 = ($139|0)==($140|0);
     if ($cmp256) {
      _M_ChangeDetail(0);
      _S_StartSound(0,23);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $141 = $key;
     $142 = HEAP32[32265]|0;
     $cmp260 = ($141|0)==($142|0);
     if ($cmp260) {
      _S_StartSound(0,23);
      _M_QuickSave();
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $143 = $key;
     $144 = HEAP32[32266]|0;
     $cmp264 = ($143|0)==($144|0);
     if ($cmp264) {
      _S_StartSound(0,23);
      _M_EndGame(0);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $145 = $key;
     $146 = HEAP32[32267]|0;
     $cmp268 = ($145|0)==($146|0);
     if ($cmp268) {
      _M_ChangeMessages(0);
      _S_StartSound(0,23);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $147 = $key;
     $148 = HEAP32[32268]|0;
     $cmp272 = ($147|0)==($148|0);
     if ($cmp272) {
      _S_StartSound(0,23);
      _M_QuickLoad();
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $149 = $key;
     $150 = HEAP32[32269]|0;
     $cmp276 = ($149|0)==($150|0);
     if ($cmp276) {
      _S_StartSound(0,23);
      _M_QuitDOOM(0);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $151 = $key;
     $152 = HEAP32[32270]|0;
     $cmp280 = ($151|0)==($152|0);
     if (!($cmp280)) {
      break;
     }
     $153 = HEAP32[100204]|0;
     $inc283 = (($153) + 1)|0;
     HEAP32[100204] = $inc283;
     $154 = HEAP32[100204]|0;
     $cmp284 = ($154|0)>(4);
     $spec$store$select = $cmp284 ? 0 : $inc283;
     HEAP32[100204] = $spec$store$select;
     $155 = HEAP32[100204]|0;
     $arrayidx288 = (48000 + (($155*26)|0)|0);
     $156 = HEAP32[99415]|0;
     $arrayidx290 = (183056 + (($156*288)|0)|0);
     $message = ((($arrayidx290)) + 224|0);
     HEAP32[$message>>2] = $arrayidx288;
     $call291 = (_W_CacheLumpName(157989,8)|0);
     _I_SetPalette($call291);
     $retval = 1;
     $262 = $retval;
     STACKTOP = sp;return ($262|0);
    }
   } while(0);
   $157 = HEAP32[99724]|0;
   $tobool306 = ($157|0)!=(0);
   $158 = $key;
   if (!($tobool306)) {
    $159 = HEAP32[32251]|0;
    $cmp308 = ($158|0)==($159|0);
    if ($cmp308) {
     _M_StartControlPanel();
     _S_StartSound(0,23);
     $retval = 1;
     $262 = $retval;
     STACKTOP = sp;return ($262|0);
    } else {
     $retval = 0;
     $262 = $retval;
     STACKTOP = sp;return ($262|0);
    }
   }
   $160 = HEAP32[32253]|0;
   $cmp313 = ($158|0)==($160|0);
   if ($cmp313) {
    while(1) {
     $161 = HEAP16[200747]|0;
     $conv316 = $161 << 16 >> 16;
     $add317 = (($conv316) + 1)|0;
     $162 = HEAP32[99730]|0;
     $163 = HEAP16[$162>>1]|0;
     $conv318 = $163 << 16 >> 16;
     $sub319 = (($conv318) - 1)|0;
     $cmp320 = ($add317|0)>($sub319|0);
     if ($cmp320) {
      HEAP16[200747] = 0;
     } else {
      $164 = HEAP16[200747]|0;
      $inc324 = (($164) + 1)<<16>>16;
      HEAP16[200747] = $inc324;
     }
     _S_StartSound(0,19);
     $165 = HEAP32[99730]|0;
     $menuitems = ((($165)) + 8|0);
     $166 = HEAP32[$menuitems>>2]|0;
     $167 = HEAP16[200747]|0;
     $idxprom = $167 << 16 >> 16;
     $arrayidx326 = (($166) + (($idxprom*20)|0)|0);
     $168 = HEAP16[$arrayidx326>>1]|0;
     $conv327 = $168 << 16 >> 16;
     $cmp328 = ($conv327|0)==(-1);
     if (!($cmp328)) {
      break;
     }
    }
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $169 = $key;
   $170 = HEAP32[32252]|0;
   $cmp331 = ($169|0)==($170|0);
   if ($cmp331) {
    while(1) {
     $171 = HEAP16[200747]|0;
     $tobool335 = ($171<<16>>16)!=(0);
     if ($tobool335) {
      $174 = HEAP16[200747]|0;
      $dec342 = (($174) + -1)<<16>>16;
      HEAP16[200747] = $dec342;
     } else {
      $172 = HEAP32[99730]|0;
      $173 = HEAP16[$172>>1]|0;
      $conv338 = $173 << 16 >> 16;
      $sub339 = (($conv338) - 1)|0;
      $conv340 = $sub339&65535;
      HEAP16[200747] = $conv340;
     }
     _S_StartSound(0,19);
     $175 = HEAP32[99730]|0;
     $menuitems345 = ((($175)) + 8|0);
     $176 = HEAP32[$menuitems345>>2]|0;
     $177 = HEAP16[200747]|0;
     $idxprom346 = $177 << 16 >> 16;
     $arrayidx347 = (($176) + (($idxprom346*20)|0)|0);
     $178 = HEAP16[$arrayidx347>>1]|0;
     $conv349 = $178 << 16 >> 16;
     $cmp350 = ($conv349|0)==(-1);
     if (!($cmp350)) {
      break;
     }
    }
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $179 = $key;
   $180 = HEAP32[32254]|0;
   $cmp354 = ($179|0)==($180|0);
   if ($cmp354) {
    $181 = HEAP32[99730]|0;
    $menuitems357 = ((($181)) + 8|0);
    $182 = HEAP32[$menuitems357>>2]|0;
    $183 = HEAP16[200747]|0;
    $idxprom358 = $183 << 16 >> 16;
    $arrayidx359 = (($182) + (($idxprom358*20)|0)|0);
    $routine = ((($arrayidx359)) + 12|0);
    $184 = HEAP32[$routine>>2]|0;
    $tobool360 = ($184|0)!=(0|0);
    if ($tobool360) {
     $185 = HEAP32[99730]|0;
     $menuitems362 = ((($185)) + 8|0);
     $186 = HEAP32[$menuitems362>>2]|0;
     $187 = HEAP16[200747]|0;
     $idxprom363 = $187 << 16 >> 16;
     $arrayidx364 = (($186) + (($idxprom363*20)|0)|0);
     $188 = HEAP16[$arrayidx364>>1]|0;
     $conv366 = $188 << 16 >> 16;
     $cmp367 = ($conv366|0)==(2);
     if ($cmp367) {
      _S_StartSound(0,22);
      $189 = HEAP32[99730]|0;
      $menuitems370 = ((($189)) + 8|0);
      $190 = HEAP32[$menuitems370>>2]|0;
      $191 = HEAP16[200747]|0;
      $idxprom371 = $191 << 16 >> 16;
      $arrayidx372 = (($190) + (($idxprom371*20)|0)|0);
      $routine373 = ((($arrayidx372)) + 12|0);
      $192 = HEAP32[$routine373>>2]|0;
      FUNCTION_TABLE_vi[$192 & 255](0);
     }
    }
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $193 = $key;
   $194 = HEAP32[32255]|0;
   $cmp376 = ($193|0)==($194|0);
   if ($cmp376) {
    $195 = HEAP32[99730]|0;
    $menuitems379 = ((($195)) + 8|0);
    $196 = HEAP32[$menuitems379>>2]|0;
    $197 = HEAP16[200747]|0;
    $idxprom380 = $197 << 16 >> 16;
    $arrayidx381 = (($196) + (($idxprom380*20)|0)|0);
    $routine382 = ((($arrayidx381)) + 12|0);
    $198 = HEAP32[$routine382>>2]|0;
    $tobool383 = ($198|0)!=(0|0);
    if ($tobool383) {
     $199 = HEAP32[99730]|0;
     $menuitems385 = ((($199)) + 8|0);
     $200 = HEAP32[$menuitems385>>2]|0;
     $201 = HEAP16[200747]|0;
     $idxprom386 = $201 << 16 >> 16;
     $arrayidx387 = (($200) + (($idxprom386*20)|0)|0);
     $202 = HEAP16[$arrayidx387>>1]|0;
     $conv389 = $202 << 16 >> 16;
     $cmp390 = ($conv389|0)==(2);
     if ($cmp390) {
      _S_StartSound(0,22);
      $203 = HEAP32[99730]|0;
      $menuitems393 = ((($203)) + 8|0);
      $204 = HEAP32[$menuitems393>>2]|0;
      $205 = HEAP16[200747]|0;
      $idxprom394 = $205 << 16 >> 16;
      $arrayidx395 = (($204) + (($idxprom394*20)|0)|0);
      $routine396 = ((($arrayidx395)) + 12|0);
      $206 = HEAP32[$routine396>>2]|0;
      FUNCTION_TABLE_vi[$206 & 255](1);
     }
    }
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $207 = $key;
   $208 = HEAP32[32257]|0;
   $cmp399 = ($207|0)==($208|0);
   if ($cmp399) {
    $209 = HEAP32[99730]|0;
    $menuitems402 = ((($209)) + 8|0);
    $210 = HEAP32[$menuitems402>>2]|0;
    $211 = HEAP16[200747]|0;
    $idxprom403 = $211 << 16 >> 16;
    $arrayidx404 = (($210) + (($idxprom403*20)|0)|0);
    $routine405 = ((($arrayidx404)) + 12|0);
    $212 = HEAP32[$routine405>>2]|0;
    $tobool406 = ($212|0)!=(0|0);
    do {
     if ($tobool406) {
      $213 = HEAP32[99730]|0;
      $menuitems408 = ((($213)) + 8|0);
      $214 = HEAP32[$menuitems408>>2]|0;
      $215 = HEAP16[200747]|0;
      $idxprom409 = $215 << 16 >> 16;
      $arrayidx410 = (($214) + (($idxprom409*20)|0)|0);
      $216 = HEAP16[$arrayidx410>>1]|0;
      $conv412 = $216 << 16 >> 16;
      $tobool413 = ($conv412|0)!=(0);
      if ($tobool413) {
       $217 = HEAP16[200747]|0;
       $218 = HEAP32[99730]|0;
       $lastOn = ((($218)) + 20|0);
       HEAP16[$lastOn>>1] = $217;
       $219 = HEAP32[99730]|0;
       $menuitems415 = ((($219)) + 8|0);
       $220 = HEAP32[$menuitems415>>2]|0;
       $221 = HEAP16[200747]|0;
       $idxprom416 = $221 << 16 >> 16;
       $arrayidx417 = (($220) + (($idxprom416*20)|0)|0);
       $222 = HEAP16[$arrayidx417>>1]|0;
       $conv419 = $222 << 16 >> 16;
       $cmp420 = ($conv419|0)==(2);
       $223 = HEAP32[99730]|0;
       $menuitems423 = ((($223)) + 8|0);
       $224 = HEAP32[$menuitems423>>2]|0;
       $225 = HEAP16[200747]|0;
       $idxprom424 = $225 << 16 >> 16;
       $arrayidx425 = (($224) + (($idxprom424*20)|0)|0);
       $routine426 = ((($arrayidx425)) + 12|0);
       $226 = HEAP32[$routine426>>2]|0;
       if ($cmp420) {
        FUNCTION_TABLE_vi[$226 & 255](1);
        _S_StartSound(0,22);
        break;
       } else {
        $227 = HEAP16[200747]|0;
        $conv432 = $227 << 16 >> 16;
        FUNCTION_TABLE_vi[$226 & 255]($conv432);
        _S_StartSound(0,1);
        break;
       }
      }
     }
    } while(0);
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $228 = $key;
   $229 = HEAP32[32251]|0;
   $cmp436 = ($228|0)==($229|0);
   if ($cmp436) {
    $230 = HEAP16[200747]|0;
    $231 = HEAP32[99730]|0;
    $lastOn439 = ((($231)) + 20|0);
    HEAP16[$lastOn439>>1] = $230;
    _M_ClearMenus();
    _S_StartSound(0,24);
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $232 = $key;
   $233 = HEAP32[32256]|0;
   $cmp441 = ($232|0)==($233|0);
   if ($cmp441) {
    $234 = HEAP16[200747]|0;
    $235 = HEAP32[99730]|0;
    $lastOn444 = ((($235)) + 20|0);
    HEAP16[$lastOn444>>1] = $234;
    $236 = HEAP32[99730]|0;
    $prevMenu = ((($236)) + 4|0);
    $237 = HEAP32[$prevMenu>>2]|0;
    $tobool445 = ($237|0)!=(0|0);
    if ($tobool445) {
     $238 = HEAP32[99730]|0;
     $prevMenu447 = ((($238)) + 4|0);
     $239 = HEAP32[$prevMenu447>>2]|0;
     HEAP32[99730] = $239;
     $240 = HEAP32[99730]|0;
     $lastOn448 = ((($240)) + 20|0);
     $241 = HEAP16[$lastOn448>>1]|0;
     HEAP16[200747] = $241;
     _S_StartSound(0,23);
    }
    $retval = 1;
    $262 = $retval;
    STACKTOP = sp;return ($262|0);
   }
   $242 = $ch;
   $cmp451 = ($242|0)!=(0);
   if ($cmp451) {
    label = 155;
   } else {
    $243 = $key;
    $call454 = (_IsNullKey($243)|0);
    $tobool455 = ($call454|0)!=(0);
    if ($tobool455) {
     label = 155;
    }
   }
   L245: do {
    if ((label|0) == 155) {
     $244 = HEAP16[200747]|0;
     $conv457 = $244 << 16 >> 16;
     $add458 = (($conv457) + 1)|0;
     $i = $add458;
     while(1) {
      $245 = $i;
      $246 = HEAP32[99730]|0;
      $247 = HEAP16[$246>>1]|0;
      $conv460 = $247 << 16 >> 16;
      $cmp461 = ($245|0)<($conv460|0);
      if (!($cmp461)) {
       break;
      }
      $248 = HEAP32[99730]|0;
      $menuitems463 = ((($248)) + 8|0);
      $249 = HEAP32[$menuitems463>>2]|0;
      $250 = $i;
      $arrayidx464 = (($249) + (($250*20)|0)|0);
      $alphaKey = ((($arrayidx464)) + 16|0);
      $251 = HEAP8[$alphaKey>>0]|0;
      $conv465 = $251 << 24 >> 24;
      $252 = $ch;
      $cmp466 = ($conv465|0)==($252|0);
      $253 = $i;
      if ($cmp466) {
       label = 158;
       break;
      }
      $inc471 = (($253) + 1)|0;
      $i = $inc471;
     }
     if ((label|0) == 158) {
      $conv469 = $253&65535;
      HEAP16[200747] = $conv469;
      _S_StartSound(0,19);
      $retval = 1;
      $262 = $retval;
      STACKTOP = sp;return ($262|0);
     }
     $i = 0;
     while(1) {
      $254 = $i;
      $255 = HEAP16[200747]|0;
      $conv473 = $255 << 16 >> 16;
      $cmp474 = ($254|0)<=($conv473|0);
      if (!($cmp474)) {
       break L245;
      }
      $256 = HEAP32[99730]|0;
      $menuitems477 = ((($256)) + 8|0);
      $257 = HEAP32[$menuitems477>>2]|0;
      $258 = $i;
      $arrayidx478 = (($257) + (($258*20)|0)|0);
      $alphaKey479 = ((($arrayidx478)) + 16|0);
      $259 = HEAP8[$alphaKey479>>0]|0;
      $conv480 = $259 << 24 >> 24;
      $260 = $ch;
      $cmp481 = ($conv480|0)==($260|0);
      $261 = $i;
      if ($cmp481) {
       break;
      }
      $inc487 = (($261) + 1)|0;
      $i = $inc487;
     }
     $conv484 = $261&65535;
     HEAP16[200747] = $conv484;
     _S_StartSound(0,19);
     $retval = 1;
     $262 = $retval;
     STACKTOP = sp;return ($262|0);
    }
   } while(0);
   $retval = 0;
   $262 = $retval;
   STACKTOP = sp;return ($262|0);
  }
 } while(0);
 _G_ScreenShot();
 $retval = 1;
 $262 = $retval;
 STACKTOP = sp;return ($262|0);
}
function _IsNullKey($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp4 = 0, $key$addr = 0, $lor$ext = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $cmp = ($0|0)==(255);
 $1 = $key$addr;
 $cmp1 = ($1|0)==(186);
 $or$cond = $cmp | $cmp1;
 $2 = $key$addr;
 $cmp3 = ($2|0)==(198);
 $or$cond1 = $or$cond | $cmp3;
 if ($or$cond1) {
  $4 = 1;
  $lor$ext = $4&1;
  STACKTOP = sp;return ($lor$ext|0);
 }
 $3 = $key$addr;
 $cmp4 = ($3|0)==(197);
 $4 = $cmp4;
 $lor$ext = $4&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _M_Drawer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr11 = 0;
 var $add$ptr23 = 0, $add17 = 0, $add18 = 0, $add27 = 0, $add39 = 0, $add65 = 0, $add71 = 0, $add76 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx54 = 0, $arrayidx6 = 0, $arrayidx77 = 0, $call = 0, $call26 = 0, $call3 = 0, $call30 = 0, $call62 = 0, $call78 = 0, $cmp = 0;
 var $cmp13 = 0, $cmp4 = 0, $cmp51 = 0, $cmp8 = 0, $conv = 0, $conv1 = 0, $conv33 = 0, $conv34 = 0, $conv35 = 0, $conv37 = 0, $conv38 = 0, $conv40 = 0, $conv49 = 0, $conv60 = 0, $conv61 = 0, $conv64 = 0, $conv66 = 0, $conv7 = 0, $conv70 = 0, $conv73 = 0;
 var $conv75 = 0, $div = 0, $div31 = 0, $foundnewline = 0, $height = 0, $i = 0, $idxprom = 0, $inc = 0, $inc68 = 0, $max = 0, $menuitems = 0, $mul = 0, $name = 0, $name55 = 0, $routine = 0, $routine47 = 0, $start = 0, $string = 0, $sub = 0, $sub32 = 0;
 var $sub74 = 0, $tobool = 0, $tobool20 = 0, $tobool42 = 0, $tobool45 = 0, $tobool58 = 0, $x = 0, $y = 0, $y72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $string = sp;
 HEAP32[99731] = 0;
 $0 = HEAP32[99726]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  $28 = HEAP32[99724]|0;
  $tobool42 = ($28|0)!=(0);
  if (!($tobool42)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[99730]|0;
  $routine = ((($29)) + 12|0);
  $30 = HEAP32[$routine>>2]|0;
  $tobool45 = ($30|0)!=(0|0);
  if ($tobool45) {
   $31 = HEAP32[99730]|0;
   $routine47 = ((($31)) + 12|0);
   $32 = HEAP32[$routine47>>2]|0;
   FUNCTION_TABLE_v[$32 & 255]();
  }
  $33 = HEAP32[99730]|0;
  $x = ((($33)) + 16|0);
  $34 = HEAP16[$x>>1]|0;
  HEAP16[200751] = $34;
  $35 = HEAP32[99730]|0;
  $y = ((($35)) + 18|0);
  $36 = HEAP16[$y>>1]|0;
  HEAP16[200750] = $36;
  $37 = HEAP32[99730]|0;
  $38 = HEAP16[$37>>1]|0;
  $conv49 = $38 << 16 >> 16;
  $max = $conv49;
  $i = 0;
  while(1) {
   $39 = $i;
   $40 = $max;
   $cmp51 = ($39>>>0)<($40>>>0);
   if (!($cmp51)) {
    break;
   }
   $41 = HEAP32[99730]|0;
   $menuitems = ((($41)) + 8|0);
   $42 = HEAP32[$menuitems>>2]|0;
   $43 = $i;
   $arrayidx54 = (($42) + (($43*20)|0)|0);
   $name55 = ((($arrayidx54)) + 2|0);
   $name = $name55;
   $44 = $name;
   $45 = HEAP8[$44>>0]|0;
   $tobool58 = ($45<<24>>24)!=(0);
   if ($tobool58) {
    $46 = HEAP16[200751]|0;
    $conv60 = $46 << 16 >> 16;
    $47 = HEAP16[200750]|0;
    $conv61 = $47 << 16 >> 16;
    $48 = $name;
    $call62 = (_W_CacheLumpName($48,8)|0);
    _V_DrawPatchDirect($conv60,$conv61,$call62);
   }
   $49 = HEAP16[200750]|0;
   $conv64 = $49 << 16 >> 16;
   $add65 = (($conv64) + 16)|0;
   $conv66 = $add65&65535;
   HEAP16[200750] = $conv66;
   $50 = $i;
   $inc68 = (($50) + 1)|0;
   $i = $inc68;
  }
  $51 = HEAP16[200751]|0;
  $conv70 = $51 << 16 >> 16;
  $add71 = (($conv70) + -32)|0;
  $52 = HEAP32[99730]|0;
  $y72 = ((($52)) + 18|0);
  $53 = HEAP16[$y72>>1]|0;
  $conv73 = $53 << 16 >> 16;
  $sub74 = (($conv73) - 5)|0;
  $54 = HEAP16[200747]|0;
  $conv75 = $54 << 16 >> 16;
  $mul = $conv75<<4;
  $add76 = (($sub74) + ($mul))|0;
  $55 = HEAP16[200748]|0;
  $idxprom = $55 << 16 >> 16;
  $arrayidx77 = (129140 + ($idxprom<<2)|0);
  $56 = HEAP32[$arrayidx77>>2]|0;
  $call78 = (_W_CacheLumpName($56,8)|0);
  _V_DrawPatchDirect($add71,$add76,$call78);
  STACKTOP = sp;return;
 }
 $start = 0;
 $1 = HEAP32[99727]|0;
 $call = (_M_StringHeight($1)|0);
 $div = (($call|0) / 2)&-1;
 $sub = (100 - ($div))|0;
 $conv = $sub&65535;
 HEAP16[200750] = $conv;
 while(1) {
  $2 = HEAP32[99727]|0;
  $3 = $start;
  $arrayidx = (($2) + ($3)|0);
  $4 = HEAP8[$arrayidx>>0]|0;
  $conv1 = $4 << 24 >> 24;
  $cmp = ($conv1|0)!=(0);
  if (!($cmp)) {
   break;
  }
  $foundnewline = 0;
  $i = 0;
  while(1) {
   $5 = $i;
   $6 = HEAP32[99727]|0;
   $7 = $start;
   $add$ptr = (($6) + ($7)|0);
   $call3 = (_strlen($add$ptr)|0);
   $cmp4 = ($5>>>0)<($call3>>>0);
   if (!($cmp4)) {
    break;
   }
   $8 = HEAP32[99727]|0;
   $9 = $start;
   $10 = $i;
   $add = (($9) + ($10))|0;
   $arrayidx6 = (($8) + ($add)|0);
   $11 = HEAP8[$arrayidx6>>0]|0;
   $conv7 = $11 << 24 >> 24;
   $cmp8 = ($conv7|0)==(10);
   if ($cmp8) {
    label = 7;
    break;
   }
   $18 = $i;
   $inc = (($18) + 1)|0;
   $i = $inc;
  }
  if ((label|0) == 7) {
   label = 0;
   $12 = HEAP32[99727]|0;
   $13 = $start;
   $add$ptr11 = (($12) + ($13)|0);
   (_M_StringCopy($string,$add$ptr11,80)|0);
   $14 = $i;
   $cmp13 = ($14>>>0)<(80);
   if ($cmp13) {
    $15 = $i;
    $arrayidx16 = (($string) + ($15)|0);
    HEAP8[$arrayidx16>>0] = 0;
   }
   $foundnewline = 1;
   $16 = $i;
   $add17 = (($16) + 1)|0;
   $17 = $start;
   $add18 = (($17) + ($add17))|0;
   $start = $add18;
  }
  $19 = $foundnewline;
  $tobool20 = ($19|0)!=(0);
  if (!($tobool20)) {
   $20 = HEAP32[99727]|0;
   $21 = $start;
   $add$ptr23 = (($20) + ($21)|0);
   (_M_StringCopy($string,$add$ptr23,80)|0);
   $call26 = (_strlen($string)|0);
   $22 = $start;
   $add27 = (($22) + ($call26))|0;
   $start = $add27;
  }
  $call30 = (_M_StringWidth($string)|0);
  $div31 = (($call30|0) / 2)&-1;
  $sub32 = (160 - ($div31))|0;
  $conv33 = $sub32&65535;
  HEAP16[200751] = $conv33;
  $23 = HEAP16[200751]|0;
  $conv34 = $23 << 16 >> 16;
  $24 = HEAP16[200750]|0;
  $conv35 = $24 << 16 >> 16;
  _M_WriteText($conv34,$conv35,$string);
  $25 = HEAP32[46472]|0;
  $height = ((($25)) + 2|0);
  $26 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv37 = $26 << 16 >> 16;
  $27 = HEAP16[200750]|0;
  $conv38 = $27 << 16 >> 16;
  $add39 = (($conv38) + ($conv37))|0;
  $conv40 = $add39&65535;
  HEAP16[200750] = $conv40;
 }
 STACKTOP = sp;return;
}
function _M_Ticker() {
 var $0 = 0, $1 = 0, $cmp = 0, $conv = 0, $conv2 = 0, $conv3 = 0, $dec = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[200749]|0;
 $dec = (($0) + -1)<<16>>16;
 HEAP16[200749] = $dec;
 $conv = $dec << 16 >> 16;
 $cmp = ($conv|0)<=(0);
 if (!($cmp)) {
  return;
 }
 $1 = HEAP16[200748]|0;
 $conv2 = $1 << 16 >> 16;
 $xor = $conv2 ^ 1;
 $conv3 = $xor&65535;
 HEAP16[200748] = $conv3;
 HEAP16[200749] = 8;
 return;
}
function _M_Init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $cmp = 0, $cond = 0, $conv = 0, $conv1 = 0, $dec = 0, $dec5 = 0, $lastOn = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99730] = 129172;
 HEAP32[99724] = 0;
 $0 = HEAP32[99730]|0;
 $lastOn = ((($0)) + 20|0);
 $1 = HEAP16[$lastOn>>1]|0;
 HEAP16[200747] = $1;
 HEAP16[200748] = 0;
 HEAP16[200749] = 10;
 $2 = HEAP32[32284]|0;
 $sub = (($2) - 3)|0;
 HEAP32[99735] = $sub;
 HEAP32[99726] = 0;
 HEAP32[99727] = 0;
 $3 = HEAP32[99724]|0;
 HEAP32[99725] = $3;
 HEAP32[99737] = -1;
 $4 = HEAP32[32168]|0;
 $cond = ($4|0)==(2);
 if ($cond) {
  ;HEAP32[(48224)>>2]=HEAP32[(48244)>>2]|0;HEAP32[(48224)+4>>2]=HEAP32[(48244)+4>>2]|0;HEAP32[(48224)+8>>2]=HEAP32[(48244)+8>>2]|0;HEAP32[(48224)+12>>2]=HEAP32[(48244)+12>>2]|0;HEAP32[(48224)+16>>2]=HEAP32[(48244)+16>>2]|0;
  $5 = HEAP16[64586]|0;
  $dec = (($5) + -1)<<16>>16;
  HEAP16[64586] = $dec;
  $6 = HEAP16[(129190)>>1]|0;
  $conv = $6 << 16 >> 16;
  $add = (($conv) + 8)|0;
  $conv1 = $add&65535;
  HEAP16[(129190)>>1] = $conv1;
  HEAP32[(129336)>>2] = 129172;
 }
 $7 = HEAP32[32169]|0;
 $cmp = ($7>>>0)<(6);
 if (!($cmp)) {
  return;
 }
 $8 = HEAP16[64678]|0;
 $dec5 = (($8) + -1)<<16>>16;
 HEAP16[64678] = $dec5;
 return;
}
function _M_MakeDirectory($path) {
 $path = $path|0;
 var $0 = 0, $path$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $path$addr = $path;
 $0 = $path$addr;
 (_mkdir($0,493)|0);
 STACKTOP = sp;return;
}
function _M_FileExists($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $conv = 0, $filename$addr = 0, $fstream = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $filename$addr = $filename;
 $0 = $filename$addr;
 $call = (_fopen($0,152930)|0);
 $fstream = $call;
 $1 = $fstream;
 $cmp = ($1|0)!=(0|0);
 if ($cmp) {
  $2 = $fstream;
  (_fclose($2)|0);
  $retval = 1;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 } else {
  $call2 = (___errno_location()|0);
  $3 = HEAP32[$call2>>2]|0;
  $cmp3 = ($3|0)==(31);
  $conv = $cmp3&1;
  $retval = $conv;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _M_FileLength($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call2 = 0, $handle$addr = 0, $length = 0, $savedpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $handle$addr = $handle;
 $0 = $handle$addr;
 $call = (_ftell($0)|0);
 $savedpos = $call;
 $1 = $handle$addr;
 (_fseek($1,0,2)|0);
 $2 = $handle$addr;
 $call2 = (_ftell($2)|0);
 $length = $call2;
 $3 = $handle$addr;
 $4 = $savedpos;
 (_fseek($3,$4,0)|0);
 $5 = $length;
 STACKTOP = sp;return ($5|0);
}
function _M_WriteFile($name,$source,$length) {
 $name = $name|0;
 $source = $source|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp3 = 0, $count = 0, $handle = 0, $length$addr = 0, $name$addr = 0, $retval = 0, $source$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $name$addr = $name;
 $source$addr = $source;
 $length$addr = $length;
 $0 = $name$addr;
 $call = (_fopen($0,152932)|0);
 $handle = $call;
 $1 = $handle;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $retval = 0;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 $2 = $source$addr;
 $3 = $length$addr;
 $4 = $handle;
 $call1 = (_fwrite($2,1,$3,$4)|0);
 $count = $call1;
 $5 = $handle;
 (_fclose($5)|0);
 $6 = $count;
 $7 = $length$addr;
 $cmp3 = ($6|0)<($7|0);
 if ($cmp3) {
  $retval = 0;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 } else {
  $retval = 1;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _M_TempFile($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $call = 0, $s$addr = 0, $tempdir = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $s$addr = $s;
 $tempdir = 152935;
 $0 = $tempdir;
 $1 = $s$addr;
 HEAP32[$vararg_buffer>>2] = 152940;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 0;
 $call = (_M_StringJoin($0,$vararg_buffer)|0);
 STACKTOP = sp;return ($call|0);
}
function _M_StringJoin($s,$varargs) {
 $s = $s|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add4 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $args = 0, $call = 0, $call3 = 0;
 var $call7 = 0, $cmp = 0, $cmp17 = 0, $cmp8 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $result = 0, $result_len = 0, $retval = 0, $s$addr = 0, $v = 0, $vararg_buffer = 0;
 var $varet = 0, $varet16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 16|0;
 $args = sp;
 $s$addr = $s;
 $0 = $s$addr;
 $call = (_strlen($0)|0);
 $add = (($call) + 1)|0;
 $result_len = $add;
 HEAP32[$args>>2] = $varargs;
 while(1) {
  $arglist_current = HEAP32[$args>>2]|0;
  $1 = $arglist_current;
  $2 = ((0) + 4|0);
  $expanded4 = $2;
  $expanded = (($expanded4) - 1)|0;
  $3 = (($1) + ($expanded))|0;
  $4 = ((0) + 4|0);
  $expanded8 = $4;
  $expanded7 = (($expanded8) - 1)|0;
  $expanded6 = $expanded7 ^ -1;
  $5 = $3 & $expanded6;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $arglist_next = ((($6)) + 4|0);
  HEAP32[$args>>2] = $arglist_next;
  $varet = $7;
  $8 = $varet;
  $v = $8;
  $9 = $v;
  $cmp = ($9|0)==(0|0);
  if ($cmp) {
   break;
  }
  $10 = $v;
  $call3 = (_strlen($10)|0);
  $11 = $result_len;
  $add4 = (($11) + ($call3))|0;
  $result_len = $add4;
 }
 $12 = $result_len;
 $call7 = (_malloc($12)|0);
 $result = $call7;
 $13 = $result;
 $cmp8 = ($13|0)==(0|0);
 if ($cmp8) {
  _I_Error(152942,$vararg_buffer);
  $retval = 0;
  $30 = $retval;
  STACKTOP = sp;return ($30|0);
 }
 $14 = $result;
 $15 = $s$addr;
 $16 = $result_len;
 (_M_StringCopy($14,$15,$16)|0);
 HEAP32[$args>>2] = $varargs;
 while(1) {
  $arglist_current2 = HEAP32[$args>>2]|0;
  $17 = $arglist_current2;
  $18 = ((0) + 4|0);
  $expanded11 = $18;
  $expanded10 = (($expanded11) - 1)|0;
  $19 = (($17) + ($expanded10))|0;
  $20 = ((0) + 4|0);
  $expanded15 = $20;
  $expanded14 = (($expanded15) - 1)|0;
  $expanded13 = $expanded14 ^ -1;
  $21 = $19 & $expanded13;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $arglist_next3 = ((($22)) + 4|0);
  HEAP32[$args>>2] = $arglist_next3;
  $varet16 = $23;
  $24 = $varet16;
  $v = $24;
  $25 = $v;
  $cmp17 = ($25|0)==(0|0);
  if ($cmp17) {
   break;
  }
  $26 = $result;
  $27 = $v;
  $28 = $result_len;
  (_M_StringConcat($26,$27,$28)|0);
 }
 $29 = $result;
 $retval = $29;
 $30 = $retval;
 STACKTOP = sp;return ($30|0);
}
function _M_StringCopy($dest,$src,$dest_size) {
 $dest = $dest|0;
 $src = $src|0;
 $dest_size = $dest_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $call2 = 0, $cmp = 0, $cmp4 = 0, $conv = 0, $conv5 = 0, $dest$addr = 0, $dest_size$addr = 0;
 var $len = 0, $retval = 0, $src$addr = 0, $sub = 0, $sub1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $dest$addr = $dest;
 $src$addr = $src;
 $dest_size$addr = $dest_size;
 $0 = $dest_size$addr;
 $cmp = ($0>>>0)>=(1);
 if ($cmp) {
  $1 = $dest$addr;
  $2 = $dest_size$addr;
  $sub = (($2) - 1)|0;
  $arrayidx = (($1) + ($sub)|0);
  HEAP8[$arrayidx>>0] = 0;
  $3 = $dest$addr;
  $4 = $src$addr;
  $5 = $dest_size$addr;
  $sub1 = (($5) - 1)|0;
  (_strncpy($3,$4,$sub1)|0);
  $6 = $dest$addr;
  $call2 = (_strlen($6)|0);
  $len = $call2;
  $7 = $src$addr;
  $8 = $len;
  $arrayidx3 = (($7) + ($8)|0);
  $9 = HEAP8[$arrayidx3>>0]|0;
  $conv = $9 << 24 >> 24;
  $cmp4 = ($conv|0)==(0);
  $conv5 = $cmp4&1;
  $retval = $conv5;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 } else {
  $retval = 0;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _M_StringConcat($dest,$src,$dest_size) {
 $dest = $dest|0;
 $src = $src|0;
 $dest_size = $dest_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $call = 0, $call1 = 0, $cmp = 0, $dest$addr = 0, $dest_size$addr = 0, $offset = 0, $src$addr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dest$addr = $dest;
 $src$addr = $src;
 $dest_size$addr = $dest_size;
 $0 = $dest$addr;
 $call = (_strlen($0)|0);
 $offset = $call;
 $1 = $offset;
 $2 = $dest_size$addr;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $3 = $dest_size$addr;
  $offset = $3;
 }
 $4 = $dest$addr;
 $5 = $offset;
 $add$ptr = (($4) + ($5)|0);
 $6 = $src$addr;
 $7 = $dest_size$addr;
 $8 = $offset;
 $sub = (($7) - ($8))|0;
 $call1 = (_M_StringCopy($add$ptr,$6,$sub)|0);
 STACKTOP = sp;return ($call1|0);
}
function _M_StrToInt($str,$result) {
 $str = $str|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp7 = 0, $lor$ext = 0, $result$addr = 0, $str$addr = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $str$addr = $str;
 $result$addr = $result;
 $0 = $str$addr;
 $1 = $result$addr;
 HEAP32[$vararg_buffer>>2] = $1;
 $call = (_sscanf($0,152987,$vararg_buffer)|0);
 $cmp = ($call|0)==(1);
 if ($cmp) {
  $8 = 1;
 } else {
  $2 = $str$addr;
  $3 = $result$addr;
  HEAP32[$vararg_buffer1>>2] = $3;
  $call1 = (_sscanf($2,152993,$vararg_buffer1)|0);
  $cmp2 = ($call1|0)==(1);
  if ($cmp2) {
   $8 = 1;
  } else {
   $4 = $str$addr;
   $5 = $result$addr;
   HEAP32[$vararg_buffer4>>2] = $5;
   $call4 = (_sscanf($4,152999,$vararg_buffer4)|0);
   $cmp5 = ($call4|0)==(1);
   if ($cmp5) {
    $8 = 1;
   } else {
    $6 = $str$addr;
    $7 = $result$addr;
    HEAP32[$vararg_buffer7>>2] = $7;
    $call6 = (_sscanf($6,153004,$vararg_buffer7)|0);
    $cmp7 = ($call6|0)==(1);
    $8 = $cmp7;
   }
  }
 }
 $lor$ext = $8&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _M_ExtractFileBase($path,$dest) {
 $path = $path|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$ptr = 0, $add$ptr1 = 0, $add$ptr2 = 0, $arrayidx = 0, $call = 0, $call20 = 0, $cmp = 0, $cmp11 = 0, $cmp15 = 0, $cmp3 = 0, $cmp7 = 0, $conv = 0, $conv10 = 0, $conv19 = 0, $conv21 = 0, $conv6 = 0, $dest$addr = 0, $filename = 0, $inc = 0, $incdec$ptr = 0;
 var $incdec$ptr18 = 0, $length = 0, $path$addr = 0, $src = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $path$addr = $path;
 $dest$addr = $dest;
 $0 = $path$addr;
 $1 = $path$addr;
 $call = (_strlen($1)|0);
 $add$ptr = (($0) + ($call)|0);
 $add$ptr1 = ((($add$ptr)) + -1|0);
 $src = $add$ptr1;
 while(1) {
  $2 = $src;
  $3 = $path$addr;
  $cmp = ($2|0)!=($3|0);
  if ($cmp) {
   $4 = $src;
   $add$ptr2 = ((($4)) + -1|0);
   $5 = HEAP8[$add$ptr2>>0]|0;
   $conv = $5 << 24 >> 24;
   $cmp3 = ($conv|0)!=(47);
   $19 = $cmp3;
  } else {
   $19 = 0;
  }
  $6 = $src;
  if (!($19)) {
   break;
  }
  $incdec$ptr = ((($6)) + -1|0);
  $src = $incdec$ptr;
 }
 $filename = $6;
 $length = 0;
 $7 = $dest$addr;
 ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;HEAP8[$7+5>>0]=0|0;HEAP8[$7+6>>0]=0|0;HEAP8[$7+7>>0]=0|0;
 while(1) {
  $8 = $src;
  $9 = HEAP8[$8>>0]|0;
  $conv6 = $9 << 24 >> 24;
  $cmp7 = ($conv6|0)!=(0);
  if (!($cmp7)) {
   label = 12;
   break;
  }
  $10 = $src;
  $11 = HEAP8[$10>>0]|0;
  $conv10 = $11 << 24 >> 24;
  $cmp11 = ($conv10|0)!=(46);
  if (!($cmp11)) {
   label = 12;
   break;
  }
  $12 = $length;
  $cmp15 = ($12|0)>=(8);
  if ($cmp15) {
   label = 10;
   break;
  }
  $15 = $src;
  $incdec$ptr18 = ((($15)) + 1|0);
  $src = $incdec$ptr18;
  $16 = HEAP8[$15>>0]|0;
  $conv19 = $16 << 24 >> 24;
  $call20 = (_toupper($conv19)|0);
  $conv21 = $call20&255;
  $17 = $dest$addr;
  $18 = $length;
  $inc = (($18) + 1)|0;
  $length = $inc;
  $arrayidx = (($17) + ($18)|0);
  HEAP8[$arrayidx>>0] = $conv21;
 }
 if ((label|0) == 10) {
  $13 = $filename;
  $14 = $dest$addr;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  (_printf(153008,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _M_StringEndsWith($s,$suffix) {
 $s = $s|0;
 $suffix = $suffix|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call5 = 0, $cmp = 0, $cmp6 = 0, $idx$neg = 0, $land$ext = 0, $s$addr = 0, $suffix$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $suffix$addr = $suffix;
 $0 = $s$addr;
 $call = (_strlen($0)|0);
 $1 = $suffix$addr;
 $call1 = (_strlen($1)|0);
 $cmp = ($call>>>0)>=($call1>>>0);
 if (!($cmp)) {
  $6 = 0;
  $land$ext = $6&1;
  STACKTOP = sp;return ($land$ext|0);
 }
 $2 = $s$addr;
 $3 = $s$addr;
 $call2 = (_strlen($3)|0);
 $add$ptr = (($2) + ($call2)|0);
 $4 = $suffix$addr;
 $call3 = (_strlen($4)|0);
 $idx$neg = (0 - ($call3))|0;
 $add$ptr4 = (($add$ptr) + ($idx$neg)|0);
 $5 = $suffix$addr;
 $call5 = (_strcmp($add$ptr4,$5)|0);
 $cmp6 = ($call5|0)==(0);
 $6 = $cmp6;
 $land$ext = $6&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _M_vsnprintf($buf,$buf_len,$s,$args) {
 $buf = $buf|0;
 $buf_len = $buf_len|0;
 $s = $s|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $arrayidx = 0, $buf$addr = 0, $buf_len$addr = 0, $call = 0, $cmp = 0, $cmp1 = 0;
 var $cmp2 = 0, $result = 0, $retval = 0, $s$addr = 0, $sub = 0, $sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf$addr = $buf;
 $buf_len$addr = $buf_len;
 $s$addr = $s;
 $args$addr = $args;
 $0 = $buf_len$addr;
 $cmp = ($0>>>0)<(1);
 if ($cmp) {
  $retval = 0;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 $1 = $buf$addr;
 $2 = $buf_len$addr;
 $3 = $s$addr;
 $4 = $args$addr;
 $call = (_vsnprintf($1,$2,$3,$4)|0);
 $result = $call;
 $5 = $result;
 $cmp1 = ($5|0)<(0);
 if ($cmp1) {
  label = 5;
 } else {
  $6 = $result;
  $7 = $buf_len$addr;
  $cmp2 = ($6>>>0)>=($7>>>0);
  if ($cmp2) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $8 = $buf$addr;
  $9 = $buf_len$addr;
  $sub = (($9) - 1)|0;
  $arrayidx = (($8) + ($sub)|0);
  HEAP8[$arrayidx>>0] = 0;
  $10 = $buf_len$addr;
  $sub4 = (($10) - 1)|0;
  $result = $sub4;
 }
 $11 = $result;
 $retval = $11;
 $12 = $retval;
 STACKTOP = sp;return ($12|0);
}
function _M_snprintf($buf,$buf_len,$s,$varargs) {
 $buf = $buf|0;
 $buf_len = $buf_len|0;
 $s = $s|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $args = 0, $buf$addr = 0, $buf_len$addr = 0, $call = 0, $result = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $args = sp;
 $buf$addr = $buf;
 $buf_len$addr = $buf_len;
 $s$addr = $s;
 HEAP32[$args>>2] = $varargs;
 $0 = $buf$addr;
 $1 = $buf_len$addr;
 $2 = $s$addr;
 $call = (_M_vsnprintf($0,$1,$2,$args)|0);
 $result = $call;
 $3 = $result;
 STACKTOP = sp;return ($3|0);
}
function _P_Random() {
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $and = 0, $arrayidx = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99745]|0;
 $add = (($0) + 1)|0;
 $and = $add & 255;
 HEAP32[99745] = $and;
 $1 = HEAP32[99745]|0;
 $arrayidx = (49088 + ($1)|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $conv = $2&255;
 return ($conv|0);
}
function _M_Random() {
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $and = 0, $arrayidx = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[99744]|0;
 $add = (($0) + 1)|0;
 $and = $add & 255;
 HEAP32[99744] = $and;
 $1 = HEAP32[99744]|0;
 $arrayidx = (49088 + ($1)|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $conv = $2&255;
 return ($conv|0);
}
function _M_ClearRandom() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99745] = 0;
 HEAP32[99744] = 0;
 return;
}
function _T_MoveCeiling($ceiling) {
 $ceiling = $ceiling|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and21 = 0, $bottomheight = 0, $call = 0, $call20 = 0, $ceiling$addr = 0, $cmp = 0, $cmp31 = 0, $cmp44 = 0, $cond = 0, $cond1 = 0;
 var $crush = 0, $direction = 0, $direction12 = 0, $direction19 = 0, $direction2 = 0, $direction40 = 0, $res = 0, $sector = 0, $sector17 = 0, $sector27 = 0, $sector35 = 0, $sector4 = 0, $sector9 = 0, $soundorg = 0, $soundorg10 = 0, $soundorg28 = 0, $soundorg36 = 0, $speed = 0, $speed18 = 0, $speed38 = 0;
 var $speed48 = 0, $tobool = 0, $tobool22 = 0, $topheight = 0, $type = 0, $type24 = 0, $type33 = 0, $type46 = 0, $type6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ceiling$addr = $ceiling;
 $0 = $ceiling$addr;
 $direction = ((($0)) + 36|0);
 $1 = HEAP32[$direction>>2]|0;
 switch ($1|0) {
 case -1:  {
  $22 = $ceiling$addr;
  $sector17 = ((($22)) + 16|0);
  $23 = HEAP32[$sector17>>2]|0;
  $24 = $ceiling$addr;
  $speed18 = ((($24)) + 28|0);
  $25 = HEAP32[$speed18>>2]|0;
  $26 = $ceiling$addr;
  $bottomheight = ((($26)) + 20|0);
  $27 = HEAP32[$bottomheight>>2]|0;
  $28 = $ceiling$addr;
  $crush = ((($28)) + 32|0);
  $29 = HEAP32[$crush>>2]|0;
  $30 = $ceiling$addr;
  $direction19 = ((($30)) + 36|0);
  $31 = HEAP32[$direction19>>2]|0;
  $call20 = (_T_MovePlane($23,$25,$27,$29,1,$31)|0);
  $res = $call20;
  $32 = HEAP32[99905]|0;
  $and21 = $32 & 7;
  $tobool22 = ($and21|0)!=(0);
  if (!($tobool22)) {
   $33 = $ceiling$addr;
   $type24 = ((($33)) + 12|0);
   $34 = HEAP32[$type24>>2]|0;
   $cond = ($34|0)==(5);
   if (!($cond)) {
    $35 = $ceiling$addr;
    $sector27 = ((($35)) + 16|0);
    $36 = HEAP32[$sector27>>2]|0;
    $soundorg28 = ((($36)) + 44|0);
    _S_StartSound($soundorg28,22);
   }
  }
  $37 = $res;
  $cmp31 = ($37|0)==(2);
  if (!($cmp31)) {
   $45 = $res;
   $cmp44 = ($45|0)==(1);
   if (!($cmp44)) {
    STACKTOP = sp;return;
   }
   $46 = $ceiling$addr;
   $type46 = ((($46)) + 12|0);
   $47 = HEAP32[$type46>>2]|0;
   switch ($47|0) {
   case 2: case 3: case 5:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $48 = $ceiling$addr;
   $speed48 = ((($48)) + 28|0);
   HEAP32[$speed48>>2] = 8192;
   STACKTOP = sp;return;
  }
  $38 = $ceiling$addr;
  $type33 = ((($38)) + 12|0);
  $39 = HEAP32[$type33>>2]|0;
  switch ($39|0) {
  case 5:  {
   $40 = $ceiling$addr;
   $sector35 = ((($40)) + 16|0);
   $41 = HEAP32[$sector35>>2]|0;
   $soundorg36 = ((($41)) + 44|0);
   _S_StartSound($soundorg36,19);
   label = 16;
   break;
  }
  case 3:  {
   label = 16;
   break;
  }
  case 4:  {
   break;
  }
  case 0: case 2:  {
   $44 = $ceiling$addr;
   _P_RemoveActiveCeiling($44);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  if ((label|0) == 16) {
   $42 = $ceiling$addr;
   $speed38 = ((($42)) + 28|0);
   HEAP32[$speed38>>2] = 65536;
  }
  $43 = $ceiling$addr;
  $direction40 = ((($43)) + 36|0);
  HEAP32[$direction40>>2] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $2 = $ceiling$addr;
  $sector = ((($2)) + 16|0);
  $3 = HEAP32[$sector>>2]|0;
  $4 = $ceiling$addr;
  $speed = ((($4)) + 28|0);
  $5 = HEAP32[$speed>>2]|0;
  $6 = $ceiling$addr;
  $topheight = ((($6)) + 24|0);
  $7 = HEAP32[$topheight>>2]|0;
  $8 = $ceiling$addr;
  $direction2 = ((($8)) + 36|0);
  $9 = HEAP32[$direction2>>2]|0;
  $call = (_T_MovePlane($3,$5,$7,0,1,$9)|0);
  $res = $call;
  $10 = HEAP32[99905]|0;
  $and = $10 & 7;
  $tobool = ($and|0)!=(0);
  if (!($tobool)) {
   $11 = $ceiling$addr;
   $type = ((($11)) + 12|0);
   $12 = HEAP32[$type>>2]|0;
   $cond1 = ($12|0)==(5);
   if (!($cond1)) {
    $13 = $ceiling$addr;
    $sector4 = ((($13)) + 16|0);
    $14 = HEAP32[$sector4>>2]|0;
    $soundorg = ((($14)) + 44|0);
    _S_StartSound($soundorg,22);
   }
  }
  $15 = $res;
  $cmp = ($15|0)==(2);
  if (!($cmp)) {
   STACKTOP = sp;return;
  }
  $16 = $ceiling$addr;
  $type6 = ((($16)) + 12|0);
  $17 = HEAP32[$type6>>2]|0;
  switch ($17|0) {
  case 1:  {
   $18 = $ceiling$addr;
   _P_RemoveActiveCeiling($18);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $19 = $ceiling$addr;
   $sector9 = ((($19)) + 16|0);
   $20 = HEAP32[$sector9>>2]|0;
   $soundorg10 = ((($20)) + 44|0);
   _S_StartSound($soundorg10,19);
   break;
  }
  case 3: case 4:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  $21 = $ceiling$addr;
  $direction12 = ((($21)) + 36|0);
  HEAP32[$direction12>>2] = -1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _P_RemoveActiveCeiling($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $c$addr = 0, $cmp = 0, $cmp1 = 0, $i = 0, $inc = 0, $sector = 0;
 var $specialdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = $i;
  $arrayidx = (187392 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $3 = $c$addr;
  $cmp1 = ($2|0)==($3|0);
  $4 = $i;
  if ($cmp1) {
   break;
  }
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 $arrayidx2 = (187392 + ($4<<2)|0);
 $5 = HEAP32[$arrayidx2>>2]|0;
 $sector = ((($5)) + 16|0);
 $6 = HEAP32[$sector>>2]|0;
 $specialdata = ((($6)) + 76|0);
 HEAP32[$specialdata>>2] = 0;
 $7 = $i;
 $arrayidx3 = (187392 + ($7<<2)|0);
 $8 = HEAP32[$arrayidx3>>2]|0;
 _P_RemoveThinker($8);
 $9 = $i;
 $arrayidx4 = (187392 + ($9<<2)|0);
 HEAP32[$arrayidx4>>2] = 0;
 STACKTOP = sp;return;
}
function _EV_DoCeiling($line,$type) {
 $line = $line|0;
 $type = $type|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add16 = 0, $arrayidx = 0, $bottomheight = 0, $bottomheight12 = 0, $bottomheight15 = 0, $call = 0, $call1 = 0, $call21 = 0, $ceiling = 0, $ceilingheight = 0;
 var $ceilingheight8 = 0, $cmp = 0, $cmp13 = 0, $conv = 0, $crush = 0, $crush5 = 0, $crush7 = 0, $direction = 0, $direction18 = 0, $direction23 = 0, $function = 0, $line$addr = 0, $rtn = 0, $sec = 0, $secnum = 0, $sector = 0, $specialdata = 0, $specialdata2 = 0, $speed = 0, $speed19 = 0;
 var $speed24 = 0, $switch = 0, $tag = 0, $tag26 = 0, $tobool = 0, $topheight = 0, $topheight22 = 0, $topheight9 = 0, $type$addr = 0, $type27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $type$addr = $type;
 $secnum = -1;
 $rtn = 0;
 $0 = $type$addr;
 $$off = (($0) + -3)|0;
 $switch = ($$off>>>0)<(3);
 if ($switch) {
  $1 = $line$addr;
  _P_ActivateInStasisCeiling($1);
 }
 while(1) {
  $2 = $line$addr;
  $3 = $secnum;
  $call = (_P_FindSectorFromLineTag($2,$3)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   break;
  }
  $4 = HEAP32[99850]|0;
  $5 = $secnum;
  $arrayidx = (($4) + (($5*88)|0)|0);
  $sec = $arrayidx;
  $6 = $sec;
  $specialdata = ((($6)) + 76|0);
  $7 = HEAP32[$specialdata>>2]|0;
  $tobool = ($7|0)!=(0|0);
  if ($tobool) {
   continue;
  }
  $rtn = 1;
  $call1 = (_Z_Malloc(48,6,0)|0);
  $ceiling = $call1;
  $8 = $ceiling;
  _P_AddThinker($8);
  $9 = $ceiling;
  $10 = $sec;
  $specialdata2 = ((($10)) + 76|0);
  HEAP32[$specialdata2>>2] = $9;
  $11 = $ceiling;
  $function = ((($11)) + 8|0);
  HEAP32[$function>>2] = 133;
  $12 = $sec;
  $13 = $ceiling;
  $sector = ((($13)) + 16|0);
  HEAP32[$sector>>2] = $12;
  $14 = $ceiling;
  $crush = ((($14)) + 32|0);
  HEAP32[$crush>>2] = 0;
  $15 = $type$addr;
  switch ($15|0) {
  case 4:  {
   $16 = $ceiling;
   $crush5 = ((($16)) + 32|0);
   HEAP32[$crush5>>2] = 1;
   $17 = $sec;
   $ceilingheight = ((($17)) + 4|0);
   $18 = HEAP32[$ceilingheight>>2]|0;
   $19 = $ceiling;
   $topheight = ((($19)) + 24|0);
   HEAP32[$topheight>>2] = $18;
   $20 = $sec;
   $21 = HEAP32[$20>>2]|0;
   $add = (($21) + 524288)|0;
   $22 = $ceiling;
   $bottomheight = ((($22)) + 20|0);
   HEAP32[$bottomheight>>2] = $add;
   $23 = $ceiling;
   $direction = ((($23)) + 36|0);
   HEAP32[$direction>>2] = -1;
   $24 = $ceiling;
   $speed = ((($24)) + 28|0);
   HEAP32[$speed>>2] = 131072;
   break;
  }
  case 3: case 5:  {
   $25 = $ceiling;
   $crush7 = ((($25)) + 32|0);
   HEAP32[$crush7>>2] = 1;
   $26 = $sec;
   $ceilingheight8 = ((($26)) + 4|0);
   $27 = HEAP32[$ceilingheight8>>2]|0;
   $28 = $ceiling;
   $topheight9 = ((($28)) + 24|0);
   HEAP32[$topheight9>>2] = $27;
   label = 10;
   break;
  }
  case 0: case 2:  {
   label = 10;
   break;
  }
  case 1:  {
   $37 = $sec;
   $call21 = (_P_FindHighestCeilingSurrounding($37)|0);
   $38 = $ceiling;
   $topheight22 = ((($38)) + 24|0);
   HEAP32[$topheight22>>2] = $call21;
   $39 = $ceiling;
   $direction23 = ((($39)) + 36|0);
   HEAP32[$direction23>>2] = 1;
   $40 = $ceiling;
   $speed24 = ((($40)) + 28|0);
   HEAP32[$speed24>>2] = 65536;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 10) {
   label = 0;
   $29 = $sec;
   $30 = HEAP32[$29>>2]|0;
   $31 = $ceiling;
   $bottomheight12 = ((($31)) + 20|0);
   HEAP32[$bottomheight12>>2] = $30;
   $32 = $type$addr;
   $cmp13 = ($32|0)!=(0);
   if ($cmp13) {
    $33 = $ceiling;
    $bottomheight15 = ((($33)) + 20|0);
    $34 = HEAP32[$bottomheight15>>2]|0;
    $add16 = (($34) + 524288)|0;
    HEAP32[$bottomheight15>>2] = $add16;
   }
   $35 = $ceiling;
   $direction18 = ((($35)) + 36|0);
   HEAP32[$direction18>>2] = -1;
   $36 = $ceiling;
   $speed19 = ((($36)) + 28|0);
   HEAP32[$speed19>>2] = 65536;
  }
  $41 = $sec;
  $tag = ((($41)) + 16|0);
  $42 = HEAP16[$tag>>1]|0;
  $conv = $42 << 16 >> 16;
  $43 = $ceiling;
  $tag26 = ((($43)) + 40|0);
  HEAP32[$tag26>>2] = $conv;
  $44 = $type$addr;
  $45 = $ceiling;
  $type27 = ((($45)) + 12|0);
  HEAP32[$type27>>2] = $44;
  $46 = $ceiling;
  _P_AddActiveCeiling($46);
 }
 $47 = $rtn;
 STACKTOP = sp;return ($47|0);
}
function _P_ActivateInStasisCeiling($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx6 = 0, $arrayidx9 = 0, $cmp = 0, $cmp3 = 0, $cmp7 = 0, $conv = 0, $direction = 0, $direction11 = 0, $function = 0, $i = 0, $inc = 0, $line$addr = 0, $olddirection = 0, $tag = 0, $tag2 = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $line$addr = $line;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (187392 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0|0);
  if ($tobool) {
   $3 = $i;
   $arrayidx1 = (187392 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx1>>2]|0;
   $tag = ((($4)) + 40|0);
   $5 = HEAP32[$tag>>2]|0;
   $6 = $line$addr;
   $tag2 = ((($6)) + 20|0);
   $7 = HEAP16[$tag2>>1]|0;
   $conv = $7 << 16 >> 16;
   $cmp3 = ($5|0)==($conv|0);
   if ($cmp3) {
    $8 = $i;
    $arrayidx6 = (187392 + ($8<<2)|0);
    $9 = HEAP32[$arrayidx6>>2]|0;
    $direction = ((($9)) + 36|0);
    $10 = HEAP32[$direction>>2]|0;
    $cmp7 = ($10|0)==(0);
    if ($cmp7) {
     $11 = $i;
     $arrayidx9 = (187392 + ($11<<2)|0);
     $12 = HEAP32[$arrayidx9>>2]|0;
     $olddirection = ((($12)) + 44|0);
     $13 = HEAP32[$olddirection>>2]|0;
     $14 = $i;
     $arrayidx10 = (187392 + ($14<<2)|0);
     $15 = HEAP32[$arrayidx10>>2]|0;
     $direction11 = ((($15)) + 36|0);
     HEAP32[$direction11>>2] = $13;
     $16 = $i;
     $arrayidx12 = (187392 + ($16<<2)|0);
     $17 = HEAP32[$arrayidx12>>2]|0;
     $function = ((($17)) + 8|0);
     HEAP32[$function>>2] = 133;
    }
   }
  }
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _P_AddActiveCeiling($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $arrayidx2 = 0, $c$addr = 0, $cmp = 0, $cmp1 = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = $i;
  $arrayidx = (187392 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($2|0)==(0|0);
  if ($cmp1) {
   break;
  }
  $5 = $i;
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 $3 = $c$addr;
 $4 = $i;
 $arrayidx2 = (187392 + ($4<<2)|0);
 HEAP32[$arrayidx2>>2] = $3;
 STACKTOP = sp;return;
}
function _EV_CeilingCrushStop($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx6 = 0, $arrayidx9 = 0, $cmp = 0, $cmp3 = 0, $cmp7 = 0, $conv = 0, $direction = 0, $direction10 = 0, $direction14 = 0, $function = 0, $i = 0, $inc = 0, $line$addr = 0;
 var $olddirection = 0, $rtn = 0, $tag = 0, $tag2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $line$addr = $line;
 $rtn = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (187392 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0|0);
  if ($tobool) {
   $3 = $i;
   $arrayidx1 = (187392 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx1>>2]|0;
   $tag = ((($4)) + 40|0);
   $5 = HEAP32[$tag>>2]|0;
   $6 = $line$addr;
   $tag2 = ((($6)) + 20|0);
   $7 = HEAP16[$tag2>>1]|0;
   $conv = $7 << 16 >> 16;
   $cmp3 = ($5|0)==($conv|0);
   if ($cmp3) {
    $8 = $i;
    $arrayidx6 = (187392 + ($8<<2)|0);
    $9 = HEAP32[$arrayidx6>>2]|0;
    $direction = ((($9)) + 36|0);
    $10 = HEAP32[$direction>>2]|0;
    $cmp7 = ($10|0)!=(0);
    if ($cmp7) {
     $11 = $i;
     $arrayidx9 = (187392 + ($11<<2)|0);
     $12 = HEAP32[$arrayidx9>>2]|0;
     $direction10 = ((($12)) + 36|0);
     $13 = HEAP32[$direction10>>2]|0;
     $14 = $i;
     $arrayidx11 = (187392 + ($14<<2)|0);
     $15 = HEAP32[$arrayidx11>>2]|0;
     $olddirection = ((($15)) + 44|0);
     HEAP32[$olddirection>>2] = $13;
     $16 = $i;
     $arrayidx12 = (187392 + ($16<<2)|0);
     $17 = HEAP32[$arrayidx12>>2]|0;
     $function = ((($17)) + 8|0);
     HEAP32[$function>>2] = 0;
     $18 = $i;
     $arrayidx13 = (187392 + ($18<<2)|0);
     $19 = HEAP32[$arrayidx13>>2]|0;
     $direction14 = ((($19)) + 36|0);
     HEAP32[$direction14>>2] = 0;
     $rtn = 1;
    }
   }
  }
  $20 = $i;
  $inc = (($20) + 1)|0;
  $i = $inc;
 }
 $21 = $rtn;
 STACKTOP = sp;return ($21|0);
}
function _T_VerticalDoor($door) {
 $door = $door|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call59 = 0, $cmp = 0, $cmp44 = 0, $cmp60 = 0, $cond = 0, $dec = 0, $dec13 = 0, $direction = 0, $direction18 = 0, $direction2 = 0;
 var $direction28 = 0, $direction4 = 0, $direction40 = 0, $direction49 = 0, $direction58 = 0, $direction64 = 0, $direction8 = 0, $door$addr = 0, $res = 0, $sector = 0, $sector20 = 0, $sector26 = 0, $sector27 = 0, $sector32 = 0, $sector33 = 0, $sector36 = 0, $sector5 = 0, $sector50 = 0, $sector56 = 0, $sector67 = 0;
 var $sector9 = 0, $soundorg = 0, $soundorg10 = 0, $soundorg21 = 0, $soundorg34 = 0, $soundorg51 = 0, $soundorg6 = 0, $specialdata = 0, $specialdata37 = 0, $specialdata68 = 0, $speed = 0, $speed57 = 0, $tobool = 0, $tobool14 = 0, $topcountdown = 0, $topcountdown12 = 0, $topcountdown41 = 0, $topcountdown65 = 0, $topheight = 0, $topwait = 0;
 var $type = 0, $type16 = 0, $type19 = 0, $type30 = 0, $type46 = 0, $type62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $door$addr = $door;
 $0 = $door$addr;
 $direction = ((($0)) + 28|0);
 $1 = HEAP32[$direction>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = $door$addr;
  $topcountdown = ((($2)) + 36|0);
  $3 = HEAP32[$topcountdown>>2]|0;
  $dec = (($3) + -1)|0;
  HEAP32[$topcountdown>>2] = $dec;
  $tobool = ($dec|0)!=(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  $4 = $door$addr;
  $type = ((($4)) + 12|0);
  $5 = HEAP32[$type>>2]|0;
  switch ($5|0) {
  case 5:  {
   $6 = $door$addr;
   $direction2 = ((($6)) + 28|0);
   HEAP32[$direction2>>2] = -1;
   $7 = $door$addr;
   $sector = ((($7)) + 16|0);
   $8 = HEAP32[$sector>>2]|0;
   $soundorg = ((($8)) + 44|0);
   _S_StartSound($soundorg,89);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $9 = $door$addr;
   $direction4 = ((($9)) + 28|0);
   HEAP32[$direction4>>2] = -1;
   $10 = $door$addr;
   $sector5 = ((($10)) + 16|0);
   $11 = HEAP32[$sector5>>2]|0;
   $soundorg6 = ((($11)) + 44|0);
   _S_StartSound($soundorg6,21);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $12 = $door$addr;
   $direction8 = ((($12)) + 28|0);
   HEAP32[$direction8>>2] = 1;
   $13 = $door$addr;
   $sector9 = ((($13)) + 16|0);
   $14 = HEAP32[$sector9>>2]|0;
   $soundorg10 = ((($14)) + 44|0);
   _S_StartSound($soundorg10,20);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 2:  {
  $15 = $door$addr;
  $topcountdown12 = ((($15)) + 36|0);
  $16 = HEAP32[$topcountdown12>>2]|0;
  $dec13 = (($16) + -1)|0;
  HEAP32[$topcountdown12>>2] = $dec13;
  $tobool14 = ($dec13|0)!=(0);
  if ($tobool14) {
   STACKTOP = sp;return;
  }
  $17 = $door$addr;
  $type16 = ((($17)) + 12|0);
  $18 = HEAP32[$type16>>2]|0;
  $cond = ($18|0)==(4);
  if (!($cond)) {
   STACKTOP = sp;return;
  }
  $19 = $door$addr;
  $direction18 = ((($19)) + 28|0);
  HEAP32[$direction18>>2] = 1;
  $20 = $door$addr;
  $type19 = ((($20)) + 12|0);
  HEAP32[$type19>>2] = 0;
  $21 = $door$addr;
  $sector20 = ((($21)) + 16|0);
  $22 = HEAP32[$sector20>>2]|0;
  $soundorg21 = ((($22)) + 44|0);
  _S_StartSound($soundorg21,20);
  STACKTOP = sp;return;
  break;
 }
 case -1:  {
  $23 = $door$addr;
  $sector26 = ((($23)) + 16|0);
  $24 = HEAP32[$sector26>>2]|0;
  $25 = $door$addr;
  $speed = ((($25)) + 24|0);
  $26 = HEAP32[$speed>>2]|0;
  $27 = $door$addr;
  $sector27 = ((($27)) + 16|0);
  $28 = HEAP32[$sector27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = $door$addr;
  $direction28 = ((($30)) + 28|0);
  $31 = HEAP32[$direction28>>2]|0;
  $call = (_T_MovePlane($24,$26,$29,0,1,$31)|0);
  $res = $call;
  $32 = $res;
  $cmp = ($32|0)==(2);
  if (!($cmp)) {
   $45 = $res;
   $cmp44 = ($45|0)==(1);
   if (!($cmp44)) {
    STACKTOP = sp;return;
   }
   $46 = $door$addr;
   $type46 = ((($46)) + 12|0);
   $47 = HEAP32[$type46>>2]|0;
   switch ($47|0) {
   case 2: case 7:  {
    STACKTOP = sp;return;
    break;
   }
   default: {
   }
   }
   $48 = $door$addr;
   $direction49 = ((($48)) + 28|0);
   HEAP32[$direction49>>2] = 1;
   $49 = $door$addr;
   $sector50 = ((($49)) + 16|0);
   $50 = HEAP32[$sector50>>2]|0;
   $soundorg51 = ((($50)) + 44|0);
   _S_StartSound($soundorg51,20);
   STACKTOP = sp;return;
  }
  $33 = $door$addr;
  $type30 = ((($33)) + 12|0);
  $34 = HEAP32[$type30>>2]|0;
  switch ($34|0) {
  case 7: case 5:  {
   $35 = $door$addr;
   $sector32 = ((($35)) + 16|0);
   $36 = HEAP32[$sector32>>2]|0;
   $specialdata = ((($36)) + 76|0);
   HEAP32[$specialdata>>2] = 0;
   $37 = $door$addr;
   _P_RemoveThinker($37);
   $38 = $door$addr;
   $sector33 = ((($38)) + 16|0);
   $39 = HEAP32[$sector33>>2]|0;
   $soundorg34 = ((($39)) + 44|0);
   _S_StartSound($soundorg34,89);
   STACKTOP = sp;return;
   break;
  }
  case 2: case 0:  {
   $40 = $door$addr;
   $sector36 = ((($40)) + 16|0);
   $41 = HEAP32[$sector36>>2]|0;
   $specialdata37 = ((($41)) + 76|0);
   HEAP32[$specialdata37>>2] = 0;
   $42 = $door$addr;
   _P_RemoveThinker($42);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $43 = $door$addr;
   $direction40 = ((($43)) + 28|0);
   HEAP32[$direction40>>2] = 0;
   $44 = $door$addr;
   $topcountdown41 = ((($44)) + 36|0);
   HEAP32[$topcountdown41>>2] = 1050;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 1:  {
  $51 = $door$addr;
  $sector56 = ((($51)) + 16|0);
  $52 = HEAP32[$sector56>>2]|0;
  $53 = $door$addr;
  $speed57 = ((($53)) + 24|0);
  $54 = HEAP32[$speed57>>2]|0;
  $55 = $door$addr;
  $topheight = ((($55)) + 20|0);
  $56 = HEAP32[$topheight>>2]|0;
  $57 = $door$addr;
  $direction58 = ((($57)) + 28|0);
  $58 = HEAP32[$direction58>>2]|0;
  $call59 = (_T_MovePlane($52,$54,$56,0,1,$58)|0);
  $res = $call59;
  $59 = $res;
  $cmp60 = ($59|0)==(2);
  if (!($cmp60)) {
   STACKTOP = sp;return;
  }
  $60 = $door$addr;
  $type62 = ((($60)) + 12|0);
  $61 = HEAP32[$type62>>2]|0;
  switch ($61|0) {
  case 0: case 5:  {
   $62 = $door$addr;
   $direction64 = ((($62)) + 28|0);
   HEAP32[$direction64>>2] = 0;
   $63 = $door$addr;
   $topwait = ((($63)) + 32|0);
   $64 = HEAP32[$topwait>>2]|0;
   $65 = $door$addr;
   $topcountdown65 = ((($65)) + 36|0);
   HEAP32[$topcountdown65>>2] = $64;
   STACKTOP = sp;return;
   break;
  }
  case 3: case 6: case 1:  {
   $66 = $door$addr;
   $sector67 = ((($66)) + 16|0);
   $67 = HEAP32[$sector67>>2]|0;
   $specialdata68 = ((($67)) + 76|0);
   HEAP32[$specialdata68>>2] = 0;
   $68 = $door$addr;
   _P_RemoveThinker($68);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _EV_DoLockedDoor($line,$type,$thing) {
 $line = $line|0;
 $type = $type|0;
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx15 = 0, $arrayidx19 = 0, $arrayidx29 = 0, $arrayidx33 = 0, $arrayidx6 = 0, $call = 0, $cards = 0, $cards14 = 0, $cards18 = 0, $cards28 = 0, $cards32 = 0, $cards5 = 0, $conv = 0, $line$addr = 0;
 var $message = 0, $message22 = 0, $message36 = 0, $p = 0, $player = 0, $retval = 0, $special = 0, $thing$addr = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool16 = 0, $tobool20 = 0, $tobool25 = 0, $tobool30 = 0, $tobool34 = 0, $tobool4 = 0, $tobool7 = 0, $type$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $type$addr = $type;
 $thing$addr = $thing;
 $0 = $thing$addr;
 $player = ((($0)) + 132|0);
 $1 = HEAP32[$player>>2]|0;
 $p = $1;
 $2 = $p;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  $retval = 0;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 $3 = $line$addr;
 $special = ((($3)) + 18|0);
 $4 = HEAP16[$special>>1]|0;
 $conv = $4 << 16 >> 16;
 switch ($conv|0) {
 case 133: case 99:  {
  $5 = $p;
  $tobool1 = ($5|0)!=(0|0);
  if (!($tobool1)) {
   $retval = 0;
   $25 = $retval;
   STACKTOP = sp;return ($25|0);
  }
  $6 = $p;
  $cards = ((($6)) + 76|0);
  $7 = HEAP32[$cards>>2]|0;
  $tobool4 = ($7|0)!=(0);
  if (!($tobool4)) {
   $8 = $p;
   $cards5 = ((($8)) + 76|0);
   $arrayidx6 = ((($cards5)) + 12|0);
   $9 = HEAP32[$arrayidx6>>2]|0;
   $tobool7 = ($9|0)!=(0);
   if (!($tobool7)) {
    $10 = $p;
    $message = ((($10)) + 224|0);
    HEAP32[$message>>2] = 153054;
    _S_StartSound(0,34);
    $retval = 0;
    $25 = $retval;
    STACKTOP = sp;return ($25|0);
   }
  }
  break;
 }
 case 135: case 134:  {
  $11 = $p;
  $tobool11 = ($11|0)!=(0|0);
  if (!($tobool11)) {
   $retval = 0;
   $25 = $retval;
   STACKTOP = sp;return ($25|0);
  }
  $12 = $p;
  $cards14 = ((($12)) + 76|0);
  $arrayidx15 = ((($cards14)) + 8|0);
  $13 = HEAP32[$arrayidx15>>2]|0;
  $tobool16 = ($13|0)!=(0);
  if (!($tobool16)) {
   $14 = $p;
   $cards18 = ((($14)) + 76|0);
   $arrayidx19 = ((($cards18)) + 20|0);
   $15 = HEAP32[$arrayidx19>>2]|0;
   $tobool20 = ($15|0)!=(0);
   if (!($tobool20)) {
    $16 = $p;
    $message22 = ((($16)) + 224|0);
    HEAP32[$message22>>2] = 153098;
    _S_StartSound(0,34);
    $retval = 0;
    $25 = $retval;
    STACKTOP = sp;return ($25|0);
   }
  }
  break;
 }
 case 137: case 136:  {
  $17 = $p;
  $tobool25 = ($17|0)!=(0|0);
  if (!($tobool25)) {
   $retval = 0;
   $25 = $retval;
   STACKTOP = sp;return ($25|0);
  }
  $18 = $p;
  $cards28 = ((($18)) + 76|0);
  $arrayidx29 = ((($cards28)) + 4|0);
  $19 = HEAP32[$arrayidx29>>2]|0;
  $tobool30 = ($19|0)!=(0);
  if (!($tobool30)) {
   $20 = $p;
   $cards32 = ((($20)) + 76|0);
   $arrayidx33 = ((($cards32)) + 16|0);
   $21 = HEAP32[$arrayidx33>>2]|0;
   $tobool34 = ($21|0)!=(0);
   if (!($tobool34)) {
    $22 = $p;
    $message36 = ((($22)) + 224|0);
    HEAP32[$message36>>2] = 153141;
    _S_StartSound(0,34);
    $retval = 0;
    $25 = $retval;
    STACKTOP = sp;return ($25|0);
   }
  }
  break;
 }
 default: {
 }
 }
 $23 = $line$addr;
 $24 = $type$addr;
 $call = (_EV_DoDoor($23,$24)|0);
 $retval = $call;
 $25 = $retval;
 STACKTOP = sp;return ($25|0);
}
function _EV_DoDoor($line,$type) {
 $line = $line|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call10 = 0, $call24 = 0, $call38 = 0, $call5 = 0, $ceilingheight = 0, $ceilingheight30 = 0, $ceilingheight43 = 0, $cmp = 0, $cmp31 = 0, $cmp44 = 0, $direction = 0, $direction14 = 0, $direction19 = 0, $direction23 = 0, $direction37 = 0;
 var $door = 0, $function = 0, $line$addr = 0, $rtn = 0, $sec = 0, $secnum = 0, $sector = 0, $sector15 = 0, $sector20 = 0, $sector33 = 0, $sector46 = 0, $sector8 = 0, $soundorg = 0, $soundorg16 = 0, $soundorg21 = 0, $soundorg34 = 0, $soundorg47 = 0, $specialdata = 0, $specialdata2 = 0, $speed = 0;
 var $speed28 = 0, $speed7 = 0, $sub = 0, $sub13 = 0, $sub27 = 0, $sub41 = 0, $tobool = 0, $topheight = 0, $topheight11 = 0, $topheight12 = 0, $topheight18 = 0, $topheight25 = 0, $topheight26 = 0, $topheight29 = 0, $topheight39 = 0, $topheight40 = 0, $topheight42 = 0, $topheight6 = 0, $topwait = 0, $type$addr = 0;
 var $type4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $type$addr = $type;
 $secnum = -1;
 $rtn = 0;
 while(1) {
  $0 = $line$addr;
  $1 = $secnum;
  $call = (_P_FindSectorFromLineTag($0,$1)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99850]|0;
  $3 = $secnum;
  $arrayidx = (($2) + (($3*88)|0)|0);
  $sec = $arrayidx;
  $4 = $sec;
  $specialdata = ((($4)) + 76|0);
  $5 = HEAP32[$specialdata>>2]|0;
  $tobool = ($5|0)!=(0|0);
  if ($tobool) {
   continue;
  }
  $rtn = 1;
  $call1 = (_Z_Malloc(40,6,0)|0);
  $door = $call1;
  $6 = $door;
  _P_AddThinker($6);
  $7 = $door;
  $8 = $sec;
  $specialdata2 = ((($8)) + 76|0);
  HEAP32[$specialdata2>>2] = $7;
  $9 = $door;
  $function = ((($9)) + 8|0);
  HEAP32[$function>>2] = 134;
  $10 = $sec;
  $11 = $door;
  $sector = ((($11)) + 16|0);
  HEAP32[$sector>>2] = $10;
  $12 = $type$addr;
  $13 = $door;
  $type4 = ((($13)) + 12|0);
  HEAP32[$type4>>2] = $12;
  $14 = $door;
  $topwait = ((($14)) + 32|0);
  HEAP32[$topwait>>2] = 150;
  $15 = $door;
  $speed = ((($15)) + 24|0);
  HEAP32[$speed>>2] = 131072;
  $16 = $type$addr;
  switch ($16|0) {
  case 7:  {
   $17 = $sec;
   $call5 = (_P_FindLowestCeilingSurrounding($17)|0);
   $18 = $door;
   $topheight = ((($18)) + 20|0);
   HEAP32[$topheight>>2] = $call5;
   $19 = $door;
   $topheight6 = ((($19)) + 20|0);
   $20 = HEAP32[$topheight6>>2]|0;
   $sub = (($20) - 262144)|0;
   HEAP32[$topheight6>>2] = $sub;
   $21 = $door;
   $direction = ((($21)) + 28|0);
   HEAP32[$direction>>2] = -1;
   $22 = $door;
   $speed7 = ((($22)) + 24|0);
   HEAP32[$speed7>>2] = 524288;
   $23 = $door;
   $sector8 = ((($23)) + 16|0);
   $24 = HEAP32[$sector8>>2]|0;
   $soundorg = ((($24)) + 44|0);
   _S_StartSound($soundorg,89);
   break;
  }
  case 2:  {
   $25 = $sec;
   $call10 = (_P_FindLowestCeilingSurrounding($25)|0);
   $26 = $door;
   $topheight11 = ((($26)) + 20|0);
   HEAP32[$topheight11>>2] = $call10;
   $27 = $door;
   $topheight12 = ((($27)) + 20|0);
   $28 = HEAP32[$topheight12>>2]|0;
   $sub13 = (($28) - 262144)|0;
   HEAP32[$topheight12>>2] = $sub13;
   $29 = $door;
   $direction14 = ((($29)) + 28|0);
   HEAP32[$direction14>>2] = -1;
   $30 = $door;
   $sector15 = ((($30)) + 16|0);
   $31 = HEAP32[$sector15>>2]|0;
   $soundorg16 = ((($31)) + 44|0);
   _S_StartSound($soundorg16,21);
   break;
  }
  case 1:  {
   $32 = $sec;
   $ceilingheight = ((($32)) + 4|0);
   $33 = HEAP32[$ceilingheight>>2]|0;
   $34 = $door;
   $topheight18 = ((($34)) + 20|0);
   HEAP32[$topheight18>>2] = $33;
   $35 = $door;
   $direction19 = ((($35)) + 28|0);
   HEAP32[$direction19>>2] = -1;
   $36 = $door;
   $sector20 = ((($36)) + 16|0);
   $37 = HEAP32[$sector20>>2]|0;
   $soundorg21 = ((($37)) + 44|0);
   _S_StartSound($soundorg21,21);
   break;
  }
  case 6: case 5:  {
   $38 = $door;
   $direction23 = ((($38)) + 28|0);
   HEAP32[$direction23>>2] = 1;
   $39 = $sec;
   $call24 = (_P_FindLowestCeilingSurrounding($39)|0);
   $40 = $door;
   $topheight25 = ((($40)) + 20|0);
   HEAP32[$topheight25>>2] = $call24;
   $41 = $door;
   $topheight26 = ((($41)) + 20|0);
   $42 = HEAP32[$topheight26>>2]|0;
   $sub27 = (($42) - 262144)|0;
   HEAP32[$topheight26>>2] = $sub27;
   $43 = $door;
   $speed28 = ((($43)) + 24|0);
   HEAP32[$speed28>>2] = 524288;
   $44 = $door;
   $topheight29 = ((($44)) + 20|0);
   $45 = HEAP32[$topheight29>>2]|0;
   $46 = $sec;
   $ceilingheight30 = ((($46)) + 4|0);
   $47 = HEAP32[$ceilingheight30>>2]|0;
   $cmp31 = ($45|0)!=($47|0);
   if ($cmp31) {
    $48 = $door;
    $sector33 = ((($48)) + 16|0);
    $49 = HEAP32[$sector33>>2]|0;
    $soundorg34 = ((($49)) + 44|0);
    _S_StartSound($soundorg34,88);
   }
   break;
  }
  case 3: case 0:  {
   $50 = $door;
   $direction37 = ((($50)) + 28|0);
   HEAP32[$direction37>>2] = 1;
   $51 = $sec;
   $call38 = (_P_FindLowestCeilingSurrounding($51)|0);
   $52 = $door;
   $topheight39 = ((($52)) + 20|0);
   HEAP32[$topheight39>>2] = $call38;
   $53 = $door;
   $topheight40 = ((($53)) + 20|0);
   $54 = HEAP32[$topheight40>>2]|0;
   $sub41 = (($54) - 262144)|0;
   HEAP32[$topheight40>>2] = $sub41;
   $55 = $door;
   $topheight42 = ((($55)) + 20|0);
   $56 = HEAP32[$topheight42>>2]|0;
   $57 = $sec;
   $ceilingheight43 = ((($57)) + 4|0);
   $58 = HEAP32[$ceilingheight43>>2]|0;
   $cmp44 = ($56|0)!=($58|0);
   if ($cmp44) {
    $59 = $door;
    $sector46 = ((($59)) + 16|0);
    $60 = HEAP32[$sector46>>2]|0;
    $soundorg47 = ((($60)) + 44|0);
    _S_StartSound($soundorg47,20);
   }
   break;
  }
  default: {
  }
  }
 }
 $61 = $rtn;
 STACKTOP = sp;return ($61|0);
}
function _EV_VerticalDoor($line,$thing) {
 $line = $line|0;
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx27 = 0, $arrayidx31 = 0, $arrayidx36 = 0, $arrayidx37 = 0;
 var $arrayidx4 = 0, $call76 = 0, $call98 = 0, $cards = 0, $cards12 = 0, $cards16 = 0, $cards26 = 0, $cards3 = 0, $cards30 = 0, $cmp = 0, $cmp51 = 0, $cmp59 = 0, $conv = 0, $conv42 = 0, $conv70 = 0, $conv85 = 0, $direction = 0, $direction46 = 0, $direction54 = 0, $direction63 = 0;
 var $direction83 = 0, $door = 0, $function = 0, $function57 = 0, $function80 = 0, $idxprom = 0, $line$addr = 0, $message = 0, $message20 = 0, $message34 = 0, $plat = 0, $player = 0, $player1 = 0, $player47 = 0, $sec = 0, $sector = 0, $sector82 = 0, $side = 0, $sidenum = 0, $soundorg = 0;
 var $soundorg73 = 0, $soundorg74 = 0, $special = 0, $special41 = 0, $special69 = 0, $special84 = 0, $special89 = 0, $special95 = 0, $specialdata = 0, $specialdata40 = 0, $specialdata78 = 0, $speed = 0, $speed92 = 0, $speed96 = 0, $sub = 0, $thing$addr = 0, $tobool = 0, $tobool14 = 0, $tobool18 = 0, $tobool2 = 0;
 var $tobool23 = 0, $tobool28 = 0, $tobool32 = 0, $tobool38 = 0, $tobool48 = 0, $tobool5 = 0, $tobool9 = 0, $topheight = 0, $topheight99 = 0, $topwait = 0, $type = 0, $type88 = 0, $type91 = 0, $type94 = 0, $vararg_buffer = 0, $wait = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $line$addr = $line;
 $thing$addr = $thing;
 $side = 0;
 $0 = $thing$addr;
 $player1 = ((($0)) + 132|0);
 $1 = HEAP32[$player1>>2]|0;
 $player = $1;
 $2 = $line$addr;
 $special = ((($2)) + 18|0);
 $3 = HEAP16[$special>>1]|0;
 $conv = $3 << 16 >> 16;
 switch ($conv|0) {
 case 32: case 26:  {
  $4 = $player;
  $tobool = ($4|0)!=(0|0);
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
  $5 = $player;
  $cards = ((($5)) + 76|0);
  $6 = HEAP32[$cards>>2]|0;
  $tobool2 = ($6|0)!=(0);
  if (!($tobool2)) {
   $7 = $player;
   $cards3 = ((($7)) + 76|0);
   $arrayidx4 = ((($cards3)) + 12|0);
   $8 = HEAP32[$arrayidx4>>2]|0;
   $tobool5 = ($8|0)!=(0);
   if (!($tobool5)) {
    $9 = $player;
    $message = ((($9)) + 224|0);
    HEAP32[$message>>2] = 153187;
    _S_StartSound(0,34);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 34: case 27:  {
  $10 = $player;
  $tobool9 = ($10|0)!=(0|0);
  if (!($tobool9)) {
   STACKTOP = sp;return;
  }
  $11 = $player;
  $cards12 = ((($11)) + 76|0);
  $arrayidx13 = ((($cards12)) + 4|0);
  $12 = HEAP32[$arrayidx13>>2]|0;
  $tobool14 = ($12|0)!=(0);
  if (!($tobool14)) {
   $13 = $player;
   $cards16 = ((($13)) + 76|0);
   $arrayidx17 = ((($cards16)) + 16|0);
   $14 = HEAP32[$arrayidx17>>2]|0;
   $tobool18 = ($14|0)!=(0);
   if (!($tobool18)) {
    $15 = $player;
    $message20 = ((($15)) + 224|0);
    HEAP32[$message20>>2] = 153225;
    _S_StartSound(0,34);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 33: case 28:  {
  $16 = $player;
  $tobool23 = ($16|0)!=(0|0);
  if (!($tobool23)) {
   STACKTOP = sp;return;
  }
  $17 = $player;
  $cards26 = ((($17)) + 76|0);
  $arrayidx27 = ((($cards26)) + 8|0);
  $18 = HEAP32[$arrayidx27>>2]|0;
  $tobool28 = ($18|0)!=(0);
  if (!($tobool28)) {
   $19 = $player;
   $cards30 = ((($19)) + 76|0);
   $arrayidx31 = ((($cards30)) + 20|0);
   $20 = HEAP32[$arrayidx31>>2]|0;
   $tobool32 = ($20|0)!=(0);
   if (!($tobool32)) {
    $21 = $player;
    $message34 = ((($21)) + 224|0);
    HEAP32[$message34>>2] = 153265;
    _S_StartSound(0,34);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 default: {
 }
 }
 $22 = HEAP32[99845]|0;
 $23 = $line$addr;
 $sidenum = ((($23)) + 22|0);
 $24 = $side;
 $xor = $24 ^ 1;
 $arrayidx36 = (($sidenum) + ($xor<<1)|0);
 $25 = HEAP16[$arrayidx36>>1]|0;
 $idxprom = $25 << 16 >> 16;
 $arrayidx37 = (($22) + (($idxprom*20)|0)|0);
 $sector = ((($arrayidx37)) + 16|0);
 $26 = HEAP32[$sector>>2]|0;
 $sec = $26;
 $27 = $sec;
 $specialdata = ((($27)) + 76|0);
 $28 = HEAP32[$specialdata>>2]|0;
 $tobool38 = ($28|0)!=(0|0);
 L24: do {
  if ($tobool38) {
   $29 = $sec;
   $specialdata40 = ((($29)) + 76|0);
   $30 = HEAP32[$specialdata40>>2]|0;
   $door = $30;
   $31 = $line$addr;
   $special41 = ((($31)) + 18|0);
   $32 = HEAP16[$special41>>1]|0;
   $conv42 = $32 << 16 >> 16;
   switch ($conv42|0) {
   case 117: case 28: case 27: case 26: case 1:  {
    break;
   }
   default: {
    break L24;
   }
   }
   $33 = $door;
   $direction = ((($33)) + 28|0);
   $34 = HEAP32[$direction>>2]|0;
   $cmp = ($34|0)==(-1);
   if ($cmp) {
    $35 = $door;
    $direction46 = ((($35)) + 28|0);
    HEAP32[$direction46>>2] = 1;
    STACKTOP = sp;return;
   }
   $36 = $thing$addr;
   $player47 = ((($36)) + 132|0);
   $37 = HEAP32[$player47>>2]|0;
   $tobool48 = ($37|0)!=(0|0);
   if (!($tobool48)) {
    STACKTOP = sp;return;
   }
   $38 = $door;
   $function = ((($38)) + 8|0);
   $39 = HEAP32[$function>>2]|0;
   $cmp51 = ($39|0)==(134|0);
   $40 = $door;
   if ($cmp51) {
    $direction54 = ((($40)) + 28|0);
    HEAP32[$direction54>>2] = -1;
    STACKTOP = sp;return;
   }
   $function57 = ((($40)) + 8|0);
   $41 = HEAP32[$function57>>2]|0;
   $cmp59 = ($41|0)==(135|0);
   if ($cmp59) {
    $42 = $door;
    $plat = $42;
    $43 = $plat;
    $wait = ((($43)) + 28|0);
    HEAP32[$wait>>2] = -1;
    STACKTOP = sp;return;
   } else {
    $44 = HEAP32[32479]|0;
    (_fprintf($44,153302,$vararg_buffer)|0);
    $45 = $door;
    $direction63 = ((($45)) + 28|0);
    HEAP32[$direction63>>2] = -1;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $46 = $line$addr;
 $special69 = ((($46)) + 18|0);
 $47 = HEAP16[$special69>>1]|0;
 $conv70 = $47 << 16 >> 16;
 switch ($conv70|0) {
 case 118: case 117:  {
  $48 = $sec;
  $soundorg = ((($48)) + 44|0);
  _S_StartSound($soundorg,88);
  break;
 }
 case 31: case 1:  {
  $49 = $sec;
  $soundorg73 = ((($49)) + 44|0);
  _S_StartSound($soundorg73,20);
  break;
 }
 default: {
  $50 = $sec;
  $soundorg74 = ((($50)) + 44|0);
  _S_StartSound($soundorg74,20);
 }
 }
 $call76 = (_Z_Malloc(40,6,0)|0);
 $door = $call76;
 $51 = $door;
 _P_AddThinker($51);
 $52 = $door;
 $53 = $sec;
 $specialdata78 = ((($53)) + 76|0);
 HEAP32[$specialdata78>>2] = $52;
 $54 = $door;
 $function80 = ((($54)) + 8|0);
 HEAP32[$function80>>2] = 134;
 $55 = $sec;
 $56 = $door;
 $sector82 = ((($56)) + 16|0);
 HEAP32[$sector82>>2] = $55;
 $57 = $door;
 $direction83 = ((($57)) + 28|0);
 HEAP32[$direction83>>2] = 1;
 $58 = $door;
 $speed = ((($58)) + 24|0);
 HEAP32[$speed>>2] = 131072;
 $59 = $door;
 $topwait = ((($59)) + 32|0);
 HEAP32[$topwait>>2] = 150;
 $60 = $line$addr;
 $special84 = ((($60)) + 18|0);
 $61 = HEAP16[$special84>>1]|0;
 $conv85 = $61 << 16 >> 16;
 switch ($conv85|0) {
 case 28: case 27: case 26: case 1:  {
  $62 = $door;
  $type = ((($62)) + 12|0);
  HEAP32[$type>>2] = 0;
  break;
 }
 case 34: case 33: case 32: case 31:  {
  $63 = $door;
  $type88 = ((($63)) + 12|0);
  HEAP32[$type88>>2] = 3;
  $64 = $line$addr;
  $special89 = ((($64)) + 18|0);
  HEAP16[$special89>>1] = 0;
  break;
 }
 case 117:  {
  $65 = $door;
  $type91 = ((($65)) + 12|0);
  HEAP32[$type91>>2] = 5;
  $66 = $door;
  $speed92 = ((($66)) + 24|0);
  HEAP32[$speed92>>2] = 524288;
  break;
 }
 case 118:  {
  $67 = $door;
  $type94 = ((($67)) + 12|0);
  HEAP32[$type94>>2] = 6;
  $68 = $line$addr;
  $special95 = ((($68)) + 18|0);
  HEAP16[$special95>>1] = 0;
  $69 = $door;
  $speed96 = ((($69)) + 24|0);
  HEAP32[$speed96>>2] = 524288;
  break;
 }
 default: {
 }
 }
 $70 = $sec;
 $call98 = (_P_FindLowestCeilingSurrounding($70)|0);
 $71 = $door;
 $topheight = ((($71)) + 20|0);
 HEAP32[$topheight>>2] = $call98;
 $72 = $door;
 $topheight99 = ((($72)) + 20|0);
 $73 = HEAP32[$topheight99>>2]|0;
 $sub = (($73) - 262144)|0;
 HEAP32[$topheight99>>2] = $sub;
 STACKTOP = sp;return;
}
function _P_SpawnDoorCloseIn30($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $direction = 0, $door = 0, $function = 0, $sec$addr = 0, $sector = 0, $special = 0, $specialdata = 0, $speed = 0;
 var $topcountdown = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sec$addr = $sec;
 $call = (_Z_Malloc(40,6,0)|0);
 $door = $call;
 $0 = $door;
 _P_AddThinker($0);
 $1 = $door;
 $2 = $sec$addr;
 $specialdata = ((($2)) + 76|0);
 HEAP32[$specialdata>>2] = $1;
 $3 = $sec$addr;
 $special = ((($3)) + 14|0);
 HEAP16[$special>>1] = 0;
 $4 = $door;
 $function = ((($4)) + 8|0);
 HEAP32[$function>>2] = 134;
 $5 = $sec$addr;
 $6 = $door;
 $sector = ((($6)) + 16|0);
 HEAP32[$sector>>2] = $5;
 $7 = $door;
 $direction = ((($7)) + 28|0);
 HEAP32[$direction>>2] = 0;
 $8 = $door;
 $type = ((($8)) + 12|0);
 HEAP32[$type>>2] = 0;
 $9 = $door;
 $speed = ((($9)) + 24|0);
 HEAP32[$speed>>2] = 131072;
 $10 = $door;
 $topcountdown = ((($10)) + 36|0);
 HEAP32[$topcountdown>>2] = 1050;
 STACKTOP = sp;return;
}
function _P_SpawnDoorRaiseIn5Mins($sec,$secnum) {
 $sec = $sec|0;
 $secnum = $secnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $direction = 0, $door = 0;
 var $function = 0, $sec$addr = 0, $secnum$addr = 0, $sector = 0, $special = 0, $specialdata = 0, $speed = 0, $sub = 0, $topcountdown = 0, $topheight = 0, $topheight3 = 0, $topwait = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sec$addr = $sec;
 $secnum$addr = $secnum;
 $call = (_Z_Malloc(40,6,0)|0);
 $door = $call;
 $0 = $door;
 _P_AddThinker($0);
 $1 = $door;
 $2 = $sec$addr;
 $specialdata = ((($2)) + 76|0);
 HEAP32[$specialdata>>2] = $1;
 $3 = $sec$addr;
 $special = ((($3)) + 14|0);
 HEAP16[$special>>1] = 0;
 $4 = $door;
 $function = ((($4)) + 8|0);
 HEAP32[$function>>2] = 134;
 $5 = $sec$addr;
 $6 = $door;
 $sector = ((($6)) + 16|0);
 HEAP32[$sector>>2] = $5;
 $7 = $door;
 $direction = ((($7)) + 28|0);
 HEAP32[$direction>>2] = 2;
 $8 = $door;
 $type = ((($8)) + 12|0);
 HEAP32[$type>>2] = 4;
 $9 = $door;
 $speed = ((($9)) + 24|0);
 HEAP32[$speed>>2] = 131072;
 $10 = $sec$addr;
 $call2 = (_P_FindLowestCeilingSurrounding($10)|0);
 $11 = $door;
 $topheight = ((($11)) + 20|0);
 HEAP32[$topheight>>2] = $call2;
 $12 = $door;
 $topheight3 = ((($12)) + 20|0);
 $13 = HEAP32[$topheight3>>2]|0;
 $sub = (($13) - 262144)|0;
 HEAP32[$topheight3>>2] = $sub;
 $14 = $door;
 $topwait = ((($14)) + 32|0);
 HEAP32[$topwait>>2] = 150;
 $15 = $door;
 $topcountdown = ((($15)) + 36|0);
 HEAP32[$topcountdown>>2] = 10500;
 STACKTOP = sp;return;
}
function _P_RecursiveSound($sec,$soundblocks) {
 $sec = $sec|0;
 $soundblocks = $soundblocks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add3 = 0, $and = 0, $and30 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx25 = 0, $check = 0, $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0, $conv29 = 0, $flags = 0, $flags28 = 0;
 var $i = 0, $idxprom = 0, $idxprom19 = 0, $idxprom24 = 0, $inc = 0, $linecount = 0, $lines = 0, $other = 0, $sec$addr = 0, $sector = 0, $sector21 = 0, $sector26 = 0, $sidenum = 0, $sidenum17 = 0, $soundblocks$addr = 0, $soundtarget = 0, $soundtraversed = 0, $soundtraversed4 = 0, $tobool = 0, $tobool31 = 0;
 var $tobool33 = 0, $validcount = 0, $validcount2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $sec$addr = $sec;
 $soundblocks$addr = $soundblocks;
 $0 = $sec$addr;
 $validcount = ((($0)) + 68|0);
 $1 = HEAP32[$validcount>>2]|0;
 $2 = HEAP32[32346]|0;
 $cmp = ($1|0)==($2|0);
 if ($cmp) {
  $3 = $sec$addr;
  $soundtraversed = ((($3)) + 20|0);
  $4 = HEAP32[$soundtraversed>>2]|0;
  $5 = $soundblocks$addr;
  $add = (($5) + 1)|0;
  $cmp1 = ($4|0)<=($add|0);
  if ($cmp1) {
   STACKTOP = sp;return;
  }
 }
 $6 = HEAP32[32346]|0;
 $7 = $sec$addr;
 $validcount2 = ((($7)) + 68|0);
 HEAP32[$validcount2>>2] = $6;
 $8 = $soundblocks$addr;
 $add3 = (($8) + 1)|0;
 $9 = $sec$addr;
 $soundtraversed4 = ((($9)) + 20|0);
 HEAP32[$soundtraversed4>>2] = $add3;
 $10 = HEAP32[99746]|0;
 $11 = $sec$addr;
 $soundtarget = ((($11)) + 24|0);
 HEAP32[$soundtarget>>2] = $10;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $sec$addr;
  $linecount = ((($13)) + 80|0);
  $14 = HEAP32[$linecount>>2]|0;
  $cmp5 = ($12|0)<($14|0);
  if (!($cmp5)) {
   break;
  }
  $15 = $sec$addr;
  $lines = ((($15)) + 84|0);
  $16 = HEAP32[$lines>>2]|0;
  $17 = $i;
  $arrayidx = (($16) + ($17<<2)|0);
  $18 = HEAP32[$arrayidx>>2]|0;
  $check = $18;
  $19 = $check;
  $flags = ((($19)) + 16|0);
  $20 = HEAP16[$flags>>1]|0;
  $conv = $20 << 16 >> 16;
  $and = $conv & 4;
  $tobool = ($and|0)!=(0);
  do {
   if ($tobool) {
    $21 = $check;
    _P_LineOpening($21);
    $22 = HEAP32[99783]|0;
    $cmp8 = ($22|0)<=(0);
    if (!($cmp8)) {
     $23 = HEAP32[99845]|0;
     $24 = $check;
     $sidenum = ((($24)) + 22|0);
     $25 = HEAP16[$sidenum>>1]|0;
     $idxprom = $25 << 16 >> 16;
     $arrayidx13 = (($23) + (($idxprom*20)|0)|0);
     $sector = ((($arrayidx13)) + 16|0);
     $26 = HEAP32[$sector>>2]|0;
     $27 = $sec$addr;
     $cmp14 = ($26|0)==($27|0);
     $28 = HEAP32[99845]|0;
     $29 = $check;
     $sidenum17 = ((($29)) + 22|0);
     if ($cmp14) {
      $arrayidx18 = ((($sidenum17)) + 2|0);
      $30 = HEAP16[$arrayidx18>>1]|0;
      $idxprom19 = $30 << 16 >> 16;
      $arrayidx20 = (($28) + (($idxprom19*20)|0)|0);
      $sector21 = ((($arrayidx20)) + 16|0);
      $31 = HEAP32[$sector21>>2]|0;
      $other = $31;
     } else {
      $32 = HEAP16[$sidenum17>>1]|0;
      $idxprom24 = $32 << 16 >> 16;
      $arrayidx25 = (($28) + (($idxprom24*20)|0)|0);
      $sector26 = ((($arrayidx25)) + 16|0);
      $33 = HEAP32[$sector26>>2]|0;
      $other = $33;
     }
     $34 = $check;
     $flags28 = ((($34)) + 16|0);
     $35 = HEAP16[$flags28>>1]|0;
     $conv29 = $35 << 16 >> 16;
     $and30 = $conv29 & 64;
     $tobool31 = ($and30|0)!=(0);
     if (!($tobool31)) {
      $38 = $other;
      $39 = $soundblocks$addr;
      _P_RecursiveSound($38,$39);
      break;
     }
     $36 = $soundblocks$addr;
     $tobool33 = ($36|0)!=(0);
     if (!($tobool33)) {
      $37 = $other;
      _P_RecursiveSound($37,1);
     }
    }
   }
  } while(0);
  $40 = $i;
  $inc = (($40) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _P_NoiseAlert($target,$emmiter) {
 $target = $target|0;
 $emmiter = $emmiter|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $emmiter$addr = 0, $inc = 0, $subsector = 0, $target$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $target$addr = $target;
 $emmiter$addr = $emmiter;
 $0 = $target$addr;
 HEAP32[99746] = $0;
 $1 = HEAP32[32346]|0;
 $inc = (($1) + 1)|0;
 HEAP32[32346] = $inc;
 $2 = $emmiter$addr;
 $subsector = ((($2)) + 52|0);
 $3 = HEAP32[$subsector>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 _P_RecursiveSound($4,0);
 STACKTOP = sp;return;
}
function _P_CheckMeleeRange($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $actor$addr = 0, $add = 0, $call = 0, $call8 = 0, $cmp = 0, $dist = 0, $info = 0, $pl = 0, $radius = 0, $retval = 0, $sub = 0, $sub4 = 0, $target = 0, $target1 = 0, $target7 = 0, $tobool = 0, $tobool9 = 0, $x = 0, $x2 = 0, $y = 0;
 var $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $2 = $actor$addr;
 $target1 = ((($2)) + 120|0);
 $3 = HEAP32[$target1>>2]|0;
 $pl = $3;
 $4 = $pl;
 $x = ((($4)) + 12|0);
 $5 = HEAP32[$x>>2]|0;
 $6 = $actor$addr;
 $x2 = ((($6)) + 12|0);
 $7 = HEAP32[$x2>>2]|0;
 $sub = (($5) - ($7))|0;
 $8 = $pl;
 $y = ((($8)) + 16|0);
 $9 = HEAP32[$y>>2]|0;
 $10 = $actor$addr;
 $y3 = ((($10)) + 16|0);
 $11 = HEAP32[$y3>>2]|0;
 $sub4 = (($9) - ($11))|0;
 $call = (_P_AproxDistance($sub,$sub4)|0);
 $dist = $call;
 $12 = $dist;
 $13 = $pl;
 $info = ((($13)) + 92|0);
 $14 = HEAP32[$info>>2]|0;
 $radius = ((($14)) + 64|0);
 $15 = HEAP32[$radius>>2]|0;
 $add = (2883584 + ($15))|0;
 $cmp = ($12|0)>=($add|0);
 if ($cmp) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $16 = $actor$addr;
 $17 = $actor$addr;
 $target7 = ((($17)) + 120|0);
 $18 = HEAP32[$target7>>2]|0;
 $call8 = (_P_CheckSight($16,$18)|0);
 $tobool9 = ($call8|0)!=(0);
 if ($tobool9) {
  $retval = 1;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 } else {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _P_CheckMissileRange($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $and = 0, $and4 = 0, $call = 0, $call14 = 0, $call51 = 0, $cmp = 0, $cmp21 = 0, $cmp26 = 0, $cmp28 = 0, $cmp34 = 0, $cmp36 = 0, $cmp39 = 0, $cmp43 = 0, $cmp47 = 0, $cmp48 = 0, $cmp52 = 0;
 var $dist = 0, $flags = 0, $flags3 = 0, $info = 0, $meleestate = 0, $or$cond = 0, $or$cond1 = 0, $reactiontime = 0, $retval = 0, $shr = 0, $shr31 = 0, $shr41 = 0, $sub = 0, $sub13 = 0, $sub15 = 0, $sub18 = 0, $target = 0, $target11 = 0, $target9 = 0, $tobool = 0;
 var $tobool1 = 0, $tobool16 = 0, $tobool6 = 0, $type = 0, $type25 = 0, $type33 = 0, $type35 = 0, $type38 = 0, $type46 = 0, $x = 0, $x10 = 0, $y = 0, $y12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $1 = $actor$addr;
 $target = ((($1)) + 120|0);
 $2 = HEAP32[$target>>2]|0;
 $call = (_P_CheckSight($0,$2)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $42 = $retval;
  STACKTOP = sp;return ($42|0);
 }
 $3 = $actor$addr;
 $flags = ((($3)) + 104|0);
 $4 = HEAP32[$flags>>2]|0;
 $and = $4 & 64;
 $tobool1 = ($and|0)!=(0);
 $5 = $actor$addr;
 if ($tobool1) {
  $flags3 = ((($5)) + 104|0);
  $6 = HEAP32[$flags3>>2]|0;
  $and4 = $6 & -65;
  HEAP32[$flags3>>2] = $and4;
  $retval = 1;
  $42 = $retval;
  STACKTOP = sp;return ($42|0);
 }
 $reactiontime = ((($5)) + 124|0);
 $7 = HEAP32[$reactiontime>>2]|0;
 $tobool6 = ($7|0)!=(0);
 if ($tobool6) {
  $retval = 0;
  $42 = $retval;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $actor$addr;
 $x = ((($8)) + 12|0);
 $9 = HEAP32[$x>>2]|0;
 $10 = $actor$addr;
 $target9 = ((($10)) + 120|0);
 $11 = HEAP32[$target9>>2]|0;
 $x10 = ((($11)) + 12|0);
 $12 = HEAP32[$x10>>2]|0;
 $sub = (($9) - ($12))|0;
 $13 = $actor$addr;
 $y = ((($13)) + 16|0);
 $14 = HEAP32[$y>>2]|0;
 $15 = $actor$addr;
 $target11 = ((($15)) + 120|0);
 $16 = HEAP32[$target11>>2]|0;
 $y12 = ((($16)) + 16|0);
 $17 = HEAP32[$y12>>2]|0;
 $sub13 = (($14) - ($17))|0;
 $call14 = (_P_AproxDistance($sub,$sub13)|0);
 $sub15 = (($call14) - 4194304)|0;
 $dist = $sub15;
 $18 = $actor$addr;
 $info = ((($18)) + 92|0);
 $19 = HEAP32[$info>>2]|0;
 $meleestate = ((($19)) + 40|0);
 $20 = HEAP32[$meleestate>>2]|0;
 $tobool16 = ($20|0)!=(0);
 if (!($tobool16)) {
  $21 = $dist;
  $sub18 = (($21) - 8388608)|0;
  $dist = $sub18;
 }
 $22 = $dist;
 $shr = $22 >> 16;
 $dist = $shr;
 $23 = $actor$addr;
 $type = ((($23)) + 88|0);
 $24 = HEAP32[$type>>2]|0;
 $cmp = ($24|0)==(3);
 $25 = $dist;
 $cmp21 = ($25|0)>(896);
 $or$cond1 = $cmp & $cmp21;
 if ($or$cond1) {
  $retval = 0;
  $42 = $retval;
  STACKTOP = sp;return ($42|0);
 }
 $26 = $actor$addr;
 $type25 = ((($26)) + 88|0);
 $27 = HEAP32[$type25>>2]|0;
 $cmp26 = ($27|0)==(5);
 do {
  if ($cmp26) {
   $28 = $dist;
   $cmp28 = ($28|0)<(196);
   if (!($cmp28)) {
    $29 = $dist;
    $shr31 = $29 >> 1;
    $dist = $shr31;
    break;
   }
   $retval = 0;
   $42 = $retval;
   STACKTOP = sp;return ($42|0);
  }
 } while(0);
 $30 = $actor$addr;
 $type33 = ((($30)) + 88|0);
 $31 = HEAP32[$type33>>2]|0;
 $cmp34 = ($31|0)==(21);
 if ($cmp34) {
  label = 18;
 } else {
  $32 = $actor$addr;
  $type35 = ((($32)) + 88|0);
  $33 = HEAP32[$type35>>2]|0;
  $cmp36 = ($33|0)==(19);
  if ($cmp36) {
   label = 18;
  } else {
   $34 = $actor$addr;
   $type38 = ((($34)) + 88|0);
   $35 = HEAP32[$type38>>2]|0;
   $cmp39 = ($35|0)==(18);
   if ($cmp39) {
    label = 18;
   }
  }
 }
 if ((label|0) == 18) {
  $36 = $dist;
  $shr41 = $36 >> 1;
  $dist = $shr41;
 }
 $37 = $dist;
 $cmp43 = ($37|0)>(200);
 if ($cmp43) {
  $dist = 200;
 }
 $38 = $actor$addr;
 $type46 = ((($38)) + 88|0);
 $39 = HEAP32[$type46>>2]|0;
 $cmp47 = ($39|0)==(21);
 $40 = $dist;
 $cmp48 = ($40|0)>(160);
 $or$cond = $cmp47 & $cmp48;
 if ($or$cond) {
  $dist = 160;
 }
 $call51 = (_P_Random()|0);
 $41 = $dist;
 $cmp52 = ($call51|0)<($41|0);
 if ($cmp52) {
  $retval = 0;
  $42 = $retval;
  STACKTOP = sp;return ($42|0);
 } else {
  $retval = 1;
  $42 = $retval;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _P_Move($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add11 = 0, $add19 = 0, $and = 0, $and36 = 0, $and39 = 0, $arrayidx = 0, $arrayidx29 = 0, $arrayidx9 = 0, $call = 0, $call30 = 0;
 var $cmp = 0, $cmp16 = 0, $cmp2 = 0, $dec = 0, $flags22 = 0, $flags35 = 0, $flags38 = 0, $floorz = 0, $good = 0, $info = 0, $info6 = 0, $ld = 0, $movedir = 0, $movedir1 = 0, $movedir27 = 0, $movedir5 = 0, $movedir8 = 0, $mul = 0, $mul10 = 0, $or = 0;
 var $or$cond = 0, $retval = 0, $speed = 0, $speed7 = 0, $sub = 0, $tobool = 0, $tobool13 = 0, $tobool14 = 0, $tobool24 = 0, $tobool28 = 0, $tobool31 = 0, $tobool40 = 0, $try_ok = 0, $tryx = 0, $tryy = 0, $vararg_buffer = 0, $x = 0, $y = 0, $z = 0, $z18 = 0;
 var $z42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $actor$addr = $actor;
 $0 = $actor$addr;
 $movedir = ((($0)) + 112|0);
 $1 = HEAP32[$movedir>>2]|0;
 $cmp = ($1|0)==(8);
 if ($cmp) {
  $retval = 0;
  $47 = $retval;
  STACKTOP = sp;return ($47|0);
 }
 $2 = $actor$addr;
 $movedir1 = ((($2)) + 112|0);
 $3 = HEAP32[$movedir1>>2]|0;
 $cmp2 = ($3>>>0)>=(8);
 if ($cmp2) {
  _I_Error(153365,$vararg_buffer);
 }
 $4 = $actor$addr;
 $x = ((($4)) + 12|0);
 $5 = HEAP32[$x>>2]|0;
 $6 = $actor$addr;
 $info = ((($6)) + 92|0);
 $7 = HEAP32[$info>>2]|0;
 $speed = ((($7)) + 60|0);
 $8 = HEAP32[$speed>>2]|0;
 $9 = $actor$addr;
 $movedir5 = ((($9)) + 112|0);
 $10 = HEAP32[$movedir5>>2]|0;
 $arrayidx = (49408 + ($10<<2)|0);
 $11 = HEAP32[$arrayidx>>2]|0;
 $mul = Math_imul($8, $11)|0;
 $add = (($5) + ($mul))|0;
 $tryx = $add;
 $12 = $actor$addr;
 $y = ((($12)) + 16|0);
 $13 = HEAP32[$y>>2]|0;
 $14 = $actor$addr;
 $info6 = ((($14)) + 92|0);
 $15 = HEAP32[$info6>>2]|0;
 $speed7 = ((($15)) + 60|0);
 $16 = HEAP32[$speed7>>2]|0;
 $17 = $actor$addr;
 $movedir8 = ((($17)) + 112|0);
 $18 = HEAP32[$movedir8>>2]|0;
 $arrayidx9 = (49440 + ($18<<2)|0);
 $19 = HEAP32[$arrayidx9>>2]|0;
 $mul10 = Math_imul($16, $19)|0;
 $add11 = (($13) + ($mul10))|0;
 $tryy = $add11;
 $20 = $actor$addr;
 $21 = $tryx;
 $22 = $tryy;
 $call = (_P_TryMove($20,$21,$22)|0);
 $try_ok = $call;
 $23 = $try_ok;
 $tobool = ($23|0)!=(0);
 $24 = $actor$addr;
 $flags35 = ((($24)) + 104|0);
 $25 = HEAP32[$flags35>>2]|0;
 if ($tobool) {
  $and36 = $25 & -2097153;
  HEAP32[$flags35>>2] = $and36;
  $42 = $actor$addr;
  $flags38 = ((($42)) + 104|0);
  $43 = HEAP32[$flags38>>2]|0;
  $and39 = $43 & 16384;
  $tobool40 = ($and39|0)!=(0);
  if (!($tobool40)) {
   $44 = $actor$addr;
   $floorz = ((($44)) + 56|0);
   $45 = HEAP32[$floorz>>2]|0;
   $46 = $actor$addr;
   $z42 = ((($46)) + 20|0);
   HEAP32[$z42>>2] = $45;
  }
  $retval = 1;
  $47 = $retval;
  STACKTOP = sp;return ($47|0);
 }
 $and = $25 & 16384;
 $tobool13 = ($and|0)!=(0);
 $26 = HEAP32[99763]|0;
 $tobool14 = ($26|0)!=(0);
 $or$cond = $tobool13 & $tobool14;
 if ($or$cond) {
  $27 = $actor$addr;
  $z = ((($27)) + 20|0);
  $28 = HEAP32[$z>>2]|0;
  $29 = HEAP32[99760]|0;
  $cmp16 = ($28|0)<($29|0);
  $30 = $actor$addr;
  $z18 = ((($30)) + 20|0);
  $31 = HEAP32[$z18>>2]|0;
  if ($cmp16) {
   $add19 = (($31) + 262144)|0;
   HEAP32[$z18>>2] = $add19;
  } else {
   $sub = (($31) - 262144)|0;
   HEAP32[$z18>>2] = $sub;
  }
  $32 = $actor$addr;
  $flags22 = ((($32)) + 104|0);
  $33 = HEAP32[$flags22>>2]|0;
  $or = $33 | 2097152;
  HEAP32[$flags22>>2] = $or;
  $retval = 1;
  $47 = $retval;
  STACKTOP = sp;return ($47|0);
 }
 $34 = HEAP32[99762]|0;
 $tobool24 = ($34|0)!=(0);
 if (!($tobool24)) {
  $retval = 0;
  $47 = $retval;
  STACKTOP = sp;return ($47|0);
 }
 $35 = $actor$addr;
 $movedir27 = ((($35)) + 112|0);
 HEAP32[$movedir27>>2] = 8;
 $good = 0;
 while(1) {
  $36 = HEAP32[99762]|0;
  $dec = (($36) + -1)|0;
  HEAP32[99762] = $dec;
  $tobool28 = ($36|0)!=(0);
  if (!($tobool28)) {
   break;
  }
  $37 = HEAP32[99762]|0;
  $arrayidx29 = (187664 + ($37<<2)|0);
  $38 = HEAP32[$arrayidx29>>2]|0;
  $ld = $38;
  $39 = $actor$addr;
  $40 = $ld;
  $call30 = (_P_UseSpecialLine($39,$40,0)|0);
  $tobool31 = ($call30|0)!=(0);
  if ($tobool31) {
   $good = 1;
  }
 }
 $41 = $good;
 $retval = $41;
 $47 = $retval;
 STACKTOP = sp;return ($47|0);
}
function _P_TryWalk($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $actor$addr = 0, $and = 0, $call = 0, $call1 = 0, $movecount = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $call = (_P_Move($0)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $call1 = (_P_Random()|0);
  $and = $call1 & 15;
  $1 = $actor$addr;
  $movecount = ((($1)) + 116|0);
  HEAP32[$movecount>>2] = $and;
  $retval = 1;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 } else {
  $retval = 0;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _P_NewChaseDir($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $and = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx17 = 0, $arrayidx21 = 0, $arrayidx26 = 0, $arrayidx28 = 0, $arrayidx34 = 0;
 var $arrayidx52 = 0, $arrayidx53 = 0, $arrayidx54 = 0, $arrayidx55 = 0, $arrayidx57 = 0, $arrayidx61 = 0, $arrayidx63 = 0, $arrayidx67 = 0, $arrayidx69 = 0, $arrayidx7 = 0, $arrayidx73 = 0, $arrayidx80 = 0, $arrayidx84 = 0, $call = 0, $call100 = 0, $call109 = 0, $call123 = 0, $call135 = 0, $call44 = 0, $call47 = 0;
 var $call48 = 0, $call75 = 0, $call86 = 0, $call95 = 0, $cmp = 0, $cmp103 = 0, $cmp105 = 0, $cmp116 = 0, $cmp119 = 0, $cmp131 = 0, $cmp15 = 0, $cmp19 = 0, $cmp27 = 0, $cmp29 = 0, $cmp31 = 0, $cmp32 = 0, $cmp37 = 0, $cmp45 = 0, $cmp49 = 0, $cmp58 = 0;
 var $cmp64 = 0, $cmp70 = 0, $cmp8 = 0, $cmp81 = 0, $cmp91 = 0, $conv = 0, $conv33 = 0, $d = 0, $dec = 0, $deltax = 0, $deltay = 0, $inc = 0, $movedir = 0, $movedir108 = 0, $movedir122 = 0, $movedir134 = 0, $movedir140 = 0, $movedir35 = 0, $movedir36 = 0, $movedir74 = 0;
 var $movedir85 = 0, $movedir94 = 0, $olddir = 0, $shl = 0, $sub = 0, $sub5 = 0, $target = 0, $target1 = 0, $target3 = 0, $tdir = 0, $tobool = 0, $tobool101 = 0, $tobool110 = 0, $tobool124 = 0, $tobool136 = 0, $tobool40 = 0, $tobool76 = 0, $tobool87 = 0, $tobool96 = 0, $turnaround = 0;
 var $vararg_buffer = 0, $x = 0, $x2 = 0, $y = 0, $y4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $d = sp + 16|0;
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  _I_Error(153387,$vararg_buffer);
 }
 $2 = $actor$addr;
 $movedir = ((($2)) + 112|0);
 $3 = HEAP32[$movedir>>2]|0;
 $olddir = $3;
 $4 = $olddir;
 $arrayidx = (49344 + ($4<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $turnaround = $5;
 $6 = $actor$addr;
 $target1 = ((($6)) + 120|0);
 $7 = HEAP32[$target1>>2]|0;
 $x = ((($7)) + 12|0);
 $8 = HEAP32[$x>>2]|0;
 $9 = $actor$addr;
 $x2 = ((($9)) + 12|0);
 $10 = HEAP32[$x2>>2]|0;
 $sub = (($8) - ($10))|0;
 $deltax = $sub;
 $11 = $actor$addr;
 $target3 = ((($11)) + 120|0);
 $12 = HEAP32[$target3>>2]|0;
 $y = ((($12)) + 16|0);
 $13 = HEAP32[$y>>2]|0;
 $14 = $actor$addr;
 $y4 = ((($14)) + 16|0);
 $15 = HEAP32[$y4>>2]|0;
 $sub5 = (($13) - ($15))|0;
 $deltay = $sub5;
 $16 = $deltax;
 $cmp = ($16|0)>(655360);
 do {
  if ($cmp) {
   $arrayidx7 = ((($d)) + 4|0);
   HEAP32[$arrayidx7>>2] = 0;
  } else {
   $17 = $deltax;
   $cmp8 = ($17|0)<(-655360);
   $arrayidx10 = ((($d)) + 4|0);
   if ($cmp8) {
    HEAP32[$arrayidx10>>2] = 4;
    break;
   } else {
    HEAP32[$arrayidx10>>2] = 8;
    break;
   }
  }
 } while(0);
 $18 = $deltay;
 $cmp15 = ($18|0)<(-655360);
 do {
  if ($cmp15) {
   $arrayidx17 = ((($d)) + 8|0);
   HEAP32[$arrayidx17>>2] = 6;
  } else {
   $19 = $deltay;
   $cmp19 = ($19|0)>(655360);
   $arrayidx21 = ((($d)) + 8|0);
   if ($cmp19) {
    HEAP32[$arrayidx21>>2] = 2;
    break;
   } else {
    HEAP32[$arrayidx21>>2] = 8;
    break;
   }
  }
 } while(0);
 $arrayidx26 = ((($d)) + 4|0);
 $20 = HEAP32[$arrayidx26>>2]|0;
 $cmp27 = ($20|0)!=(8);
 if ($cmp27) {
  $arrayidx28 = ((($d)) + 8|0);
  $21 = HEAP32[$arrayidx28>>2]|0;
  $cmp29 = ($21|0)!=(8);
  if ($cmp29) {
   $22 = $deltay;
   $cmp31 = ($22|0)<(0);
   $conv = $cmp31&1;
   $shl = $conv << 1;
   $23 = $deltax;
   $cmp32 = ($23|0)>(0);
   $conv33 = $cmp32&1;
   $add = (($shl) + ($conv33))|0;
   $arrayidx34 = (49392 + ($add<<2)|0);
   $24 = HEAP32[$arrayidx34>>2]|0;
   $25 = $actor$addr;
   $movedir35 = ((($25)) + 112|0);
   HEAP32[$movedir35>>2] = $24;
   $26 = $actor$addr;
   $movedir36 = ((($26)) + 112|0);
   $27 = HEAP32[$movedir36>>2]|0;
   $28 = $turnaround;
   $cmp37 = ($27|0)!=($28|0);
   if ($cmp37) {
    $29 = $actor$addr;
    $call = (_P_TryWalk($29)|0);
    $tobool40 = ($call|0)!=(0);
    if ($tobool40) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $call44 = (_P_Random()|0);
 $cmp45 = ($call44|0)>(200);
 if ($cmp45) {
  label = 19;
 } else {
  $30 = $deltay;
  $call47 = (Math_abs(($30|0))|0);
  $31 = $deltax;
  $call48 = (Math_abs(($31|0))|0);
  $cmp49 = ($call47|0)>($call48|0);
  if ($cmp49) {
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $arrayidx52 = ((($d)) + 4|0);
  $32 = HEAP32[$arrayidx52>>2]|0;
  $tdir = $32;
  $arrayidx53 = ((($d)) + 8|0);
  $33 = HEAP32[$arrayidx53>>2]|0;
  $arrayidx54 = ((($d)) + 4|0);
  HEAP32[$arrayidx54>>2] = $33;
  $34 = $tdir;
  $arrayidx55 = ((($d)) + 8|0);
  HEAP32[$arrayidx55>>2] = $34;
 }
 $arrayidx57 = ((($d)) + 4|0);
 $35 = HEAP32[$arrayidx57>>2]|0;
 $36 = $turnaround;
 $cmp58 = ($35|0)==($36|0);
 if ($cmp58) {
  $arrayidx61 = ((($d)) + 4|0);
  HEAP32[$arrayidx61>>2] = 8;
 }
 $arrayidx63 = ((($d)) + 8|0);
 $37 = HEAP32[$arrayidx63>>2]|0;
 $38 = $turnaround;
 $cmp64 = ($37|0)==($38|0);
 if ($cmp64) {
  $arrayidx67 = ((($d)) + 8|0);
  HEAP32[$arrayidx67>>2] = 8;
 }
 $arrayidx69 = ((($d)) + 4|0);
 $39 = HEAP32[$arrayidx69>>2]|0;
 $cmp70 = ($39|0)!=(8);
 if ($cmp70) {
  $arrayidx73 = ((($d)) + 4|0);
  $40 = HEAP32[$arrayidx73>>2]|0;
  $41 = $actor$addr;
  $movedir74 = ((($41)) + 112|0);
  HEAP32[$movedir74>>2] = $40;
  $42 = $actor$addr;
  $call75 = (_P_TryWalk($42)|0);
  $tobool76 = ($call75|0)!=(0);
  if ($tobool76) {
   STACKTOP = sp;return;
  }
 }
 $arrayidx80 = ((($d)) + 8|0);
 $43 = HEAP32[$arrayidx80>>2]|0;
 $cmp81 = ($43|0)!=(8);
 if ($cmp81) {
  $arrayidx84 = ((($d)) + 8|0);
  $44 = HEAP32[$arrayidx84>>2]|0;
  $45 = $actor$addr;
  $movedir85 = ((($45)) + 112|0);
  HEAP32[$movedir85>>2] = $44;
  $46 = $actor$addr;
  $call86 = (_P_TryWalk($46)|0);
  $tobool87 = ($call86|0)!=(0);
  if ($tobool87) {
   STACKTOP = sp;return;
  }
 }
 $47 = $olddir;
 $cmp91 = ($47|0)!=(8);
 if ($cmp91) {
  $48 = $olddir;
  $49 = $actor$addr;
  $movedir94 = ((($49)) + 112|0);
  HEAP32[$movedir94>>2] = $48;
  $50 = $actor$addr;
  $call95 = (_P_TryWalk($50)|0);
  $tobool96 = ($call95|0)!=(0);
  if ($tobool96) {
   STACKTOP = sp;return;
  }
 }
 $call100 = (_P_Random()|0);
 $and = $call100 & 1;
 $tobool101 = ($and|0)!=(0);
 L47: do {
  if ($tobool101) {
   $tdir = 0;
   while(1) {
    $51 = $tdir;
    $cmp103 = ($51|0)<=(7);
    if (!($cmp103)) {
     break L47;
    }
    $52 = $tdir;
    $53 = $turnaround;
    $cmp105 = ($52|0)!=($53|0);
    if ($cmp105) {
     $54 = $tdir;
     $55 = $actor$addr;
     $movedir108 = ((($55)) + 112|0);
     HEAP32[$movedir108>>2] = $54;
     $56 = $actor$addr;
     $call109 = (_P_TryWalk($56)|0);
     $tobool110 = ($call109|0)!=(0);
     if ($tobool110) {
      break;
     }
    }
    $57 = $tdir;
    $inc = (($57) + 1)|0;
    $tdir = $inc;
   }
   STACKTOP = sp;return;
  } else {
   $tdir = 7;
   while(1) {
    $58 = $tdir;
    $cmp116 = ($58|0)!=(-1);
    if (!($cmp116)) {
     break L47;
    }
    $59 = $tdir;
    $60 = $turnaround;
    $cmp119 = ($59|0)!=($60|0);
    if ($cmp119) {
     $61 = $tdir;
     $62 = $actor$addr;
     $movedir122 = ((($62)) + 112|0);
     HEAP32[$movedir122>>2] = $61;
     $63 = $actor$addr;
     $call123 = (_P_TryWalk($63)|0);
     $tobool124 = ($call123|0)!=(0);
     if ($tobool124) {
      break;
     }
    }
    $64 = $tdir;
    $dec = (($64) + -1)|0;
    $tdir = $dec;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $65 = $turnaround;
 $cmp131 = ($65|0)!=(8);
 if ($cmp131) {
  $66 = $turnaround;
  $67 = $actor$addr;
  $movedir134 = ((($67)) + 112|0);
  HEAP32[$movedir134>>2] = $66;
  $68 = $actor$addr;
  $call135 = (_P_TryWalk($68)|0);
  $tobool136 = ($call135|0)!=(0);
  if ($tobool136) {
   STACKTOP = sp;return;
  }
 }
 $69 = $actor$addr;
 $movedir140 = ((($69)) + 112|0);
 HEAP32[$movedir140>>2] = 8;
 STACKTOP = sp;return;
}
function _P_LookForPlayers($actor,$allaround) {
 $actor = $actor|0;
 $allaround = $allaround|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $allaround$addr = 0, $an = 0, $and = 0, $and41 = 0, $angle = 0, $arrayidx = 0, $arrayidx7 = 0, $c = 0, $call = 0;
 var $call20 = 0, $call33 = 0, $cmp = 0, $cmp22 = 0, $cmp23 = 0, $cmp3 = 0, $cmp34 = 0, $cmp8 = 0, $dist = 0, $health = 0, $inc = 0, $lastlook = 0, $lastlook1 = 0, $lastlook2 = 0, $lastlook40 = 0, $lastlook42 = 0, $lastlook6 = 0, $or$cond = 0, $player = 0, $retval = 0;
 var $stop = 0, $sub = 0, $sub21 = 0, $sub28 = 0, $sub32 = 0, $target = 0, $tobool = 0, $tobool11 = 0, $tobool14 = 0, $x = 0, $x17 = 0, $x26 = 0, $x27 = 0, $y = 0, $y19 = 0, $y30 = 0, $y31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $actor$addr = $actor;
 $allaround$addr = $allaround;
 $c = 0;
 $0 = $actor$addr;
 $lastlook = ((($0)) + 136|0);
 $1 = HEAP32[$lastlook>>2]|0;
 $sub = (($1) - 1)|0;
 $and = $sub & 3;
 $stop = $and;
 while(1) {
  $2 = $actor$addr;
  $lastlook1 = ((($2)) + 136|0);
  $3 = HEAP32[$lastlook1>>2]|0;
  $arrayidx = (183040 + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($4|0)!=(0);
  if ($tobool) {
   $5 = $c;
   $inc = (($5) + 1)|0;
   $c = $inc;
   $cmp = ($5|0)==(2);
   if ($cmp) {
    label = 5;
    break;
   }
   $6 = $actor$addr;
   $lastlook2 = ((($6)) + 136|0);
   $7 = HEAP32[$lastlook2>>2]|0;
   $8 = $stop;
   $cmp3 = ($7|0)==($8|0);
   if ($cmp3) {
    label = 5;
    break;
   }
   $9 = $actor$addr;
   $lastlook6 = ((($9)) + 136|0);
   $10 = HEAP32[$lastlook6>>2]|0;
   $arrayidx7 = (183056 + (($10*288)|0)|0);
   $player = $arrayidx7;
   $11 = $player;
   $health = ((($11)) + 40|0);
   $12 = HEAP32[$health>>2]|0;
   $cmp8 = ($12|0)<=(0);
   if (!($cmp8)) {
    $13 = $actor$addr;
    $14 = $player;
    $15 = HEAP32[$14>>2]|0;
    $call = (_P_CheckSight($13,$15)|0);
    $tobool11 = ($call|0)!=(0);
    if ($tobool11) {
     $16 = $allaround$addr;
     $tobool14 = ($16|0)!=(0);
     if ($tobool14) {
      label = 11;
      break;
     }
     $17 = $actor$addr;
     $x = ((($17)) + 12|0);
     $18 = HEAP32[$x>>2]|0;
     $19 = $actor$addr;
     $y = ((($19)) + 16|0);
     $20 = HEAP32[$y>>2]|0;
     $21 = $player;
     $22 = HEAP32[$21>>2]|0;
     $x17 = ((($22)) + 12|0);
     $23 = HEAP32[$x17>>2]|0;
     $24 = $player;
     $25 = HEAP32[$24>>2]|0;
     $y19 = ((($25)) + 16|0);
     $26 = HEAP32[$y19>>2]|0;
     $call20 = (_R_PointToAngle2($18,$20,$23,$26)|0);
     $27 = $actor$addr;
     $angle = ((($27)) + 32|0);
     $28 = HEAP32[$angle>>2]|0;
     $sub21 = (($call20) - ($28))|0;
     $an = $sub21;
     $29 = $an;
     $cmp22 = ($29>>>0)>(1073741824);
     $30 = $an;
     $cmp23 = ($30>>>0)<(3221225472);
     $or$cond = $cmp22 & $cmp23;
     if (!($or$cond)) {
      label = 11;
      break;
     }
     $31 = $player;
     $32 = HEAP32[$31>>2]|0;
     $x26 = ((($32)) + 12|0);
     $33 = HEAP32[$x26>>2]|0;
     $34 = $actor$addr;
     $x27 = ((($34)) + 12|0);
     $35 = HEAP32[$x27>>2]|0;
     $sub28 = (($33) - ($35))|0;
     $36 = $player;
     $37 = HEAP32[$36>>2]|0;
     $y30 = ((($37)) + 16|0);
     $38 = HEAP32[$y30>>2]|0;
     $39 = $actor$addr;
     $y31 = ((($39)) + 16|0);
     $40 = HEAP32[$y31>>2]|0;
     $sub32 = (($38) - ($40))|0;
     $call33 = (_P_AproxDistance($sub28,$sub32)|0);
     $dist = $call33;
     $41 = $dist;
     $cmp34 = ($41|0)>(4194304);
     if (!($cmp34)) {
      label = 11;
      break;
     }
    }
   }
  }
  $45 = $actor$addr;
  $lastlook40 = ((($45)) + 136|0);
  $46 = HEAP32[$lastlook40>>2]|0;
  $add = (($46) + 1)|0;
  $and41 = $add & 3;
  $47 = $actor$addr;
  $lastlook42 = ((($47)) + 136|0);
  HEAP32[$lastlook42>>2] = $and41;
 }
 if ((label|0) == 5) {
  $retval = 0;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 }
 else if ((label|0) == 11) {
  $42 = $player;
  $43 = HEAP32[$42>>2]|0;
  $44 = $actor$addr;
  $target = ((($44)) + 120|0);
  HEAP32[$target>>2] = $43;
  $retval = 1;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _A_KeenDie($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0;
 var $cmp6 = 0, $function = 0, $health = 0, $junk = 0, $mo$addr = 0, $mo2 = 0, $next = 0, $tag = 0, $th = 0, $type = 0, $type3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $junk = sp;
 $mo$addr = $mo;
 $0 = $mo$addr;
 _A_Fall($0);
 $1 = HEAP32[(399612)>>2]|0;
 $th = $1;
 while(1) {
  $2 = $th;
  $cmp = ($2|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $3 = $th;
  $function = ((($3)) + 8|0);
  $4 = HEAP32[$function>>2]|0;
  $cmp1 = ($4|0)!=(136|0);
  if (!($cmp1)) {
   $5 = $th;
   $mo2 = $5;
   $6 = $mo2;
   $7 = $mo$addr;
   $cmp2 = ($6|0)!=($7|0);
   if ($cmp2) {
    $8 = $mo2;
    $type = ((($8)) + 88|0);
    $9 = HEAP32[$type>>2]|0;
    $10 = $mo$addr;
    $type3 = ((($10)) + 88|0);
    $11 = HEAP32[$type3>>2]|0;
    $cmp4 = ($9|0)==($11|0);
    if ($cmp4) {
     $12 = $mo2;
     $health = ((($12)) + 108|0);
     $13 = HEAP32[$health>>2]|0;
     $cmp6 = ($13|0)>(0);
     if ($cmp6) {
      label = 9;
      break;
     }
    }
   }
  }
  $14 = $th;
  $next = ((($14)) + 4|0);
  $15 = HEAP32[$next>>2]|0;
  $th = $15;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $tag = ((($junk)) + 20|0);
 HEAP16[$tag>>1] = 666;
 (_EV_DoDoor($junk,3)|0);
 STACKTOP = sp;return;
}
function _A_Fall($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $actor$addr = 0, $and = 0, $flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & -3;
 HEAP32[$flags>>2] = $and;
 STACKTOP = sp;return;
}
function _A_Look($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add23 = 0, $and = 0;
 var $and3 = 0, $call = 0, $call11 = 0, $call19 = 0, $call21 = 0, $cmp = 0, $cmp27 = 0, $flags = 0, $flags2 = 0, $info = 0, $info17 = 0, $info24 = 0, $info32 = 0, $rem = 0, $rem22 = 0, $seesound = 0, $seesound18 = 0, $seesound25 = 0, $seestate = 0, $sound = 0;
 var $soundtarget = 0, $subsector = 0, $targ = 0, $target = 0, $target6 = 0, $threshold = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool15 = 0, $tobool4 = 0, $tobool7 = 0, $type = 0, $type26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $threshold = ((($0)) + 128|0);
 HEAP32[$threshold>>2] = 0;
 $1 = $actor$addr;
 $subsector = ((($1)) + 52|0);
 $2 = HEAP32[$subsector>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $soundtarget = ((($3)) + 24|0);
 $4 = HEAP32[$soundtarget>>2]|0;
 $targ = $4;
 $5 = $targ;
 $tobool = ($5|0)!=(0|0);
 if ($tobool) {
  $6 = $targ;
  $flags = ((($6)) + 104|0);
  $7 = HEAP32[$flags>>2]|0;
  $and = $7 & 4;
  $tobool1 = ($and|0)!=(0);
  if ($tobool1) {
   $8 = $targ;
   $9 = $actor$addr;
   $target = ((($9)) + 120|0);
   HEAP32[$target>>2] = $8;
   $10 = $actor$addr;
   $flags2 = ((($10)) + 104|0);
   $11 = HEAP32[$flags2>>2]|0;
   $and3 = $11 & 32;
   $tobool4 = ($and3|0)!=(0);
   if ($tobool4) {
    $12 = $actor$addr;
    $13 = $actor$addr;
    $target6 = ((($13)) + 120|0);
    $14 = HEAP32[$target6>>2]|0;
    $call = (_P_CheckSight($12,$14)|0);
    $tobool7 = ($call|0)!=(0);
    if (!($tobool7)) {
     label = 5;
    }
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $15 = $actor$addr;
  $call11 = (_P_LookForPlayers($15,0)|0);
  $tobool12 = ($call11|0)!=(0);
  if (!($tobool12)) {
   STACKTOP = sp;return;
  }
 }
 $16 = $actor$addr;
 $info = ((($16)) + 92|0);
 $17 = HEAP32[$info>>2]|0;
 $seesound = ((($17)) + 16|0);
 $18 = HEAP32[$seesound>>2]|0;
 $tobool15 = ($18|0)!=(0);
 do {
  if ($tobool15) {
   $19 = $actor$addr;
   $info17 = ((($19)) + 92|0);
   $20 = HEAP32[$info17>>2]|0;
   $seesound18 = ((($20)) + 16|0);
   $21 = HEAP32[$seesound18>>2]|0;
   switch ($21|0) {
   case 38: case 37: case 36:  {
    $call19 = (_P_Random()|0);
    $rem = (($call19|0) % 3)&-1;
    $add = (36 + ($rem))|0;
    $sound = $add;
    break;
   }
   case 40: case 39:  {
    $call21 = (_P_Random()|0);
    $rem22 = (($call21|0) % 2)&-1;
    $add23 = (39 + ($rem22))|0;
    $sound = $add23;
    break;
   }
   default: {
    $22 = $actor$addr;
    $info24 = ((($22)) + 92|0);
    $23 = HEAP32[$info24>>2]|0;
    $seesound25 = ((($23)) + 16|0);
    $24 = HEAP32[$seesound25>>2]|0;
    $sound = $24;
   }
   }
   $25 = $actor$addr;
   $type = ((($25)) + 88|0);
   $26 = HEAP32[$type>>2]|0;
   $cmp = ($26|0)==(19);
   if (!($cmp)) {
    $27 = $actor$addr;
    $type26 = ((($27)) + 88|0);
    $28 = HEAP32[$type26>>2]|0;
    $cmp27 = ($28|0)==(21);
    if (!($cmp27)) {
     $30 = $actor$addr;
     $31 = $sound;
     _S_StartSound($30,$31);
     break;
    }
   }
   $29 = $sound;
   _S_StartSound(0,$29);
  }
 } while(0);
 $32 = $actor$addr;
 $33 = $actor$addr;
 $info32 = ((($33)) + 92|0);
 $34 = HEAP32[$info32>>2]|0;
 $seestate = ((($34)) + 12|0);
 $35 = HEAP32[$seestate>>2]|0;
 (_P_SetMobjState($32,$35)|0);
 STACKTOP = sp;return;
}
function _A_Chase($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $activesound = 0, $activesound114 = 0, $actor$addr = 0, $add = 0, $and = 0, $and31 = 0, $and40 = 0, $and44 = 0, $angle = 0;
 var $angle14 = 0, $angle18 = 0, $angle23 = 0, $attacksound = 0, $attacksound60 = 0, $call = 0, $call103 = 0, $call110 = 0, $call53 = 0, $call76 = 0, $call91 = 0, $call94 = 0, $cmp = 0, $cmp101 = 0, $cmp111 = 0, $cmp12 = 0, $cmp16 = 0, $cmp21 = 0, $cmp45 = 0, $cmp69 = 0;
 var $dec = 0, $dec100 = 0, $dec9 = 0, $delta = 0, $flags = 0, $flags39 = 0, $flags43 = 0, $flags83 = 0, $health = 0, $info = 0, $info107 = 0, $info113 = 0, $info50 = 0, $info56 = 0, $info59 = 0, $info62 = 0, $info66 = 0, $info80 = 0, $meleestate = 0, $meleestate63 = 0;
 var $missilestate = 0, $missilestate81 = 0, $movecount = 0, $movecount99 = 0, $movedir = 0, $movedir15 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $reactiontime = 0, $reactiontime1 = 0, $shl = 0, $spawnstate = 0, $sub = 0, $sub19 = 0, $target = 0, $target27 = 0, $target30 = 0, $target5 = 0, $target90 = 0;
 var $threshold = 0, $threshold7 = 0, $threshold8 = 0, $threshold87 = 0, $tobool = 0, $tobool104 = 0, $tobool108 = 0, $tobool2 = 0, $tobool28 = 0, $tobool32 = 0, $tobool34 = 0, $tobool4 = 0, $tobool41 = 0, $tobool46 = 0, $tobool51 = 0, $tobool54 = 0, $tobool57 = 0, $tobool67 = 0, $tobool71 = 0, $tobool73 = 0;
 var $tobool77 = 0, $tobool85 = 0, $tobool88 = 0, $tobool92 = 0, $tobool95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $reactiontime = ((($0)) + 124|0);
 $1 = HEAP32[$reactiontime>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = $actor$addr;
  $reactiontime1 = ((($2)) + 124|0);
  $3 = HEAP32[$reactiontime1>>2]|0;
  $dec = (($3) + -1)|0;
  HEAP32[$reactiontime1>>2] = $dec;
 }
 $4 = $actor$addr;
 $threshold = ((($4)) + 128|0);
 $5 = HEAP32[$threshold>>2]|0;
 $tobool2 = ($5|0)!=(0);
 do {
  if ($tobool2) {
   $6 = $actor$addr;
   $target = ((($6)) + 120|0);
   $7 = HEAP32[$target>>2]|0;
   $tobool4 = ($7|0)!=(0|0);
   if ($tobool4) {
    $8 = $actor$addr;
    $target5 = ((($8)) + 120|0);
    $9 = HEAP32[$target5>>2]|0;
    $health = ((($9)) + 108|0);
    $10 = HEAP32[$health>>2]|0;
    $cmp = ($10|0)<=(0);
    if (!($cmp)) {
     $12 = $actor$addr;
     $threshold8 = ((($12)) + 128|0);
     $13 = HEAP32[$threshold8>>2]|0;
     $dec9 = (($13) + -1)|0;
     HEAP32[$threshold8>>2] = $dec9;
     break;
    }
   }
   $11 = $actor$addr;
   $threshold7 = ((($11)) + 128|0);
   HEAP32[$threshold7>>2] = 0;
  }
 } while(0);
 $14 = $actor$addr;
 $movedir = ((($14)) + 112|0);
 $15 = HEAP32[$movedir>>2]|0;
 $cmp12 = ($15|0)<(8);
 do {
  if ($cmp12) {
   $16 = $actor$addr;
   $angle = ((($16)) + 32|0);
   $17 = HEAP32[$angle>>2]|0;
   $and = $17 & -536870912;
   HEAP32[$angle>>2] = $and;
   $18 = $actor$addr;
   $angle14 = ((($18)) + 32|0);
   $19 = HEAP32[$angle14>>2]|0;
   $20 = $actor$addr;
   $movedir15 = ((($20)) + 112|0);
   $21 = HEAP32[$movedir15>>2]|0;
   $shl = $21 << 29;
   $sub = (($19) - ($shl))|0;
   $delta = $sub;
   $22 = $delta;
   $cmp16 = ($22|0)>(0);
   if ($cmp16) {
    $23 = $actor$addr;
    $angle18 = ((($23)) + 32|0);
    $24 = HEAP32[$angle18>>2]|0;
    $sub19 = (($24) - 536870912)|0;
    HEAP32[$angle18>>2] = $sub19;
    break;
   }
   $25 = $delta;
   $cmp21 = ($25|0)<(0);
   if ($cmp21) {
    $26 = $actor$addr;
    $angle23 = ((($26)) + 32|0);
    $27 = HEAP32[$angle23>>2]|0;
    $add = (($27) + 536870912)|0;
    HEAP32[$angle23>>2] = $add;
   }
  }
 } while(0);
 $28 = $actor$addr;
 $target27 = ((($28)) + 120|0);
 $29 = HEAP32[$target27>>2]|0;
 $tobool28 = ($29|0)!=(0|0);
 if ($tobool28) {
  $30 = $actor$addr;
  $target30 = ((($30)) + 120|0);
  $31 = HEAP32[$target30>>2]|0;
  $flags = ((($31)) + 104|0);
  $32 = HEAP32[$flags>>2]|0;
  $and31 = $32 & 4;
  $tobool32 = ($and31|0)!=(0);
  if ($tobool32) {
   $38 = $actor$addr;
   $flags39 = ((($38)) + 104|0);
   $39 = HEAP32[$flags39>>2]|0;
   $and40 = $39 & 128;
   $tobool41 = ($and40|0)!=(0);
   $40 = $actor$addr;
   if ($tobool41) {
    $flags43 = ((($40)) + 104|0);
    $41 = HEAP32[$flags43>>2]|0;
    $and44 = $41 & -129;
    HEAP32[$flags43>>2] = $and44;
    $42 = HEAP32[99425]|0;
    $cmp45 = ($42|0)==(4);
    $43 = HEAP32[99382]|0;
    $tobool46 = ($43|0)!=(0);
    $or$cond = $cmp45 | $tobool46;
    if ($or$cond) {
     STACKTOP = sp;return;
    }
    $44 = $actor$addr;
    _P_NewChaseDir($44);
    STACKTOP = sp;return;
   }
   $info50 = ((($40)) + 92|0);
   $45 = HEAP32[$info50>>2]|0;
   $meleestate = ((($45)) + 40|0);
   $46 = HEAP32[$meleestate>>2]|0;
   $tobool51 = ($46|0)!=(0);
   if ($tobool51) {
    $47 = $actor$addr;
    $call53 = (_P_CheckMeleeRange($47)|0);
    $tobool54 = ($call53|0)!=(0);
    if ($tobool54) {
     $48 = $actor$addr;
     $info56 = ((($48)) + 92|0);
     $49 = HEAP32[$info56>>2]|0;
     $attacksound = ((($49)) + 24|0);
     $50 = HEAP32[$attacksound>>2]|0;
     $tobool57 = ($50|0)!=(0);
     if ($tobool57) {
      $51 = $actor$addr;
      $52 = $actor$addr;
      $info59 = ((($52)) + 92|0);
      $53 = HEAP32[$info59>>2]|0;
      $attacksound60 = ((($53)) + 24|0);
      $54 = HEAP32[$attacksound60>>2]|0;
      _S_StartSound($51,$54);
     }
     $55 = $actor$addr;
     $56 = $actor$addr;
     $info62 = ((($56)) + 92|0);
     $57 = HEAP32[$info62>>2]|0;
     $meleestate63 = ((($57)) + 40|0);
     $58 = HEAP32[$meleestate63>>2]|0;
     (_P_SetMobjState($55,$58)|0);
     STACKTOP = sp;return;
    }
   }
   $59 = $actor$addr;
   $info66 = ((($59)) + 92|0);
   $60 = HEAP32[$info66>>2]|0;
   $missilestate = ((($60)) + 44|0);
   $61 = HEAP32[$missilestate>>2]|0;
   $tobool67 = ($61|0)!=(0);
   do {
    if ($tobool67) {
     $62 = HEAP32[99425]|0;
     $cmp69 = ($62|0)>=(4);
     $63 = HEAP32[99382]|0;
     $tobool71 = ($63|0)!=(0);
     $or$cond1 = $cmp69 | $tobool71;
     if (!($or$cond1)) {
      $64 = $actor$addr;
      $movecount = ((($64)) + 116|0);
      $65 = HEAP32[$movecount>>2]|0;
      $tobool73 = ($65|0)!=(0);
      if ($tobool73) {
       break;
      }
     }
     $66 = $actor$addr;
     $call76 = (_P_CheckMissileRange($66)|0);
     $tobool77 = ($call76|0)!=(0);
     if ($tobool77) {
      $67 = $actor$addr;
      $68 = $actor$addr;
      $info80 = ((($68)) + 92|0);
      $69 = HEAP32[$info80>>2]|0;
      $missilestate81 = ((($69)) + 44|0);
      $70 = HEAP32[$missilestate81>>2]|0;
      (_P_SetMobjState($67,$70)|0);
      $71 = $actor$addr;
      $flags83 = ((($71)) + 104|0);
      $72 = HEAP32[$flags83>>2]|0;
      $or = $72 | 128;
      HEAP32[$flags83>>2] = $or;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $73 = HEAP32[99433]|0;
   $tobool85 = ($73|0)!=(0);
   if ($tobool85) {
    $74 = $actor$addr;
    $threshold87 = ((($74)) + 128|0);
    $75 = HEAP32[$threshold87>>2]|0;
    $tobool88 = ($75|0)!=(0);
    if (!($tobool88)) {
     $76 = $actor$addr;
     $77 = $actor$addr;
     $target90 = ((($77)) + 120|0);
     $78 = HEAP32[$target90>>2]|0;
     $call91 = (_P_CheckSight($76,$78)|0);
     $tobool92 = ($call91|0)!=(0);
     if (!($tobool92)) {
      $79 = $actor$addr;
      $call94 = (_P_LookForPlayers($79,1)|0);
      $tobool95 = ($call94|0)!=(0);
      if ($tobool95) {
       STACKTOP = sp;return;
      }
     }
    }
   }
   $80 = $actor$addr;
   $movecount99 = ((($80)) + 116|0);
   $81 = HEAP32[$movecount99>>2]|0;
   $dec100 = (($81) + -1)|0;
   HEAP32[$movecount99>>2] = $dec100;
   $cmp101 = ($dec100|0)<(0);
   if ($cmp101) {
    label = 36;
   } else {
    $82 = $actor$addr;
    $call103 = (_P_Move($82)|0);
    $tobool104 = ($call103|0)!=(0);
    if (!($tobool104)) {
     label = 36;
    }
   }
   if ((label|0) == 36) {
    $83 = $actor$addr;
    _P_NewChaseDir($83);
   }
   $84 = $actor$addr;
   $info107 = ((($84)) + 92|0);
   $85 = HEAP32[$info107>>2]|0;
   $activesound = ((($85)) + 80|0);
   $86 = HEAP32[$activesound>>2]|0;
   $tobool108 = ($86|0)!=(0);
   if (!($tobool108)) {
    STACKTOP = sp;return;
   }
   $call110 = (_P_Random()|0);
   $cmp111 = ($call110|0)<(3);
   if (!($cmp111)) {
    STACKTOP = sp;return;
   }
   $87 = $actor$addr;
   $88 = $actor$addr;
   $info113 = ((($88)) + 92|0);
   $89 = HEAP32[$info113>>2]|0;
   $activesound114 = ((($89)) + 80|0);
   $90 = HEAP32[$activesound114>>2]|0;
   _S_StartSound($87,$90);
   STACKTOP = sp;return;
  }
 }
 $33 = $actor$addr;
 $call = (_P_LookForPlayers($33,1)|0);
 $tobool34 = ($call|0)!=(0);
 if ($tobool34) {
  STACKTOP = sp;return;
 }
 $34 = $actor$addr;
 $35 = $actor$addr;
 $info = ((($35)) + 92|0);
 $36 = HEAP32[$info>>2]|0;
 $spawnstate = ((($36)) + 4|0);
 $37 = HEAP32[$spawnstate>>2]|0;
 (_P_SetMobjState($34,$37)|0);
 STACKTOP = sp;return;
}
function _A_FaceTarget($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $actor$addr = 0, $add = 0, $and = 0, $and7 = 0, $angle = 0, $angle12 = 0, $call = 0, $call10 = 0, $call11 = 0, $flags = 0, $flags6 = 0, $shl = 0, $sub = 0, $target = 0, $target1 = 0, $target3 = 0, $target5 = 0, $tobool = 0, $tobool8 = 0, $x = 0;
 var $x2 = 0, $y = 0, $y4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 $flags = ((($2)) + 104|0);
 $3 = HEAP32[$flags>>2]|0;
 $and = $3 & -33;
 HEAP32[$flags>>2] = $and;
 $4 = $actor$addr;
 $x = ((($4)) + 12|0);
 $5 = HEAP32[$x>>2]|0;
 $6 = $actor$addr;
 $y = ((($6)) + 16|0);
 $7 = HEAP32[$y>>2]|0;
 $8 = $actor$addr;
 $target1 = ((($8)) + 120|0);
 $9 = HEAP32[$target1>>2]|0;
 $x2 = ((($9)) + 12|0);
 $10 = HEAP32[$x2>>2]|0;
 $11 = $actor$addr;
 $target3 = ((($11)) + 120|0);
 $12 = HEAP32[$target3>>2]|0;
 $y4 = ((($12)) + 16|0);
 $13 = HEAP32[$y4>>2]|0;
 $call = (_R_PointToAngle2($5,$7,$10,$13)|0);
 $14 = $actor$addr;
 $angle = ((($14)) + 32|0);
 HEAP32[$angle>>2] = $call;
 $15 = $actor$addr;
 $target5 = ((($15)) + 120|0);
 $16 = HEAP32[$target5>>2]|0;
 $flags6 = ((($16)) + 104|0);
 $17 = HEAP32[$flags6>>2]|0;
 $and7 = $17 & 262144;
 $tobool8 = ($and7|0)!=(0);
 if (!($tobool8)) {
  STACKTOP = sp;return;
 }
 $call10 = (_P_Random()|0);
 $call11 = (_P_Random()|0);
 $sub = (($call10) - ($call11))|0;
 $shl = $sub << 21;
 $18 = $actor$addr;
 $angle12 = ((($18)) + 32|0);
 $19 = HEAP32[$angle12>>2]|0;
 $add = (($19) + ($shl))|0;
 HEAP32[$angle12>>2] = $add;
 STACKTOP = sp;return;
}
function _A_PosAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add5 = 0, $angle = 0, $angle1 = 0, $call = 0, $call2 = 0;
 var $call3 = 0, $call4 = 0, $damage = 0, $mul = 0, $rem = 0, $shl = 0, $slope = 0, $sub = 0, $target = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $angle1 = ((($3)) + 32|0);
 $4 = HEAP32[$angle1>>2]|0;
 $angle = $4;
 $5 = $actor$addr;
 $6 = $angle;
 $call = (_P_AimLineAttack($5,$6,134217728)|0);
 $slope = $call;
 $7 = $actor$addr;
 _S_StartSound($7,1);
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 20;
 $8 = $angle;
 $add = (($8) + ($shl))|0;
 $angle = $add;
 $call4 = (_P_Random()|0);
 $rem = (($call4|0) % 5)&-1;
 $add5 = (($rem) + 1)|0;
 $mul = ($add5*3)|0;
 $damage = $mul;
 $9 = $actor$addr;
 $10 = $angle;
 $11 = $slope;
 $12 = $damage;
 _P_LineAttack($9,$10,134217728,$11,$12);
 STACKTOP = sp;return;
}
function _A_SPosAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add5 = 0, $angle = 0, $angle1 = 0;
 var $bangle = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $damage = 0, $i = 0, $inc = 0, $mul = 0, $rem = 0, $shl = 0, $slope = 0, $sub = 0, $target = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _S_StartSound($2,2);
 $3 = $actor$addr;
 _A_FaceTarget($3);
 $4 = $actor$addr;
 $angle1 = ((($4)) + 32|0);
 $5 = HEAP32[$angle1>>2]|0;
 $bangle = $5;
 $6 = $actor$addr;
 $7 = $bangle;
 $call = (_P_AimLineAttack($6,$7,134217728)|0);
 $slope = $call;
 $i = 0;
 while(1) {
  $8 = $i;
  $cmp = ($8|0)<(3);
  if (!($cmp)) {
   break;
  }
  $9 = $bangle;
  $call2 = (_P_Random()|0);
  $call3 = (_P_Random()|0);
  $sub = (($call2) - ($call3))|0;
  $shl = $sub << 20;
  $add = (($9) + ($shl))|0;
  $angle = $add;
  $call4 = (_P_Random()|0);
  $rem = (($call4|0) % 5)&-1;
  $add5 = (($rem) + 1)|0;
  $mul = ($add5*3)|0;
  $damage = $mul;
  $10 = $actor$addr;
  $11 = $angle;
  $12 = $slope;
  $13 = $damage;
  _P_LineAttack($10,$11,134217728,$12,$13);
  $14 = $i;
  $inc = (($14) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _A_CPosAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add5 = 0, $angle = 0, $angle1 = 0, $bangle = 0, $call = 0;
 var $call2 = 0, $call3 = 0, $call4 = 0, $damage = 0, $mul = 0, $rem = 0, $shl = 0, $slope = 0, $sub = 0, $target = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _S_StartSound($2,2);
 $3 = $actor$addr;
 _A_FaceTarget($3);
 $4 = $actor$addr;
 $angle1 = ((($4)) + 32|0);
 $5 = HEAP32[$angle1>>2]|0;
 $bangle = $5;
 $6 = $actor$addr;
 $7 = $bangle;
 $call = (_P_AimLineAttack($6,$7,134217728)|0);
 $slope = $call;
 $8 = $bangle;
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 20;
 $add = (($8) + ($shl))|0;
 $angle = $add;
 $call4 = (_P_Random()|0);
 $rem = (($call4|0) % 5)&-1;
 $add5 = (($rem) + 1)|0;
 $mul = ($add5*3)|0;
 $damage = $mul;
 $9 = $actor$addr;
 $10 = $angle;
 $11 = $slope;
 $12 = $damage;
 _P_LineAttack($9,$10,134217728,$11,$12);
 STACKTOP = sp;return;
}
function _A_CPosRefire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $health = 0, $info = 0;
 var $seestate = 0, $target = 0, $target1 = 0, $target4 = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_FaceTarget($0);
 $call = (_P_Random()|0);
 $cmp = ($call|0)<(40);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = $actor$addr;
 $target = ((($1)) + 120|0);
 $2 = HEAP32[$target>>2]|0;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $actor$addr;
  $target1 = ((($3)) + 120|0);
  $4 = HEAP32[$target1>>2]|0;
  $health = ((($4)) + 108|0);
  $5 = HEAP32[$health>>2]|0;
  $cmp2 = ($5|0)<=(0);
  if (!($cmp2)) {
   $6 = $actor$addr;
   $7 = $actor$addr;
   $target4 = ((($7)) + 120|0);
   $8 = HEAP32[$target4>>2]|0;
   $call5 = (_P_CheckSight($6,$8)|0);
   $tobool6 = ($call5|0)!=(0);
   if ($tobool6) {
    STACKTOP = sp;return;
   }
  }
 }
 $9 = $actor$addr;
 $10 = $actor$addr;
 $info = ((($10)) + 92|0);
 $11 = HEAP32[$info>>2]|0;
 $seestate = ((($11)) + 12|0);
 $12 = HEAP32[$seestate>>2]|0;
 (_P_SetMobjState($9,$12)|0);
 STACKTOP = sp;return;
}
function _A_SpidRefire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $health = 0, $info = 0;
 var $seestate = 0, $target = 0, $target1 = 0, $target4 = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_FaceTarget($0);
 $call = (_P_Random()|0);
 $cmp = ($call|0)<(10);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = $actor$addr;
 $target = ((($1)) + 120|0);
 $2 = HEAP32[$target>>2]|0;
 $tobool = ($2|0)!=(0|0);
 if ($tobool) {
  $3 = $actor$addr;
  $target1 = ((($3)) + 120|0);
  $4 = HEAP32[$target1>>2]|0;
  $health = ((($4)) + 108|0);
  $5 = HEAP32[$health>>2]|0;
  $cmp2 = ($5|0)<=(0);
  if (!($cmp2)) {
   $6 = $actor$addr;
   $7 = $actor$addr;
   $target4 = ((($7)) + 120|0);
   $8 = HEAP32[$target4>>2]|0;
   $call5 = (_P_CheckSight($6,$8)|0);
   $tobool6 = ($call5|0)!=(0);
   if ($tobool6) {
    STACKTOP = sp;return;
   }
  }
 }
 $9 = $actor$addr;
 $10 = $actor$addr;
 $info = ((($10)) + 92|0);
 $11 = HEAP32[$info>>2]|0;
 $seestate = ((($11)) + 12|0);
 $12 = HEAP32[$seestate>>2]|0;
 (_P_SetMobjState($9,$12)|0);
 STACKTOP = sp;return;
}
function _A_BspiAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $actor$addr = 0, $target = 0, $target1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $4 = $actor$addr;
 $target1 = ((($4)) + 120|0);
 $5 = HEAP32[$target1>>2]|0;
 (_P_SpawnMissile($3,$5,36)|0);
 STACKTOP = sp;return;
}
function _A_TroopAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $call = 0, $call3 = 0, $damage = 0, $mul = 0, $rem = 0, $target = 0;
 var $target4 = 0, $target6 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $call = (_P_CheckMeleeRange($3)|0);
 $tobool1 = ($call|0)!=(0);
 $4 = $actor$addr;
 if ($tobool1) {
  _S_StartSound($4,55);
  $call3 = (_P_Random()|0);
  $rem = (($call3|0) % 8)&-1;
  $add = (($rem) + 1)|0;
  $mul = ($add*3)|0;
  $damage = $mul;
  $5 = $actor$addr;
  $target4 = ((($5)) + 120|0);
  $6 = HEAP32[$target4>>2]|0;
  $7 = $actor$addr;
  $8 = $actor$addr;
  $9 = $damage;
  _P_DamageMobj($6,$7,$8,$9);
  STACKTOP = sp;return;
 } else {
  $10 = $actor$addr;
  $target6 = ((($10)) + 120|0);
  $11 = HEAP32[$target6>>2]|0;
  (_P_SpawnMissile($4,$11,31)|0);
  STACKTOP = sp;return;
 }
}
function _A_SargAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $actor$addr = 0, $add = 0, $call = 0, $call3 = 0, $damage = 0, $mul = 0, $rem = 0, $target = 0, $target4 = 0, $tobool = 0, $tobool1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $call = (_P_CheckMeleeRange($3)|0);
 $tobool1 = ($call|0)!=(0);
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 $call3 = (_P_Random()|0);
 $rem = (($call3|0) % 10)&-1;
 $add = (($rem) + 1)|0;
 $mul = $add<<2;
 $damage = $mul;
 $4 = $actor$addr;
 $target4 = ((($4)) + 120|0);
 $5 = HEAP32[$target4>>2]|0;
 $6 = $actor$addr;
 $7 = $actor$addr;
 $8 = $damage;
 _P_DamageMobj($5,$6,$7,$8);
 STACKTOP = sp;return;
}
function _A_HeadAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $call = 0, $call3 = 0, $damage = 0, $mul = 0, $rem = 0, $target = 0;
 var $target4 = 0, $target6 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $call = (_P_CheckMeleeRange($3)|0);
 $tobool1 = ($call|0)!=(0);
 if ($tobool1) {
  $call3 = (_P_Random()|0);
  $rem = (($call3|0) % 6)&-1;
  $add = (($rem) + 1)|0;
  $mul = ($add*10)|0;
  $damage = $mul;
  $4 = $actor$addr;
  $target4 = ((($4)) + 120|0);
  $5 = HEAP32[$target4>>2]|0;
  $6 = $actor$addr;
  $7 = $actor$addr;
  $8 = $damage;
  _P_DamageMobj($5,$6,$7,$8);
  STACKTOP = sp;return;
 } else {
  $9 = $actor$addr;
  $10 = $actor$addr;
  $target6 = ((($10)) + 120|0);
  $11 = HEAP32[$target6>>2]|0;
  (_P_SpawnMissile($9,$11,32)|0);
  STACKTOP = sp;return;
 }
}
function _A_CyberAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $actor$addr = 0, $target = 0, $target1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $4 = $actor$addr;
 $target1 = ((($4)) + 120|0);
 $5 = HEAP32[$target1>>2]|0;
 (_P_SpawnMissile($3,$5,33)|0);
 STACKTOP = sp;return;
}
function _A_BruisAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $call = 0, $call3 = 0, $damage = 0, $mul = 0, $rem = 0, $target = 0, $target4 = 0;
 var $target6 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 $call = (_P_CheckMeleeRange($2)|0);
 $tobool1 = ($call|0)!=(0);
 $3 = $actor$addr;
 if ($tobool1) {
  _S_StartSound($3,55);
  $call3 = (_P_Random()|0);
  $rem = (($call3|0) % 8)&-1;
  $add = (($rem) + 1)|0;
  $mul = ($add*10)|0;
  $damage = $mul;
  $4 = $actor$addr;
  $target4 = ((($4)) + 120|0);
  $5 = HEAP32[$target4>>2]|0;
  $6 = $actor$addr;
  $7 = $actor$addr;
  $8 = $damage;
  _P_DamageMobj($5,$6,$7,$8);
  STACKTOP = sp;return;
 } else {
  $9 = $actor$addr;
  $target6 = ((($9)) + 120|0);
  $10 = HEAP32[$target6>>2]|0;
  (_P_SpawnMissile($3,$10,16)|0);
  STACKTOP = sp;return;
 }
}
function _A_SkelMissile($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $actor$addr = 0, $add = 0, $add3 = 0, $add4 = 0, $call = 0, $mo = 0, $momx = 0, $momy = 0, $sub = 0, $target = 0, $target1 = 0, $target5 = 0, $tobool = 0, $tracer = 0, $x = 0, $y = 0, $z = 0, $z2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $z = ((($3)) + 20|0);
 $4 = HEAP32[$z>>2]|0;
 $add = (($4) + 1048576)|0;
 HEAP32[$z>>2] = $add;
 $5 = $actor$addr;
 $6 = $actor$addr;
 $target1 = ((($6)) + 120|0);
 $7 = HEAP32[$target1>>2]|0;
 $call = (_P_SpawnMissile($5,$7,6)|0);
 $mo = $call;
 $8 = $actor$addr;
 $z2 = ((($8)) + 20|0);
 $9 = HEAP32[$z2>>2]|0;
 $sub = (($9) - 1048576)|0;
 HEAP32[$z2>>2] = $sub;
 $10 = $mo;
 $momx = ((($10)) + 72|0);
 $11 = HEAP32[$momx>>2]|0;
 $12 = $mo;
 $x = ((($12)) + 12|0);
 $13 = HEAP32[$x>>2]|0;
 $add3 = (($13) + ($11))|0;
 HEAP32[$x>>2] = $add3;
 $14 = $mo;
 $momy = ((($14)) + 76|0);
 $15 = HEAP32[$momy>>2]|0;
 $16 = $mo;
 $y = ((($16)) + 16|0);
 $17 = HEAP32[$y>>2]|0;
 $add4 = (($17) + ($15))|0;
 HEAP32[$y>>2] = $add4;
 $18 = $actor$addr;
 $target5 = ((($18)) + 120|0);
 $19 = HEAP32[$target5>>2]|0;
 $20 = $mo;
 $tracer = ((($20)) + 152|0);
 HEAP32[$tracer>>2] = $19;
 STACKTOP = sp;return;
}
function _A_Tracer($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $actor$addr = 0, $add = 0, $add65 = 0, $add76 = 0, $and = 0, $and6 = 0, $angle = 0, $angle23 = 0, $angle27 = 0;
 var $angle29 = 0, $angle33 = 0, $angle36 = 0, $angle40 = 0, $angle44 = 0, $arrayidx = 0, $arrayidx49 = 0, $call = 0, $call20 = 0, $call45 = 0, $call5 = 0, $call50 = 0, $call58 = 0, $cmp = 0, $cmp13 = 0, $cmp21 = 0, $cmp25 = 0, $cmp31 = 0, $cmp38 = 0, $cmp61 = 0;
 var $cmp70 = 0, $dest = 0, $dist = 0, $div = 0, $div68 = 0, $exact = 0, $health = 0, $info = 0, $info47 = 0, $info59 = 0, $momx = 0, $momx46 = 0, $momy = 0, $momy51 = 0, $momz = 0, $momz69 = 0, $momz72 = 0, $shr = 0, $slope = 0, $spec$store$select = 0;
 var $speed = 0, $speed48 = 0, $speed60 = 0, $sub = 0, $sub24 = 0, $sub28 = 0, $sub3 = 0, $sub30 = 0, $sub37 = 0, $sub54 = 0, $sub57 = 0, $sub67 = 0, $sub7 = 0, $sub73 = 0, $th = 0, $tics = 0, $tics10 = 0, $tics8 = 0, $tobool = 0, $tobool12 = 0;
 var $tracer = 0, $x = 0, $x1 = 0, $x16 = 0, $x18 = 0, $x52 = 0, $x53 = 0, $y = 0, $y17 = 0, $y19 = 0, $y2 = 0, $y55 = 0, $y56 = 0, $z = 0, $z4 = 0, $z64 = 0, $z66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $actor$addr = $actor;
 $0 = HEAP32[99365]|0;
 $and = $0 & 3;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $1 = $actor$addr;
 $x = ((($1)) + 12|0);
 $2 = HEAP32[$x>>2]|0;
 $3 = $actor$addr;
 $y = ((($3)) + 16|0);
 $4 = HEAP32[$y>>2]|0;
 $5 = $actor$addr;
 $z = ((($5)) + 20|0);
 $6 = HEAP32[$z>>2]|0;
 _P_SpawnPuff($2,$4,$6);
 $7 = $actor$addr;
 $x1 = ((($7)) + 12|0);
 $8 = HEAP32[$x1>>2]|0;
 $9 = $actor$addr;
 $momx = ((($9)) + 72|0);
 $10 = HEAP32[$momx>>2]|0;
 $sub = (($8) - ($10))|0;
 $11 = $actor$addr;
 $y2 = ((($11)) + 16|0);
 $12 = HEAP32[$y2>>2]|0;
 $13 = $actor$addr;
 $momy = ((($13)) + 76|0);
 $14 = HEAP32[$momy>>2]|0;
 $sub3 = (($12) - ($14))|0;
 $15 = $actor$addr;
 $z4 = ((($15)) + 20|0);
 $16 = HEAP32[$z4>>2]|0;
 $call = (_P_SpawnMobj($sub,$sub3,$16,7)|0);
 $th = $call;
 $17 = $th;
 $momz = ((($17)) + 80|0);
 HEAP32[$momz>>2] = 65536;
 $call5 = (_P_Random()|0);
 $and6 = $call5 & 3;
 $18 = $th;
 $tics = ((($18)) + 96|0);
 $19 = HEAP32[$tics>>2]|0;
 $sub7 = (($19) - ($and6))|0;
 HEAP32[$tics>>2] = $sub7;
 $20 = $th;
 $tics8 = ((($20)) + 96|0);
 $21 = HEAP32[$tics8>>2]|0;
 $cmp = ($21|0)<(1);
 if ($cmp) {
  $22 = $th;
  $tics10 = ((($22)) + 96|0);
  HEAP32[$tics10>>2] = 1;
 }
 $23 = $actor$addr;
 $tracer = ((($23)) + 152|0);
 $24 = HEAP32[$tracer>>2]|0;
 $dest = $24;
 $25 = $dest;
 $tobool12 = ($25|0)!=(0|0);
 if (!($tobool12)) {
  STACKTOP = sp;return;
 }
 $26 = $dest;
 $health = ((($26)) + 108|0);
 $27 = HEAP32[$health>>2]|0;
 $cmp13 = ($27|0)<=(0);
 if ($cmp13) {
  STACKTOP = sp;return;
 }
 $28 = $actor$addr;
 $x16 = ((($28)) + 12|0);
 $29 = HEAP32[$x16>>2]|0;
 $30 = $actor$addr;
 $y17 = ((($30)) + 16|0);
 $31 = HEAP32[$y17>>2]|0;
 $32 = $dest;
 $x18 = ((($32)) + 12|0);
 $33 = HEAP32[$x18>>2]|0;
 $34 = $dest;
 $y19 = ((($34)) + 16|0);
 $35 = HEAP32[$y19>>2]|0;
 $call20 = (_R_PointToAngle2($29,$31,$33,$35)|0);
 $exact = $call20;
 $36 = $exact;
 $37 = $actor$addr;
 $angle = ((($37)) + 32|0);
 $38 = HEAP32[$angle>>2]|0;
 $cmp21 = ($36|0)!=($38|0);
 do {
  if ($cmp21) {
   $39 = $exact;
   $40 = $actor$addr;
   $angle23 = ((($40)) + 32|0);
   $41 = HEAP32[$angle23>>2]|0;
   $sub24 = (($39) - ($41))|0;
   $cmp25 = ($sub24>>>0)>(2147483648);
   $42 = $actor$addr;
   $angle27 = ((($42)) + 32|0);
   $43 = HEAP32[$angle27>>2]|0;
   if ($cmp25) {
    $sub28 = (($43) - 201326592)|0;
    HEAP32[$angle27>>2] = $sub28;
    $44 = $exact;
    $45 = $actor$addr;
    $angle29 = ((($45)) + 32|0);
    $46 = HEAP32[$angle29>>2]|0;
    $sub30 = (($44) - ($46))|0;
    $cmp31 = ($sub30>>>0)<(2147483648);
    if (!($cmp31)) {
     break;
    }
    $47 = $exact;
    $48 = $actor$addr;
    $angle33 = ((($48)) + 32|0);
    HEAP32[$angle33>>2] = $47;
    break;
   } else {
    $add = (($43) + 201326592)|0;
    HEAP32[$angle27>>2] = $add;
    $49 = $exact;
    $50 = $actor$addr;
    $angle36 = ((($50)) + 32|0);
    $51 = HEAP32[$angle36>>2]|0;
    $sub37 = (($49) - ($51))|0;
    $cmp38 = ($sub37>>>0)>(2147483648);
    if (!($cmp38)) {
     break;
    }
    $52 = $exact;
    $53 = $actor$addr;
    $angle40 = ((($53)) + 32|0);
    HEAP32[$angle40>>2] = $52;
    break;
   }
  }
 } while(0);
 $54 = $actor$addr;
 $angle44 = ((($54)) + 32|0);
 $55 = HEAP32[$angle44>>2]|0;
 $shr = $55 >>> 19;
 $exact = $shr;
 $56 = $actor$addr;
 $info = ((($56)) + 92|0);
 $57 = HEAP32[$info>>2]|0;
 $speed = ((($57)) + 60|0);
 $58 = HEAP32[$speed>>2]|0;
 $59 = $exact;
 $arrayidx = ((82992) + ($59<<2)|0);
 $60 = HEAP32[$arrayidx>>2]|0;
 $call45 = (_FixedMul($58,$60)|0);
 $61 = $actor$addr;
 $momx46 = ((($61)) + 72|0);
 HEAP32[$momx46>>2] = $call45;
 $62 = $actor$addr;
 $info47 = ((($62)) + 92|0);
 $63 = HEAP32[$info47>>2]|0;
 $speed48 = ((($63)) + 60|0);
 $64 = HEAP32[$speed48>>2]|0;
 $65 = $exact;
 $arrayidx49 = (74800 + ($65<<2)|0);
 $66 = HEAP32[$arrayidx49>>2]|0;
 $call50 = (_FixedMul($64,$66)|0);
 $67 = $actor$addr;
 $momy51 = ((($67)) + 76|0);
 HEAP32[$momy51>>2] = $call50;
 $68 = $dest;
 $x52 = ((($68)) + 12|0);
 $69 = HEAP32[$x52>>2]|0;
 $70 = $actor$addr;
 $x53 = ((($70)) + 12|0);
 $71 = HEAP32[$x53>>2]|0;
 $sub54 = (($69) - ($71))|0;
 $72 = $dest;
 $y55 = ((($72)) + 16|0);
 $73 = HEAP32[$y55>>2]|0;
 $74 = $actor$addr;
 $y56 = ((($74)) + 16|0);
 $75 = HEAP32[$y56>>2]|0;
 $sub57 = (($73) - ($75))|0;
 $call58 = (_P_AproxDistance($sub54,$sub57)|0);
 $dist = $call58;
 $76 = $dist;
 $77 = $actor$addr;
 $info59 = ((($77)) + 92|0);
 $78 = HEAP32[$info59>>2]|0;
 $speed60 = ((($78)) + 60|0);
 $79 = HEAP32[$speed60>>2]|0;
 $div = (($76|0) / ($79|0))&-1;
 $dist = $div;
 $80 = $dist;
 $cmp61 = ($80|0)<(1);
 $spec$store$select = $cmp61 ? 1 : $div;
 $dist = $spec$store$select;
 $81 = $dest;
 $z64 = ((($81)) + 20|0);
 $82 = HEAP32[$z64>>2]|0;
 $add65 = (($82) + 2621440)|0;
 $83 = $actor$addr;
 $z66 = ((($83)) + 20|0);
 $84 = HEAP32[$z66>>2]|0;
 $sub67 = (($add65) - ($84))|0;
 $85 = $dist;
 $div68 = (($sub67|0) / ($85|0))&-1;
 $slope = $div68;
 $86 = $slope;
 $87 = $actor$addr;
 $momz69 = ((($87)) + 80|0);
 $88 = HEAP32[$momz69>>2]|0;
 $cmp70 = ($86|0)<($88|0);
 $89 = $actor$addr;
 $momz72 = ((($89)) + 80|0);
 $90 = HEAP32[$momz72>>2]|0;
 if ($cmp70) {
  $sub73 = (($90) - 8192)|0;
  HEAP32[$momz72>>2] = $sub73;
  STACKTOP = sp;return;
 } else {
  $add76 = (($90) + 8192)|0;
  HEAP32[$momz72>>2] = $add76;
  STACKTOP = sp;return;
 }
}
function _A_SkelWhoosh($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $actor$addr = 0, $target = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 _S_StartSound($3,56);
 STACKTOP = sp;return;
}
function _A_SkelFist($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $call = 0, $call3 = 0, $damage = 0, $mul = 0, $rem = 0, $target = 0, $target4 = 0, $tobool = 0;
 var $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $call = (_P_CheckMeleeRange($3)|0);
 $tobool1 = ($call|0)!=(0);
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 $call3 = (_P_Random()|0);
 $rem = (($call3|0) % 10)&-1;
 $add = (($rem) + 1)|0;
 $mul = ($add*6)|0;
 $damage = $mul;
 $4 = $actor$addr;
 _S_StartSound($4,53);
 $5 = $actor$addr;
 $target4 = ((($5)) + 120|0);
 $6 = HEAP32[$target4>>2]|0;
 $7 = $actor$addr;
 $8 = $actor$addr;
 $9 = $damage;
 _P_DamageMobj($6,$7,$8,$9);
 STACKTOP = sp;return;
}
function _PIT_VileCheck($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $call = 0, $call15 = 0, $call9 = 0, $check = 0, $cmp = 0;
 var $cmp10 = 0, $cmp3 = 0, $cmp7 = 0, $flags = 0, $height = 0, $height16 = 0, $info = 0, $info6 = 0, $maxdist = 0, $momx = 0, $momy = 0, $radius = 0, $raisestate = 0, $retval = 0, $shl = 0, $shr = 0, $sub = 0, $sub8 = 0, $thing$addr = 0, $tics = 0;
 var $tobool = 0, $tobool17 = 0, $x = 0, $x13 = 0, $y = 0, $y14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 1048576;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $retval = 1;
  $32 = $retval;
  STACKTOP = sp;return ($32|0);
 }
 $2 = $thing$addr;
 $tics = ((($2)) + 96|0);
 $3 = HEAP32[$tics>>2]|0;
 $cmp = ($3|0)!=(-1);
 if ($cmp) {
  $retval = 1;
  $32 = $retval;
  STACKTOP = sp;return ($32|0);
 }
 $4 = $thing$addr;
 $info = ((($4)) + 92|0);
 $5 = HEAP32[$info>>2]|0;
 $raisestate = ((($5)) + 88|0);
 $6 = HEAP32[$raisestate>>2]|0;
 $cmp3 = ($6|0)==(0);
 if ($cmp3) {
  $retval = 1;
  $32 = $retval;
  STACKTOP = sp;return ($32|0);
 }
 $7 = $thing$addr;
 $info6 = ((($7)) + 92|0);
 $8 = HEAP32[$info6>>2]|0;
 $radius = ((($8)) + 64|0);
 $9 = HEAP32[$radius>>2]|0;
 $10 = HEAP32[(30996)>>2]|0;
 $add = (($9) + ($10))|0;
 $maxdist = $add;
 $11 = $thing$addr;
 $x = ((($11)) + 12|0);
 $12 = HEAP32[$x>>2]|0;
 $13 = HEAP32[99747]|0;
 $sub = (($12) - ($13))|0;
 $call = (Math_abs(($sub|0))|0);
 $14 = $maxdist;
 $cmp7 = ($call|0)>($14|0);
 if (!($cmp7)) {
  $15 = $thing$addr;
  $y = ((($15)) + 16|0);
  $16 = HEAP32[$y>>2]|0;
  $17 = HEAP32[99748]|0;
  $sub8 = (($16) - ($17))|0;
  $call9 = (Math_abs(($sub8|0))|0);
  $18 = $maxdist;
  $cmp10 = ($call9|0)>($18|0);
  if (!($cmp10)) {
   $19 = $thing$addr;
   HEAP32[99749] = $19;
   $20 = HEAP32[99749]|0;
   $momy = ((($20)) + 76|0);
   HEAP32[$momy>>2] = 0;
   $21 = HEAP32[99749]|0;
   $momx = ((($21)) + 72|0);
   HEAP32[$momx>>2] = 0;
   $22 = HEAP32[99749]|0;
   $height = ((($22)) + 68|0);
   $23 = HEAP32[$height>>2]|0;
   $shl = $23 << 2;
   HEAP32[$height>>2] = $shl;
   $24 = HEAP32[99749]|0;
   $25 = HEAP32[99749]|0;
   $x13 = ((($25)) + 12|0);
   $26 = HEAP32[$x13>>2]|0;
   $27 = HEAP32[99749]|0;
   $y14 = ((($27)) + 16|0);
   $28 = HEAP32[$y14>>2]|0;
   $call15 = (_P_CheckPosition($24,$26,$28)|0);
   $check = $call15;
   $29 = HEAP32[99749]|0;
   $height16 = ((($29)) + 68|0);
   $30 = HEAP32[$height16>>2]|0;
   $shr = $30 >> 2;
   HEAP32[$height16>>2] = $shr;
   $31 = $check;
   $tobool17 = ($31|0)!=(0);
   if ($tobool17) {
    $retval = 0;
    $32 = $retval;
    STACKTOP = sp;return ($32|0);
   } else {
    $retval = 1;
    $32 = $retval;
    STACKTOP = sp;return ($32|0);
   }
  }
 }
 $retval = 1;
 $32 = $retval;
 STACKTOP = sp;return ($32|0);
}
function _A_VileChase($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $actor$addr = 0, $add = 0, $add11 = 0, $add17 = 0, $add8 = 0, $arrayidx = 0, $arrayidx6 = 0, $bx = 0, $by = 0, $call = 0, $cmp = 0, $cmp19 = 0, $cmp21 = 0, $flags = 0, $flags29 = 0, $health = 0, $height = 0, $inc = 0, $inc32 = 0, $info = 0;
 var $info1 = 0, $info27 = 0, $info3 = 0, $movedir = 0, $movedir2 = 0, $movedir5 = 0, $mul = 0, $mul7 = 0, $raisestate = 0, $shl = 0, $shr = 0, $shr12 = 0, $shr15 = 0, $shr18 = 0, $spawnhealth = 0, $speed = 0, $speed4 = 0, $sub = 0, $sub10 = 0, $sub13 = 0;
 var $sub14 = 0, $sub16 = 0, $sub9 = 0, $target = 0, $target24 = 0, $target25 = 0, $target30 = 0, $temp = 0, $tobool = 0, $x = 0, $xh = 0, $xl = 0, $y = 0, $yh = 0, $yl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $movedir = ((($0)) + 112|0);
 $1 = HEAP32[$movedir>>2]|0;
 $cmp = ($1|0)!=(8);
 L1: do {
  if ($cmp) {
   $2 = $actor$addr;
   $x = ((($2)) + 12|0);
   $3 = HEAP32[$x>>2]|0;
   $4 = $actor$addr;
   $info1 = ((($4)) + 92|0);
   $5 = HEAP32[$info1>>2]|0;
   $speed = ((($5)) + 60|0);
   $6 = HEAP32[$speed>>2]|0;
   $7 = $actor$addr;
   $movedir2 = ((($7)) + 112|0);
   $8 = HEAP32[$movedir2>>2]|0;
   $arrayidx = (49408 + ($8<<2)|0);
   $9 = HEAP32[$arrayidx>>2]|0;
   $mul = Math_imul($6, $9)|0;
   $add = (($3) + ($mul))|0;
   HEAP32[99747] = $add;
   $10 = $actor$addr;
   $y = ((($10)) + 16|0);
   $11 = HEAP32[$y>>2]|0;
   $12 = $actor$addr;
   $info3 = ((($12)) + 92|0);
   $13 = HEAP32[$info3>>2]|0;
   $speed4 = ((($13)) + 60|0);
   $14 = HEAP32[$speed4>>2]|0;
   $15 = $actor$addr;
   $movedir5 = ((($15)) + 112|0);
   $16 = HEAP32[$movedir5>>2]|0;
   $arrayidx6 = (49440 + ($16<<2)|0);
   $17 = HEAP32[$arrayidx6>>2]|0;
   $mul7 = Math_imul($14, $17)|0;
   $add8 = (($11) + ($mul7))|0;
   HEAP32[99748] = $add8;
   $18 = HEAP32[99747]|0;
   $19 = HEAP32[99856]|0;
   $sub = (($18) - ($19))|0;
   $sub9 = (($sub) - 4194304)|0;
   $shr = $sub9 >> 23;
   $xl = $shr;
   $20 = HEAP32[99747]|0;
   $21 = HEAP32[99856]|0;
   $sub10 = (($20) - ($21))|0;
   $add11 = (($sub10) + 4194304)|0;
   $shr12 = $add11 >> 23;
   $xh = $shr12;
   $22 = HEAP32[99748]|0;
   $23 = HEAP32[99857]|0;
   $sub13 = (($22) - ($23))|0;
   $sub14 = (($sub13) - 4194304)|0;
   $shr15 = $sub14 >> 23;
   $yl = $shr15;
   $24 = HEAP32[99748]|0;
   $25 = HEAP32[99857]|0;
   $sub16 = (($24) - ($25))|0;
   $add17 = (($sub16) + 4194304)|0;
   $shr18 = $add17 >> 23;
   $yh = $shr18;
   $26 = $actor$addr;
   HEAP32[99750] = $26;
   $27 = $xl;
   $bx = $27;
   L3: while(1) {
    $28 = $bx;
    $29 = $xh;
    $cmp19 = ($28|0)<=($29|0);
    if (!($cmp19)) {
     break L1;
    }
    $30 = $yl;
    $by = $30;
    while(1) {
     $31 = $by;
     $32 = $yh;
     $cmp21 = ($31|0)<=($32|0);
     $33 = $bx;
     if (!($cmp21)) {
      break;
     }
     $34 = $by;
     $call = (_P_BlockThingsIterator($33,$34,137)|0);
     $tobool = ($call|0)!=(0);
     if (!($tobool)) {
      break L3;
     }
     $58 = $by;
     $inc = (($58) + 1)|0;
     $by = $inc;
    }
    $inc32 = (($33) + 1)|0;
    $bx = $inc32;
   }
   $35 = $actor$addr;
   $target = ((($35)) + 120|0);
   $36 = HEAP32[$target>>2]|0;
   $temp = $36;
   $37 = HEAP32[99749]|0;
   $38 = $actor$addr;
   $target24 = ((($38)) + 120|0);
   HEAP32[$target24>>2] = $37;
   $39 = $actor$addr;
   _A_FaceTarget($39);
   $40 = $temp;
   $41 = $actor$addr;
   $target25 = ((($41)) + 120|0);
   HEAP32[$target25>>2] = $40;
   $42 = $actor$addr;
   (_P_SetMobjState($42,266)|0);
   $43 = HEAP32[99749]|0;
   _S_StartSound($43,31);
   $44 = HEAP32[99749]|0;
   $info27 = ((($44)) + 92|0);
   $45 = HEAP32[$info27>>2]|0;
   $info = $45;
   $46 = HEAP32[99749]|0;
   $47 = $info;
   $raisestate = ((($47)) + 88|0);
   $48 = HEAP32[$raisestate>>2]|0;
   (_P_SetMobjState($46,$48)|0);
   $49 = HEAP32[99749]|0;
   $height = ((($49)) + 68|0);
   $50 = HEAP32[$height>>2]|0;
   $shl = $50 << 2;
   HEAP32[$height>>2] = $shl;
   $51 = $info;
   $flags = ((($51)) + 84|0);
   $52 = HEAP32[$flags>>2]|0;
   $53 = HEAP32[99749]|0;
   $flags29 = ((($53)) + 104|0);
   HEAP32[$flags29>>2] = $52;
   $54 = $info;
   $spawnhealth = ((($54)) + 8|0);
   $55 = HEAP32[$spawnhealth>>2]|0;
   $56 = HEAP32[99749]|0;
   $health = ((($56)) + 108|0);
   HEAP32[$health>>2] = $55;
   $57 = HEAP32[99749]|0;
   $target30 = ((($57)) + 120|0);
   HEAP32[$target30>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $59 = $actor$addr;
 _A_Chase($59);
 STACKTOP = sp;return;
}
function _A_VileStart($actor) {
 $actor = $actor|0;
 var $0 = 0, $actor$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _S_StartSound($0,54);
 STACKTOP = sp;return;
}
function _A_StartFire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $actor$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _S_StartSound($0,92);
 $1 = $actor$addr;
 _A_Fire($1);
 STACKTOP = sp;return;
}
function _A_Fire($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add10 = 0, $an = 0, $angle = 0, $arrayidx = 0, $arrayidx8 = 0, $call = 0, $call2 = 0, $call6 = 0, $call9 = 0, $dest = 0, $shr = 0, $target = 0, $target1 = 0, $tobool = 0;
 var $tobool3 = 0, $tracer = 0, $x = 0, $x7 = 0, $y = 0, $y11 = 0, $z = 0, $z12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $tracer = ((($0)) + 152|0);
 $1 = HEAP32[$tracer>>2]|0;
 $dest = $1;
 $2 = $dest;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $3 = $actor$addr;
 $target1 = ((($3)) + 120|0);
 $4 = HEAP32[$target1>>2]|0;
 $call = (_P_SubstNullMobj($4)|0);
 $target = $call;
 $5 = $target;
 $6 = $dest;
 $call2 = (_P_CheckSight($5,$6)|0);
 $tobool3 = ($call2|0)!=(0);
 if (!($tobool3)) {
  STACKTOP = sp;return;
 }
 $7 = $dest;
 $angle = ((($7)) + 32|0);
 $8 = HEAP32[$angle>>2]|0;
 $shr = $8 >>> 19;
 $an = $shr;
 $9 = $actor$addr;
 _P_UnsetThingPosition($9);
 $10 = $dest;
 $x = ((($10)) + 12|0);
 $11 = HEAP32[$x>>2]|0;
 $12 = $an;
 $arrayidx = ((82992) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $call6 = (_FixedMul(1572864,$13)|0);
 $add = (($11) + ($call6))|0;
 $14 = $actor$addr;
 $x7 = ((($14)) + 12|0);
 HEAP32[$x7>>2] = $add;
 $15 = $dest;
 $y = ((($15)) + 16|0);
 $16 = HEAP32[$y>>2]|0;
 $17 = $an;
 $arrayidx8 = (74800 + ($17<<2)|0);
 $18 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_FixedMul(1572864,$18)|0);
 $add10 = (($16) + ($call9))|0;
 $19 = $actor$addr;
 $y11 = ((($19)) + 16|0);
 HEAP32[$y11>>2] = $add10;
 $20 = $dest;
 $z = ((($20)) + 20|0);
 $21 = HEAP32[$z>>2]|0;
 $22 = $actor$addr;
 $z12 = ((($22)) + 20|0);
 HEAP32[$z12>>2] = $21;
 $23 = $actor$addr;
 _P_SetThingPosition($23);
 STACKTOP = sp;return;
}
function _A_FireCrackle($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $actor$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _S_StartSound($0,91);
 $1 = $actor$addr;
 _A_Fire($1);
 STACKTOP = sp;return;
}
function _A_VileTarget($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $actor$addr = 0, $call = 0, $fog = 0, $target = 0, $target1 = 0, $target2 = 0, $target4 = 0, $target5 = 0, $target6 = 0, $tobool = 0, $tracer = 0, $tracer7 = 0, $x = 0, $x3 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $target1 = ((($3)) + 120|0);
 $4 = HEAP32[$target1>>2]|0;
 $x = ((($4)) + 12|0);
 $5 = HEAP32[$x>>2]|0;
 $6 = $actor$addr;
 $target2 = ((($6)) + 120|0);
 $7 = HEAP32[$target2>>2]|0;
 $x3 = ((($7)) + 12|0);
 $8 = HEAP32[$x3>>2]|0;
 $9 = $actor$addr;
 $target4 = ((($9)) + 120|0);
 $10 = HEAP32[$target4>>2]|0;
 $z = ((($10)) + 20|0);
 $11 = HEAP32[$z>>2]|0;
 $call = (_P_SpawnMobj($5,$8,$11,4)|0);
 $fog = $call;
 $12 = $fog;
 $13 = $actor$addr;
 $tracer = ((($13)) + 152|0);
 HEAP32[$tracer>>2] = $12;
 $14 = $actor$addr;
 $15 = $fog;
 $target5 = ((($15)) + 120|0);
 HEAP32[$target5>>2] = $14;
 $16 = $actor$addr;
 $target6 = ((($16)) + 120|0);
 $17 = HEAP32[$target6>>2]|0;
 $18 = $fog;
 $tracer7 = ((($18)) + 152|0);
 HEAP32[$tracer7>>2] = $17;
 $19 = $fog;
 _A_Fire($19);
 STACKTOP = sp;return;
}
function _A_VileAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $an = 0, $angle = 0, $arrayidx = 0;
 var $arrayidx15 = 0, $call = 0, $call12 = 0, $call16 = 0, $div = 0, $fire = 0, $info = 0, $mass = 0, $momz = 0, $shr = 0, $sub = 0, $sub17 = 0, $target = 0, $target1 = 0, $target11 = 0, $target14 = 0, $target5 = 0, $target6 = 0, $target7 = 0, $tobool = 0;
 var $tobool2 = 0, $tobool8 = 0, $tracer = 0, $x = 0, $x13 = 0, $y = 0, $y18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $4 = $actor$addr;
 $target1 = ((($4)) + 120|0);
 $5 = HEAP32[$target1>>2]|0;
 $call = (_P_CheckSight($3,$5)|0);
 $tobool2 = ($call|0)!=(0);
 if (!($tobool2)) {
  STACKTOP = sp;return;
 }
 $6 = $actor$addr;
 _S_StartSound($6,82);
 $7 = $actor$addr;
 $target5 = ((($7)) + 120|0);
 $8 = HEAP32[$target5>>2]|0;
 $9 = $actor$addr;
 $10 = $actor$addr;
 _P_DamageMobj($8,$9,$10,20);
 $11 = $actor$addr;
 $target6 = ((($11)) + 120|0);
 $12 = HEAP32[$target6>>2]|0;
 $info = ((($12)) + 92|0);
 $13 = HEAP32[$info>>2]|0;
 $mass = ((($13)) + 72|0);
 $14 = HEAP32[$mass>>2]|0;
 $div = (65536000 / ($14|0))&-1;
 $15 = $actor$addr;
 $target7 = ((($15)) + 120|0);
 $16 = HEAP32[$target7>>2]|0;
 $momz = ((($16)) + 80|0);
 HEAP32[$momz>>2] = $div;
 $17 = $actor$addr;
 $angle = ((($17)) + 32|0);
 $18 = HEAP32[$angle>>2]|0;
 $shr = $18 >>> 19;
 $an = $shr;
 $19 = $actor$addr;
 $tracer = ((($19)) + 152|0);
 $20 = HEAP32[$tracer>>2]|0;
 $fire = $20;
 $21 = $fire;
 $tobool8 = ($21|0)!=(0|0);
 if (!($tobool8)) {
  STACKTOP = sp;return;
 }
 $22 = $actor$addr;
 $target11 = ((($22)) + 120|0);
 $23 = HEAP32[$target11>>2]|0;
 $x = ((($23)) + 12|0);
 $24 = HEAP32[$x>>2]|0;
 $25 = $an;
 $arrayidx = ((82992) + ($25<<2)|0);
 $26 = HEAP32[$arrayidx>>2]|0;
 $call12 = (_FixedMul(1572864,$26)|0);
 $sub = (($24) - ($call12))|0;
 $27 = $fire;
 $x13 = ((($27)) + 12|0);
 HEAP32[$x13>>2] = $sub;
 $28 = $actor$addr;
 $target14 = ((($28)) + 120|0);
 $29 = HEAP32[$target14>>2]|0;
 $y = ((($29)) + 16|0);
 $30 = HEAP32[$y>>2]|0;
 $31 = $an;
 $arrayidx15 = (74800 + ($31<<2)|0);
 $32 = HEAP32[$arrayidx15>>2]|0;
 $call16 = (_FixedMul(1572864,$32)|0);
 $sub17 = (($30) - ($call16))|0;
 $33 = $fire;
 $y18 = ((($33)) + 16|0);
 HEAP32[$y18>>2] = $sub17;
 $34 = $fire;
 $35 = $actor$addr;
 _P_RadiusAttack($34,$35,70);
 STACKTOP = sp;return;
}
function _A_FatRaise($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $actor$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_FaceTarget($0);
 $1 = $actor$addr;
 _S_StartSound($1,99);
 STACKTOP = sp;return;
}
function _A_FatAttack1($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add5 = 0, $an = 0, $angle = 0, $angle4 = 0, $angle6 = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call11 = 0, $call3 = 0, $call7 = 0, $info = 0, $info8 = 0;
 var $mo = 0, $momx = 0, $momy = 0, $shr = 0, $speed = 0, $speed9 = 0, $target = 0, $target1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_FaceTarget($0);
 $1 = $actor$addr;
 $angle = ((($1)) + 32|0);
 $2 = HEAP32[$angle>>2]|0;
 $add = (($2) + 134217728)|0;
 HEAP32[$angle>>2] = $add;
 $3 = $actor$addr;
 $target1 = ((($3)) + 120|0);
 $4 = HEAP32[$target1>>2]|0;
 $call = (_P_SubstNullMobj($4)|0);
 $target = $call;
 $5 = $actor$addr;
 $6 = $target;
 (_P_SpawnMissile($5,$6,9)|0);
 $7 = $actor$addr;
 $8 = $target;
 $call3 = (_P_SpawnMissile($7,$8,9)|0);
 $mo = $call3;
 $9 = $mo;
 $angle4 = ((($9)) + 32|0);
 $10 = HEAP32[$angle4>>2]|0;
 $add5 = (($10) + 134217728)|0;
 HEAP32[$angle4>>2] = $add5;
 $11 = $mo;
 $angle6 = ((($11)) + 32|0);
 $12 = HEAP32[$angle6>>2]|0;
 $shr = $12 >>> 19;
 $an = $shr;
 $13 = $mo;
 $info = ((($13)) + 92|0);
 $14 = HEAP32[$info>>2]|0;
 $speed = ((($14)) + 60|0);
 $15 = HEAP32[$speed>>2]|0;
 $16 = $an;
 $arrayidx = ((82992) + ($16<<2)|0);
 $17 = HEAP32[$arrayidx>>2]|0;
 $call7 = (_FixedMul($15,$17)|0);
 $18 = $mo;
 $momx = ((($18)) + 72|0);
 HEAP32[$momx>>2] = $call7;
 $19 = $mo;
 $info8 = ((($19)) + 92|0);
 $20 = HEAP32[$info8>>2]|0;
 $speed9 = ((($20)) + 60|0);
 $21 = HEAP32[$speed9>>2]|0;
 $22 = $an;
 $arrayidx10 = (74800 + ($22<<2)|0);
 $23 = HEAP32[$arrayidx10>>2]|0;
 $call11 = (_FixedMul($21,$23)|0);
 $24 = $mo;
 $momy = ((($24)) + 76|0);
 HEAP32[$momy>>2] = $call11;
 STACKTOP = sp;return;
}
function _A_FatAttack2($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $an = 0, $angle = 0, $angle4 = 0, $angle6 = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call11 = 0, $call3 = 0, $call7 = 0, $info = 0, $info8 = 0, $mo = 0, $momx = 0;
 var $momy = 0, $shr = 0, $speed = 0, $speed9 = 0, $sub = 0, $sub5 = 0, $target = 0, $target1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_FaceTarget($0);
 $1 = $actor$addr;
 $angle = ((($1)) + 32|0);
 $2 = HEAP32[$angle>>2]|0;
 $sub = (($2) - 134217728)|0;
 HEAP32[$angle>>2] = $sub;
 $3 = $actor$addr;
 $target1 = ((($3)) + 120|0);
 $4 = HEAP32[$target1>>2]|0;
 $call = (_P_SubstNullMobj($4)|0);
 $target = $call;
 $5 = $actor$addr;
 $6 = $target;
 (_P_SpawnMissile($5,$6,9)|0);
 $7 = $actor$addr;
 $8 = $target;
 $call3 = (_P_SpawnMissile($7,$8,9)|0);
 $mo = $call3;
 $9 = $mo;
 $angle4 = ((($9)) + 32|0);
 $10 = HEAP32[$angle4>>2]|0;
 $sub5 = (($10) - 268435456)|0;
 HEAP32[$angle4>>2] = $sub5;
 $11 = $mo;
 $angle6 = ((($11)) + 32|0);
 $12 = HEAP32[$angle6>>2]|0;
 $shr = $12 >>> 19;
 $an = $shr;
 $13 = $mo;
 $info = ((($13)) + 92|0);
 $14 = HEAP32[$info>>2]|0;
 $speed = ((($14)) + 60|0);
 $15 = HEAP32[$speed>>2]|0;
 $16 = $an;
 $arrayidx = ((82992) + ($16<<2)|0);
 $17 = HEAP32[$arrayidx>>2]|0;
 $call7 = (_FixedMul($15,$17)|0);
 $18 = $mo;
 $momx = ((($18)) + 72|0);
 HEAP32[$momx>>2] = $call7;
 $19 = $mo;
 $info8 = ((($19)) + 92|0);
 $20 = HEAP32[$info8>>2]|0;
 $speed9 = ((($20)) + 60|0);
 $21 = HEAP32[$speed9>>2]|0;
 $22 = $an;
 $arrayidx10 = (74800 + ($22<<2)|0);
 $23 = HEAP32[$arrayidx10>>2]|0;
 $call11 = (_FixedMul($21,$23)|0);
 $24 = $mo;
 $momy = ((($24)) + 76|0);
 HEAP32[$momy>>2] = $call11;
 STACKTOP = sp;return;
}
function _A_FatAttack3($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0;
 var $add = 0, $an = 0, $angle = 0, $angle10 = 0, $angle11 = 0, $angle3 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx20 = 0, $arrayidx7 = 0, $call = 0, $call16 = 0, $call2 = 0, $call21 = 0, $call4 = 0, $call8 = 0, $call9 = 0, $info = 0, $info13 = 0, $info18 = 0;
 var $info5 = 0, $mo = 0, $momx = 0, $momx17 = 0, $momy = 0, $momy22 = 0, $shr = 0, $shr12 = 0, $speed = 0, $speed14 = 0, $speed19 = 0, $speed6 = 0, $sub = 0, $target = 0, $target1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_FaceTarget($0);
 $1 = $actor$addr;
 $target1 = ((($1)) + 120|0);
 $2 = HEAP32[$target1>>2]|0;
 $call = (_P_SubstNullMobj($2)|0);
 $target = $call;
 $3 = $actor$addr;
 $4 = $target;
 $call2 = (_P_SpawnMissile($3,$4,9)|0);
 $mo = $call2;
 $5 = $mo;
 $angle = ((($5)) + 32|0);
 $6 = HEAP32[$angle>>2]|0;
 $sub = (($6) - 67108864)|0;
 HEAP32[$angle>>2] = $sub;
 $7 = $mo;
 $angle3 = ((($7)) + 32|0);
 $8 = HEAP32[$angle3>>2]|0;
 $shr = $8 >>> 19;
 $an = $shr;
 $9 = $mo;
 $info = ((($9)) + 92|0);
 $10 = HEAP32[$info>>2]|0;
 $speed = ((($10)) + 60|0);
 $11 = HEAP32[$speed>>2]|0;
 $12 = $an;
 $arrayidx = ((82992) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $call4 = (_FixedMul($11,$13)|0);
 $14 = $mo;
 $momx = ((($14)) + 72|0);
 HEAP32[$momx>>2] = $call4;
 $15 = $mo;
 $info5 = ((($15)) + 92|0);
 $16 = HEAP32[$info5>>2]|0;
 $speed6 = ((($16)) + 60|0);
 $17 = HEAP32[$speed6>>2]|0;
 $18 = $an;
 $arrayidx7 = (74800 + ($18<<2)|0);
 $19 = HEAP32[$arrayidx7>>2]|0;
 $call8 = (_FixedMul($17,$19)|0);
 $20 = $mo;
 $momy = ((($20)) + 76|0);
 HEAP32[$momy>>2] = $call8;
 $21 = $actor$addr;
 $22 = $target;
 $call9 = (_P_SpawnMissile($21,$22,9)|0);
 $mo = $call9;
 $23 = $mo;
 $angle10 = ((($23)) + 32|0);
 $24 = HEAP32[$angle10>>2]|0;
 $add = (($24) + 67108864)|0;
 HEAP32[$angle10>>2] = $add;
 $25 = $mo;
 $angle11 = ((($25)) + 32|0);
 $26 = HEAP32[$angle11>>2]|0;
 $shr12 = $26 >>> 19;
 $an = $shr12;
 $27 = $mo;
 $info13 = ((($27)) + 92|0);
 $28 = HEAP32[$info13>>2]|0;
 $speed14 = ((($28)) + 60|0);
 $29 = HEAP32[$speed14>>2]|0;
 $30 = $an;
 $arrayidx15 = ((82992) + ($30<<2)|0);
 $31 = HEAP32[$arrayidx15>>2]|0;
 $call16 = (_FixedMul($29,$31)|0);
 $32 = $mo;
 $momx17 = ((($32)) + 72|0);
 HEAP32[$momx17>>2] = $call16;
 $33 = $mo;
 $info18 = ((($33)) + 92|0);
 $34 = HEAP32[$info18>>2]|0;
 $speed19 = ((($34)) + 60|0);
 $35 = HEAP32[$speed19>>2]|0;
 $36 = $an;
 $arrayidx20 = (74800 + ($36<<2)|0);
 $37 = HEAP32[$arrayidx20>>2]|0;
 $call21 = (_FixedMul($35,$37)|0);
 $38 = $mo;
 $momy22 = ((($38)) + 76|0);
 HEAP32[$momy22>>2] = $call21;
 STACKTOP = sp;return;
}
function _A_SkullAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $an = 0;
 var $angle = 0, $arrayidx = 0, $arrayidx2 = 0, $attacksound = 0, $call = 0, $call3 = 0, $call7 = 0, $cmp = 0, $dest = 0, $dist = 0, $div = 0, $div13 = 0, $flags = 0, $height = 0, $info = 0, $momx = 0, $momy = 0, $momz = 0, $or = 0, $shr = 0;
 var $shr10 = 0, $spec$store$select = 0, $sub = 0, $sub12 = 0, $sub6 = 0, $target = 0, $target1 = 0, $tobool = 0, $x = 0, $x4 = 0, $y = 0, $y5 = 0, $z = 0, $z11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 $target1 = ((($2)) + 120|0);
 $3 = HEAP32[$target1>>2]|0;
 $dest = $3;
 $4 = $actor$addr;
 $flags = ((($4)) + 104|0);
 $5 = HEAP32[$flags>>2]|0;
 $or = $5 | 16777216;
 HEAP32[$flags>>2] = $or;
 $6 = $actor$addr;
 $7 = $actor$addr;
 $info = ((($7)) + 92|0);
 $8 = HEAP32[$info>>2]|0;
 $attacksound = ((($8)) + 24|0);
 $9 = HEAP32[$attacksound>>2]|0;
 _S_StartSound($6,$9);
 $10 = $actor$addr;
 _A_FaceTarget($10);
 $11 = $actor$addr;
 $angle = ((($11)) + 32|0);
 $12 = HEAP32[$angle>>2]|0;
 $shr = $12 >>> 19;
 $an = $shr;
 $13 = $an;
 $arrayidx = ((82992) + ($13<<2)|0);
 $14 = HEAP32[$arrayidx>>2]|0;
 $call = (_FixedMul(1310720,$14)|0);
 $15 = $actor$addr;
 $momx = ((($15)) + 72|0);
 HEAP32[$momx>>2] = $call;
 $16 = $an;
 $arrayidx2 = (74800 + ($16<<2)|0);
 $17 = HEAP32[$arrayidx2>>2]|0;
 $call3 = (_FixedMul(1310720,$17)|0);
 $18 = $actor$addr;
 $momy = ((($18)) + 76|0);
 HEAP32[$momy>>2] = $call3;
 $19 = $dest;
 $x = ((($19)) + 12|0);
 $20 = HEAP32[$x>>2]|0;
 $21 = $actor$addr;
 $x4 = ((($21)) + 12|0);
 $22 = HEAP32[$x4>>2]|0;
 $sub = (($20) - ($22))|0;
 $23 = $dest;
 $y = ((($23)) + 16|0);
 $24 = HEAP32[$y>>2]|0;
 $25 = $actor$addr;
 $y5 = ((($25)) + 16|0);
 $26 = HEAP32[$y5>>2]|0;
 $sub6 = (($24) - ($26))|0;
 $call7 = (_P_AproxDistance($sub,$sub6)|0);
 $dist = $call7;
 $27 = $dist;
 $div = (($27|0) / 1310720)&-1;
 $dist = $div;
 $28 = $dist;
 $cmp = ($28|0)<(1);
 $spec$store$select = $cmp ? 1 : $div;
 $dist = $spec$store$select;
 $29 = $dest;
 $z = ((($29)) + 20|0);
 $30 = HEAP32[$z>>2]|0;
 $31 = $dest;
 $height = ((($31)) + 68|0);
 $32 = HEAP32[$height>>2]|0;
 $shr10 = $32 >> 1;
 $add = (($30) + ($shr10))|0;
 $33 = $actor$addr;
 $z11 = ((($33)) + 20|0);
 $34 = HEAP32[$z11>>2]|0;
 $sub12 = (($add) - ($34))|0;
 $35 = $dist;
 $div13 = (($sub12|0) / ($35|0))&-1;
 $36 = $actor$addr;
 $momz = ((($36)) + 80|0);
 HEAP32[$momz>>2] = $div13;
 STACKTOP = sp;return;
}
function _A_PainShootSkull($actor,$angle) {
 $actor = $actor|0;
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add12 = 0, $add14 = 0, $add6 = 0, $add8 = 0, $an = 0, $angle$addr = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call11 = 0, $call15 = 0, $call18 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp3 = 0;
 var $count = 0, $currentthinker = 0, $div = 0, $function = 0, $inc = 0, $info = 0, $mul = 0, $newmobj = 0, $next = 0, $prestep = 0, $radius = 0, $shr = 0, $target = 0, $target21 = 0, $tobool = 0, $type = 0, $x = 0, $x16 = 0, $x7 = 0, $y = 0;
 var $y17 = 0, $y9 = 0, $z = 0, $z13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $actor$addr = $actor;
 $angle$addr = $angle;
 $count = 0;
 $0 = HEAP32[(399612)>>2]|0;
 $currentthinker = $0;
 while(1) {
  $1 = $currentthinker;
  $cmp = ($1|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $2 = $currentthinker;
  $function = ((($2)) + 8|0);
  $3 = HEAP32[$function>>2]|0;
  $cmp1 = ($3|0)==(136|0);
  if ($cmp1) {
   $4 = $currentthinker;
   $type = ((($4)) + 88|0);
   $5 = HEAP32[$type>>2]|0;
   $cmp2 = ($5|0)==(18);
   if ($cmp2) {
    $6 = $count;
    $inc = (($6) + 1)|0;
    $count = $inc;
   }
  }
  $7 = $currentthinker;
  $next = ((($7)) + 4|0);
  $8 = HEAP32[$next>>2]|0;
  $currentthinker = $8;
 }
 $9 = $count;
 $cmp3 = ($9|0)>(20);
 if ($cmp3) {
  STACKTOP = sp;return;
 }
 $10 = $angle$addr;
 $shr = $10 >>> 19;
 $an = $shr;
 $11 = $actor$addr;
 $info = ((($11)) + 92|0);
 $12 = HEAP32[$info>>2]|0;
 $radius = ((($12)) + 64|0);
 $13 = HEAP32[$radius>>2]|0;
 $14 = HEAP32[(32376)>>2]|0;
 $add = (($13) + ($14))|0;
 $mul = ($add*3)|0;
 $div = (($mul|0) / 2)&-1;
 $add6 = (262144 + ($div))|0;
 $prestep = $add6;
 $15 = $actor$addr;
 $x7 = ((($15)) + 12|0);
 $16 = HEAP32[$x7>>2]|0;
 $17 = $prestep;
 $18 = $an;
 $arrayidx = ((82992) + ($18<<2)|0);
 $19 = HEAP32[$arrayidx>>2]|0;
 $call = (_FixedMul($17,$19)|0);
 $add8 = (($16) + ($call))|0;
 $x = $add8;
 $20 = $actor$addr;
 $y9 = ((($20)) + 16|0);
 $21 = HEAP32[$y9>>2]|0;
 $22 = $prestep;
 $23 = $an;
 $arrayidx10 = (74800 + ($23<<2)|0);
 $24 = HEAP32[$arrayidx10>>2]|0;
 $call11 = (_FixedMul($22,$24)|0);
 $add12 = (($21) + ($call11))|0;
 $y = $add12;
 $25 = $actor$addr;
 $z13 = ((($25)) + 20|0);
 $26 = HEAP32[$z13>>2]|0;
 $add14 = (($26) + 524288)|0;
 $z = $add14;
 $27 = $x;
 $28 = $y;
 $29 = $z;
 $call15 = (_P_SpawnMobj($27,$28,$29,18)|0);
 $newmobj = $call15;
 $30 = $newmobj;
 $31 = $newmobj;
 $x16 = ((($31)) + 12|0);
 $32 = HEAP32[$x16>>2]|0;
 $33 = $newmobj;
 $y17 = ((($33)) + 16|0);
 $34 = HEAP32[$y17>>2]|0;
 $call18 = (_P_TryMove($30,$32,$34)|0);
 $tobool = ($call18|0)!=(0);
 if ($tobool) {
  $38 = $actor$addr;
  $target = ((($38)) + 120|0);
  $39 = HEAP32[$target>>2]|0;
  $40 = $newmobj;
  $target21 = ((($40)) + 120|0);
  HEAP32[$target21>>2] = $39;
  $41 = $newmobj;
  _A_SkullAttack($41);
  STACKTOP = sp;return;
 } else {
  $35 = $newmobj;
  $36 = $actor$addr;
  $37 = $actor$addr;
  _P_DamageMobj($35,$36,$37,10000);
  STACKTOP = sp;return;
 }
}
function _A_PainAttack($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $actor$addr = 0, $angle = 0, $target = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $target = ((($0)) + 120|0);
 $1 = HEAP32[$target>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $actor$addr;
 _A_FaceTarget($2);
 $3 = $actor$addr;
 $4 = $actor$addr;
 $angle = ((($4)) + 32|0);
 $5 = HEAP32[$angle>>2]|0;
 _A_PainShootSkull($3,$5);
 STACKTOP = sp;return;
}
function _A_PainDie($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add2 = 0, $add4 = 0, $angle = 0, $angle1 = 0, $angle3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _A_Fall($0);
 $1 = $actor$addr;
 $2 = $actor$addr;
 $angle = ((($2)) + 32|0);
 $3 = HEAP32[$angle>>2]|0;
 $add = (($3) + 1073741824)|0;
 _A_PainShootSkull($1,$add);
 $4 = $actor$addr;
 $5 = $actor$addr;
 $angle1 = ((($5)) + 32|0);
 $6 = HEAP32[$angle1>>2]|0;
 $add2 = (($6) + -2147483648)|0;
 _A_PainShootSkull($4,$add2);
 $7 = $actor$addr;
 $8 = $actor$addr;
 $angle3 = ((($8)) + 32|0);
 $9 = HEAP32[$angle3>>2]|0;
 $add4 = (($9) + -1073741824)|0;
 _A_PainShootSkull($7,$add4);
 STACKTOP = sp;return;
}
function _A_Scream($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor$addr = 0, $add = 0, $add5 = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp9 = 0;
 var $deathsound = 0, $deathsound7 = 0, $info = 0, $info6 = 0, $rem = 0, $rem4 = 0, $sound = 0, $type = 0, $type8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $info = ((($0)) + 92|0);
 $1 = HEAP32[$info>>2]|0;
 $deathsound = ((($1)) + 56|0);
 $2 = HEAP32[$deathsound>>2]|0;
 switch ($2|0) {
 case 61: case 60: case 59:  {
  $call = (_P_Random()|0);
  $rem = (($call|0) % 3)&-1;
  $add = (59 + ($rem))|0;
  $sound = $add;
  break;
 }
 case 63: case 62:  {
  $call3 = (_P_Random()|0);
  $rem4 = (($call3|0) % 2)&-1;
  $add5 = (62 + ($rem4))|0;
  $sound = $add5;
  break;
 }
 case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $3 = $actor$addr;
  $info6 = ((($3)) + 92|0);
  $4 = HEAP32[$info6>>2]|0;
  $deathsound7 = ((($4)) + 56|0);
  $5 = HEAP32[$deathsound7>>2]|0;
  $sound = $5;
 }
 }
 $6 = $actor$addr;
 $type = ((($6)) + 88|0);
 $7 = HEAP32[$type>>2]|0;
 $cmp = ($7|0)==(19);
 if (!($cmp)) {
  $8 = $actor$addr;
  $type8 = ((($8)) + 88|0);
  $9 = HEAP32[$type8>>2]|0;
  $cmp9 = ($9|0)==(21);
  if (!($cmp9)) {
   $11 = $actor$addr;
   $12 = $sound;
   _S_StartSound($11,$12);
   STACKTOP = sp;return;
  }
 }
 $10 = $sound;
 _S_StartSound(0,$10);
 STACKTOP = sp;return;
}
function _A_XScream($actor) {
 $actor = $actor|0;
 var $0 = 0, $actor$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 _S_StartSound($0,31);
 STACKTOP = sp;return;
}
function _A_Pain($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $actor$addr = 0, $info = 0, $info1 = 0, $painsound = 0, $painsound2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $actor$addr = $actor;
 $0 = $actor$addr;
 $info = ((($0)) + 92|0);
 $1 = HEAP32[$info>>2]|0;
 $painsound = ((($1)) + 36|0);
 $2 = HEAP32[$painsound>>2]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $3 = $actor$addr;
 $4 = $actor$addr;
 $info1 = ((($4)) + 92|0);
 $5 = HEAP32[$info1>>2]|0;
 $painsound2 = ((($5)) + 36|0);
 $6 = HEAP32[$painsound2>>2]|0;
 _S_StartSound($3,$6);
 STACKTOP = sp;return;
}
function _A_Explode($thingy) {
 $thingy = $thingy|0;
 var $0 = 0, $1 = 0, $2 = 0, $target = 0, $thingy$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thingy$addr = $thingy;
 $0 = $thingy$addr;
 $1 = $thingy$addr;
 $target = ((($1)) + 120|0);
 $2 = HEAP32[$target>>2]|0;
 _P_RadiusAttack($0,$2,128);
 STACKTOP = sp;return;
}
function _A_BossDeath($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx15 = 0;
 var $call = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp16 = 0, $cmp19 = 0, $cmp23 = 0, $cmp25 = 0, $cmp28 = 0, $cmp3 = 0, $cmp32 = 0, $cmp35 = 0, $cmp40 = 0, $cmp42 = 0, $cmp45 = 0, $cmp5 = 0, $cmp50 = 0, $function = 0, $health = 0, $health34 = 0;
 var $i = 0, $inc = 0, $junk = 0, $mo$addr = 0, $mo2 = 0, $next = 0, $tag = 0, $tag52 = 0, $tag57 = 0, $tag61 = 0, $tag64 = 0, $th = 0, $tobool = 0, $tobool13 = 0, $type = 0, $type30 = 0, $type31 = 0, $type4 = 0, $type44 = 0, $type49 = 0;
 var $type8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $junk = sp + 8|0;
 $mo$addr = $mo;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $1 = HEAP32[99423]|0;
  $cmp1 = ($1|0)!=(7);
  if ($cmp1) {
   STACKTOP = sp;return;
  }
  $2 = $mo$addr;
  $type = ((($2)) + 88|0);
  $3 = HEAP32[$type>>2]|0;
  $cmp3 = ($3|0)!=(8);
  if ($cmp3) {
   $4 = $mo$addr;
   $type4 = ((($4)) + 88|0);
   $5 = HEAP32[$type4>>2]|0;
   $cmp5 = ($5|0)!=(20);
   if ($cmp5) {
    STACKTOP = sp;return;
   }
  }
 } else {
  $6 = $mo$addr;
  $type8 = ((($6)) + 88|0);
  $7 = HEAP32[$type8>>2]|0;
  $call = (_CheckBossEnd($7)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $cmp12 = ($8|0)<(4);
  if (!($cmp12)) {
   break;
  }
  $9 = $i;
  $arrayidx = (183040 + ($9<<2)|0);
  $10 = HEAP32[$arrayidx>>2]|0;
  $tobool13 = ($10|0)!=(0);
  if ($tobool13) {
   $11 = $i;
   $arrayidx15 = (183056 + (($11*288)|0)|0);
   $health = ((($arrayidx15)) + 40|0);
   $12 = HEAP32[$health>>2]|0;
   $cmp16 = ($12|0)>(0);
   if ($cmp16) {
    break;
   }
  }
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 $14 = $i;
 $cmp19 = ($14|0)==(4);
 if ($cmp19) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[(399612)>>2]|0;
 $th = $15;
 while(1) {
  $16 = $th;
  $cmp23 = ($16|0)!=(399608|0);
  if (!($cmp23)) {
   break;
  }
  $17 = $th;
  $function = ((($17)) + 8|0);
  $18 = HEAP32[$function>>2]|0;
  $cmp25 = ($18|0)!=(136|0);
  if (!($cmp25)) {
   $19 = $th;
   $mo2 = $19;
   $20 = $mo2;
   $21 = $mo$addr;
   $cmp28 = ($20|0)!=($21|0);
   if ($cmp28) {
    $22 = $mo2;
    $type30 = ((($22)) + 88|0);
    $23 = HEAP32[$type30>>2]|0;
    $24 = $mo$addr;
    $type31 = ((($24)) + 88|0);
    $25 = HEAP32[$type31>>2]|0;
    $cmp32 = ($23|0)==($25|0);
    if ($cmp32) {
     $26 = $mo2;
     $health34 = ((($26)) + 108|0);
     $27 = HEAP32[$health34>>2]|0;
     $cmp35 = ($27|0)>(0);
     if ($cmp35) {
      label = 31;
      break;
     }
    }
   }
  }
  $28 = $th;
  $next = ((($28)) + 4|0);
  $29 = HEAP32[$next>>2]|0;
  $th = $29;
 }
 if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
 $30 = HEAP32[32168]|0;
 $cmp40 = ($30|0)==(2);
 L32: do {
  if ($cmp40) {
   $31 = HEAP32[99423]|0;
   $cmp42 = ($31|0)==(7);
   if ($cmp42) {
    $32 = $mo$addr;
    $type44 = ((($32)) + 88|0);
    $33 = HEAP32[$type44>>2]|0;
    $cmp45 = ($33|0)==(8);
    if ($cmp45) {
     $tag = ((($junk)) + 20|0);
     HEAP16[$tag>>1] = 666;
     (_EV_DoFloor($junk,1)|0);
     STACKTOP = sp;return;
    }
    $34 = $mo$addr;
    $type49 = ((($34)) + 88|0);
    $35 = HEAP32[$type49>>2]|0;
    $cmp50 = ($35|0)==(20);
    if ($cmp50) {
     $tag52 = ((($junk)) + 20|0);
     HEAP16[$tag52>>1] = 667;
     (_EV_DoFloor($junk,5)|0);
     STACKTOP = sp;return;
    }
   }
  } else {
   $36 = HEAP32[99424]|0;
   switch ($36|0) {
   case 1:  {
    $tag57 = ((($junk)) + 20|0);
    HEAP16[$tag57>>1] = 666;
    (_EV_DoFloor($junk,1)|0);
    STACKTOP = sp;return;
    break;
   }
   case 4:  {
    break;
   }
   default: {
    break L32;
   }
   }
   $37 = HEAP32[99423]|0;
   switch ($37|0) {
   case 6:  {
    $tag61 = ((($junk)) + 20|0);
    HEAP16[$tag61>>1] = 666;
    (_EV_DoDoor($junk,6)|0);
    STACKTOP = sp;return;
    break;
   }
   case 8:  {
    $tag64 = ((($junk)) + 20|0);
    HEAP16[$tag64>>1] = 666;
    (_EV_DoFloor($junk,1)|0);
    STACKTOP = sp;return;
    break;
   }
   default: {
    break L32;
   }
   }
  }
 } while(0);
 _G_ExitLevel();
 STACKTOP = sp;return;
}
function _CheckBossEnd($motype) {
 $motype = $motype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp12 = 0, $cmp16 = 0, $cmp18 = 0, $cmp22 = 0, $cmp24 = 0, $cmp25 = 0, $cmp27 = 0, $cmp3 = 0, $cmp30 = 0, $cmp4 = 0, $cmp7 = 0, $cmp8 = 0, $conv = 0, $land$ext = 0, $land$ext14 = 0;
 var $land$ext20 = 0, $lor$ext = 0, $motype$addr = 0, $or$cond = 0, $or$cond1 = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $motype$addr = $motype;
 $0 = HEAP32[32169]|0;
 $cmp = ($0>>>0)<(6);
 L1: do {
  if ($cmp) {
   $1 = HEAP32[99423]|0;
   $cmp1 = ($1|0)!=(8);
   if ($cmp1) {
    $retval = 0;
    break;
   }
   $2 = $motype$addr;
   $cmp3 = ($2|0)==(15);
   $3 = HEAP32[99424]|0;
   $cmp4 = ($3|0)!=(1);
   $or$cond = $cmp3 & $cmp4;
   if ($or$cond) {
    $retval = 0;
    break;
   } else {
    $retval = 1;
    break;
   }
  } else {
   $4 = HEAP32[99424]|0;
   switch ($4|0) {
   case 1:  {
    $5 = HEAP32[99423]|0;
    $cmp7 = ($5|0)==(8);
    $6 = $motype$addr;
    $cmp8 = ($6|0)==(15);
    $7 = $cmp7 ? $cmp8 : 0;
    $land$ext = $7&1;
    $retval = $land$ext;
    break L1;
    break;
   }
   case 2:  {
    $8 = HEAP32[99423]|0;
    $cmp10 = ($8|0)==(8);
    $9 = $motype$addr;
    $cmp12 = ($9|0)==(21);
    $10 = $cmp10 ? $cmp12 : 0;
    $land$ext14 = $10&1;
    $retval = $land$ext14;
    break L1;
    break;
   }
   case 3:  {
    $11 = HEAP32[99423]|0;
    $cmp16 = ($11|0)==(8);
    $12 = $motype$addr;
    $cmp18 = ($12|0)==(19);
    $13 = $cmp16 ? $cmp18 : 0;
    $land$ext20 = $13&1;
    $retval = $land$ext20;
    break L1;
    break;
   }
   case 4:  {
    $14 = HEAP32[99423]|0;
    $cmp22 = ($14|0)==(6);
    $15 = $motype$addr;
    $cmp24 = ($15|0)==(21);
    $or$cond1 = $cmp22 & $cmp24;
    if ($or$cond1) {
     $19 = 1;
    } else {
     $16 = HEAP32[99423]|0;
     $cmp25 = ($16|0)==(8);
     $17 = $motype$addr;
     $cmp27 = ($17|0)==(19);
     $18 = $cmp25 ? $cmp27 : 0;
     $19 = $18;
    }
    $lor$ext = $19&1;
    $retval = $lor$ext;
    break L1;
    break;
   }
   default: {
    $20 = HEAP32[99423]|0;
    $cmp30 = ($20|0)==(8);
    $conv = $cmp30&1;
    $retval = $conv;
    break L1;
   }
   }
  }
 } while(0);
 $21 = $retval;
 STACKTOP = sp;return ($21|0);
}
function _A_Hoof($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $mo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 _S_StartSound($0,84);
 $1 = $mo$addr;
 _A_Chase($1);
 STACKTOP = sp;return;
}
function _A_Metal($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $mo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 _S_StartSound($0,85);
 $1 = $mo$addr;
 _A_Chase($1);
 STACKTOP = sp;return;
}
function _A_BabyMetal($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $mo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 _S_StartSound($0,79);
 $1 = $mo$addr;
 _A_Chase($1);
 STACKTOP = sp;return;
}
function _A_OpenShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,5);
 STACKTOP = sp;return;
}
function _A_LoadShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,7);
 STACKTOP = sp;return;
}
function _A_CloseShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,6);
 $2 = $player$addr;
 $3 = $psp$addr;
 _A_ReFire($2,$3);
 STACKTOP = sp;return;
}
function _A_BrainAwake($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $function = 0, $inc = 0, $m = 0;
 var $mo$addr = 0, $next = 0, $thinker = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 HEAP32[99752] = 0;
 HEAP32[99751] = 0;
 $0 = HEAP32[(399612)>>2]|0;
 $thinker = $0;
 $1 = HEAP32[(399612)>>2]|0;
 $thinker = $1;
 while(1) {
  $2 = $thinker;
  $cmp = ($2|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $3 = $thinker;
  $function = ((($3)) + 8|0);
  $4 = HEAP32[$function>>2]|0;
  $cmp1 = ($4|0)!=(136|0);
  if (!($cmp1)) {
   $5 = $thinker;
   $m = $5;
   $6 = $m;
   $type = ((($6)) + 88|0);
   $7 = HEAP32[$type>>2]|0;
   $cmp2 = ($7|0)==(27);
   if ($cmp2) {
    $8 = $m;
    $9 = HEAP32[99752]|0;
    $arrayidx = (187520 + ($9<<2)|0);
    HEAP32[$arrayidx>>2] = $8;
    $10 = HEAP32[99752]|0;
    $inc = (($10) + 1)|0;
    HEAP32[99752] = $inc;
   }
  }
  $11 = $thinker;
  $next = ((($11)) + 4|0);
  $12 = HEAP32[$next>>2]|0;
  $thinker = $12;
 }
 _S_StartSound(0,96);
 STACKTOP = sp;return;
}
function _A_BrainPain($mo) {
 $mo = $mo|0;
 var $mo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 _S_StartSound(0,97);
 STACKTOP = sp;return;
}
function _A_BrainScream($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add16 = 0;
 var $add6 = 0, $and = 0, $call = 0, $call11 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp14 = 0, $mo$addr = 0, $momz = 0, $mul = 0, $mul5 = 0, $mul9 = 0, $sub = 0, $sub12 = 0, $sub4 = 0, $th = 0, $tics = 0, $tics13 = 0, $tics15 = 0;
 var $x = 0, $x1 = 0, $x2 = 0, $y = 0, $y3 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $x1 = ((($0)) + 12|0);
 $1 = HEAP32[$x1>>2]|0;
 $sub = (($1) - 12845056)|0;
 $x = $sub;
 while(1) {
  $2 = $x;
  $3 = $mo$addr;
  $x2 = ((($3)) + 12|0);
  $4 = HEAP32[$x2>>2]|0;
  $add = (($4) + 20971520)|0;
  $cmp = ($2|0)<($add|0);
  if (!($cmp)) {
   break;
  }
  $5 = $mo$addr;
  $y3 = ((($5)) + 16|0);
  $6 = HEAP32[$y3>>2]|0;
  $sub4 = (($6) - 20971520)|0;
  $y = $sub4;
  $call = (_P_Random()|0);
  $mul = $call<<1;
  $mul5 = $mul<<16;
  $add6 = (128 + ($mul5))|0;
  $z = $add6;
  $7 = $x;
  $8 = $y;
  $9 = $z;
  $call7 = (_P_SpawnMobj($7,$8,$9,33)|0);
  $th = $call7;
  $call8 = (_P_Random()|0);
  $mul9 = $call8<<9;
  $10 = $th;
  $momz = ((($10)) + 80|0);
  HEAP32[$momz>>2] = $mul9;
  $11 = $th;
  (_P_SetMobjState($11,799)|0);
  $call11 = (_P_Random()|0);
  $and = $call11 & 7;
  $12 = $th;
  $tics = ((($12)) + 96|0);
  $13 = HEAP32[$tics>>2]|0;
  $sub12 = (($13) - ($and))|0;
  HEAP32[$tics>>2] = $sub12;
  $14 = $th;
  $tics13 = ((($14)) + 96|0);
  $15 = HEAP32[$tics13>>2]|0;
  $cmp14 = ($15|0)<(1);
  if ($cmp14) {
   $16 = $th;
   $tics15 = ((($16)) + 96|0);
   HEAP32[$tics15>>2] = 1;
  }
  $17 = $x;
  $add16 = (($17) + 524288)|0;
  $x = $add16;
 }
 _S_StartSound(0,98);
 STACKTOP = sp;return;
}
function _A_BrainExplode($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add7 = 0, $and = 0, $call = 0, $call12 = 0, $call2 = 0;
 var $call4 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $mo$addr = 0, $momz = 0, $mul = 0, $mul10 = 0, $mul5 = 0, $mul6 = 0, $sub = 0, $sub13 = 0, $th = 0, $tics = 0, $tics14 = 0, $tics15 = 0, $x = 0, $x1 = 0, $y = 0, $y3 = 0;
 var $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $x1 = ((($0)) + 12|0);
 $1 = HEAP32[$x1>>2]|0;
 $call = (_P_Random()|0);
 $call2 = (_P_Random()|0);
 $sub = (($call) - ($call2))|0;
 $mul = $sub<<11;
 $add = (($1) + ($mul))|0;
 $x = $add;
 $2 = $mo$addr;
 $y3 = ((($2)) + 16|0);
 $3 = HEAP32[$y3>>2]|0;
 $y = $3;
 $call4 = (_P_Random()|0);
 $mul5 = $call4<<1;
 $mul6 = $mul5<<16;
 $add7 = (128 + ($mul6))|0;
 $z = $add7;
 $4 = $x;
 $5 = $y;
 $6 = $z;
 $call8 = (_P_SpawnMobj($4,$5,$6,33)|0);
 $th = $call8;
 $call9 = (_P_Random()|0);
 $mul10 = $call9<<9;
 $7 = $th;
 $momz = ((($7)) + 80|0);
 HEAP32[$momz>>2] = $mul10;
 $8 = $th;
 (_P_SetMobjState($8,799)|0);
 $call12 = (_P_Random()|0);
 $and = $call12 & 7;
 $9 = $th;
 $tics = ((($9)) + 96|0);
 $10 = HEAP32[$tics>>2]|0;
 $sub13 = (($10) - ($and))|0;
 HEAP32[$tics>>2] = $sub13;
 $11 = $th;
 $tics14 = ((($11)) + 96|0);
 $12 = HEAP32[$tics14>>2]|0;
 $cmp = ($12|0)<(1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $13 = $th;
 $tics15 = ((($13)) + 96|0);
 HEAP32[$tics15>>2] = 1;
 STACKTOP = sp;return;
}
function _A_BrainDie($mo) {
 $mo = $mo|0;
 var $mo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 _G_ExitLevel();
 STACKTOP = sp;return;
}
function _A_BrainSpit($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $cmp = 0, $div = 0, $div2 = 0, $mo$addr = 0, $momy = 0, $newmobj = 0, $or$cond = 0, $reactiontime = 0, $rem = 0, $state = 0, $sub = 0, $targ = 0, $target = 0, $tics = 0, $tobool = 0, $xor = 0;
 var $y = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = HEAP32[99753]|0;
 $xor = $0 ^ 1;
 HEAP32[99753] = $xor;
 $1 = HEAP32[99425]|0;
 $cmp = ($1|0)>(1);
 $2 = HEAP32[99753]|0;
 $tobool = ($2|0)!=(0);
 $or$cond = $cmp | $tobool;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99751]|0;
 $arrayidx = (187520 + ($3<<2)|0);
 $4 = HEAP32[$arrayidx>>2]|0;
 $targ = $4;
 $5 = HEAP32[99751]|0;
 $add = (($5) + 1)|0;
 $6 = HEAP32[99752]|0;
 $rem = (($add|0) % ($6|0))&-1;
 HEAP32[99751] = $rem;
 $7 = $mo$addr;
 $8 = $targ;
 $call = (_P_SpawnMissile($7,$8,28)|0);
 $newmobj = $call;
 $9 = $targ;
 $10 = $newmobj;
 $target = ((($10)) + 120|0);
 HEAP32[$target>>2] = $9;
 $11 = $targ;
 $y = ((($11)) + 16|0);
 $12 = HEAP32[$y>>2]|0;
 $13 = $mo$addr;
 $y1 = ((($13)) + 16|0);
 $14 = HEAP32[$y1>>2]|0;
 $sub = (($12) - ($14))|0;
 $15 = $newmobj;
 $momy = ((($15)) + 76|0);
 $16 = HEAP32[$momy>>2]|0;
 $div = (($sub|0) / ($16|0))&-1;
 $17 = $newmobj;
 $state = ((($17)) + 100|0);
 $18 = HEAP32[$state>>2]|0;
 $tics = ((($18)) + 8|0);
 $19 = HEAP32[$tics>>2]|0;
 $div2 = (($div|0) / ($19|0))&-1;
 $20 = $newmobj;
 $reactiontime = ((($20)) + 124|0);
 HEAP32[$reactiontime>>2] = $div2;
 _S_StartSound(0,94);
 STACKTOP = sp;return;
}
function _A_SpawnSound($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $mo$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 _S_StartSound($0,95);
 $1 = $mo$addr;
 _A_SpawnFly($1);
 STACKTOP = sp;return;
}
function _A_SpawnFly($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
 var $call1 = 0, $call2 = 0, $call44 = 0, $call45 = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp16 = 0, $cmp19 = 0, $cmp22 = 0, $cmp25 = 0, $cmp28 = 0, $cmp4 = 0, $cmp7 = 0, $dec = 0, $fog = 0, $info = 0, $mo$addr = 0, $newmobj = 0, $r = 0;
 var $reactiontime = 0, $seestate = 0, $targ = 0, $target = 0, $tobool = 0, $tobool46 = 0, $type = 0, $x = 0, $x41 = 0, $x50 = 0, $y = 0, $y42 = 0, $y51 = 0, $z = 0, $z43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $reactiontime = ((($0)) + 124|0);
 $1 = HEAP32[$reactiontime>>2]|0;
 $dec = (($1) + -1)|0;
 HEAP32[$reactiontime>>2] = $dec;
 $tobool = ($dec|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $2 = $mo$addr;
 $target = ((($2)) + 120|0);
 $3 = HEAP32[$target>>2]|0;
 $call = (_P_SubstNullMobj($3)|0);
 $targ = $call;
 $4 = $targ;
 $x = ((($4)) + 12|0);
 $5 = HEAP32[$x>>2]|0;
 $6 = $targ;
 $y = ((($6)) + 16|0);
 $7 = HEAP32[$y>>2]|0;
 $8 = $targ;
 $z = ((($8)) + 20|0);
 $9 = HEAP32[$z>>2]|0;
 $call1 = (_P_SpawnMobj($5,$7,$9,29)|0);
 $fog = $call1;
 $10 = $fog;
 _S_StartSound($10,35);
 $call2 = (_P_Random()|0);
 $r = $call2;
 $11 = $r;
 $cmp = ($11|0)<(50);
 do {
  if ($cmp) {
   $type = 11;
  } else {
   $12 = $r;
   $cmp4 = ($12|0)<(90);
   if ($cmp4) {
    $type = 12;
    break;
   }
   $13 = $r;
   $cmp7 = ($13|0)<(120);
   if ($cmp7) {
    $type = 13;
    break;
   }
   $14 = $r;
   $cmp10 = ($14|0)<(130);
   if ($cmp10) {
    $type = 22;
    break;
   }
   $15 = $r;
   $cmp13 = ($15|0)<(160);
   if ($cmp13) {
    $type = 14;
    break;
   }
   $16 = $r;
   $cmp16 = ($16|0)<(162);
   if ($cmp16) {
    $type = 3;
    break;
   }
   $17 = $r;
   $cmp19 = ($17|0)<(172);
   if ($cmp19) {
    $type = 5;
    break;
   }
   $18 = $r;
   $cmp22 = ($18|0)<(192);
   if ($cmp22) {
    $type = 20;
    break;
   }
   $19 = $r;
   $cmp25 = ($19|0)<(222);
   if ($cmp25) {
    $type = 8;
    break;
   }
   $20 = $r;
   $cmp28 = ($20|0)<(246);
   if ($cmp28) {
    $type = 17;
    break;
   } else {
    $type = 15;
    break;
   }
  }
 } while(0);
 $21 = $targ;
 $x41 = ((($21)) + 12|0);
 $22 = HEAP32[$x41>>2]|0;
 $23 = $targ;
 $y42 = ((($23)) + 16|0);
 $24 = HEAP32[$y42>>2]|0;
 $25 = $targ;
 $z43 = ((($25)) + 20|0);
 $26 = HEAP32[$z43>>2]|0;
 $27 = $type;
 $call44 = (_P_SpawnMobj($22,$24,$26,$27)|0);
 $newmobj = $call44;
 $28 = $newmobj;
 $call45 = (_P_LookForPlayers($28,1)|0);
 $tobool46 = ($call45|0)!=(0);
 if ($tobool46) {
  $29 = $newmobj;
  $30 = $newmobj;
  $info = ((($30)) + 92|0);
  $31 = HEAP32[$info>>2]|0;
  $seestate = ((($31)) + 12|0);
  $32 = HEAP32[$seestate>>2]|0;
  (_P_SetMobjState($29,$32)|0);
 }
 $33 = $newmobj;
 $34 = $newmobj;
 $x50 = ((($34)) + 12|0);
 $35 = HEAP32[$x50>>2]|0;
 $36 = $newmobj;
 $y51 = ((($36)) + 16|0);
 $37 = HEAP32[$y51>>2]|0;
 (_P_TeleportMove($33,$35,$37)|0);
 $38 = $mo$addr;
 _P_RemoveMobj($38);
 STACKTOP = sp;return;
}
function _A_PlayerScream($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $health = 0, $mo$addr = 0, $sound = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $sound = 57;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  $1 = $mo$addr;
  $health = ((($1)) + 108|0);
  $2 = HEAP32[$health>>2]|0;
  $cmp1 = ($2|0)<(-50);
  if ($cmp1) {
   $sound = 58;
  }
 }
 $3 = $mo$addr;
 $4 = $sound;
 _S_StartSound($3,$4);
 STACKTOP = sp;return;
}
function _T_MovePlane($sector,$speed,$dest,$crush,$floorOrCeiling,$direction) {
 $sector = $sector|0;
 $speed = $speed|0;
 $dest = $dest|0;
 $crush = $crush|0;
 $floorOrCeiling = $floorOrCeiling|0;
 $direction = $direction|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $add = 0, $add33 = 0, $add73 = 0, $add87 = 0, $call = 0, $call11 = 0, $call24 = 0, $call34 = 0, $call51 = 0, $call61 = 0, $call78 = 0, $call88 = 0, $ceilingheight = 0, $ceilingheight49 = 0, $ceilingheight50 = 0, $ceilingheight54 = 0, $ceilingheight59 = 0, $ceilingheight67 = 0, $ceilingheight72 = 0;
 var $ceilingheight76 = 0, $ceilingheight77 = 0, $ceilingheight81 = 0, $ceilingheight86 = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp25 = 0, $cmp35 = 0, $cmp37 = 0, $cmp4 = 0, $cmp47 = 0, $cmp52 = 0, $cmp62 = 0, $cmp64 = 0, $cmp74 = 0, $cmp79 = 0, $crush$addr = 0, $dest$addr = 0, $direction$addr = 0;
 var $flag = 0, $floorOrCeiling$addr = 0, $lastpos = 0, $retval = 0, $sector$addr = 0, $speed$addr = 0, $sub = 0, $sub10 = 0, $sub46 = 0, $sub60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $sector$addr = $sector;
 $speed$addr = $speed;
 $dest$addr = $dest;
 $crush$addr = $crush;
 $floorOrCeiling$addr = $floorOrCeiling;
 $direction$addr = $direction;
 $0 = $floorOrCeiling$addr;
 L1: do {
  switch ($0|0) {
  case 0:  {
   $1 = $direction$addr;
   switch ($1|0) {
   case -1:  {
    $2 = $sector$addr;
    $3 = HEAP32[$2>>2]|0;
    $4 = $speed$addr;
    $sub = (($3) - ($4))|0;
    $5 = $dest$addr;
    $cmp = ($sub|0)<($5|0);
    $6 = $sector$addr;
    $7 = HEAP32[$6>>2]|0;
    $lastpos = $7;
    if (!($cmp)) {
     $17 = $speed$addr;
     $18 = $sector$addr;
     $19 = HEAP32[$18>>2]|0;
     $sub10 = (($19) - ($17))|0;
     HEAP32[$18>>2] = $sub10;
     $20 = $sector$addr;
     $21 = $crush$addr;
     $call11 = (_P_ChangeSector($20,$21)|0);
     $flag = $call11;
     $22 = $flag;
     $cmp12 = ($22|0)==(1);
     if (!($cmp12)) {
      break L1;
     }
     $23 = $lastpos;
     $24 = $sector$addr;
     HEAP32[$24>>2] = $23;
     $25 = $sector$addr;
     $26 = $crush$addr;
     (_P_ChangeSector($25,$26)|0);
     $retval = 1;
     $100 = $retval;
     STACKTOP = sp;return ($100|0);
    }
    $8 = $dest$addr;
    $9 = $sector$addr;
    HEAP32[$9>>2] = $8;
    $10 = $sector$addr;
    $11 = $crush$addr;
    $call = (_P_ChangeSector($10,$11)|0);
    $flag = $call;
    $12 = $flag;
    $cmp4 = ($12|0)==(1);
    if ($cmp4) {
     $13 = $lastpos;
     $14 = $sector$addr;
     HEAP32[$14>>2] = $13;
     $15 = $sector$addr;
     $16 = $crush$addr;
     (_P_ChangeSector($15,$16)|0);
    }
    $retval = 2;
    $100 = $retval;
    STACKTOP = sp;return ($100|0);
    break;
   }
   case 1:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $27 = $sector$addr;
   $28 = HEAP32[$27>>2]|0;
   $29 = $speed$addr;
   $add = (($28) + ($29))|0;
   $30 = $dest$addr;
   $cmp20 = ($add|0)>($30|0);
   $31 = $sector$addr;
   $32 = HEAP32[$31>>2]|0;
   $lastpos = $32;
   if ($cmp20) {
    $33 = $dest$addr;
    $34 = $sector$addr;
    HEAP32[$34>>2] = $33;
    $35 = $sector$addr;
    $36 = $crush$addr;
    $call24 = (_P_ChangeSector($35,$36)|0);
    $flag = $call24;
    $37 = $flag;
    $cmp25 = ($37|0)==(1);
    if ($cmp25) {
     $38 = $lastpos;
     $39 = $sector$addr;
     HEAP32[$39>>2] = $38;
     $40 = $sector$addr;
     $41 = $crush$addr;
     (_P_ChangeSector($40,$41)|0);
    }
    $retval = 2;
    $100 = $retval;
    STACKTOP = sp;return ($100|0);
   }
   $42 = $speed$addr;
   $43 = $sector$addr;
   $44 = HEAP32[$43>>2]|0;
   $add33 = (($44) + ($42))|0;
   HEAP32[$43>>2] = $add33;
   $45 = $sector$addr;
   $46 = $crush$addr;
   $call34 = (_P_ChangeSector($45,$46)|0);
   $flag = $call34;
   $47 = $flag;
   $cmp35 = ($47|0)==(1);
   if ($cmp35) {
    $48 = $crush$addr;
    $cmp37 = ($48|0)==(1);
    if ($cmp37) {
     $retval = 1;
     $100 = $retval;
     STACKTOP = sp;return ($100|0);
    } else {
     $49 = $lastpos;
     $50 = $sector$addr;
     HEAP32[$50>>2] = $49;
     $51 = $sector$addr;
     $52 = $crush$addr;
     (_P_ChangeSector($51,$52)|0);
     $retval = 1;
     $100 = $retval;
     STACKTOP = sp;return ($100|0);
    }
   }
   break;
  }
  case 1:  {
   $53 = $direction$addr;
   switch ($53|0) {
   case -1:  {
    break;
   }
   case 1:  {
    $80 = $sector$addr;
    $ceilingheight72 = ((($80)) + 4|0);
    $81 = HEAP32[$ceilingheight72>>2]|0;
    $82 = $speed$addr;
    $add73 = (($81) + ($82))|0;
    $83 = $dest$addr;
    $cmp74 = ($add73|0)>($83|0);
    $84 = $sector$addr;
    $ceilingheight76 = ((($84)) + 4|0);
    $85 = HEAP32[$ceilingheight76>>2]|0;
    $lastpos = $85;
    if (!($cmp74)) {
     $95 = $speed$addr;
     $96 = $sector$addr;
     $ceilingheight86 = ((($96)) + 4|0);
     $97 = HEAP32[$ceilingheight86>>2]|0;
     $add87 = (($97) + ($95))|0;
     HEAP32[$ceilingheight86>>2] = $add87;
     $98 = $sector$addr;
     $99 = $crush$addr;
     $call88 = (_P_ChangeSector($98,$99)|0);
     $flag = $call88;
     break L1;
    }
    $86 = $dest$addr;
    $87 = $sector$addr;
    $ceilingheight77 = ((($87)) + 4|0);
    HEAP32[$ceilingheight77>>2] = $86;
    $88 = $sector$addr;
    $89 = $crush$addr;
    $call78 = (_P_ChangeSector($88,$89)|0);
    $flag = $call78;
    $90 = $flag;
    $cmp79 = ($90|0)==(1);
    if ($cmp79) {
     $91 = $lastpos;
     $92 = $sector$addr;
     $ceilingheight81 = ((($92)) + 4|0);
     HEAP32[$ceilingheight81>>2] = $91;
     $93 = $sector$addr;
     $94 = $crush$addr;
     (_P_ChangeSector($93,$94)|0);
    }
    $retval = 2;
    $100 = $retval;
    STACKTOP = sp;return ($100|0);
    break;
   }
   default: {
    break L1;
   }
   }
   $54 = $sector$addr;
   $ceilingheight = ((($54)) + 4|0);
   $55 = HEAP32[$ceilingheight>>2]|0;
   $56 = $speed$addr;
   $sub46 = (($55) - ($56))|0;
   $57 = $dest$addr;
   $cmp47 = ($sub46|0)<($57|0);
   $58 = $sector$addr;
   $ceilingheight49 = ((($58)) + 4|0);
   $59 = HEAP32[$ceilingheight49>>2]|0;
   $lastpos = $59;
   if ($cmp47) {
    $60 = $dest$addr;
    $61 = $sector$addr;
    $ceilingheight50 = ((($61)) + 4|0);
    HEAP32[$ceilingheight50>>2] = $60;
    $62 = $sector$addr;
    $63 = $crush$addr;
    $call51 = (_P_ChangeSector($62,$63)|0);
    $flag = $call51;
    $64 = $flag;
    $cmp52 = ($64|0)==(1);
    if ($cmp52) {
     $65 = $lastpos;
     $66 = $sector$addr;
     $ceilingheight54 = ((($66)) + 4|0);
     HEAP32[$ceilingheight54>>2] = $65;
     $67 = $sector$addr;
     $68 = $crush$addr;
     (_P_ChangeSector($67,$68)|0);
    }
    $retval = 2;
    $100 = $retval;
    STACKTOP = sp;return ($100|0);
   }
   $69 = $speed$addr;
   $70 = $sector$addr;
   $ceilingheight59 = ((($70)) + 4|0);
   $71 = HEAP32[$ceilingheight59>>2]|0;
   $sub60 = (($71) - ($69))|0;
   HEAP32[$ceilingheight59>>2] = $sub60;
   $72 = $sector$addr;
   $73 = $crush$addr;
   $call61 = (_P_ChangeSector($72,$73)|0);
   $flag = $call61;
   $74 = $flag;
   $cmp62 = ($74|0)==(1);
   if ($cmp62) {
    $75 = $crush$addr;
    $cmp64 = ($75|0)==(1);
    if ($cmp64) {
     $retval = 1;
     $100 = $retval;
     STACKTOP = sp;return ($100|0);
    } else {
     $76 = $lastpos;
     $77 = $sector$addr;
     $ceilingheight67 = ((($77)) + 4|0);
     HEAP32[$ceilingheight67>>2] = $76;
     $78 = $sector$addr;
     $79 = $crush$addr;
     (_P_ChangeSector($78,$79)|0);
     $retval = 1;
     $100 = $retval;
     STACKTOP = sp;return ($100|0);
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $retval = 0;
 $100 = $retval;
 STACKTOP = sp;return ($100|0);
}
function _T_MoveFloor($floor) {
 $floor = $floor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cond = 0, $cond1 = 0, $conv = 0, $conv16 = 0, $crush = 0, $direction = 0, $direction4 = 0, $direction9 = 0, $floor$addr = 0, $floordestheight = 0, $floorpic = 0, $floorpic21 = 0, $newspecial = 0;
 var $newspecial15 = 0, $res = 0, $sector = 0, $sector1 = 0, $sector17 = 0, $sector20 = 0, $sector26 = 0, $sector3 = 0, $sector7 = 0, $sector8 = 0, $soundorg = 0, $soundorg27 = 0, $special = 0, $special18 = 0, $specialdata = 0, $speed = 0, $texture = 0, $texture19 = 0, $tobool = 0, $type = 0;
 var $type13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $floor$addr = $floor;
 $0 = $floor$addr;
 $sector = ((($0)) + 20|0);
 $1 = HEAP32[$sector>>2]|0;
 $2 = $floor$addr;
 $speed = ((($2)) + 40|0);
 $3 = HEAP32[$speed>>2]|0;
 $4 = $floor$addr;
 $floordestheight = ((($4)) + 36|0);
 $5 = HEAP32[$floordestheight>>2]|0;
 $6 = $floor$addr;
 $crush = ((($6)) + 16|0);
 $7 = HEAP32[$crush>>2]|0;
 $8 = $floor$addr;
 $direction = ((($8)) + 24|0);
 $9 = HEAP32[$direction>>2]|0;
 $call = (_T_MovePlane($1,$3,$5,$7,0,$9)|0);
 $res = $call;
 $10 = HEAP32[99905]|0;
 $and = $10 & 7;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $11 = $floor$addr;
  $sector1 = ((($11)) + 20|0);
  $12 = HEAP32[$sector1>>2]|0;
  $soundorg = ((($12)) + 44|0);
  _S_StartSound($soundorg,22);
 }
 $13 = $res;
 $cmp = ($13|0)==(2);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $14 = $floor$addr;
 $sector3 = ((($14)) + 20|0);
 $15 = HEAP32[$sector3>>2]|0;
 $specialdata = ((($15)) + 76|0);
 HEAP32[$specialdata>>2] = 0;
 $16 = $floor$addr;
 $direction4 = ((($16)) + 24|0);
 $17 = HEAP32[$direction4>>2]|0;
 $cmp5 = ($17|0)==(1);
 $18 = $floor$addr;
 if ($cmp5) {
  $type = ((($18)) + 12|0);
  $19 = HEAP32[$type>>2]|0;
  $cond1 = ($19|0)==(11);
  if ($cond1) {
   $20 = $floor$addr;
   $newspecial = ((($20)) + 28|0);
   $21 = HEAP32[$newspecial>>2]|0;
   $conv = $21&65535;
   $22 = $floor$addr;
   $sector7 = ((($22)) + 20|0);
   $23 = HEAP32[$sector7>>2]|0;
   $special = ((($23)) + 14|0);
   HEAP16[$special>>1] = $conv;
   $24 = $floor$addr;
   $texture = ((($24)) + 32|0);
   $25 = HEAP16[$texture>>1]|0;
   $26 = $floor$addr;
   $sector8 = ((($26)) + 20|0);
   $27 = HEAP32[$sector8>>2]|0;
   $floorpic = ((($27)) + 8|0);
   HEAP16[$floorpic>>1] = $25;
  }
 } else {
  $direction9 = ((($18)) + 24|0);
  $28 = HEAP32[$direction9>>2]|0;
  $cmp10 = ($28|0)==(-1);
  if ($cmp10) {
   $29 = $floor$addr;
   $type13 = ((($29)) + 12|0);
   $30 = HEAP32[$type13>>2]|0;
   $cond = ($30|0)==(6);
   if ($cond) {
    $31 = $floor$addr;
    $newspecial15 = ((($31)) + 28|0);
    $32 = HEAP32[$newspecial15>>2]|0;
    $conv16 = $32&65535;
    $33 = $floor$addr;
    $sector17 = ((($33)) + 20|0);
    $34 = HEAP32[$sector17>>2]|0;
    $special18 = ((($34)) + 14|0);
    HEAP16[$special18>>1] = $conv16;
    $35 = $floor$addr;
    $texture19 = ((($35)) + 32|0);
    $36 = HEAP16[$texture19>>1]|0;
    $37 = $floor$addr;
    $sector20 = ((($37)) + 20|0);
    $38 = HEAP32[$sector20>>2]|0;
    $floorpic21 = ((($38)) + 8|0);
    HEAP16[$floorpic21>>1] = $36;
   }
  }
 }
 $39 = $floor$addr;
 _P_RemoveThinker($39);
 $40 = $floor$addr;
 $sector26 = ((($40)) + 20|0);
 $41 = HEAP32[$sector26>>2]|0;
 $soundorg27 = ((($41)) + 44|0);
 _S_StartSound($soundorg27,19);
 STACKTOP = sp;return;
}
function _EV_DoFloor($line,$floortype) {
 $line = $line|0;
 $floortype = $floortype|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add123 = 0, $add58 = 0, $add66 = 0, $add74 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx111 = 0, $arrayidx117 = 0, $arrayidx94 = 0, $bottomtexture = 0, $bottomtexture104 = 0, $bottomtexture109 = 0;
 var $bottomtexture115 = 0, $bottomtexture93 = 0, $bottomtexture98 = 0, $call = 0, $call1 = 0, $call103 = 0, $call129 = 0, $call137 = 0, $call140 = 0, $call145 = 0, $call15 = 0, $call156 = 0, $call28 = 0, $call4 = 0, $call43 = 0, $call50 = 0, $call85 = 0, $call88 = 0, $call9 = 0, $ceilingheight = 0;
 var $ceilingheight33 = 0, $cmp = 0, $cmp106 = 0, $cmp112 = 0, $cmp134 = 0, $cmp142 = 0, $cmp148 = 0, $cmp159 = 0, $cmp18 = 0, $cmp31 = 0, $cmp36 = 0, $cmp83 = 0, $cmp90 = 0, $cmp95 = 0, $conv = 0, $conv105 = 0, $conv154 = 0, $conv165 = 0, $conv89 = 0, $crush = 0;
 var $crush23 = 0, $direction = 0, $direction12 = 0, $direction126 = 0, $direction25 = 0, $direction39 = 0, $direction46 = 0, $direction53 = 0, $direction6 = 0, $direction61 = 0, $direction69 = 0, $direction80 = 0, $floor = 0, $floordestheight = 0, $floordestheight10 = 0, $floordestheight124 = 0, $floordestheight130 = 0, $floordestheight147 = 0, $floordestheight158 = 0, $floordestheight16 = 0;
 var $floordestheight17 = 0, $floordestheight20 = 0, $floordestheight29 = 0, $floordestheight30 = 0, $floordestheight34 = 0, $floordestheight37 = 0, $floordestheight44 = 0, $floordestheight51 = 0, $floordestheight59 = 0, $floordestheight67 = 0, $floordestheight75 = 0, $floorpic = 0, $floorpic131 = 0, $floorpic151 = 0, $floorpic162 = 0, $floorpic76 = 0, $floortype$addr = 0, $frontsector = 0, $frontsector77 = 0, $function = 0;
 var $i = 0, $idxprom = 0, $idxprom110 = 0, $idxprom116 = 0, $idxprom99 = 0, $inc = 0, $inc171 = 0, $line$addr = 0, $linecount = 0, $linecount133 = 0, $minsize = 0, $mul = 0, $newspecial = 0, $newspecial166 = 0, $rtn = 0, $sec = 0, $secnum = 0, $sector = 0, $sector121 = 0, $sector127 = 0;
 var $sector13 = 0, $sector141 = 0, $sector26 = 0, $sector40 = 0, $sector47 = 0, $sector54 = 0, $sector56 = 0, $sector62 = 0, $sector64 = 0, $sector7 = 0, $sector70 = 0, $sector72 = 0, $sector81 = 0, $side = 0, $special = 0, $special153 = 0, $special164 = 0, $special78 = 0, $specialdata = 0, $specialdata2 = 0;
 var $speed = 0, $speed128 = 0, $speed14 = 0, $speed27 = 0, $speed41 = 0, $speed48 = 0, $speed55 = 0, $speed63 = 0, $speed71 = 0, $speed8 = 0, $speed82 = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $texture = 0, $texture152 = 0, $texture163 = 0, $tobool = 0;
 var $tobool138 = 0, $tobool86 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $line$addr = $line;
 $floortype$addr = $floortype;
 $secnum = -1;
 $rtn = 0;
 while(1) {
  $0 = $line$addr;
  $1 = $secnum;
  $call = (_P_FindSectorFromLineTag($0,$1)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99850]|0;
  $3 = $secnum;
  $arrayidx = (($2) + (($3*88)|0)|0);
  $sec = $arrayidx;
  $4 = $sec;
  $specialdata = ((($4)) + 76|0);
  $5 = HEAP32[$specialdata>>2]|0;
  $tobool = ($5|0)!=(0|0);
  if ($tobool) {
   continue;
  }
  $rtn = 1;
  $call1 = (_Z_Malloc(44,6,0)|0);
  $floor = $call1;
  $6 = $floor;
  _P_AddThinker($6);
  $7 = $floor;
  $8 = $sec;
  $specialdata2 = ((($8)) + 76|0);
  HEAP32[$specialdata2>>2] = $7;
  $9 = $floor;
  $function = ((($9)) + 8|0);
  HEAP32[$function>>2] = 138;
  $10 = $floortype$addr;
  $11 = $floor;
  $type = ((($11)) + 12|0);
  HEAP32[$type>>2] = $10;
  $12 = $floor;
  $crush = ((($12)) + 16|0);
  HEAP32[$crush>>2] = 0;
  $13 = $floortype$addr;
  L7: do {
   switch ($13|0) {
   case 0:  {
    $14 = $floor;
    $direction = ((($14)) + 24|0);
    HEAP32[$direction>>2] = -1;
    $15 = $sec;
    $16 = $floor;
    $sector = ((($16)) + 20|0);
    HEAP32[$sector>>2] = $15;
    $17 = $floor;
    $speed = ((($17)) + 40|0);
    HEAP32[$speed>>2] = 65536;
    $18 = $sec;
    $call4 = (_P_FindHighestFloorSurrounding($18)|0);
    $19 = $floor;
    $floordestheight = ((($19)) + 36|0);
    HEAP32[$floordestheight>>2] = $call4;
    break;
   }
   case 1:  {
    $20 = $floor;
    $direction6 = ((($20)) + 24|0);
    HEAP32[$direction6>>2] = -1;
    $21 = $sec;
    $22 = $floor;
    $sector7 = ((($22)) + 20|0);
    HEAP32[$sector7>>2] = $21;
    $23 = $floor;
    $speed8 = ((($23)) + 40|0);
    HEAP32[$speed8>>2] = 65536;
    $24 = $sec;
    $call9 = (_P_FindLowestFloorSurrounding($24)|0);
    $25 = $floor;
    $floordestheight10 = ((($25)) + 36|0);
    HEAP32[$floordestheight10>>2] = $call9;
    break;
   }
   case 2:  {
    $26 = $floor;
    $direction12 = ((($26)) + 24|0);
    HEAP32[$direction12>>2] = -1;
    $27 = $sec;
    $28 = $floor;
    $sector13 = ((($28)) + 20|0);
    HEAP32[$sector13>>2] = $27;
    $29 = $floor;
    $speed14 = ((($29)) + 40|0);
    HEAP32[$speed14>>2] = 262144;
    $30 = $sec;
    $call15 = (_P_FindHighestFloorSurrounding($30)|0);
    $31 = $floor;
    $floordestheight16 = ((($31)) + 36|0);
    HEAP32[$floordestheight16>>2] = $call15;
    $32 = $floor;
    $floordestheight17 = ((($32)) + 36|0);
    $33 = HEAP32[$floordestheight17>>2]|0;
    $34 = $sec;
    $35 = HEAP32[$34>>2]|0;
    $cmp18 = ($33|0)!=($35|0);
    if ($cmp18) {
     $36 = $floor;
     $floordestheight20 = ((($36)) + 36|0);
     $37 = HEAP32[$floordestheight20>>2]|0;
     $add = (($37) + 524288)|0;
     HEAP32[$floordestheight20>>2] = $add;
    }
    break;
   }
   case 9:  {
    $38 = $floor;
    $crush23 = ((($38)) + 16|0);
    HEAP32[$crush23>>2] = 1;
    label = 11;
    break;
   }
   case 3:  {
    label = 11;
    break;
   }
   case 10:  {
    $55 = $floor;
    $direction39 = ((($55)) + 24|0);
    HEAP32[$direction39>>2] = 1;
    $56 = $sec;
    $57 = $floor;
    $sector40 = ((($57)) + 20|0);
    HEAP32[$sector40>>2] = $56;
    $58 = $floor;
    $speed41 = ((($58)) + 40|0);
    HEAP32[$speed41>>2] = 262144;
    $59 = $sec;
    $60 = $sec;
    $61 = HEAP32[$60>>2]|0;
    $call43 = (_P_FindNextHighestFloor($59,$61)|0);
    $62 = $floor;
    $floordestheight44 = ((($62)) + 36|0);
    HEAP32[$floordestheight44>>2] = $call43;
    break;
   }
   case 4:  {
    $63 = $floor;
    $direction46 = ((($63)) + 24|0);
    HEAP32[$direction46>>2] = 1;
    $64 = $sec;
    $65 = $floor;
    $sector47 = ((($65)) + 20|0);
    HEAP32[$sector47>>2] = $64;
    $66 = $floor;
    $speed48 = ((($66)) + 40|0);
    HEAP32[$speed48>>2] = 65536;
    $67 = $sec;
    $68 = $sec;
    $69 = HEAP32[$68>>2]|0;
    $call50 = (_P_FindNextHighestFloor($67,$69)|0);
    $70 = $floor;
    $floordestheight51 = ((($70)) + 36|0);
    HEAP32[$floordestheight51>>2] = $call50;
    break;
   }
   case 7:  {
    $71 = $floor;
    $direction53 = ((($71)) + 24|0);
    HEAP32[$direction53>>2] = 1;
    $72 = $sec;
    $73 = $floor;
    $sector54 = ((($73)) + 20|0);
    HEAP32[$sector54>>2] = $72;
    $74 = $floor;
    $speed55 = ((($74)) + 40|0);
    HEAP32[$speed55>>2] = 65536;
    $75 = $floor;
    $sector56 = ((($75)) + 20|0);
    $76 = HEAP32[$sector56>>2]|0;
    $77 = HEAP32[$76>>2]|0;
    $add58 = (($77) + 1572864)|0;
    $78 = $floor;
    $floordestheight59 = ((($78)) + 36|0);
    HEAP32[$floordestheight59>>2] = $add58;
    break;
   }
   case 12:  {
    $79 = $floor;
    $direction61 = ((($79)) + 24|0);
    HEAP32[$direction61>>2] = 1;
    $80 = $sec;
    $81 = $floor;
    $sector62 = ((($81)) + 20|0);
    HEAP32[$sector62>>2] = $80;
    $82 = $floor;
    $speed63 = ((($82)) + 40|0);
    HEAP32[$speed63>>2] = 65536;
    $83 = $floor;
    $sector64 = ((($83)) + 20|0);
    $84 = HEAP32[$sector64>>2]|0;
    $85 = HEAP32[$84>>2]|0;
    $add66 = (($85) + 33554432)|0;
    $86 = $floor;
    $floordestheight67 = ((($86)) + 36|0);
    HEAP32[$floordestheight67>>2] = $add66;
    break;
   }
   case 8:  {
    $87 = $floor;
    $direction69 = ((($87)) + 24|0);
    HEAP32[$direction69>>2] = 1;
    $88 = $sec;
    $89 = $floor;
    $sector70 = ((($89)) + 20|0);
    HEAP32[$sector70>>2] = $88;
    $90 = $floor;
    $speed71 = ((($90)) + 40|0);
    HEAP32[$speed71>>2] = 65536;
    $91 = $floor;
    $sector72 = ((($91)) + 20|0);
    $92 = HEAP32[$sector72>>2]|0;
    $93 = HEAP32[$92>>2]|0;
    $add74 = (($93) + 1572864)|0;
    $94 = $floor;
    $floordestheight75 = ((($94)) + 36|0);
    HEAP32[$floordestheight75>>2] = $add74;
    $95 = $line$addr;
    $frontsector = ((($95)) + 48|0);
    $96 = HEAP32[$frontsector>>2]|0;
    $floorpic = ((($96)) + 8|0);
    $97 = HEAP16[$floorpic>>1]|0;
    $98 = $sec;
    $floorpic76 = ((($98)) + 8|0);
    HEAP16[$floorpic76>>1] = $97;
    $99 = $line$addr;
    $frontsector77 = ((($99)) + 48|0);
    $100 = HEAP32[$frontsector77>>2]|0;
    $special = ((($100)) + 14|0);
    $101 = HEAP16[$special>>1]|0;
    $102 = $sec;
    $special78 = ((($102)) + 14|0);
    HEAP16[$special78>>1] = $101;
    break;
   }
   case 5:  {
    $minsize = 2147483647;
    $103 = $floor;
    $direction80 = ((($103)) + 24|0);
    HEAP32[$direction80>>2] = 1;
    $104 = $sec;
    $105 = $floor;
    $sector81 = ((($105)) + 20|0);
    HEAP32[$sector81>>2] = $104;
    $106 = $floor;
    $speed82 = ((($106)) + 40|0);
    HEAP32[$speed82>>2] = 65536;
    $i = 0;
    while(1) {
     $107 = $i;
     $108 = $sec;
     $linecount = ((($108)) + 80|0);
     $109 = HEAP32[$linecount>>2]|0;
     $cmp83 = ($107|0)<($109|0);
     if (!($cmp83)) {
      break;
     }
     $110 = $secnum;
     $111 = $i;
     $call85 = (_twoSided($110,$111)|0);
     $tobool86 = ($call85|0)!=(0);
     if ($tobool86) {
      $112 = $secnum;
      $113 = $i;
      $call88 = (_getSide($112,$113,0)|0);
      $side = $call88;
      $114 = $side;
      $bottomtexture = ((($114)) + 10|0);
      $115 = HEAP16[$bottomtexture>>1]|0;
      $conv89 = $115 << 16 >> 16;
      $cmp90 = ($conv89|0)>=(0);
      if ($cmp90) {
       $116 = HEAP32[99921]|0;
       $117 = $side;
       $bottomtexture93 = ((($117)) + 10|0);
       $118 = HEAP16[$bottomtexture93>>1]|0;
       $idxprom = $118 << 16 >> 16;
       $arrayidx94 = (($116) + ($idxprom<<2)|0);
       $119 = HEAP32[$arrayidx94>>2]|0;
       $120 = $minsize;
       $cmp95 = ($119|0)<($120|0);
       if ($cmp95) {
        $121 = HEAP32[99921]|0;
        $122 = $side;
        $bottomtexture98 = ((($122)) + 10|0);
        $123 = HEAP16[$bottomtexture98>>1]|0;
        $idxprom99 = $123 << 16 >> 16;
        $arrayidx100 = (($121) + ($idxprom99<<2)|0);
        $124 = HEAP32[$arrayidx100>>2]|0;
        $minsize = $124;
       }
      }
      $125 = $secnum;
      $126 = $i;
      $call103 = (_getSide($125,$126,1)|0);
      $side = $call103;
      $127 = $side;
      $bottomtexture104 = ((($127)) + 10|0);
      $128 = HEAP16[$bottomtexture104>>1]|0;
      $conv105 = $128 << 16 >> 16;
      $cmp106 = ($conv105|0)>=(0);
      if ($cmp106) {
       $129 = HEAP32[99921]|0;
       $130 = $side;
       $bottomtexture109 = ((($130)) + 10|0);
       $131 = HEAP16[$bottomtexture109>>1]|0;
       $idxprom110 = $131 << 16 >> 16;
       $arrayidx111 = (($129) + ($idxprom110<<2)|0);
       $132 = HEAP32[$arrayidx111>>2]|0;
       $133 = $minsize;
       $cmp112 = ($132|0)<($133|0);
       if ($cmp112) {
        $134 = HEAP32[99921]|0;
        $135 = $side;
        $bottomtexture115 = ((($135)) + 10|0);
        $136 = HEAP16[$bottomtexture115>>1]|0;
        $idxprom116 = $136 << 16 >> 16;
        $arrayidx117 = (($134) + ($idxprom116<<2)|0);
        $137 = HEAP32[$arrayidx117>>2]|0;
        $minsize = $137;
       }
      }
     }
     $138 = $i;
     $inc = (($138) + 1)|0;
     $i = $inc;
    }
    $139 = $floor;
    $sector121 = ((($139)) + 20|0);
    $140 = HEAP32[$sector121>>2]|0;
    $141 = HEAP32[$140>>2]|0;
    $142 = $minsize;
    $add123 = (($141) + ($142))|0;
    $143 = $floor;
    $floordestheight124 = ((($143)) + 36|0);
    HEAP32[$floordestheight124>>2] = $add123;
    break;
   }
   case 6:  {
    $144 = $floor;
    $direction126 = ((($144)) + 24|0);
    HEAP32[$direction126>>2] = -1;
    $145 = $sec;
    $146 = $floor;
    $sector127 = ((($146)) + 20|0);
    HEAP32[$sector127>>2] = $145;
    $147 = $floor;
    $speed128 = ((($147)) + 40|0);
    HEAP32[$speed128>>2] = 65536;
    $148 = $sec;
    $call129 = (_P_FindLowestFloorSurrounding($148)|0);
    $149 = $floor;
    $floordestheight130 = ((($149)) + 36|0);
    HEAP32[$floordestheight130>>2] = $call129;
    $150 = $sec;
    $floorpic131 = ((($150)) + 8|0);
    $151 = HEAP16[$floorpic131>>1]|0;
    $152 = $floor;
    $texture = ((($152)) + 32|0);
    HEAP16[$texture>>1] = $151;
    $i = 0;
    L33: while(1) {
     $153 = $i;
     $154 = $sec;
     $linecount133 = ((($154)) + 80|0);
     $155 = HEAP32[$linecount133>>2]|0;
     $cmp134 = ($153|0)<($155|0);
     if (!($cmp134)) {
      break L7;
     }
     $156 = $secnum;
     $157 = $i;
     $call137 = (_twoSided($156,$157)|0);
     $tobool138 = ($call137|0)!=(0);
     do {
      if ($tobool138) {
       $158 = $secnum;
       $159 = $i;
       $call140 = (_getSide($158,$159,0)|0);
       $sector141 = ((($call140)) + 16|0);
       $160 = HEAP32[$sector141>>2]|0;
       $161 = HEAP32[99850]|0;
       $sub$ptr$lhs$cast = $160;
       $sub$ptr$rhs$cast = $161;
       $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
       $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
       $162 = $secnum;
       $cmp142 = ($sub$ptr$div|0)==($162|0);
       $163 = $secnum;
       $164 = $i;
       if ($cmp142) {
        $call145 = (_getSector($163,$164,1)|0);
        $sec = $call145;
        $165 = $sec;
        $166 = HEAP32[$165>>2]|0;
        $167 = $floor;
        $floordestheight147 = ((($167)) + 36|0);
        $168 = HEAP32[$floordestheight147>>2]|0;
        $cmp148 = ($166|0)==($168|0);
        if ($cmp148) {
         label = 35;
         break L33;
        } else {
         break;
        }
       } else {
        $call156 = (_getSector($163,$164,0)|0);
        $sec = $call156;
        $175 = $sec;
        $176 = HEAP32[$175>>2]|0;
        $177 = $floor;
        $floordestheight158 = ((($177)) + 36|0);
        $178 = HEAP32[$floordestheight158>>2]|0;
        $cmp159 = ($176|0)==($178|0);
        if ($cmp159) {
         label = 37;
         break L33;
        } else {
         break;
        }
       }
      }
     } while(0);
     $185 = $i;
     $inc171 = (($185) + 1)|0;
     $i = $inc171;
    }
    if ((label|0) == 35) {
     label = 0;
     $169 = $sec;
     $floorpic151 = ((($169)) + 8|0);
     $170 = HEAP16[$floorpic151>>1]|0;
     $171 = $floor;
     $texture152 = ((($171)) + 32|0);
     HEAP16[$texture152>>1] = $170;
     $172 = $sec;
     $special153 = ((($172)) + 14|0);
     $173 = HEAP16[$special153>>1]|0;
     $conv154 = $173 << 16 >> 16;
     $174 = $floor;
     $newspecial = ((($174)) + 28|0);
     HEAP32[$newspecial>>2] = $conv154;
     break L7;
    }
    else if ((label|0) == 37) {
     label = 0;
     $179 = $sec;
     $floorpic162 = ((($179)) + 8|0);
     $180 = HEAP16[$floorpic162>>1]|0;
     $181 = $floor;
     $texture163 = ((($181)) + 32|0);
     HEAP16[$texture163>>1] = $180;
     $182 = $sec;
     $special164 = ((($182)) + 14|0);
     $183 = HEAP16[$special164>>1]|0;
     $conv165 = $183 << 16 >> 16;
     $184 = $floor;
     $newspecial166 = ((($184)) + 28|0);
     HEAP32[$newspecial166>>2] = $conv165;
     break L7;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 11) {
   label = 0;
   $39 = $floor;
   $direction25 = ((($39)) + 24|0);
   HEAP32[$direction25>>2] = 1;
   $40 = $sec;
   $41 = $floor;
   $sector26 = ((($41)) + 20|0);
   HEAP32[$sector26>>2] = $40;
   $42 = $floor;
   $speed27 = ((($42)) + 40|0);
   HEAP32[$speed27>>2] = 65536;
   $43 = $sec;
   $call28 = (_P_FindLowestCeilingSurrounding($43)|0);
   $44 = $floor;
   $floordestheight29 = ((($44)) + 36|0);
   HEAP32[$floordestheight29>>2] = $call28;
   $45 = $floor;
   $floordestheight30 = ((($45)) + 36|0);
   $46 = HEAP32[$floordestheight30>>2]|0;
   $47 = $sec;
   $ceilingheight = ((($47)) + 4|0);
   $48 = HEAP32[$ceilingheight>>2]|0;
   $cmp31 = ($46|0)>($48|0);
   if ($cmp31) {
    $49 = $sec;
    $ceilingheight33 = ((($49)) + 4|0);
    $50 = HEAP32[$ceilingheight33>>2]|0;
    $51 = $floor;
    $floordestheight34 = ((($51)) + 36|0);
    HEAP32[$floordestheight34>>2] = $50;
   }
   $52 = $floortype$addr;
   $cmp36 = ($52|0)==(9);
   $conv = $cmp36&1;
   $mul = $conv<<19;
   $53 = $floor;
   $floordestheight37 = ((($53)) + 36|0);
   $54 = HEAP32[$floordestheight37>>2]|0;
   $sub = (($54) - ($mul))|0;
   HEAP32[$floordestheight37>>2] = $sub;
  }
 }
 $186 = $rtn;
 STACKTOP = sp;return ($186|0);
}
function _EV_BuildStairs($line,$type) {
 $line = $line|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add31 = 0, $and = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx20 = 0, $arrayidx8 = 0, $backsector = 0, $call = 0, $call1 = 0;
 var $call36 = 0, $cmp = 0, $cmp15 = 0, $cmp27 = 0, $cmp6 = 0, $conv = 0, $conv26 = 0, $conv9 = 0, $direction = 0, $direction42 = 0, $flags = 0, $floor = 0, $floordestheight = 0, $floordestheight45 = 0, $floorpic = 0, $floorpic25 = 0, $frontsector = 0, $function = 0, $function40 = 0, $height = 0;
 var $i = 0, $inc = 0, $line$addr = 0, $linecount = 0, $lines = 0, $lines13 = 0, $lines19 = 0, $newsecnum = 0, $ok = 0, $rtn = 0, $sec = 0, $secnum = 0, $sector = 0, $sector43 = 0, $specialdata = 0, $specialdata2 = 0, $specialdata32 = 0, $specialdata38 = 0, $speed = 0, $speed44 = 0;
 var $speed5 = 0, $stairsize = 0, $sub$ptr$div = 0, $sub$ptr$div24 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast21 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast22 = 0, $sub$ptr$sub = 0, $sub$ptr$sub23 = 0, $texture = 0, $tobool = 0, $tobool10 = 0, $tobool33 = 0, $tobool46 = 0, $tsec = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $line$addr = $line;
 $type$addr = $type;
 $stairsize = 0;
 $speed = 0;
 $secnum = -1;
 $rtn = 0;
 while(1) {
  $0 = $line$addr;
  $1 = $secnum;
  $call = (_P_FindSectorFromLineTag($0,$1)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99850]|0;
  $3 = $secnum;
  $arrayidx = (($2) + (($3*88)|0)|0);
  $sec = $arrayidx;
  $4 = $sec;
  $specialdata = ((($4)) + 76|0);
  $5 = HEAP32[$specialdata>>2]|0;
  $tobool = ($5|0)!=(0|0);
  if ($tobool) {
   continue;
  }
  $rtn = 1;
  $call1 = (_Z_Malloc(44,6,0)|0);
  $floor = $call1;
  $6 = $floor;
  _P_AddThinker($6);
  $7 = $floor;
  $8 = $sec;
  $specialdata2 = ((($8)) + 76|0);
  HEAP32[$specialdata2>>2] = $7;
  $9 = $floor;
  $function = ((($9)) + 8|0);
  HEAP32[$function>>2] = 138;
  $10 = $floor;
  $direction = ((($10)) + 24|0);
  HEAP32[$direction>>2] = 1;
  $11 = $sec;
  $12 = $floor;
  $sector = ((($12)) + 20|0);
  HEAP32[$sector>>2] = $11;
  $13 = $type$addr;
  switch ($13|0) {
  case 0:  {
   $speed = 16384;
   $stairsize = 524288;
   break;
  }
  case 1:  {
   $speed = 262144;
   $stairsize = 1048576;
   break;
  }
  default: {
  }
  }
  $14 = $speed;
  $15 = $floor;
  $speed5 = ((($15)) + 40|0);
  HEAP32[$speed5>>2] = $14;
  $16 = $sec;
  $17 = HEAP32[$16>>2]|0;
  $18 = $stairsize;
  $add = (($17) + ($18))|0;
  $height = $add;
  $19 = $height;
  $20 = $floor;
  $floordestheight = ((($20)) + 36|0);
  HEAP32[$floordestheight>>2] = $19;
  $21 = $sec;
  $floorpic = ((($21)) + 8|0);
  $22 = HEAP16[$floorpic>>1]|0;
  $conv = $22 << 16 >> 16;
  $texture = $conv;
  while(1) {
   $ok = 0;
   $i = 0;
   while(1) {
    $23 = $i;
    $24 = $sec;
    $linecount = ((($24)) + 80|0);
    $25 = HEAP32[$linecount>>2]|0;
    $cmp6 = ($23|0)<($25|0);
    if (!($cmp6)) {
     break;
    }
    $26 = $sec;
    $lines = ((($26)) + 84|0);
    $27 = HEAP32[$lines>>2]|0;
    $28 = $i;
    $arrayidx8 = (($27) + ($28<<2)|0);
    $29 = HEAP32[$arrayidx8>>2]|0;
    $flags = ((($29)) + 16|0);
    $30 = HEAP16[$flags>>1]|0;
    $conv9 = $30 << 16 >> 16;
    $and = $conv9 & 4;
    $tobool10 = ($and|0)!=(0);
    if ($tobool10) {
     $31 = $sec;
     $lines13 = ((($31)) + 84|0);
     $32 = HEAP32[$lines13>>2]|0;
     $33 = $i;
     $arrayidx14 = (($32) + ($33<<2)|0);
     $34 = HEAP32[$arrayidx14>>2]|0;
     $frontsector = ((($34)) + 48|0);
     $35 = HEAP32[$frontsector>>2]|0;
     $tsec = $35;
     $36 = $tsec;
     $37 = HEAP32[99850]|0;
     $sub$ptr$lhs$cast = $36;
     $sub$ptr$rhs$cast = $37;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
     $newsecnum = $sub$ptr$div;
     $38 = $secnum;
     $39 = $newsecnum;
     $cmp15 = ($38|0)!=($39|0);
     if (!($cmp15)) {
      $40 = $sec;
      $lines19 = ((($40)) + 84|0);
      $41 = HEAP32[$lines19>>2]|0;
      $42 = $i;
      $arrayidx20 = (($41) + ($42<<2)|0);
      $43 = HEAP32[$arrayidx20>>2]|0;
      $backsector = ((($43)) + 52|0);
      $44 = HEAP32[$backsector>>2]|0;
      $tsec = $44;
      $45 = $tsec;
      $46 = HEAP32[99850]|0;
      $sub$ptr$lhs$cast21 = $45;
      $sub$ptr$rhs$cast22 = $46;
      $sub$ptr$sub23 = (($sub$ptr$lhs$cast21) - ($sub$ptr$rhs$cast22))|0;
      $sub$ptr$div24 = (($sub$ptr$sub23|0) / 88)&-1;
      $newsecnum = $sub$ptr$div24;
      $47 = $tsec;
      $floorpic25 = ((($47)) + 8|0);
      $48 = HEAP16[$floorpic25>>1]|0;
      $conv26 = $48 << 16 >> 16;
      $49 = $texture;
      $cmp27 = ($conv26|0)!=($49|0);
      if (!($cmp27)) {
       $50 = $stairsize;
       $51 = $height;
       $add31 = (($51) + ($50))|0;
       $height = $add31;
       $52 = $tsec;
       $specialdata32 = ((($52)) + 76|0);
       $53 = HEAP32[$specialdata32>>2]|0;
       $tobool33 = ($53|0)!=(0|0);
       if (!($tobool33)) {
        label = 15;
        break;
       }
      }
     }
    }
    $67 = $i;
    $inc = (($67) + 1)|0;
    $i = $inc;
   }
   if ((label|0) == 15) {
    label = 0;
    $54 = $tsec;
    $sec = $54;
    $55 = $newsecnum;
    $secnum = $55;
    $call36 = (_Z_Malloc(44,6,0)|0);
    $floor = $call36;
    $56 = $floor;
    _P_AddThinker($56);
    $57 = $floor;
    $58 = $sec;
    $specialdata38 = ((($58)) + 76|0);
    HEAP32[$specialdata38>>2] = $57;
    $59 = $floor;
    $function40 = ((($59)) + 8|0);
    HEAP32[$function40>>2] = 138;
    $60 = $floor;
    $direction42 = ((($60)) + 24|0);
    HEAP32[$direction42>>2] = 1;
    $61 = $sec;
    $62 = $floor;
    $sector43 = ((($62)) + 20|0);
    HEAP32[$sector43>>2] = $61;
    $63 = $speed;
    $64 = $floor;
    $speed44 = ((($64)) + 40|0);
    HEAP32[$speed44>>2] = $63;
    $65 = $height;
    $66 = $floor;
    $floordestheight45 = ((($66)) + 36|0);
    HEAP32[$floordestheight45>>2] = $65;
    $ok = 1;
   }
   $68 = $ok;
   $tobool46 = ($68|0)!=(0);
   if (!($tobool46)) {
    break;
   }
  }
 }
 $69 = $rtn;
 STACKTOP = sp;return ($69|0);
}
function _P_GiveAmmo($player,$ammo,$num) {
 $player = $player|0;
 $ammo = $ammo|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $ammo$addr = 0, $ammo17 = 0, $ammo19 = 0, $ammo21 = 0, $ammo29 = 0, $ammo4 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx30 = 0, $arrayidx37 = 0, $arrayidx5 = 0, $arrayidx52 = 0, $arrayidx66 = 0;
 var $arrayidx77 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp14 = 0, $cmp25 = 0, $cmp35 = 0, $cmp46 = 0, $cmp49 = 0, $cmp6 = 0, $cmp60 = 0, $cmp63 = 0, $cmp74 = 0, $div = 0, $maxammo = 0, $maxammo23 = 0, $maxammo27 = 0, $mul = 0, $num$addr = 0, $oldammo = 0;
 var $or$cond = 0, $pendingweapon = 0, $pendingweapon55 = 0, $pendingweapon69 = 0, $pendingweapon80 = 0, $player$addr = 0, $readyweapon = 0, $readyweapon45 = 0, $readyweapon48 = 0, $readyweapon59 = 0, $readyweapon62 = 0, $readyweapon73 = 0, $retval = 0, $shl = 0, $tobool = 0, $tobool32 = 0, $tobool38 = 0, $tobool53 = 0, $tobool67 = 0, $tobool78 = 0;
 var $vararg_buffer = 0, $weaponowned = 0, $weaponowned51 = 0, $weaponowned65 = 0, $weaponowned76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $player$addr = $player;
 $ammo$addr = $ammo;
 $num$addr = $num;
 $0 = $ammo$addr;
 $cmp = ($0|0)==(5);
 if ($cmp) {
  $retval = 0;
  $60 = $retval;
  STACKTOP = sp;return ($60|0);
 }
 $1 = $ammo$addr;
 $cmp1 = ($1>>>0)>(4);
 if ($cmp1) {
  $2 = $ammo$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(153424,$vararg_buffer);
 }
 $3 = $player$addr;
 $ammo4 = ((($3)) + 164|0);
 $4 = $ammo$addr;
 $arrayidx = (($ammo4) + ($4<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $6 = $player$addr;
 $maxammo = ((($6)) + 180|0);
 $7 = $ammo$addr;
 $arrayidx5 = (($maxammo) + ($7<<2)|0);
 $8 = HEAP32[$arrayidx5>>2]|0;
 $cmp6 = ($5|0)==($8|0);
 if ($cmp6) {
  $retval = 0;
  $60 = $retval;
  STACKTOP = sp;return ($60|0);
 }
 $9 = $num$addr;
 $tobool = ($9|0)!=(0);
 $10 = $ammo$addr;
 $arrayidx10 = (49488 + ($10<<2)|0);
 $11 = HEAP32[$arrayidx10>>2]|0;
 if ($tobool) {
  $12 = $num$addr;
  $mul = Math_imul($12, $11)|0;
  $num$addr = $mul;
 } else {
  $div = (($11|0) / 2)&-1;
  $num$addr = $div;
 }
 $13 = HEAP32[99425]|0;
 $cmp13 = ($13|0)==(0);
 $14 = HEAP32[99425]|0;
 $cmp14 = ($14|0)==(4);
 $or$cond = $cmp13 | $cmp14;
 if ($or$cond) {
  $15 = $num$addr;
  $shl = $15 << 1;
  $num$addr = $shl;
 }
 $16 = $player$addr;
 $ammo17 = ((($16)) + 164|0);
 $17 = $ammo$addr;
 $arrayidx18 = (($ammo17) + ($17<<2)|0);
 $18 = HEAP32[$arrayidx18>>2]|0;
 $oldammo = $18;
 $19 = $num$addr;
 $20 = $player$addr;
 $ammo19 = ((($20)) + 164|0);
 $21 = $ammo$addr;
 $arrayidx20 = (($ammo19) + ($21<<2)|0);
 $22 = HEAP32[$arrayidx20>>2]|0;
 $add = (($22) + ($19))|0;
 HEAP32[$arrayidx20>>2] = $add;
 $23 = $player$addr;
 $ammo21 = ((($23)) + 164|0);
 $24 = $ammo$addr;
 $arrayidx22 = (($ammo21) + ($24<<2)|0);
 $25 = HEAP32[$arrayidx22>>2]|0;
 $26 = $player$addr;
 $maxammo23 = ((($26)) + 180|0);
 $27 = $ammo$addr;
 $arrayidx24 = (($maxammo23) + ($27<<2)|0);
 $28 = HEAP32[$arrayidx24>>2]|0;
 $cmp25 = ($25|0)>($28|0);
 if ($cmp25) {
  $29 = $player$addr;
  $maxammo27 = ((($29)) + 180|0);
  $30 = $ammo$addr;
  $arrayidx28 = (($maxammo27) + ($30<<2)|0);
  $31 = HEAP32[$arrayidx28>>2]|0;
  $32 = $player$addr;
  $ammo29 = ((($32)) + 164|0);
  $33 = $ammo$addr;
  $arrayidx30 = (($ammo29) + ($33<<2)|0);
  HEAP32[$arrayidx30>>2] = $31;
 }
 $34 = $oldammo;
 $tobool32 = ($34|0)!=(0);
 if ($tobool32) {
  $retval = 1;
  $60 = $retval;
  STACKTOP = sp;return ($60|0);
 }
 $35 = $ammo$addr;
 L26: do {
  switch ($35|0) {
  case 0:  {
   $36 = $player$addr;
   $readyweapon = ((($36)) + 120|0);
   $37 = HEAP32[$readyweapon>>2]|0;
   $cmp35 = ($37|0)==(0);
   if ($cmp35) {
    $38 = $player$addr;
    $weaponowned = ((($38)) + 128|0);
    $arrayidx37 = ((($weaponowned)) + 12|0);
    $39 = HEAP32[$arrayidx37>>2]|0;
    $tobool38 = ($39|0)!=(0);
    $40 = $player$addr;
    $pendingweapon = ((($40)) + 124|0);
    if ($tobool38) {
     HEAP32[$pendingweapon>>2] = 3;
     break L26;
    } else {
     HEAP32[$pendingweapon>>2] = 1;
     break L26;
    }
   }
   break;
  }
  case 1:  {
   $41 = $player$addr;
   $readyweapon45 = ((($41)) + 120|0);
   $42 = HEAP32[$readyweapon45>>2]|0;
   $cmp46 = ($42|0)==(0);
   if (!($cmp46)) {
    $43 = $player$addr;
    $readyweapon48 = ((($43)) + 120|0);
    $44 = HEAP32[$readyweapon48>>2]|0;
    $cmp49 = ($44|0)==(1);
    if (!($cmp49)) {
     break L26;
    }
   }
   $45 = $player$addr;
   $weaponowned51 = ((($45)) + 128|0);
   $arrayidx52 = ((($weaponowned51)) + 8|0);
   $46 = HEAP32[$arrayidx52>>2]|0;
   $tobool53 = ($46|0)!=(0);
   if ($tobool53) {
    $47 = $player$addr;
    $pendingweapon55 = ((($47)) + 124|0);
    HEAP32[$pendingweapon55>>2] = 2;
   }
   break;
  }
  case 2:  {
   $48 = $player$addr;
   $readyweapon59 = ((($48)) + 120|0);
   $49 = HEAP32[$readyweapon59>>2]|0;
   $cmp60 = ($49|0)==(0);
   if (!($cmp60)) {
    $50 = $player$addr;
    $readyweapon62 = ((($50)) + 120|0);
    $51 = HEAP32[$readyweapon62>>2]|0;
    $cmp63 = ($51|0)==(1);
    if (!($cmp63)) {
     break L26;
    }
   }
   $52 = $player$addr;
   $weaponowned65 = ((($52)) + 128|0);
   $arrayidx66 = ((($weaponowned65)) + 20|0);
   $53 = HEAP32[$arrayidx66>>2]|0;
   $tobool67 = ($53|0)!=(0);
   if ($tobool67) {
    $54 = $player$addr;
    $pendingweapon69 = ((($54)) + 124|0);
    HEAP32[$pendingweapon69>>2] = 5;
   }
   break;
  }
  case 3:  {
   $55 = $player$addr;
   $readyweapon73 = ((($55)) + 120|0);
   $56 = HEAP32[$readyweapon73>>2]|0;
   $cmp74 = ($56|0)==(0);
   if ($cmp74) {
    $57 = $player$addr;
    $weaponowned76 = ((($57)) + 128|0);
    $arrayidx77 = ((($weaponowned76)) + 16|0);
    $58 = HEAP32[$arrayidx77>>2]|0;
    $tobool78 = ($58|0)!=(0);
    if ($tobool78) {
     $59 = $player$addr;
     $pendingweapon80 = ((($59)) + 124|0);
     HEAP32[$pendingweapon80>>2] = 4;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $retval = 1;
 $60 = $retval;
 STACKTOP = sp;return ($60|0);
}
function _P_GiveWeapon($player,$weapon,$dropped) {
 $player = $player|0;
 $weapon = $weapon|0;
 $dropped = $dropped|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx25 = 0;
 var $arrayidx36 = 0, $arrayidx41 = 0, $arrayidx6 = 0, $arrayidx9 = 0, $bonuscount = 0, $call27 = 0, $call31 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $dropped$addr = 0, $gaveammo = 0, $gaveweapon = 0, $lor$ext = 0, $or$cond = 0, $or$cond$not = 0, $or$cond1 = 0, $pendingweapon = 0, $pendingweapon42 = 0, $player$addr = 0;
 var $retval = 0, $tobool = 0, $tobool2 = 0, $tobool23 = 0, $tobool3 = 0, $tobool37 = 0, $tobool44 = 0, $tobool45 = 0, $tobool7 = 0, $weapon$addr = 0, $weaponowned = 0, $weaponowned35 = 0, $weaponowned40 = 0, $weaponowned5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $player$addr = $player;
 $weapon$addr = $weapon;
 $dropped$addr = $dropped;
 $0 = HEAP32[99433]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99430]|0;
 $cmp = ($1|0)!=(2);
 $or$cond = $tobool & $cmp;
 $or$cond$not = $or$cond ^ 1;
 $2 = $dropped$addr;
 $tobool2 = ($2|0)!=(0);
 $or$cond1 = $or$cond$not | $tobool2;
 if ($or$cond1) {
  $18 = $weapon$addr;
  $arrayidx19 = (512 + (($18*24)|0)|0);
  $19 = HEAP32[$arrayidx19>>2]|0;
  $cmp21 = ($19|0)!=(5);
  do {
   if ($cmp21) {
    $20 = $dropped$addr;
    $tobool23 = ($20|0)!=(0);
    $21 = $player$addr;
    $22 = $weapon$addr;
    $arrayidx25 = (512 + (($22*24)|0)|0);
    $23 = HEAP32[$arrayidx25>>2]|0;
    if ($tobool23) {
     $call27 = (_P_GiveAmmo($21,$23,1)|0);
     $gaveammo = $call27;
     break;
    } else {
     $call31 = (_P_GiveAmmo($21,$23,2)|0);
     $gaveammo = $call31;
     break;
    }
   } else {
    $gaveammo = 0;
   }
  } while(0);
  $24 = $player$addr;
  $weaponowned35 = ((($24)) + 128|0);
  $25 = $weapon$addr;
  $arrayidx36 = (($weaponowned35) + ($25<<2)|0);
  $26 = HEAP32[$arrayidx36>>2]|0;
  $tobool37 = ($26|0)!=(0);
  if ($tobool37) {
   $gaveweapon = 0;
  } else {
   $gaveweapon = 1;
   $27 = $player$addr;
   $weaponowned40 = ((($27)) + 128|0);
   $28 = $weapon$addr;
   $arrayidx41 = (($weaponowned40) + ($28<<2)|0);
   HEAP32[$arrayidx41>>2] = 1;
   $29 = $weapon$addr;
   $30 = $player$addr;
   $pendingweapon42 = ((($30)) + 124|0);
   HEAP32[$pendingweapon42>>2] = $29;
  }
  $31 = $gaveweapon;
  $tobool44 = ($31|0)!=(0);
  $32 = $gaveammo;
  $tobool45 = ($32|0)!=(0);
  $33 = $tobool44 ? 1 : $tobool45;
  $lor$ext = $33&1;
  $retval = $lor$ext;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 } else {
  $3 = $player$addr;
  $weaponowned = ((($3)) + 128|0);
  $4 = $weapon$addr;
  $arrayidx = (($weaponowned) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $tobool3 = ($5|0)!=(0);
  if ($tobool3) {
   $retval = 0;
   $34 = $retval;
   STACKTOP = sp;return ($34|0);
  }
  $6 = $player$addr;
  $bonuscount = ((($6)) + 232|0);
  $7 = HEAP32[$bonuscount>>2]|0;
  $add = (($7) + 6)|0;
  HEAP32[$bonuscount>>2] = $add;
  $8 = $player$addr;
  $weaponowned5 = ((($8)) + 128|0);
  $9 = $weapon$addr;
  $arrayidx6 = (($weaponowned5) + ($9<<2)|0);
  HEAP32[$arrayidx6>>2] = 1;
  $10 = HEAP32[99430]|0;
  $tobool7 = ($10|0)!=(0);
  $11 = $player$addr;
  $12 = $weapon$addr;
  $arrayidx9 = (512 + (($12*24)|0)|0);
  $13 = HEAP32[$arrayidx9>>2]|0;
  if ($tobool7) {
   (_P_GiveAmmo($11,$13,5)|0);
  } else {
   (_P_GiveAmmo($11,$13,2)|0);
  }
  $14 = $weapon$addr;
  $15 = $player$addr;
  $pendingweapon = ((($15)) + 124|0);
  HEAP32[$pendingweapon>>2] = $14;
  $16 = $player$addr;
  $17 = HEAP32[99415]|0;
  $arrayidx14 = (183056 + (($17*288)|0)|0);
  $cmp15 = ($16|0)==($arrayidx14|0);
  if ($cmp15) {
   _S_StartSound(0,33);
  }
  $retval = 0;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _P_GiveBody($player,$num) {
 $player = $player|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $cmp = 0, $cmp3 = 0, $health = 0, $health1 = 0, $health2 = 0, $health5 = 0;
 var $health7 = 0, $health8 = 0, $num$addr = 0, $player$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $num$addr = $num;
 $0 = $player$addr;
 $health = ((($0)) + 40|0);
 $1 = HEAP32[$health>>2]|0;
 $cmp = ($1|0)>=(100);
 if ($cmp) {
  $retval = 0;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 $2 = $num$addr;
 $3 = $player$addr;
 $health1 = ((($3)) + 40|0);
 $4 = HEAP32[$health1>>2]|0;
 $add = (($4) + ($2))|0;
 HEAP32[$health1>>2] = $add;
 $5 = $player$addr;
 $health2 = ((($5)) + 40|0);
 $6 = HEAP32[$health2>>2]|0;
 $cmp3 = ($6|0)>(100);
 if ($cmp3) {
  $7 = $player$addr;
  $health5 = ((($7)) + 40|0);
  HEAP32[$health5>>2] = 100;
 }
 $8 = $player$addr;
 $health7 = ((($8)) + 40|0);
 $9 = HEAP32[$health7>>2]|0;
 $10 = $player$addr;
 $11 = HEAP32[$10>>2]|0;
 $health8 = ((($11)) + 108|0);
 HEAP32[$health8>>2] = $9;
 $retval = 1;
 $12 = $retval;
 STACKTOP = sp;return ($12|0);
}
function _P_GiveArmor($player,$armortype) {
 $player = $player|0;
 $armortype = $armortype|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $armorpoints = 0, $armorpoints2 = 0, $armortype$addr = 0, $armortype1 = 0, $cmp = 0, $hits = 0, $mul = 0, $player$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $armortype$addr = $armortype;
 $0 = $armortype$addr;
 $mul = ($0*100)|0;
 $hits = $mul;
 $1 = $player$addr;
 $armorpoints = ((($1)) + 44|0);
 $2 = HEAP32[$armorpoints>>2]|0;
 $3 = $hits;
 $cmp = ($2|0)>=($3|0);
 if ($cmp) {
  $retval = 0;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 } else {
  $4 = $armortype$addr;
  $5 = $player$addr;
  $armortype1 = ((($5)) + 48|0);
  HEAP32[$armortype1>>2] = $4;
  $6 = $hits;
  $7 = $player$addr;
  $armorpoints2 = ((($7)) + 44|0);
  HEAP32[$armorpoints2>>2] = $6;
  $retval = 1;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _P_GiveCard($player,$card) {
 $player = $player|0;
 $card = $card|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $arrayidx2 = 0, $bonuscount = 0, $card$addr = 0, $cards = 0, $cards1 = 0, $player$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $card$addr = $card;
 $0 = $player$addr;
 $cards = ((($0)) + 76|0);
 $1 = $card$addr;
 $arrayidx = (($cards) + ($1<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($2|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $3 = $player$addr;
 $bonuscount = ((($3)) + 232|0);
 HEAP32[$bonuscount>>2] = 6;
 $4 = $player$addr;
 $cards1 = ((($4)) + 76|0);
 $5 = $card$addr;
 $arrayidx2 = (($cards1) + ($5<<2)|0);
 HEAP32[$arrayidx2>>2] = 1;
 STACKTOP = sp;return;
}
function _P_GivePower($player,$power) {
 $player = $player|0;
 $power = $power|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx4 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp16 = 0, $cmp6 = 0, $flags = 0, $or = 0, $player$addr = 0, $power$addr = 0;
 var $powers = 0, $powers13 = 0, $powers18 = 0, $powers21 = 0, $powers25 = 0, $powers3 = 0, $powers8 = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $power$addr = $power;
 $0 = $power$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $1 = $player$addr;
  $powers = ((($1)) + 52|0);
  $2 = $power$addr;
  $arrayidx = (($powers) + ($2<<2)|0);
  HEAP32[$arrayidx>>2] = 1050;
  $retval = 1;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 $3 = $power$addr;
 $cmp1 = ($3|0)==(2);
 if ($cmp1) {
  $4 = $player$addr;
  $powers3 = ((($4)) + 52|0);
  $5 = $power$addr;
  $arrayidx4 = (($powers3) + ($5<<2)|0);
  HEAP32[$arrayidx4>>2] = 2100;
  $6 = $player$addr;
  $7 = HEAP32[$6>>2]|0;
  $flags = ((($7)) + 104|0);
  $8 = HEAP32[$flags>>2]|0;
  $or = $8 | 262144;
  HEAP32[$flags>>2] = $or;
  $retval = 1;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 $9 = $power$addr;
 $cmp6 = ($9|0)==(5);
 if ($cmp6) {
  $10 = $player$addr;
  $powers8 = ((($10)) + 52|0);
  $11 = $power$addr;
  $arrayidx9 = (($powers8) + ($11<<2)|0);
  HEAP32[$arrayidx9>>2] = 4200;
  $retval = 1;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 $12 = $power$addr;
 $cmp11 = ($12|0)==(3);
 if ($cmp11) {
  $13 = $player$addr;
  $powers13 = ((($13)) + 52|0);
  $14 = $power$addr;
  $arrayidx14 = (($powers13) + ($14<<2)|0);
  HEAP32[$arrayidx14>>2] = 2100;
  $retval = 1;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 $15 = $power$addr;
 $cmp16 = ($15|0)==(1);
 $16 = $player$addr;
 if ($cmp16) {
  (_P_GiveBody($16,100)|0);
  $17 = $player$addr;
  $powers18 = ((($17)) + 52|0);
  $18 = $power$addr;
  $arrayidx19 = (($powers18) + ($18<<2)|0);
  HEAP32[$arrayidx19>>2] = 1;
  $retval = 1;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 $powers21 = ((($16)) + 52|0);
 $19 = $power$addr;
 $arrayidx22 = (($powers21) + ($19<<2)|0);
 $20 = HEAP32[$arrayidx22>>2]|0;
 $tobool = ($20|0)!=(0);
 if ($tobool) {
  $retval = 0;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 } else {
  $21 = $player$addr;
  $powers25 = ((($21)) + 52|0);
  $22 = $power$addr;
  $arrayidx26 = (($powers25) + ($22<<2)|0);
  HEAP32[$arrayidx26>>2] = 1;
  $retval = 1;
  $23 = $retval;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _P_TouchSpecialThing($special,$toucher) {
 $special = $special|0;
 $toucher = $toucher|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add303 = 0, $and = 0, $and252 = 0, $and279 = 0, $and289 = 0, $and298 = 0, $armorpoints = 0, $armorpoints27 = 0, $armorpoints30 = 0, $armortype = 0, $armortype34 = 0, $arrayidx108 = 0, $arrayidx232 = 0, $arrayidx304 = 0;
 var $arrayidx68 = 0, $arrayidx78 = 0, $arrayidx88 = 0, $arrayidx98 = 0, $backpack = 0, $backpack234 = 0, $bonuscount = 0, $call = 0, $call10 = 0, $call117 = 0, $call123 = 0, $call134 = 0, $call140 = 0, $call149 = 0, $call155 = 0, $call161 = 0, $call167 = 0, $call175 = 0, $call180 = 0, $call187 = 0;
 var $call193 = 0, $call199 = 0, $call205 = 0, $call211 = 0, $call217 = 0, $call223 = 0, $call245 = 0, $call254 = 0, $call260 = 0, $call266 = 0, $call272 = 0, $call282 = 0, $call292 = 0, $cards = 0, $cards107 = 0, $cards67 = 0, $cards77 = 0, $cards87 = 0, $cards97 = 0, $cmp = 0;
 var $cmp128 = 0, $cmp145 = 0, $cmp18 = 0, $cmp2 = 0, $cmp231 = 0, $cmp237 = 0, $cmp253 = 0, $cmp28 = 0, $cmp280 = 0, $cmp290 = 0, $cmp305 = 0, $cmp4 = 0, $cmp40 = 0, $cmp49 = 0, $conv = 0, $conv281 = 0, $conv291 = 0, $delta = 0, $flags = 0, $flags251 = 0;
 var $flags278 = 0, $flags288 = 0, $flags297 = 0, $health = 0, $health127 = 0, $health16 = 0, $health17 = 0, $health20 = 0, $health22 = 0, $health23 = 0, $health38 = 0, $health39 = 0, $health42 = 0, $health44 = 0, $health46 = 0, $health52 = 0, $health53 = 0, $health55 = 0, $height = 0, $i = 0;
 var $inc = 0, $inc233 = 0, $inc241 = 0, $inc26 = 0, $inc301 = 0, $itemcount = 0, $maxammo = 0, $message = 0, $message101 = 0, $message111 = 0, $message121 = 0, $message130 = 0, $message138 = 0, $message14 = 0, $message144 = 0, $message153 = 0, $message159 = 0, $message165 = 0, $message171 = 0, $message185 = 0;
 var $message191 = 0, $message197 = 0, $message203 = 0, $message209 = 0, $message215 = 0, $message221 = 0, $message227 = 0, $message24 = 0, $message243 = 0, $message249 = 0, $message258 = 0, $message264 = 0, $message270 = 0, $message276 = 0, $message286 = 0, $message296 = 0, $message36 = 0, $message47 = 0, $message57 = 0, $message61 = 0;
 var $message71 = 0, $message81 = 0, $message91 = 0, $mul = 0, $or$cond = 0, $pendingweapon = 0, $player = 0, $player3 = 0, $readyweapon = 0, $sound = 0, $special$addr = 0, $sprite = 0, $sub = 0, $tobool = 0, $tobool103 = 0, $tobool109 = 0, $tobool11 = 0, $tobool113 = 0, $tobool118 = 0, $tobool124 = 0;
 var $tobool135 = 0, $tobool141 = 0, $tobool150 = 0, $tobool156 = 0, $tobool162 = 0, $tobool168 = 0, $tobool173 = 0, $tobool176 = 0, $tobool181 = 0, $tobool188 = 0, $tobool194 = 0, $tobool200 = 0, $tobool206 = 0, $tobool212 = 0, $tobool218 = 0, $tobool224 = 0, $tobool229 = 0, $tobool246 = 0, $tobool255 = 0, $tobool261 = 0;
 var $tobool267 = 0, $tobool273 = 0, $tobool283 = 0, $tobool293 = 0, $tobool299 = 0, $tobool32 = 0, $tobool59 = 0, $tobool63 = 0, $tobool69 = 0, $tobool73 = 0, $tobool79 = 0, $tobool83 = 0, $tobool89 = 0, $tobool93 = 0, $tobool99 = 0, $toucher$addr = 0, $vararg_buffer = 0, $z = 0, $z1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $special$addr = $special;
 $toucher$addr = $toucher;
 $0 = $special$addr;
 $z = ((($0)) + 20|0);
 $1 = HEAP32[$z>>2]|0;
 $2 = $toucher$addr;
 $z1 = ((($2)) + 20|0);
 $3 = HEAP32[$z1>>2]|0;
 $sub = (($1) - ($3))|0;
 $delta = $sub;
 $4 = $delta;
 $5 = $toucher$addr;
 $height = ((($5)) + 68|0);
 $6 = HEAP32[$height>>2]|0;
 $cmp = ($4|0)>($6|0);
 $7 = $delta;
 $cmp2 = ($7|0)<(-524288);
 $or$cond = $cmp | $cmp2;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $sound = 32;
 $8 = $toucher$addr;
 $player3 = ((($8)) + 132|0);
 $9 = HEAP32[$player3>>2]|0;
 $player = $9;
 $10 = $toucher$addr;
 $health = ((($10)) + 108|0);
 $11 = HEAP32[$health>>2]|0;
 $cmp4 = ($11|0)<=(0);
 if ($cmp4) {
  STACKTOP = sp;return;
 }
 $12 = $special$addr;
 $sprite = ((($12)) + 36|0);
 $13 = HEAP32[$sprite>>2]|0;
 L7: do {
  switch ($13|0) {
  case 55:  {
   $14 = $player;
   $call = (_P_GiveArmor($14,1)|0);
   $tobool = ($call|0)!=(0);
   if ($tobool) {
    $15 = $player;
    $message = ((($15)) + 224|0);
    HEAP32[$message>>2] = 153448;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 56:  {
   $16 = $player;
   $call10 = (_P_GiveArmor($16,2)|0);
   $tobool11 = ($call10|0)!=(0);
   if ($tobool11) {
    $17 = $player;
    $message14 = ((($17)) + 224|0);
    HEAP32[$message14>>2] = 153469;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 60:  {
   $18 = $player;
   $health16 = ((($18)) + 40|0);
   $19 = HEAP32[$health16>>2]|0;
   $inc = (($19) + 1)|0;
   HEAP32[$health16>>2] = $inc;
   $20 = $player;
   $health17 = ((($20)) + 40|0);
   $21 = HEAP32[$health17>>2]|0;
   $cmp18 = ($21|0)>(200);
   if ($cmp18) {
    $22 = $player;
    $health20 = ((($22)) + 40|0);
    HEAP32[$health20>>2] = 200;
   }
   $23 = $player;
   $health22 = ((($23)) + 40|0);
   $24 = HEAP32[$health22>>2]|0;
   $25 = $player;
   $26 = HEAP32[$25>>2]|0;
   $health23 = ((($26)) + 108|0);
   HEAP32[$health23>>2] = $24;
   $27 = $player;
   $message24 = ((($27)) + 224|0);
   HEAP32[$message24>>2] = 153494;
   break;
  }
  case 61:  {
   $28 = $player;
   $armorpoints = ((($28)) + 44|0);
   $29 = HEAP32[$armorpoints>>2]|0;
   $inc26 = (($29) + 1)|0;
   HEAP32[$armorpoints>>2] = $inc26;
   $30 = $player;
   $armorpoints27 = ((($30)) + 44|0);
   $31 = HEAP32[$armorpoints27>>2]|0;
   $cmp28 = ($31|0)>(200);
   if ($cmp28) {
    $32 = $player;
    $armorpoints30 = ((($32)) + 44|0);
    HEAP32[$armorpoints30>>2] = 200;
   }
   $33 = $player;
   $armortype = ((($33)) + 48|0);
   $34 = HEAP32[$armortype>>2]|0;
   $tobool32 = ($34|0)!=(0);
   if (!($tobool32)) {
    $35 = $player;
    $armortype34 = ((($35)) + 48|0);
    HEAP32[$armortype34>>2] = 1;
   }
   $36 = $player;
   $message36 = ((($36)) + 224|0);
   HEAP32[$message36>>2] = 153520;
   break;
  }
  case 70:  {
   $37 = $player;
   $health38 = ((($37)) + 40|0);
   $38 = HEAP32[$health38>>2]|0;
   $add = (($38) + 100)|0;
   HEAP32[$health38>>2] = $add;
   $39 = $player;
   $health39 = ((($39)) + 40|0);
   $40 = HEAP32[$health39>>2]|0;
   $cmp40 = ($40|0)>(200);
   if ($cmp40) {
    $41 = $player;
    $health42 = ((($41)) + 40|0);
    HEAP32[$health42>>2] = 200;
   }
   $42 = $player;
   $health44 = ((($42)) + 40|0);
   $43 = HEAP32[$health44>>2]|0;
   $44 = $player;
   $45 = HEAP32[$44>>2]|0;
   $health46 = ((($45)) + 108|0);
   HEAP32[$health46>>2] = $43;
   $46 = $player;
   $message47 = ((($46)) + 224|0);
   HEAP32[$message47>>2] = 153546;
   $sound = 93;
   break;
  }
  case 74:  {
   $47 = HEAP32[32168]|0;
   $cmp49 = ($47|0)!=(2);
   if ($cmp49) {
    STACKTOP = sp;return;
   } else {
    $48 = $player;
    $health52 = ((($48)) + 40|0);
    HEAP32[$health52>>2] = 200;
    $49 = $player;
    $health53 = ((($49)) + 40|0);
    $50 = HEAP32[$health53>>2]|0;
    $51 = $player;
    $52 = HEAP32[$51>>2]|0;
    $health55 = ((($52)) + 108|0);
    HEAP32[$health55>>2] = $50;
    $53 = $player;
    (_P_GiveArmor($53,2)|0);
    $54 = $player;
    $message57 = ((($54)) + 224|0);
    HEAP32[$message57>>2] = 153559;
    $sound = 93;
    break L7;
   }
   break;
  }
  case 62:  {
   $55 = $player;
   $cards = ((($55)) + 76|0);
   $56 = HEAP32[$cards>>2]|0;
   $tobool59 = ($56|0)!=(0);
   if (!($tobool59)) {
    $57 = $player;
    $message61 = ((($57)) + 224|0);
    HEAP32[$message61>>2] = 153571;
   }
   $58 = $player;
   _P_GiveCard($58,0);
   $59 = HEAP32[99433]|0;
   $tobool63 = ($59|0)!=(0);
   if ($tobool63) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 64:  {
   $60 = $player;
   $cards67 = ((($60)) + 76|0);
   $arrayidx68 = ((($cards67)) + 4|0);
   $61 = HEAP32[$arrayidx68>>2]|0;
   $tobool69 = ($61|0)!=(0);
   if (!($tobool69)) {
    $62 = $player;
    $message71 = ((($62)) + 224|0);
    HEAP32[$message71>>2] = 153597;
   }
   $63 = $player;
   _P_GiveCard($63,1);
   $64 = HEAP32[99433]|0;
   $tobool73 = ($64|0)!=(0);
   if ($tobool73) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 63:  {
   $65 = $player;
   $cards77 = ((($65)) + 76|0);
   $arrayidx78 = ((($cards77)) + 8|0);
   $66 = HEAP32[$arrayidx78>>2]|0;
   $tobool79 = ($66|0)!=(0);
   if (!($tobool79)) {
    $67 = $player;
    $message81 = ((($67)) + 224|0);
    HEAP32[$message81>>2] = 153625;
   }
   $68 = $player;
   _P_GiveCard($68,2);
   $69 = HEAP32[99433]|0;
   $tobool83 = ($69|0)!=(0);
   if ($tobool83) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 65:  {
   $70 = $player;
   $cards87 = ((($70)) + 76|0);
   $arrayidx88 = ((($cards87)) + 12|0);
   $71 = HEAP32[$arrayidx88>>2]|0;
   $tobool89 = ($71|0)!=(0);
   if (!($tobool89)) {
    $72 = $player;
    $message91 = ((($72)) + 224|0);
    HEAP32[$message91>>2] = 153650;
   }
   $73 = $player;
   _P_GiveCard($73,3);
   $74 = HEAP32[99433]|0;
   $tobool93 = ($74|0)!=(0);
   if ($tobool93) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 67:  {
   $75 = $player;
   $cards97 = ((($75)) + 76|0);
   $arrayidx98 = ((($cards97)) + 16|0);
   $76 = HEAP32[$arrayidx98>>2]|0;
   $tobool99 = ($76|0)!=(0);
   if (!($tobool99)) {
    $77 = $player;
    $message101 = ((($77)) + 224|0);
    HEAP32[$message101>>2] = 153678;
   }
   $78 = $player;
   _P_GiveCard($78,4);
   $79 = HEAP32[99433]|0;
   $tobool103 = ($79|0)!=(0);
   if ($tobool103) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 66:  {
   $80 = $player;
   $cards107 = ((($80)) + 76|0);
   $arrayidx108 = ((($cards107)) + 20|0);
   $81 = HEAP32[$arrayidx108>>2]|0;
   $tobool109 = ($81|0)!=(0);
   if (!($tobool109)) {
    $82 = $player;
    $message111 = ((($82)) + 224|0);
    HEAP32[$message111>>2] = 153708;
   }
   $83 = $player;
   _P_GiveCard($83,5);
   $84 = HEAP32[99433]|0;
   $tobool113 = ($84|0)!=(0);
   if ($tobool113) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 68:  {
   $85 = $player;
   $call117 = (_P_GiveBody($85,10)|0);
   $tobool118 = ($call117|0)!=(0);
   if ($tobool118) {
    $86 = $player;
    $message121 = ((($86)) + 224|0);
    HEAP32[$message121>>2] = 153735;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 69:  {
   $87 = $player;
   $call123 = (_P_GiveBody($87,25)|0);
   $tobool124 = ($call123|0)!=(0);
   if (!($tobool124)) {
    STACKTOP = sp;return;
   }
   $88 = $player;
   $health127 = ((($88)) + 40|0);
   $89 = HEAP32[$health127>>2]|0;
   $cmp128 = ($89|0)<(25);
   $90 = $player;
   $message130 = ((($90)) + 224|0);
   if ($cmp128) {
    HEAP32[$message130>>2] = 153757;
    break L7;
   } else {
    HEAP32[$message130>>2] = 153799;
    break L7;
   }
   break;
  }
  case 71:  {
   $91 = $player;
   $call134 = (_P_GivePower($91,0)|0);
   $tobool135 = ($call134|0)!=(0);
   if ($tobool135) {
    $92 = $player;
    $message138 = ((($92)) + 224|0);
    HEAP32[$message138>>2] = 153820;
    $sound = 93;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 72:  {
   $93 = $player;
   $call140 = (_P_GivePower($93,1)|0);
   $tobool141 = ($call140|0)!=(0);
   if (!($tobool141)) {
    STACKTOP = sp;return;
   }
   $94 = $player;
   $message144 = ((($94)) + 224|0);
   HEAP32[$message144>>2] = 153837;
   $95 = $player;
   $readyweapon = ((($95)) + 120|0);
   $96 = HEAP32[$readyweapon>>2]|0;
   $cmp145 = ($96|0)!=(0);
   if ($cmp145) {
    $97 = $player;
    $pendingweapon = ((($97)) + 124|0);
    HEAP32[$pendingweapon>>2] = 0;
   }
   $sound = 93;
   break;
  }
  case 73:  {
   $98 = $player;
   $call149 = (_P_GivePower($98,2)|0);
   $tobool150 = ($call149|0)!=(0);
   if ($tobool150) {
    $99 = $player;
    $message153 = ((($99)) + 224|0);
    HEAP32[$message153>>2] = 153846;
    $sound = 93;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 75:  {
   $100 = $player;
   $call155 = (_P_GivePower($100,3)|0);
   $tobool156 = ($call155|0)!=(0);
   if ($tobool156) {
    $101 = $player;
    $message159 = ((($101)) + 224|0);
    HEAP32[$message159>>2] = 153867;
    $sound = 93;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 76:  {
   $102 = $player;
   $call161 = (_P_GivePower($102,4)|0);
   $tobool162 = ($call161|0)!=(0);
   if ($tobool162) {
    $103 = $player;
    $message165 = ((($103)) + 224|0);
    HEAP32[$message165>>2] = 153892;
    $sound = 93;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 77:  {
   $104 = $player;
   $call167 = (_P_GivePower($104,5)|0);
   $tobool168 = ($call167|0)!=(0);
   if ($tobool168) {
    $105 = $player;
    $message171 = ((($105)) + 224|0);
    HEAP32[$message171>>2] = 153910;
    $sound = 93;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 78:  {
   $106 = $special$addr;
   $flags = ((($106)) + 104|0);
   $107 = HEAP32[$flags>>2]|0;
   $and = $107 & 131072;
   $tobool173 = ($and|0)!=(0);
   $108 = $player;
   if ($tobool173) {
    $call175 = (_P_GiveAmmo($108,0,0)|0);
    $tobool176 = ($call175|0)!=(0);
    if (!($tobool176)) {
     STACKTOP = sp;return;
    }
   } else {
    $call180 = (_P_GiveAmmo($108,0,1)|0);
    $tobool181 = ($call180|0)!=(0);
    if (!($tobool181)) {
     STACKTOP = sp;return;
    }
   }
   $109 = $player;
   $message185 = ((($109)) + 224|0);
   HEAP32[$message185>>2] = 153936;
   break;
  }
  case 79:  {
   $110 = $player;
   $call187 = (_P_GiveAmmo($110,0,5)|0);
   $tobool188 = ($call187|0)!=(0);
   if ($tobool188) {
    $111 = $player;
    $message191 = ((($111)) + 224|0);
    HEAP32[$message191>>2] = 153954;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 80:  {
   $112 = $player;
   $call193 = (_P_GiveAmmo($112,3,1)|0);
   $tobool194 = ($call193|0)!=(0);
   if ($tobool194) {
    $113 = $player;
    $message197 = ((($113)) + 224|0);
    HEAP32[$message197>>2] = 153982;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 81:  {
   $114 = $player;
   $call199 = (_P_GiveAmmo($114,3,5)|0);
   $tobool200 = ($call199|0)!=(0);
   if ($tobool200) {
    $115 = $player;
    $message203 = ((($115)) + 224|0);
    HEAP32[$message203>>2] = 154002;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 82:  {
   $116 = $player;
   $call205 = (_P_GiveAmmo($116,2,1)|0);
   $tobool206 = ($call205|0)!=(0);
   if ($tobool206) {
    $117 = $player;
    $message209 = ((($117)) + 224|0);
    HEAP32[$message209>>2] = 154030;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 83:  {
   $118 = $player;
   $call211 = (_P_GiveAmmo($118,2,5)|0);
   $tobool212 = ($call211|0)!=(0);
   if ($tobool212) {
    $119 = $player;
    $message215 = ((($119)) + 224|0);
    HEAP32[$message215>>2] = 154056;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 84:  {
   $120 = $player;
   $call217 = (_P_GiveAmmo($120,1,1)|0);
   $tobool218 = ($call217|0)!=(0);
   if ($tobool218) {
    $121 = $player;
    $message221 = ((($121)) + 224|0);
    HEAP32[$message221>>2] = 154087;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 85:  {
   $122 = $player;
   $call223 = (_P_GiveAmmo($122,1,5)|0);
   $tobool224 = ($call223|0)!=(0);
   if ($tobool224) {
    $123 = $player;
    $message227 = ((($123)) + 224|0);
    HEAP32[$message227>>2] = 154115;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 86:  {
   $124 = $player;
   $backpack = ((($124)) + 100|0);
   $125 = HEAP32[$backpack>>2]|0;
   $tobool229 = ($125|0)!=(0);
   if (!($tobool229)) {
    $i = 0;
    while(1) {
     $126 = $i;
     $cmp231 = ($126|0)<(4);
     $127 = $player;
     if (!($cmp231)) {
      break;
     }
     $maxammo = ((($127)) + 180|0);
     $128 = $i;
     $arrayidx232 = (($maxammo) + ($128<<2)|0);
     $129 = HEAP32[$arrayidx232>>2]|0;
     $mul = $129<<1;
     HEAP32[$arrayidx232>>2] = $mul;
     $130 = $i;
     $inc233 = (($130) + 1)|0;
     $i = $inc233;
    }
    $backpack234 = ((($127)) + 100|0);
    HEAP32[$backpack234>>2] = 1;
   }
   $i = 0;
   while(1) {
    $131 = $i;
    $cmp237 = ($131|0)<(4);
    $132 = $player;
    if (!($cmp237)) {
     break;
    }
    $133 = $i;
    (_P_GiveAmmo($132,$133,1)|0);
    $134 = $i;
    $inc241 = (($134) + 1)|0;
    $i = $inc241;
   }
   $message243 = ((($132)) + 224|0);
   HEAP32[$message243>>2] = 154150;
   break;
  }
  case 87:  {
   $135 = $player;
   $call245 = (_P_GiveWeapon($135,6,0)|0);
   $tobool246 = ($call245|0)!=(0);
   if ($tobool246) {
    $136 = $player;
    $message249 = ((($136)) + 224|0);
    HEAP32[$message249>>2] = 154185;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 88:  {
   $137 = $player;
   $138 = $special$addr;
   $flags251 = ((($138)) + 104|0);
   $139 = HEAP32[$flags251>>2]|0;
   $and252 = $139 & 131072;
   $cmp253 = ($and252|0)!=(0);
   $conv = $cmp253&1;
   $call254 = (_P_GiveWeapon($137,3,$conv)|0);
   $tobool255 = ($call254|0)!=(0);
   if ($tobool255) {
    $140 = $player;
    $message258 = ((($140)) + 224|0);
    HEAP32[$message258>>2] = 154216;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 89:  {
   $141 = $player;
   $call260 = (_P_GiveWeapon($141,7,0)|0);
   $tobool261 = ($call260|0)!=(0);
   if ($tobool261) {
    $142 = $player;
    $message264 = ((($142)) + 224|0);
    HEAP32[$message264>>2] = 154238;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 90:  {
   $143 = $player;
   $call266 = (_P_GiveWeapon($143,4,0)|0);
   $tobool267 = ($call266|0)!=(0);
   if ($tobool267) {
    $144 = $player;
    $message270 = ((($144)) + 224|0);
    HEAP32[$message270>>2] = 154267;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 91:  {
   $145 = $player;
   $call272 = (_P_GiveWeapon($145,5,0)|0);
   $tobool273 = ($call272|0)!=(0);
   if ($tobool273) {
    $146 = $player;
    $message276 = ((($146)) + 224|0);
    HEAP32[$message276>>2] = 154296;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 92:  {
   $147 = $player;
   $148 = $special$addr;
   $flags278 = ((($148)) + 104|0);
   $149 = HEAP32[$flags278>>2]|0;
   $and279 = $149 & 131072;
   $cmp280 = ($and279|0)!=(0);
   $conv281 = $cmp280&1;
   $call282 = (_P_GiveWeapon($147,2,$conv281)|0);
   $tobool283 = ($call282|0)!=(0);
   if ($tobool283) {
    $150 = $player;
    $message286 = ((($150)) + 224|0);
    HEAP32[$message286>>2] = 154320;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 93:  {
   $151 = $player;
   $152 = $special$addr;
   $flags288 = ((($152)) + 104|0);
   $153 = HEAP32[$flags288>>2]|0;
   $and289 = $153 & 131072;
   $cmp290 = ($and289|0)!=(0);
   $conv291 = $cmp290&1;
   $call292 = (_P_GiveWeapon($151,8,$conv291)|0);
   $tobool293 = ($call292|0)!=(0);
   if ($tobool293) {
    $154 = $player;
    $message296 = ((($154)) + 224|0);
    HEAP32[$message296>>2] = 154341;
    $sound = 33;
    break L7;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
   _I_Error(154368,$vararg_buffer);
  }
  }
 } while(0);
 $155 = $special$addr;
 $flags297 = ((($155)) + 104|0);
 $156 = HEAP32[$flags297>>2]|0;
 $and298 = $156 & 8388608;
 $tobool299 = ($and298|0)!=(0);
 if ($tobool299) {
  $157 = $player;
  $itemcount = ((($157)) + 216|0);
  $158 = HEAP32[$itemcount>>2]|0;
  $inc301 = (($158) + 1)|0;
  HEAP32[$itemcount>>2] = $inc301;
 }
 $159 = $special$addr;
 _P_RemoveMobj($159);
 $160 = $player;
 $bonuscount = ((($160)) + 232|0);
 $161 = HEAP32[$bonuscount>>2]|0;
 $add303 = (($161) + 6)|0;
 HEAP32[$bonuscount>>2] = $add303;
 $162 = $player;
 $163 = HEAP32[99415]|0;
 $arrayidx304 = (183056 + (($163*288)|0)|0);
 $cmp305 = ($162|0)==($arrayidx304|0);
 if (!($cmp305)) {
  STACKTOP = sp;return;
 }
 $164 = $sound;
 _S_StartSound(0,$164);
 STACKTOP = sp;return;
}
function _P_KillMobj($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $and = 0, $and2 = 0;
 var $and22 = 0, $and43 = 0, $and66 = 0, $and7 = 0, $arrayidx = 0, $arrayidx39 = 0, $arrayidx47 = 0, $call65 = 0, $call79 = 0, $cmp = 0, $cmp48 = 0, $cmp54 = 0, $cmp69 = 0, $cmp73 = 0, $deathstate = 0, $flags = 0, $flags1 = 0, $flags21 = 0, $flags3 = 0, $flags42 = 0;
 var $flags6 = 0, $flags80 = 0, $frags = 0, $frags34 = 0, $health = 0, $height = 0, $inc = 0, $inc17 = 0, $inc25 = 0, $inc40 = 0, $info = 0, $info56 = 0, $info59 = 0, $info62 = 0, $item = 0, $killcount = 0, $mo = 0, $or = 0, $or$cond = 0, $or81 = 0;
 var $player = 0, $player10 = 0, $player12 = 0, $player15 = 0, $player16 = 0, $player28 = 0, $player33 = 0, $player35 = 0, $player44 = 0, $player45 = 0, $player46 = 0, $playerstate = 0, $shr = 0, $source$addr = 0, $spawnhealth = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div38 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast36 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub37 = 0, $sub67 = 0, $target$addr = 0, $tics = 0, $tics68 = 0, $tics71 = 0, $tobool = 0, $tobool13 = 0, $tobool19 = 0, $tobool23 = 0, $tobool29 = 0, $tobool31 = 0, $tobool4 = 0, $tobool50 = 0, $tobool57 = 0, $tobool8 = 0, $type = 0, $type76 = 0, $x = 0;
 var $xdeathstate = 0, $xdeathstate60 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $source$addr = $source;
 $target$addr = $target;
 $0 = $target$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & -16793605;
 HEAP32[$flags>>2] = $and;
 $2 = $target$addr;
 $type = ((($2)) + 88|0);
 $3 = HEAP32[$type>>2]|0;
 $cmp = ($3|0)!=(18);
 if ($cmp) {
  $4 = $target$addr;
  $flags1 = ((($4)) + 104|0);
  $5 = HEAP32[$flags1>>2]|0;
  $and2 = $5 & -513;
  HEAP32[$flags1>>2] = $and2;
 }
 $6 = $target$addr;
 $flags3 = ((($6)) + 104|0);
 $7 = HEAP32[$flags3>>2]|0;
 $or = $7 | 1049600;
 HEAP32[$flags3>>2] = $or;
 $8 = $target$addr;
 $height = ((($8)) + 68|0);
 $9 = HEAP32[$height>>2]|0;
 $shr = $9 >> 2;
 HEAP32[$height>>2] = $shr;
 $10 = $source$addr;
 $tobool = ($10|0)!=(0|0);
 if ($tobool) {
  $11 = $source$addr;
  $player = ((($11)) + 132|0);
  $12 = HEAP32[$player>>2]|0;
  $tobool4 = ($12|0)!=(0|0);
  if ($tobool4) {
   $13 = $target$addr;
   $flags6 = ((($13)) + 104|0);
   $14 = HEAP32[$flags6>>2]|0;
   $and7 = $14 & 4194304;
   $tobool8 = ($and7|0)!=(0);
   if ($tobool8) {
    $15 = $source$addr;
    $player10 = ((($15)) + 132|0);
    $16 = HEAP32[$player10>>2]|0;
    $killcount = ((($16)) + 212|0);
    $17 = HEAP32[$killcount>>2]|0;
    $inc = (($17) + 1)|0;
    HEAP32[$killcount>>2] = $inc;
   }
   $18 = $target$addr;
   $player12 = ((($18)) + 132|0);
   $19 = HEAP32[$player12>>2]|0;
   $tobool13 = ($19|0)!=(0|0);
   if ($tobool13) {
    $20 = $source$addr;
    $player15 = ((($20)) + 132|0);
    $21 = HEAP32[$player15>>2]|0;
    $frags = ((($21)) + 104|0);
    $22 = $target$addr;
    $player16 = ((($22)) + 132|0);
    $23 = HEAP32[$player16>>2]|0;
    $sub$ptr$lhs$cast = $23;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - (183056))|0;
    $sub$ptr$div = (($sub$ptr$sub|0) / 288)&-1;
    $arrayidx = (($frags) + ($sub$ptr$div<<2)|0);
    $24 = HEAP32[$arrayidx>>2]|0;
    $inc17 = (($24) + 1)|0;
    HEAP32[$arrayidx>>2] = $inc17;
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $25 = HEAP32[99433]|0;
  $tobool19 = ($25|0)!=(0);
  if (!($tobool19)) {
   $26 = $target$addr;
   $flags21 = ((($26)) + 104|0);
   $27 = HEAP32[$flags21>>2]|0;
   $and22 = $27 & 4194304;
   $tobool23 = ($and22|0)!=(0);
   if ($tobool23) {
    $28 = HEAP32[(183268)>>2]|0;
    $inc25 = (($28) + 1)|0;
    HEAP32[(183268)>>2] = $inc25;
   }
  }
 }
 $29 = $target$addr;
 $player28 = ((($29)) + 132|0);
 $30 = HEAP32[$player28>>2]|0;
 $tobool29 = ($30|0)!=(0|0);
 if ($tobool29) {
  $31 = $source$addr;
  $tobool31 = ($31|0)!=(0|0);
  if (!($tobool31)) {
   $32 = $target$addr;
   $player33 = ((($32)) + 132|0);
   $33 = HEAP32[$player33>>2]|0;
   $frags34 = ((($33)) + 104|0);
   $34 = $target$addr;
   $player35 = ((($34)) + 132|0);
   $35 = HEAP32[$player35>>2]|0;
   $sub$ptr$lhs$cast36 = $35;
   $sub$ptr$sub37 = (($sub$ptr$lhs$cast36) - (183056))|0;
   $sub$ptr$div38 = (($sub$ptr$sub37|0) / 288)&-1;
   $arrayidx39 = (($frags34) + ($sub$ptr$div38<<2)|0);
   $36 = HEAP32[$arrayidx39>>2]|0;
   $inc40 = (($36) + 1)|0;
   HEAP32[$arrayidx39>>2] = $inc40;
  }
  $37 = $target$addr;
  $flags42 = ((($37)) + 104|0);
  $38 = HEAP32[$flags42>>2]|0;
  $and43 = $38 & -3;
  HEAP32[$flags42>>2] = $and43;
  $39 = $target$addr;
  $player44 = ((($39)) + 132|0);
  $40 = HEAP32[$player44>>2]|0;
  $playerstate = ((($40)) + 4|0);
  HEAP32[$playerstate>>2] = 1;
  $41 = $target$addr;
  $player45 = ((($41)) + 132|0);
  $42 = HEAP32[$player45>>2]|0;
  _P_DropWeapon($42);
  $43 = $target$addr;
  $player46 = ((($43)) + 132|0);
  $44 = HEAP32[$player46>>2]|0;
  $45 = HEAP32[99415]|0;
  $arrayidx47 = (183056 + (($45*288)|0)|0);
  $cmp48 = ($44|0)==($arrayidx47|0);
  $46 = HEAP32[99316]|0;
  $tobool50 = ($46|0)!=(0);
  $or$cond = $cmp48 & $tobool50;
  if ($or$cond) {
   _AM_Stop();
  }
 }
 $47 = $target$addr;
 $health = ((($47)) + 108|0);
 $48 = HEAP32[$health>>2]|0;
 $49 = $target$addr;
 $info = ((($49)) + 92|0);
 $50 = HEAP32[$info>>2]|0;
 $spawnhealth = ((($50)) + 8|0);
 $51 = HEAP32[$spawnhealth>>2]|0;
 $sub = (0 - ($51))|0;
 $cmp54 = ($48|0)<($sub|0);
 if ($cmp54) {
  $52 = $target$addr;
  $info56 = ((($52)) + 92|0);
  $53 = HEAP32[$info56>>2]|0;
  $xdeathstate = ((($53)) + 52|0);
  $54 = HEAP32[$xdeathstate>>2]|0;
  $tobool57 = ($54|0)!=(0);
  if ($tobool57) {
   $55 = $target$addr;
   $56 = $target$addr;
   $info59 = ((($56)) + 92|0);
   $57 = HEAP32[$info59>>2]|0;
   $xdeathstate60 = ((($57)) + 52|0);
   $58 = HEAP32[$xdeathstate60>>2]|0;
   (_P_SetMobjState($55,$58)|0);
  } else {
   label = 20;
  }
 } else {
  label = 20;
 }
 if ((label|0) == 20) {
  $59 = $target$addr;
  $60 = $target$addr;
  $info62 = ((($60)) + 92|0);
  $61 = HEAP32[$info62>>2]|0;
  $deathstate = ((($61)) + 48|0);
  $62 = HEAP32[$deathstate>>2]|0;
  (_P_SetMobjState($59,$62)|0);
 }
 $call65 = (_P_Random()|0);
 $and66 = $call65 & 3;
 $63 = $target$addr;
 $tics = ((($63)) + 96|0);
 $64 = HEAP32[$tics>>2]|0;
 $sub67 = (($64) - ($and66))|0;
 HEAP32[$tics>>2] = $sub67;
 $65 = $target$addr;
 $tics68 = ((($65)) + 96|0);
 $66 = HEAP32[$tics68>>2]|0;
 $cmp69 = ($66|0)<(1);
 if ($cmp69) {
  $67 = $target$addr;
  $tics71 = ((($67)) + 96|0);
  HEAP32[$tics71>>2] = 1;
 }
 $68 = HEAP32[32169]|0;
 $cmp73 = ($68|0)==(9);
 if ($cmp73) {
  STACKTOP = sp;return;
 }
 $69 = $target$addr;
 $type76 = ((($69)) + 88|0);
 $70 = HEAP32[$type76>>2]|0;
 switch ($70|0) {
 case 1: case 23:  {
  $item = 63;
  break;
 }
 case 2:  {
  $item = 77;
  break;
 }
 case 10:  {
  $item = 73;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $71 = $target$addr;
 $x = ((($71)) + 12|0);
 $72 = HEAP32[$x>>2]|0;
 $73 = $target$addr;
 $y = ((($73)) + 16|0);
 $74 = HEAP32[$y>>2]|0;
 $75 = $item;
 $call79 = (_P_SpawnMobj($72,$74,-2147483648,$75)|0);
 $mo = $call79;
 $76 = $mo;
 $flags80 = ((($76)) + 104|0);
 $77 = HEAP32[$flags80>>2]|0;
 $or81 = $77 | 131072;
 HEAP32[$flags80>>2] = $or81;
 STACKTOP = sp;return;
}
function _P_DamageMobj($target,$inflictor,$source,$damage) {
 $target = $target|0;
 $inflictor = $inflictor|0;
 $source = $source|0;
 $damage = $damage|0;
 var $$old = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add101 = 0, $add115 = 0, $add46 = 0, $add50 = 0, $and = 0, $and131 = 0, $and16 = 0, $and38 = 0, $and4 = 0;
 var $and67 = 0, $ang = 0, $armorpoints = 0, $armorpoints86 = 0, $armorpoints89 = 0, $armortype = 0, $armortype76 = 0, $armortype87 = 0, $arrayidx = 0, $arrayidx110 = 0, $arrayidx155 = 0, $arrayidx47 = 0, $attacker = 0, $call = 0, $call125 = 0, $call37 = 0, $call44 = 0, $call48 = 0, $cheats = 0, $cmp = 0;
 var $cmp10 = 0, $cmp103 = 0, $cmp108 = 0, $cmp111 = 0, $cmp121 = 0, $cmp127 = 0, $cmp140 = 0, $cmp145 = 0, $cmp149 = 0, $cmp156 = 0, $cmp160 = 0, $cmp24 = 0, $cmp29 = 0, $cmp32 = 0, $cmp35 = 0, $cmp54 = 0, $cmp58 = 0, $cmp64 = 0, $cmp77 = 0, $cmp83 = 0;
 var $cmp96 = 0, $cond = 0, $conv = 0, $damage$addr = 0, $damagecount = 0, $damagecount102 = 0, $damagecount106 = 0, $div = 0, $div80 = 0, $div81 = 0, $flags = 0, $flags130 = 0, $flags134 = 0, $flags15 = 0, $flags3 = 0, $health = 0, $health118 = 0, $health120 = 0, $health31 = 0, $health57 = 0;
 var $health61 = 0, $health93 = 0, $health95 = 0, $health99 = 0, $inflictor$addr = 0, $info = 0, $info126 = 0, $info135 = 0, $info154 = 0, $info159 = 0, $info163 = 0, $mass = 0, $momx = 0, $momx45 = 0, $momy = 0, $momy49 = 0, $momz = 0, $mul = 0, $mul114 = 0, $mul28 = 0;
 var $mul41 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $painchance = 0, $painstate = 0, $player = 0, $player20 = 0, $player23 = 0, $player8 = 0, $powers = 0, $reactiontime = 0, $readyweapon = 0, $saved = 0, $seestate = 0, $seestate164 = 0, $shr = 0, $shr43 = 0, $source$addr = 0, $spawnstate = 0;
 var $special = 0, $state = 0, $sub = 0, $sub119 = 0, $sub62 = 0, $sub90 = 0, $sub91 = 0, $sub94 = 0, $subsector = 0, $target$addr = 0, $target152 = 0, $temp = 0, $threshold = 0, $threshold153 = 0, $thrust = 0, $tobool = 0, $tobool13 = 0, $tobool132 = 0, $tobool138 = 0, $tobool143 = 0;
 var $tobool143$old = 0, $tobool17 = 0, $tobool19 = 0, $tobool21 = 0, $tobool39 = 0, $tobool5 = 0, $tobool52 = 0, $tobool68 = 0, $tobool71 = 0, $tobool74 = 0, $tobool9 = 0, $type = 0, $type148 = 0, $x = 0, $x26 = 0, $y = 0, $y27 = 0, $z = 0, $z34 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $target$addr = $target;
 $inflictor$addr = $inflictor;
 $source$addr = $source;
 $damage$addr = $damage;
 $0 = $target$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $target$addr;
 $health = ((($2)) + 108|0);
 $3 = HEAP32[$health>>2]|0;
 $cmp = ($3|0)<=(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $4 = $target$addr;
 $flags3 = ((($4)) + 104|0);
 $5 = HEAP32[$flags3>>2]|0;
 $and4 = $5 & 16777216;
 $tobool5 = ($and4|0)!=(0);
 if ($tobool5) {
  $6 = $target$addr;
  $momz = ((($6)) + 80|0);
  HEAP32[$momz>>2] = 0;
  $7 = $target$addr;
  $momy = ((($7)) + 76|0);
  HEAP32[$momy>>2] = 0;
  $8 = $target$addr;
  $momx = ((($8)) + 72|0);
  HEAP32[$momx>>2] = 0;
 }
 $9 = $target$addr;
 $player8 = ((($9)) + 132|0);
 $10 = HEAP32[$player8>>2]|0;
 $player = $10;
 $11 = $player;
 $tobool9 = ($11|0)!=(0|0);
 $12 = HEAP32[99425]|0;
 $cmp10 = ($12|0)==(0);
 $or$cond = $tobool9 & $cmp10;
 if ($or$cond) {
  $13 = $damage$addr;
  $shr = $13 >> 1;
  $damage$addr = $shr;
 }
 $14 = $inflictor$addr;
 $tobool13 = ($14|0)!=(0|0);
 do {
  if ($tobool13) {
   $15 = $target$addr;
   $flags15 = ((($15)) + 104|0);
   $16 = HEAP32[$flags15>>2]|0;
   $and16 = $16 & 4096;
   $tobool17 = ($and16|0)!=(0);
   if (!($tobool17)) {
    $17 = $source$addr;
    $tobool19 = ($17|0)!=(0|0);
    if ($tobool19) {
     $18 = $source$addr;
     $player20 = ((($18)) + 132|0);
     $19 = HEAP32[$player20>>2]|0;
     $tobool21 = ($19|0)!=(0|0);
     if ($tobool21) {
      $20 = $source$addr;
      $player23 = ((($20)) + 132|0);
      $21 = HEAP32[$player23>>2]|0;
      $readyweapon = ((($21)) + 120|0);
      $22 = HEAP32[$readyweapon>>2]|0;
      $cmp24 = ($22|0)!=(7);
      if (!($cmp24)) {
       break;
      }
     }
    }
    $23 = $inflictor$addr;
    $x = ((($23)) + 12|0);
    $24 = HEAP32[$x>>2]|0;
    $25 = $inflictor$addr;
    $y = ((($25)) + 16|0);
    $26 = HEAP32[$y>>2]|0;
    $27 = $target$addr;
    $x26 = ((($27)) + 12|0);
    $28 = HEAP32[$x26>>2]|0;
    $29 = $target$addr;
    $y27 = ((($29)) + 16|0);
    $30 = HEAP32[$y27>>2]|0;
    $call = (_R_PointToAngle2($24,$26,$28,$30)|0);
    $ang = $call;
    $31 = $damage$addr;
    $mul = $31<<13;
    $mul28 = ($mul*100)|0;
    $32 = $target$addr;
    $info = ((($32)) + 92|0);
    $33 = HEAP32[$info>>2]|0;
    $mass = ((($33)) + 72|0);
    $34 = HEAP32[$mass>>2]|0;
    $div = (($mul28|0) / ($34|0))&-1;
    $thrust = $div;
    $35 = $damage$addr;
    $cmp29 = ($35|0)<(40);
    if ($cmp29) {
     $36 = $damage$addr;
     $37 = $target$addr;
     $health31 = ((($37)) + 108|0);
     $38 = HEAP32[$health31>>2]|0;
     $cmp32 = ($36|0)>($38|0);
     if ($cmp32) {
      $39 = $target$addr;
      $z = ((($39)) + 20|0);
      $40 = HEAP32[$z>>2]|0;
      $41 = $inflictor$addr;
      $z34 = ((($41)) + 20|0);
      $42 = HEAP32[$z34>>2]|0;
      $sub = (($40) - ($42))|0;
      $cmp35 = ($sub|0)>(4194304);
      if ($cmp35) {
       $call37 = (_P_Random()|0);
       $and38 = $call37 & 1;
       $tobool39 = ($and38|0)!=(0);
       if ($tobool39) {
        $43 = $ang;
        $add = (($43) + -2147483648)|0;
        $ang = $add;
        $44 = $thrust;
        $mul41 = $44<<2;
        $thrust = $mul41;
       }
      }
     }
    }
    $45 = $ang;
    $shr43 = $45 >>> 19;
    $ang = $shr43;
    $46 = $thrust;
    $47 = $ang;
    $arrayidx = ((82992) + ($47<<2)|0);
    $48 = HEAP32[$arrayidx>>2]|0;
    $call44 = (_FixedMul($46,$48)|0);
    $49 = $target$addr;
    $momx45 = ((($49)) + 72|0);
    $50 = HEAP32[$momx45>>2]|0;
    $add46 = (($50) + ($call44))|0;
    HEAP32[$momx45>>2] = $add46;
    $51 = $thrust;
    $52 = $ang;
    $arrayidx47 = (74800 + ($52<<2)|0);
    $53 = HEAP32[$arrayidx47>>2]|0;
    $call48 = (_FixedMul($51,$53)|0);
    $54 = $target$addr;
    $momy49 = ((($54)) + 76|0);
    $55 = HEAP32[$momy49>>2]|0;
    $add50 = (($55) + ($call48))|0;
    HEAP32[$momy49>>2] = $add50;
   }
  }
 } while(0);
 $56 = $player;
 $tobool52 = ($56|0)!=(0|0);
 if ($tobool52) {
  $57 = $target$addr;
  $subsector = ((($57)) + 52|0);
  $58 = HEAP32[$subsector>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $special = ((($59)) + 14|0);
  $60 = HEAP16[$special>>1]|0;
  $conv = $60 << 16 >> 16;
  $cmp54 = ($conv|0)==(11);
  if ($cmp54) {
   $61 = $damage$addr;
   $62 = $target$addr;
   $health57 = ((($62)) + 108|0);
   $63 = HEAP32[$health57>>2]|0;
   $cmp58 = ($61|0)>=($63|0);
   if ($cmp58) {
    $64 = $target$addr;
    $health61 = ((($64)) + 108|0);
    $65 = HEAP32[$health61>>2]|0;
    $sub62 = (($65) - 1)|0;
    $damage$addr = $sub62;
   }
  }
  $66 = $damage$addr;
  $cmp64 = ($66|0)<(1000);
  if ($cmp64) {
   $67 = $player;
   $cheats = ((($67)) + 204|0);
   $68 = HEAP32[$cheats>>2]|0;
   $and67 = $68 & 2;
   $tobool68 = ($and67|0)!=(0);
   if ($tobool68) {
    STACKTOP = sp;return;
   }
   $69 = $player;
   $powers = ((($69)) + 52|0);
   $70 = HEAP32[$powers>>2]|0;
   $tobool71 = ($70|0)!=(0);
   if ($tobool71) {
    STACKTOP = sp;return;
   }
  }
  $71 = $player;
  $armortype = ((($71)) + 48|0);
  $72 = HEAP32[$armortype>>2]|0;
  $tobool74 = ($72|0)!=(0);
  if ($tobool74) {
   $73 = $player;
   $armortype76 = ((($73)) + 48|0);
   $74 = HEAP32[$armortype76>>2]|0;
   $cmp77 = ($74|0)==(1);
   $75 = $damage$addr;
   if ($cmp77) {
    $div80 = (($75|0) / 3)&-1;
    $saved = $div80;
   } else {
    $div81 = (($75|0) / 2)&-1;
    $saved = $div81;
   }
   $76 = $player;
   $armorpoints = ((($76)) + 44|0);
   $77 = HEAP32[$armorpoints>>2]|0;
   $78 = $saved;
   $cmp83 = ($77|0)<=($78|0);
   if ($cmp83) {
    $79 = $player;
    $armorpoints86 = ((($79)) + 44|0);
    $80 = HEAP32[$armorpoints86>>2]|0;
    $saved = $80;
    $81 = $player;
    $armortype87 = ((($81)) + 48|0);
    HEAP32[$armortype87>>2] = 0;
   }
   $82 = $saved;
   $83 = $player;
   $armorpoints89 = ((($83)) + 44|0);
   $84 = HEAP32[$armorpoints89>>2]|0;
   $sub90 = (($84) - ($82))|0;
   HEAP32[$armorpoints89>>2] = $sub90;
   $85 = $saved;
   $86 = $damage$addr;
   $sub91 = (($86) - ($85))|0;
   $damage$addr = $sub91;
  }
  $87 = $damage$addr;
  $88 = $player;
  $health93 = ((($88)) + 40|0);
  $89 = HEAP32[$health93>>2]|0;
  $sub94 = (($89) - ($87))|0;
  HEAP32[$health93>>2] = $sub94;
  $90 = $player;
  $health95 = ((($90)) + 40|0);
  $91 = HEAP32[$health95>>2]|0;
  $cmp96 = ($91|0)<(0);
  if ($cmp96) {
   $92 = $player;
   $health99 = ((($92)) + 40|0);
   HEAP32[$health99>>2] = 0;
  }
  $93 = $source$addr;
  $94 = $player;
  $attacker = ((($94)) + 236|0);
  HEAP32[$attacker>>2] = $93;
  $95 = $damage$addr;
  $96 = $player;
  $damagecount = ((($96)) + 228|0);
  $97 = HEAP32[$damagecount>>2]|0;
  $add101 = (($97) + ($95))|0;
  HEAP32[$damagecount>>2] = $add101;
  $98 = $player;
  $damagecount102 = ((($98)) + 228|0);
  $99 = HEAP32[$damagecount102>>2]|0;
  $cmp103 = ($99|0)>(100);
  if ($cmp103) {
   $100 = $player;
   $damagecount106 = ((($100)) + 228|0);
   HEAP32[$damagecount106>>2] = 100;
  }
  $101 = $damage$addr;
  $cmp108 = ($101|0)<(100);
  $102 = $damage$addr;
  $cond = $cmp108 ? $102 : 100;
  $temp = $cond;
  $103 = $player;
  $104 = HEAP32[99415]|0;
  $arrayidx110 = (183056 + (($104*288)|0)|0);
  $cmp111 = ($103|0)==($arrayidx110|0);
  if ($cmp111) {
   $105 = $temp;
   $mul114 = $105<<1;
   $add115 = (40 + ($mul114))|0;
   _I_Tactile(40,10,$add115);
  }
 }
 $106 = $damage$addr;
 $107 = $target$addr;
 $health118 = ((($107)) + 108|0);
 $108 = HEAP32[$health118>>2]|0;
 $sub119 = (($108) - ($106))|0;
 HEAP32[$health118>>2] = $sub119;
 $109 = $target$addr;
 $health120 = ((($109)) + 108|0);
 $110 = HEAP32[$health120>>2]|0;
 $cmp121 = ($110|0)<=(0);
 if ($cmp121) {
  $111 = $source$addr;
  $112 = $target$addr;
  _P_KillMobj($111,$112);
  STACKTOP = sp;return;
 }
 $call125 = (_P_Random()|0);
 $113 = $target$addr;
 $info126 = ((($113)) + 92|0);
 $114 = HEAP32[$info126>>2]|0;
 $painchance = ((($114)) + 32|0);
 $115 = HEAP32[$painchance>>2]|0;
 $cmp127 = ($call125|0)<($115|0);
 if ($cmp127) {
  $116 = $target$addr;
  $flags130 = ((($116)) + 104|0);
  $117 = HEAP32[$flags130>>2]|0;
  $and131 = $117 & 16777216;
  $tobool132 = ($and131|0)!=(0);
  if (!($tobool132)) {
   $118 = $target$addr;
   $flags134 = ((($118)) + 104|0);
   $119 = HEAP32[$flags134>>2]|0;
   $or = $119 | 64;
   HEAP32[$flags134>>2] = $or;
   $120 = $target$addr;
   $121 = $target$addr;
   $info135 = ((($121)) + 92|0);
   $122 = HEAP32[$info135>>2]|0;
   $painstate = ((($122)) + 28|0);
   $123 = HEAP32[$painstate>>2]|0;
   (_P_SetMobjState($120,$123)|0);
  }
 }
 $124 = $target$addr;
 $reactiontime = ((($124)) + 124|0);
 HEAP32[$reactiontime>>2] = 0;
 $125 = $target$addr;
 $threshold = ((($125)) + 128|0);
 $126 = HEAP32[$threshold>>2]|0;
 $tobool138 = ($126|0)!=(0);
 if ($tobool138) {
  $127 = $target$addr;
  $type = ((($127)) + 88|0);
  $128 = HEAP32[$type>>2]|0;
  $cmp140 = ($128|0)==(3);
  $129 = $source$addr;
  $tobool143 = ($129|0)!=(0|0);
  $or$cond1 = $cmp140 & $tobool143;
  if (!($or$cond1)) {
   STACKTOP = sp;return;
  }
 } else {
  $$old = $source$addr;
  $tobool143$old = ($$old|0)!=(0|0);
  if (!($tobool143$old)) {
   STACKTOP = sp;return;
  }
 }
 $130 = $source$addr;
 $131 = $target$addr;
 $cmp145 = ($130|0)!=($131|0);
 if (!($cmp145)) {
  STACKTOP = sp;return;
 }
 $132 = $source$addr;
 $type148 = ((($132)) + 88|0);
 $133 = HEAP32[$type148>>2]|0;
 $cmp149 = ($133|0)!=(3);
 if (!($cmp149)) {
  STACKTOP = sp;return;
 }
 $134 = $source$addr;
 $135 = $target$addr;
 $target152 = ((($135)) + 120|0);
 HEAP32[$target152>>2] = $134;
 $136 = $target$addr;
 $threshold153 = ((($136)) + 128|0);
 HEAP32[$threshold153>>2] = 100;
 $137 = $target$addr;
 $state = ((($137)) + 100|0);
 $138 = HEAP32[$state>>2]|0;
 $139 = $target$addr;
 $info154 = ((($139)) + 92|0);
 $140 = HEAP32[$info154>>2]|0;
 $spawnstate = ((($140)) + 4|0);
 $141 = HEAP32[$spawnstate>>2]|0;
 $arrayidx155 = (3568 + (($141*28)|0)|0);
 $cmp156 = ($138|0)==($arrayidx155|0);
 if (!($cmp156)) {
  STACKTOP = sp;return;
 }
 $142 = $target$addr;
 $info159 = ((($142)) + 92|0);
 $143 = HEAP32[$info159>>2]|0;
 $seestate = ((($143)) + 12|0);
 $144 = HEAP32[$seestate>>2]|0;
 $cmp160 = ($144|0)!=(0);
 if (!($cmp160)) {
  STACKTOP = sp;return;
 }
 $145 = $target$addr;
 $146 = $target$addr;
 $info163 = ((($146)) + 92|0);
 $147 = HEAP32[$info163>>2]|0;
 $seestate164 = ((($147)) + 12|0);
 $148 = HEAP32[$seestate164>>2]|0;
 (_P_SetMobjState($145,$148)|0);
 STACKTOP = sp;return;
}
function _T_FireFlicker($flick) {
 $flick = $flick|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amount = 0, $and = 0, $call = 0;
 var $cmp = 0, $conv = 0, $conv4 = 0, $conv8 = 0, $count = 0, $count12 = 0, $dec = 0, $flick$addr = 0, $lightlevel = 0, $lightlevel10 = 0, $lightlevel6 = 0, $maxlight = 0, $minlight = 0, $minlight3 = 0, $mul = 0, $sector = 0, $sector5 = 0, $sector9 = 0, $sub = 0, $sub7 = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $flick$addr = $flick;
 $0 = $flick$addr;
 $count = ((($0)) + 16|0);
 $1 = HEAP32[$count>>2]|0;
 $dec = (($1) + -1)|0;
 HEAP32[$count>>2] = $dec;
 $tobool = ($dec|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $call = (_P_Random()|0);
 $and = $call & 3;
 $mul = $and<<4;
 $amount = $mul;
 $2 = $flick$addr;
 $sector = ((($2)) + 12|0);
 $3 = HEAP32[$sector>>2]|0;
 $lightlevel = ((($3)) + 12|0);
 $4 = HEAP16[$lightlevel>>1]|0;
 $conv = $4 << 16 >> 16;
 $5 = $amount;
 $sub = (($conv) - ($5))|0;
 $6 = $flick$addr;
 $minlight = ((($6)) + 24|0);
 $7 = HEAP32[$minlight>>2]|0;
 $cmp = ($sub|0)<($7|0);
 $8 = $flick$addr;
 if ($cmp) {
  $minlight3 = ((($8)) + 24|0);
  $9 = HEAP32[$minlight3>>2]|0;
  $conv4 = $9&65535;
  $10 = $flick$addr;
  $sector5 = ((($10)) + 12|0);
  $11 = HEAP32[$sector5>>2]|0;
  $lightlevel6 = ((($11)) + 12|0);
  HEAP16[$lightlevel6>>1] = $conv4;
 } else {
  $maxlight = ((($8)) + 20|0);
  $12 = HEAP32[$maxlight>>2]|0;
  $13 = $amount;
  $sub7 = (($12) - ($13))|0;
  $conv8 = $sub7&65535;
  $14 = $flick$addr;
  $sector9 = ((($14)) + 12|0);
  $15 = HEAP32[$sector9>>2]|0;
  $lightlevel10 = ((($15)) + 12|0);
  HEAP16[$lightlevel10>>1] = $conv8;
 }
 $16 = $flick$addr;
 $count12 = ((($16)) + 16|0);
 HEAP32[$count12>>2] = 4;
 STACKTOP = sp;return;
}
function _P_SpawnFireFlicker($sector) {
 $sector = $sector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv4 = 0, $count = 0, $flick = 0;
 var $function = 0, $lightlevel = 0, $lightlevel3 = 0, $maxlight = 0, $minlight = 0, $sector$addr = 0, $sector2 = 0, $special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sector$addr = $sector;
 $0 = $sector$addr;
 $special = ((($0)) + 14|0);
 HEAP16[$special>>1] = 0;
 $call = (_Z_Malloc(28,6,0)|0);
 $flick = $call;
 $1 = $flick;
 _P_AddThinker($1);
 $2 = $flick;
 $function = ((($2)) + 8|0);
 HEAP32[$function>>2] = 139;
 $3 = $sector$addr;
 $4 = $flick;
 $sector2 = ((($4)) + 12|0);
 HEAP32[$sector2>>2] = $3;
 $5 = $sector$addr;
 $lightlevel = ((($5)) + 12|0);
 $6 = HEAP16[$lightlevel>>1]|0;
 $conv = $6 << 16 >> 16;
 $7 = $flick;
 $maxlight = ((($7)) + 20|0);
 HEAP32[$maxlight>>2] = $conv;
 $8 = $sector$addr;
 $9 = $sector$addr;
 $lightlevel3 = ((($9)) + 12|0);
 $10 = HEAP16[$lightlevel3>>1]|0;
 $conv4 = $10 << 16 >> 16;
 $call5 = (_P_FindMinSurroundingLight($8,$conv4)|0);
 $add = (($call5) + 16)|0;
 $11 = $flick;
 $minlight = ((($11)) + 24|0);
 HEAP32[$minlight>>2] = $add;
 $12 = $flick;
 $count = ((($12)) + 16|0);
 HEAP32[$count>>2] = 4;
 STACKTOP = sp;return;
}
function _T_LightFlash($flash) {
 $flash = $flash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add13 = 0, $and = 0, $and12 = 0, $call = 0, $call11 = 0, $cmp = 0, $conv = 0, $conv3 = 0, $conv8 = 0, $count = 0, $count14 = 0, $count6 = 0, $dec = 0, $flash$addr = 0, $lightlevel = 0, $lightlevel10 = 0, $lightlevel5 = 0, $maxlight = 0, $maxlight7 = 0;
 var $maxtime = 0, $minlight = 0, $mintime = 0, $sector = 0, $sector4 = 0, $sector9 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $flash$addr = $flash;
 $0 = $flash$addr;
 $count = ((($0)) + 16|0);
 $1 = HEAP32[$count>>2]|0;
 $dec = (($1) + -1)|0;
 HEAP32[$count>>2] = $dec;
 $tobool = ($dec|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $2 = $flash$addr;
 $sector = ((($2)) + 12|0);
 $3 = HEAP32[$sector>>2]|0;
 $lightlevel = ((($3)) + 12|0);
 $4 = HEAP16[$lightlevel>>1]|0;
 $conv = $4 << 16 >> 16;
 $5 = $flash$addr;
 $maxlight = ((($5)) + 20|0);
 $6 = HEAP32[$maxlight>>2]|0;
 $cmp = ($conv|0)==($6|0);
 $7 = $flash$addr;
 if ($cmp) {
  $minlight = ((($7)) + 24|0);
  $8 = HEAP32[$minlight>>2]|0;
  $conv3 = $8&65535;
  $9 = $flash$addr;
  $sector4 = ((($9)) + 12|0);
  $10 = HEAP32[$sector4>>2]|0;
  $lightlevel5 = ((($10)) + 12|0);
  HEAP16[$lightlevel5>>1] = $conv3;
  $call = (_P_Random()|0);
  $11 = $flash$addr;
  $mintime = ((($11)) + 32|0);
  $12 = HEAP32[$mintime>>2]|0;
  $and = $call & $12;
  $add = (($and) + 1)|0;
  $13 = $flash$addr;
  $count6 = ((($13)) + 16|0);
  HEAP32[$count6>>2] = $add;
  STACKTOP = sp;return;
 } else {
  $maxlight7 = ((($7)) + 20|0);
  $14 = HEAP32[$maxlight7>>2]|0;
  $conv8 = $14&65535;
  $15 = $flash$addr;
  $sector9 = ((($15)) + 12|0);
  $16 = HEAP32[$sector9>>2]|0;
  $lightlevel10 = ((($16)) + 12|0);
  HEAP16[$lightlevel10>>1] = $conv8;
  $call11 = (_P_Random()|0);
  $17 = $flash$addr;
  $maxtime = ((($17)) + 28|0);
  $18 = HEAP32[$maxtime>>2]|0;
  $and12 = $call11 & $18;
  $add13 = (($and12) + 1)|0;
  $19 = $flash$addr;
  $count14 = ((($19)) + 16|0);
  HEAP32[$count14>>2] = $add13;
  STACKTOP = sp;return;
 }
}
function _P_SpawnLightFlash($sector) {
 $sector = $sector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $call = 0;
 var $call5 = 0, $call6 = 0, $conv = 0, $conv4 = 0, $count = 0, $flash = 0, $function = 0, $lightlevel = 0, $lightlevel3 = 0, $maxlight = 0, $maxtime = 0, $maxtime7 = 0, $minlight = 0, $mintime = 0, $sector$addr = 0, $sector2 = 0, $special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sector$addr = $sector;
 $0 = $sector$addr;
 $special = ((($0)) + 14|0);
 HEAP16[$special>>1] = 0;
 $call = (_Z_Malloc(36,6,0)|0);
 $flash = $call;
 $1 = $flash;
 _P_AddThinker($1);
 $2 = $flash;
 $function = ((($2)) + 8|0);
 HEAP32[$function>>2] = 140;
 $3 = $sector$addr;
 $4 = $flash;
 $sector2 = ((($4)) + 12|0);
 HEAP32[$sector2>>2] = $3;
 $5 = $sector$addr;
 $lightlevel = ((($5)) + 12|0);
 $6 = HEAP16[$lightlevel>>1]|0;
 $conv = $6 << 16 >> 16;
 $7 = $flash;
 $maxlight = ((($7)) + 20|0);
 HEAP32[$maxlight>>2] = $conv;
 $8 = $sector$addr;
 $9 = $sector$addr;
 $lightlevel3 = ((($9)) + 12|0);
 $10 = HEAP16[$lightlevel3>>1]|0;
 $conv4 = $10 << 16 >> 16;
 $call5 = (_P_FindMinSurroundingLight($8,$conv4)|0);
 $11 = $flash;
 $minlight = ((($11)) + 24|0);
 HEAP32[$minlight>>2] = $call5;
 $12 = $flash;
 $maxtime = ((($12)) + 28|0);
 HEAP32[$maxtime>>2] = 64;
 $13 = $flash;
 $mintime = ((($13)) + 32|0);
 HEAP32[$mintime>>2] = 7;
 $call6 = (_P_Random()|0);
 $14 = $flash;
 $maxtime7 = ((($14)) + 28|0);
 $15 = HEAP32[$maxtime7>>2]|0;
 $and = $call6 & $15;
 $add = (($and) + 1)|0;
 $16 = $flash;
 $count = ((($16)) + 16|0);
 HEAP32[$count>>2] = $add;
 STACKTOP = sp;return;
}
function _T_StrobeFlash($flash) {
 $flash = $flash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $brighttime = 0, $cmp = 0, $conv = 0, $conv3 = 0, $conv8 = 0, $count = 0, $count11 = 0, $count6 = 0, $darktime = 0, $dec = 0, $flash$addr = 0, $lightlevel = 0, $lightlevel10 = 0, $lightlevel5 = 0, $maxlight = 0, $minlight = 0, $minlight7 = 0, $sector = 0, $sector4 = 0, $sector9 = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $flash$addr = $flash;
 $0 = $flash$addr;
 $count = ((($0)) + 16|0);
 $1 = HEAP32[$count>>2]|0;
 $dec = (($1) + -1)|0;
 HEAP32[$count>>2] = $dec;
 $tobool = ($dec|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $2 = $flash$addr;
 $sector = ((($2)) + 12|0);
 $3 = HEAP32[$sector>>2]|0;
 $lightlevel = ((($3)) + 12|0);
 $4 = HEAP16[$lightlevel>>1]|0;
 $conv = $4 << 16 >> 16;
 $5 = $flash$addr;
 $minlight = ((($5)) + 20|0);
 $6 = HEAP32[$minlight>>2]|0;
 $cmp = ($conv|0)==($6|0);
 $7 = $flash$addr;
 if ($cmp) {
  $maxlight = ((($7)) + 24|0);
  $8 = HEAP32[$maxlight>>2]|0;
  $conv3 = $8&65535;
  $9 = $flash$addr;
  $sector4 = ((($9)) + 12|0);
  $10 = HEAP32[$sector4>>2]|0;
  $lightlevel5 = ((($10)) + 12|0);
  HEAP16[$lightlevel5>>1] = $conv3;
  $11 = $flash$addr;
  $brighttime = ((($11)) + 32|0);
  $12 = HEAP32[$brighttime>>2]|0;
  $13 = $flash$addr;
  $count6 = ((($13)) + 16|0);
  HEAP32[$count6>>2] = $12;
  STACKTOP = sp;return;
 } else {
  $minlight7 = ((($7)) + 20|0);
  $14 = HEAP32[$minlight7>>2]|0;
  $conv8 = $14&65535;
  $15 = $flash$addr;
  $sector9 = ((($15)) + 12|0);
  $16 = HEAP32[$sector9>>2]|0;
  $lightlevel10 = ((($16)) + 12|0);
  HEAP16[$lightlevel10>>1] = $conv8;
  $17 = $flash$addr;
  $darktime = ((($17)) + 28|0);
  $18 = HEAP32[$darktime>>2]|0;
  $19 = $flash$addr;
  $count11 = ((($19)) + 16|0);
  HEAP32[$count11>>2] = $18;
  STACKTOP = sp;return;
 }
}
function _P_SpawnStrobeFlash($sector,$fastOrSlow,$inSync) {
 $sector = $sector|0;
 $fastOrSlow = $fastOrSlow|0;
 $inSync = $inSync|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $brighttime = 0, $call = 0, $call11 = 0, $call5 = 0, $cmp = 0, $conv = 0, $conv4 = 0, $count = 0, $count12 = 0, $darktime = 0, $fastOrSlow$addr = 0, $flash = 0, $function = 0, $inSync$addr = 0, $lightlevel = 0;
 var $lightlevel3 = 0, $maxlight = 0, $maxlight7 = 0, $minlight = 0, $minlight6 = 0, $minlight9 = 0, $sector$addr = 0, $sector1 = 0, $special = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sector$addr = $sector;
 $fastOrSlow$addr = $fastOrSlow;
 $inSync$addr = $inSync;
 $call = (_Z_Malloc(36,6,0)|0);
 $flash = $call;
 $0 = $flash;
 _P_AddThinker($0);
 $1 = $sector$addr;
 $2 = $flash;
 $sector1 = ((($2)) + 12|0);
 HEAP32[$sector1>>2] = $1;
 $3 = $fastOrSlow$addr;
 $4 = $flash;
 $darktime = ((($4)) + 28|0);
 HEAP32[$darktime>>2] = $3;
 $5 = $flash;
 $brighttime = ((($5)) + 32|0);
 HEAP32[$brighttime>>2] = 5;
 $6 = $flash;
 $function = ((($6)) + 8|0);
 HEAP32[$function>>2] = 141;
 $7 = $sector$addr;
 $lightlevel = ((($7)) + 12|0);
 $8 = HEAP16[$lightlevel>>1]|0;
 $conv = $8 << 16 >> 16;
 $9 = $flash;
 $maxlight = ((($9)) + 24|0);
 HEAP32[$maxlight>>2] = $conv;
 $10 = $sector$addr;
 $11 = $sector$addr;
 $lightlevel3 = ((($11)) + 12|0);
 $12 = HEAP16[$lightlevel3>>1]|0;
 $conv4 = $12 << 16 >> 16;
 $call5 = (_P_FindMinSurroundingLight($10,$conv4)|0);
 $13 = $flash;
 $minlight = ((($13)) + 20|0);
 HEAP32[$minlight>>2] = $call5;
 $14 = $flash;
 $minlight6 = ((($14)) + 20|0);
 $15 = HEAP32[$minlight6>>2]|0;
 $16 = $flash;
 $maxlight7 = ((($16)) + 24|0);
 $17 = HEAP32[$maxlight7>>2]|0;
 $cmp = ($15|0)==($17|0);
 if ($cmp) {
  $18 = $flash;
  $minlight9 = ((($18)) + 20|0);
  HEAP32[$minlight9>>2] = 0;
 }
 $19 = $sector$addr;
 $special = ((($19)) + 14|0);
 HEAP16[$special>>1] = 0;
 $20 = $inSync$addr;
 $tobool = ($20|0)!=(0);
 if ($tobool) {
  $22 = $flash;
  $count12 = ((($22)) + 16|0);
  HEAP32[$count12>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $call11 = (_P_Random()|0);
  $and = $call11 & 7;
  $add = (($and) + 1)|0;
  $21 = $flash;
  $count = ((($21)) + 16|0);
  HEAP32[$count>>2] = $add;
  STACKTOP = sp;return;
 }
}
function _EV_StartLightStrobing($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $line$addr = 0, $sec = 0, $secnum = 0, $specialdata = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $line$addr = $line;
 $secnum = -1;
 while(1) {
  $0 = $line$addr;
  $1 = $secnum;
  $call = (_P_FindSectorFromLineTag($0,$1)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99850]|0;
  $3 = $secnum;
  $arrayidx = (($2) + (($3*88)|0)|0);
  $sec = $arrayidx;
  $4 = $sec;
  $specialdata = ((($4)) + 76|0);
  $5 = HEAP32[$specialdata>>2]|0;
  $tobool = ($5|0)!=(0|0);
  if ($tobool) {
   continue;
  } else {
   $6 = $sec;
   _P_SpawnStrobeFlash($6,35,0);
   continue;
  }
 }
 STACKTOP = sp;return;
}
function _EV_TurnTagLightsOff($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp3 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv2 = 0;
 var $conv5 = 0, $i = 0, $inc = 0, $inc23 = 0, $incdec$ptr = 0, $j = 0, $lightlevel = 0, $lightlevel11 = 0, $lightlevel16 = 0, $lightlevel20 = 0, $line$addr = 0, $linecount = 0, $lines = 0, $min = 0, $sector = 0, $tag = 0, $tag1 = 0, $templine = 0, $tobool = 0, $tsec = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $0 = HEAP32[99850]|0;
 $sector = $0;
 $j = 0;
 while(1) {
  $1 = $j;
  $2 = HEAP32[99849]|0;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sector;
  $tag = ((($3)) + 16|0);
  $4 = HEAP16[$tag>>1]|0;
  $conv = $4 << 16 >> 16;
  $5 = $line$addr;
  $tag1 = ((($5)) + 20|0);
  $6 = HEAP16[$tag1>>1]|0;
  $conv2 = $6 << 16 >> 16;
  $cmp3 = ($conv|0)==($conv2|0);
  if ($cmp3) {
   $7 = $sector;
   $lightlevel = ((($7)) + 12|0);
   $8 = HEAP16[$lightlevel>>1]|0;
   $conv5 = $8 << 16 >> 16;
   $min = $conv5;
   $i = 0;
   while(1) {
    $9 = $i;
    $10 = $sector;
    $linecount = ((($10)) + 80|0);
    $11 = HEAP32[$linecount>>2]|0;
    $cmp7 = ($9|0)<($11|0);
    if (!($cmp7)) {
     break;
    }
    $12 = $sector;
    $lines = ((($12)) + 84|0);
    $13 = HEAP32[$lines>>2]|0;
    $14 = $i;
    $arrayidx = (($13) + ($14<<2)|0);
    $15 = HEAP32[$arrayidx>>2]|0;
    $templine = $15;
    $16 = $templine;
    $17 = $sector;
    $call = (_getNextSector($16,$17)|0);
    $tsec = $call;
    $18 = $tsec;
    $tobool = ($18|0)!=(0|0);
    if ($tobool) {
     $19 = $tsec;
     $lightlevel11 = ((($19)) + 12|0);
     $20 = HEAP16[$lightlevel11>>1]|0;
     $conv12 = $20 << 16 >> 16;
     $21 = $min;
     $cmp13 = ($conv12|0)<($21|0);
     if ($cmp13) {
      $22 = $tsec;
      $lightlevel16 = ((($22)) + 12|0);
      $23 = HEAP16[$lightlevel16>>1]|0;
      $conv17 = $23 << 16 >> 16;
      $min = $conv17;
     }
    }
    $24 = $i;
    $inc = (($24) + 1)|0;
    $i = $inc;
   }
   $25 = $min;
   $conv19 = $25&65535;
   $26 = $sector;
   $lightlevel20 = ((($26)) + 12|0);
   HEAP16[$lightlevel20>>1] = $conv19;
  }
  $27 = $j;
  $inc23 = (($27) + 1)|0;
  $j = $inc23;
  $28 = $sector;
  $incdec$ptr = ((($28)) + 88|0);
  $sector = $incdec$ptr;
 }
 STACKTOP = sp;return;
}
function _EV_LightTurnOn($line,$bright) {
 $line = $line|0;
 $bright = $bright|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bright$addr = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp3 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv2 = 0, $conv20 = 0;
 var $i = 0, $inc = 0, $inc24 = 0, $incdec$ptr = 0, $j = 0, $lightlevel = 0, $lightlevel16 = 0, $lightlevel21 = 0, $line$addr = 0, $linecount = 0, $lines = 0, $sector = 0, $tag = 0, $tag1 = 0, $temp = 0, $templine = 0, $tobool = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $bright$addr = $bright;
 $0 = HEAP32[99850]|0;
 $sector = $0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[99849]|0;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sector;
  $tag = ((($3)) + 16|0);
  $4 = HEAP16[$tag>>1]|0;
  $conv = $4 << 16 >> 16;
  $5 = $line$addr;
  $tag1 = ((($5)) + 20|0);
  $6 = HEAP16[$tag1>>1]|0;
  $conv2 = $6 << 16 >> 16;
  $cmp3 = ($conv|0)==($conv2|0);
  if ($cmp3) {
   $7 = $bright$addr;
   $tobool = ($7|0)!=(0);
   L6: do {
    if (!($tobool)) {
     $j = 0;
     while(1) {
      $8 = $j;
      $9 = $sector;
      $linecount = ((($9)) + 80|0);
      $10 = HEAP32[$linecount>>2]|0;
      $cmp7 = ($8|0)<($10|0);
      if (!($cmp7)) {
       break L6;
      }
      $11 = $sector;
      $lines = ((($11)) + 84|0);
      $12 = HEAP32[$lines>>2]|0;
      $13 = $j;
      $arrayidx = (($12) + ($13<<2)|0);
      $14 = HEAP32[$arrayidx>>2]|0;
      $templine = $14;
      $15 = $templine;
      $16 = $sector;
      $call = (_getNextSector($15,$16)|0);
      $temp = $call;
      $17 = $temp;
      $tobool10 = ($17|0)!=(0|0);
      if ($tobool10) {
       $18 = $temp;
       $lightlevel = ((($18)) + 12|0);
       $19 = HEAP16[$lightlevel>>1]|0;
       $conv12 = $19 << 16 >> 16;
       $20 = $bright$addr;
       $cmp13 = ($conv12|0)>($20|0);
       if ($cmp13) {
        $21 = $temp;
        $lightlevel16 = ((($21)) + 12|0);
        $22 = HEAP16[$lightlevel16>>1]|0;
        $conv17 = $22 << 16 >> 16;
        $bright$addr = $conv17;
       }
      }
      $23 = $j;
      $inc = (($23) + 1)|0;
      $j = $inc;
     }
    }
   } while(0);
   $24 = $bright$addr;
   $conv20 = $24&65535;
   $25 = $sector;
   $lightlevel21 = ((($25)) + 12|0);
   HEAP16[$lightlevel21>>1] = $conv20;
  }
  $26 = $i;
  $inc24 = (($26) + 1)|0;
  $i = $inc24;
  $27 = $sector;
  $incdec$ptr = ((($27)) + 88|0);
  $sector = $incdec$ptr;
 }
 STACKTOP = sp;return;
}
function _T_Glow($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add15 = 0, $cmp = 0, $cmp20 = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv16 = 0, $conv19 = 0, $conv25 = 0, $conv27 = 0, $conv4 = 0, $conv8 = 0, $conv9 = 0;
 var $direction = 0, $direction10 = 0, $direction28 = 0, $g$addr = 0, $lightlevel = 0, $lightlevel13 = 0, $lightlevel18 = 0, $lightlevel24 = 0, $lightlevel3 = 0, $lightlevel7 = 0, $maxlight = 0, $minlight = 0, $sector = 0, $sector12 = 0, $sector17 = 0, $sector2 = 0, $sector23 = 0, $sector6 = 0, $sub = 0, $sub26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $g$addr = $g;
 $0 = $g$addr;
 $direction = ((($0)) + 24|0);
 $1 = HEAP32[$direction>>2]|0;
 switch ($1|0) {
 case -1:  {
  $2 = $g$addr;
  $sector = ((($2)) + 12|0);
  $3 = HEAP32[$sector>>2]|0;
  $lightlevel = ((($3)) + 12|0);
  $4 = HEAP16[$lightlevel>>1]|0;
  $conv = $4 << 16 >> 16;
  $sub = (($conv) - 8)|0;
  $conv1 = $sub&65535;
  HEAP16[$lightlevel>>1] = $conv1;
  $5 = $g$addr;
  $sector2 = ((($5)) + 12|0);
  $6 = HEAP32[$sector2>>2]|0;
  $lightlevel3 = ((($6)) + 12|0);
  $7 = HEAP16[$lightlevel3>>1]|0;
  $conv4 = $7 << 16 >> 16;
  $8 = $g$addr;
  $minlight = ((($8)) + 16|0);
  $9 = HEAP32[$minlight>>2]|0;
  $cmp = ($conv4|0)<=($9|0);
  if (!($cmp)) {
   STACKTOP = sp;return;
  }
  $10 = $g$addr;
  $sector6 = ((($10)) + 12|0);
  $11 = HEAP32[$sector6>>2]|0;
  $lightlevel7 = ((($11)) + 12|0);
  $12 = HEAP16[$lightlevel7>>1]|0;
  $conv8 = $12 << 16 >> 16;
  $add = (($conv8) + 8)|0;
  $conv9 = $add&65535;
  HEAP16[$lightlevel7>>1] = $conv9;
  $13 = $g$addr;
  $direction10 = ((($13)) + 24|0);
  HEAP32[$direction10>>2] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $14 = $g$addr;
  $sector12 = ((($14)) + 12|0);
  $15 = HEAP32[$sector12>>2]|0;
  $lightlevel13 = ((($15)) + 12|0);
  $16 = HEAP16[$lightlevel13>>1]|0;
  $conv14 = $16 << 16 >> 16;
  $add15 = (($conv14) + 8)|0;
  $conv16 = $add15&65535;
  HEAP16[$lightlevel13>>1] = $conv16;
  $17 = $g$addr;
  $sector17 = ((($17)) + 12|0);
  $18 = HEAP32[$sector17>>2]|0;
  $lightlevel18 = ((($18)) + 12|0);
  $19 = HEAP16[$lightlevel18>>1]|0;
  $conv19 = $19 << 16 >> 16;
  $20 = $g$addr;
  $maxlight = ((($20)) + 20|0);
  $21 = HEAP32[$maxlight>>2]|0;
  $cmp20 = ($conv19|0)>=($21|0);
  if (!($cmp20)) {
   STACKTOP = sp;return;
  }
  $22 = $g$addr;
  $sector23 = ((($22)) + 12|0);
  $23 = HEAP32[$sector23>>2]|0;
  $lightlevel24 = ((($23)) + 12|0);
  $24 = HEAP16[$lightlevel24>>1]|0;
  $conv25 = $24 << 16 >> 16;
  $sub26 = (($conv25) - 8)|0;
  $conv27 = $sub26&65535;
  HEAP16[$lightlevel24>>1] = $conv27;
  $25 = $g$addr;
  $direction28 = ((($25)) + 24|0);
  HEAP32[$direction28>>2] = -1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _P_SpawnGlowingLight($sector) {
 $sector = $sector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $conv = 0, $conv4 = 0, $direction = 0, $function = 0, $g = 0;
 var $lightlevel = 0, $lightlevel3 = 0, $maxlight = 0, $minlight = 0, $sector$addr = 0, $sector1 = 0, $special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sector$addr = $sector;
 $call = (_Z_Malloc(28,6,0)|0);
 $g = $call;
 $0 = $g;
 _P_AddThinker($0);
 $1 = $sector$addr;
 $2 = $g;
 $sector1 = ((($2)) + 12|0);
 HEAP32[$sector1>>2] = $1;
 $3 = $sector$addr;
 $4 = $sector$addr;
 $lightlevel = ((($4)) + 12|0);
 $5 = HEAP16[$lightlevel>>1]|0;
 $conv = $5 << 16 >> 16;
 $call2 = (_P_FindMinSurroundingLight($3,$conv)|0);
 $6 = $g;
 $minlight = ((($6)) + 16|0);
 HEAP32[$minlight>>2] = $call2;
 $7 = $sector$addr;
 $lightlevel3 = ((($7)) + 12|0);
 $8 = HEAP16[$lightlevel3>>1]|0;
 $conv4 = $8 << 16 >> 16;
 $9 = $g;
 $maxlight = ((($9)) + 20|0);
 HEAP32[$maxlight>>2] = $conv4;
 $10 = $g;
 $function = ((($10)) + 8|0);
 HEAP32[$function>>2] = 142;
 $11 = $g;
 $direction = ((($11)) + 24|0);
 HEAP32[$direction>>2] = -1;
 $12 = $sector$addr;
 $special = ((($12)) + 14|0);
 HEAP16[$special>>1] = 0;
 STACKTOP = sp;return;
}
function _PIT_StompThing($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $blockdist = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp11 = 0, $cmp4 = 0, $cmp7 = 0, $flags = 0, $or$cond = 0, $player = 0, $radius = 0, $radius1 = 0, $retval = 0, $sub = 0, $sub2 = 0;
 var $thing$addr = 0, $tobool = 0, $tobool10 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $retval = 1;
  $22 = $retval;
  STACKTOP = sp;return ($22|0);
 }
 $2 = $thing$addr;
 $radius = ((($2)) + 64|0);
 $3 = HEAP32[$radius>>2]|0;
 $4 = HEAP32[99754]|0;
 $radius1 = ((($4)) + 64|0);
 $5 = HEAP32[$radius1>>2]|0;
 $add = (($3) + ($5))|0;
 $blockdist = $add;
 $6 = $thing$addr;
 $x = ((($6)) + 12|0);
 $7 = HEAP32[$x>>2]|0;
 $8 = HEAP32[99755]|0;
 $sub = (($7) - ($8))|0;
 $call = (Math_abs(($sub|0))|0);
 $9 = $blockdist;
 $cmp = ($call|0)>=($9|0);
 if (!($cmp)) {
  $10 = $thing$addr;
  $y = ((($10)) + 16|0);
  $11 = HEAP32[$y>>2]|0;
  $12 = HEAP32[99756]|0;
  $sub2 = (($11) - ($12))|0;
  $call3 = (Math_abs(($sub2|0))|0);
  $13 = $blockdist;
  $cmp4 = ($call3|0)>=($13|0);
  if (!($cmp4)) {
   $14 = $thing$addr;
   $15 = HEAP32[99754]|0;
   $cmp7 = ($14|0)==($15|0);
   if ($cmp7) {
    $retval = 1;
    $22 = $retval;
    STACKTOP = sp;return ($22|0);
   }
   $16 = HEAP32[99754]|0;
   $player = ((($16)) + 132|0);
   $17 = HEAP32[$player>>2]|0;
   $tobool10 = ($17|0)==(0|0);
   $18 = HEAP32[99423]|0;
   $cmp11 = ($18|0)!=(30);
   $or$cond = $tobool10 & $cmp11;
   if ($or$cond) {
    $retval = 0;
    $22 = $retval;
    STACKTOP = sp;return ($22|0);
   } else {
    $19 = $thing$addr;
    $20 = HEAP32[99754]|0;
    $21 = HEAP32[99754]|0;
    _P_DamageMobj($19,$20,$21,10000);
    $retval = 1;
    $22 = $retval;
    STACKTOP = sp;return ($22|0);
   }
  }
 }
 $retval = 1;
 $22 = $retval;
 STACKTOP = sp;return ($22|0);
}
function _P_TeleportMove($thing,$x,$y) {
 $thing = $thing|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add16 = 0, $add3 = 0, $bx = 0, $by = 0;
 var $call = 0, $call21 = 0, $ceilingheight = 0, $ceilingz = 0, $cmp = 0, $cmp19 = 0, $flags = 0, $floorz = 0, $inc = 0, $inc22 = 0, $inc24 = 0, $newsubsec = 0, $radius = 0, $radius1 = 0, $radius2 = 0, $radius4 = 0, $retval = 0, $shr = 0, $shr11 = 0, $shr14 = 0;
 var $shr17 = 0, $sub = 0, $sub12 = 0, $sub13 = 0, $sub15 = 0, $sub5 = 0, $sub7 = 0, $sub8 = 0, $sub9 = 0, $thing$addr = 0, $tobool = 0, $x$addr = 0, $x26 = 0, $xh = 0, $xl = 0, $y$addr = 0, $y27 = 0, $yh = 0, $yl = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $thing$addr = $thing;
 $x$addr = $x;
 $y$addr = $y;
 $0 = $thing$addr;
 HEAP32[99754] = $0;
 $1 = $thing$addr;
 $flags = ((($1)) + 104|0);
 $2 = HEAP32[$flags>>2]|0;
 HEAP32[99757] = $2;
 $3 = $x$addr;
 HEAP32[99755] = $3;
 $4 = $y$addr;
 HEAP32[99756] = $4;
 $5 = $y$addr;
 $6 = HEAP32[99754]|0;
 $radius = ((($6)) + 64|0);
 $7 = HEAP32[$radius>>2]|0;
 $add = (($5) + ($7))|0;
 HEAP32[46912] = $add;
 $8 = $y$addr;
 $9 = HEAP32[99754]|0;
 $radius1 = ((($9)) + 64|0);
 $10 = HEAP32[$radius1>>2]|0;
 $sub = (($8) - ($10))|0;
 HEAP32[(187652)>>2] = $sub;
 $11 = $x$addr;
 $12 = HEAP32[99754]|0;
 $radius2 = ((($12)) + 64|0);
 $13 = HEAP32[$radius2>>2]|0;
 $add3 = (($11) + ($13))|0;
 HEAP32[(187660)>>2] = $add3;
 $14 = $x$addr;
 $15 = HEAP32[99754]|0;
 $radius4 = ((($15)) + 64|0);
 $16 = HEAP32[$radius4>>2]|0;
 $sub5 = (($14) - ($16))|0;
 HEAP32[(187656)>>2] = $sub5;
 $17 = $x$addr;
 $18 = $y$addr;
 $call = (_R_PointInSubsector($17,$18)|0);
 $newsubsec = $call;
 HEAP32[99758] = 0;
 $19 = $newsubsec;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[99759] = $21;
 HEAP32[99760] = $21;
 $22 = $newsubsec;
 $23 = HEAP32[$22>>2]|0;
 $ceilingheight = ((($23)) + 4|0);
 $24 = HEAP32[$ceilingheight>>2]|0;
 HEAP32[99761] = $24;
 $25 = HEAP32[32346]|0;
 $inc = (($25) + 1)|0;
 HEAP32[32346] = $inc;
 HEAP32[99762] = 0;
 $26 = HEAP32[(187656)>>2]|0;
 $27 = HEAP32[99856]|0;
 $sub7 = (($26) - ($27))|0;
 $sub8 = (($sub7) - 2097152)|0;
 $shr = $sub8 >> 23;
 $xl = $shr;
 $28 = HEAP32[(187660)>>2]|0;
 $29 = HEAP32[99856]|0;
 $sub9 = (($28) - ($29))|0;
 $add10 = (($sub9) + 2097152)|0;
 $shr11 = $add10 >> 23;
 $xh = $shr11;
 $30 = HEAP32[(187652)>>2]|0;
 $31 = HEAP32[99857]|0;
 $sub12 = (($30) - ($31))|0;
 $sub13 = (($sub12) - 2097152)|0;
 $shr14 = $sub13 >> 23;
 $yl = $shr14;
 $32 = HEAP32[46912]|0;
 $33 = HEAP32[99857]|0;
 $sub15 = (($32) - ($33))|0;
 $add16 = (($sub15) + 2097152)|0;
 $shr17 = $add16 >> 23;
 $yh = $shr17;
 $34 = $xl;
 $bx = $34;
 L1: while(1) {
  $35 = $bx;
  $36 = $xh;
  $cmp = ($35|0)<=($36|0);
  if (!($cmp)) {
   label = 9;
   break;
  }
  $37 = $yl;
  $by = $37;
  while(1) {
   $38 = $by;
   $39 = $yh;
   $cmp19 = ($38|0)<=($39|0);
   $40 = $bx;
   if (!($cmp19)) {
    break;
   }
   $41 = $by;
   $call21 = (_P_BlockThingsIterator($40,$41,143)|0);
   $tobool = ($call21|0)!=(0);
   if (!($tobool)) {
    label = 6;
    break L1;
   }
   $42 = $by;
   $inc22 = (($42) + 1)|0;
   $by = $inc22;
  }
  $inc24 = (($40) + 1)|0;
  $bx = $inc24;
 }
 if ((label|0) == 6) {
  $retval = 0;
  $53 = $retval;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 9) {
  $43 = $thing$addr;
  _P_UnsetThingPosition($43);
  $44 = HEAP32[99760]|0;
  $45 = $thing$addr;
  $floorz = ((($45)) + 56|0);
  HEAP32[$floorz>>2] = $44;
  $46 = HEAP32[99761]|0;
  $47 = $thing$addr;
  $ceilingz = ((($47)) + 60|0);
  HEAP32[$ceilingz>>2] = $46;
  $48 = $x$addr;
  $49 = $thing$addr;
  $x26 = ((($49)) + 12|0);
  HEAP32[$x26>>2] = $48;
  $50 = $y$addr;
  $51 = $thing$addr;
  $y27 = ((($51)) + 16|0);
  HEAP32[$y27>>2] = $50;
  $52 = $thing$addr;
  _P_SetThingPosition($52);
  $retval = 1;
  $53 = $retval;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _PIT_CheckLine($ld) {
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and = 0, $and20 = 0, $and27 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx46 = 0, $arrayidx6 = 0, $backsector = 0, $bbox = 0, $bbox1 = 0, $bbox5 = 0, $bbox9 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp12 = 0, $cmp3 = 0, $cmp32 = 0;
 var $cmp36 = 0, $cmp40 = 0, $cmp47 = 0, $cmp7 = 0, $conv = 0, $conv26 = 0, $flags = 0, $flags19 = 0, $flags25 = 0, $inc = 0, $ld$addr = 0, $player = 0, $retval = 0, $special = 0, $tobool = 0, $tobool17 = 0, $tobool21 = 0, $tobool24 = 0, $tobool28 = 0, $tobool44 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ld$addr = $ld;
 $0 = HEAP32[(187660)>>2]|0;
 $1 = $ld$addr;
 $bbox = ((($1)) + 28|0);
 $arrayidx = ((($bbox)) + 8|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($0|0)<=($2|0);
 if (!($cmp)) {
  $3 = HEAP32[(187656)>>2]|0;
  $4 = $ld$addr;
  $bbox1 = ((($4)) + 28|0);
  $arrayidx2 = ((($bbox1)) + 12|0);
  $5 = HEAP32[$arrayidx2>>2]|0;
  $cmp3 = ($3|0)>=($5|0);
  if (!($cmp3)) {
   $6 = HEAP32[46912]|0;
   $7 = $ld$addr;
   $bbox5 = ((($7)) + 28|0);
   $arrayidx6 = ((($bbox5)) + 4|0);
   $8 = HEAP32[$arrayidx6>>2]|0;
   $cmp7 = ($6|0)<=($8|0);
   if (!($cmp7)) {
    $9 = HEAP32[(187652)>>2]|0;
    $10 = $ld$addr;
    $bbox9 = ((($10)) + 28|0);
    $11 = HEAP32[$bbox9>>2]|0;
    $cmp11 = ($9|0)>=($11|0);
    if (!($cmp11)) {
     $12 = $ld$addr;
     $call = (_P_BoxOnLineSide(187648,$12)|0);
     $cmp12 = ($call|0)!=(-1);
     if ($cmp12) {
      $retval = 1;
      $41 = $retval;
      STACKTOP = sp;return ($41|0);
     }
     $13 = $ld$addr;
     $backsector = ((($13)) + 52|0);
     $14 = HEAP32[$backsector>>2]|0;
     $tobool = ($14|0)!=(0|0);
     if (!($tobool)) {
      $retval = 0;
      $41 = $retval;
      STACKTOP = sp;return ($41|0);
     }
     $15 = HEAP32[99754]|0;
     $flags = ((($15)) + 104|0);
     $16 = HEAP32[$flags>>2]|0;
     $and = $16 & 65536;
     $tobool17 = ($and|0)!=(0);
     if (!($tobool17)) {
      $17 = $ld$addr;
      $flags19 = ((($17)) + 16|0);
      $18 = HEAP16[$flags19>>1]|0;
      $conv = $18 << 16 >> 16;
      $and20 = $conv & 1;
      $tobool21 = ($and20|0)!=(0);
      if ($tobool21) {
       $retval = 0;
       $41 = $retval;
       STACKTOP = sp;return ($41|0);
      }
      $19 = HEAP32[99754]|0;
      $player = ((($19)) + 132|0);
      $20 = HEAP32[$player>>2]|0;
      $tobool24 = ($20|0)!=(0|0);
      if (!($tobool24)) {
       $21 = $ld$addr;
       $flags25 = ((($21)) + 16|0);
       $22 = HEAP16[$flags25>>1]|0;
       $conv26 = $22 << 16 >> 16;
       $and27 = $conv26 & 2;
       $tobool28 = ($and27|0)!=(0);
       if ($tobool28) {
        $retval = 0;
        $41 = $retval;
        STACKTOP = sp;return ($41|0);
       }
      }
     }
     $23 = $ld$addr;
     _P_LineOpening($23);
     $24 = HEAP32[99784]|0;
     $25 = HEAP32[99761]|0;
     $cmp32 = ($24|0)<($25|0);
     if ($cmp32) {
      $26 = HEAP32[99784]|0;
      HEAP32[99761] = $26;
      $27 = $ld$addr;
      HEAP32[99758] = $27;
     }
     $28 = HEAP32[99785]|0;
     $29 = HEAP32[99760]|0;
     $cmp36 = ($28|0)>($29|0);
     if ($cmp36) {
      $30 = HEAP32[99785]|0;
      HEAP32[99760] = $30;
     }
     $31 = HEAP32[99786]|0;
     $32 = HEAP32[99759]|0;
     $cmp40 = ($31|0)<($32|0);
     if ($cmp40) {
      $33 = HEAP32[99786]|0;
      HEAP32[99759] = $33;
     }
     $34 = $ld$addr;
     $special = ((($34)) + 18|0);
     $35 = HEAP16[$special>>1]|0;
     $tobool44 = ($35<<16>>16)!=(0);
     if ($tobool44) {
      $36 = $ld$addr;
      $37 = HEAP32[99762]|0;
      $arrayidx46 = (187664 + ($37<<2)|0);
      HEAP32[$arrayidx46>>2] = $36;
      $38 = HEAP32[99762]|0;
      $inc = (($38) + 1)|0;
      HEAP32[99762] = $inc;
      $39 = HEAP32[99762]|0;
      $cmp47 = ($39|0)>(8);
      if ($cmp47) {
       $40 = $ld$addr;
       _SpechitOverrun($40);
      }
     }
     $retval = 1;
     $41 = $retval;
     STACKTOP = sp;return ($41|0);
    }
   }
  }
 }
 $retval = 1;
 $41 = $retval;
 STACKTOP = sp;return ($41|0);
}
function _SpechitOverrun($ld) {
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $addr = 0, $arrayidx = 0, $arrayidx6 = 0;
 var $call = 0, $cmp = 0, $cmp1 = 0, $ld$addr = 0, $mul = 0, $p = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $ld$addr = $ld;
 $0 = HEAP32[99782]|0;
 $cmp = ($0|0)==(0);
 do {
  if ($cmp) {
   $call = (_M_CheckParmWithArgs(154407,1)|0);
   $p = $call;
   $1 = $p;
   $cmp1 = ($1|0)>(0);
   if ($cmp1) {
    $2 = HEAP32[99714]|0;
    $3 = $p;
    $add = (($3) + 1)|0;
    $arrayidx = (($2) + ($add<<2)|0);
    $4 = HEAP32[$arrayidx>>2]|0;
    (_M_StrToInt($4,399128)|0);
    break;
   } else {
    HEAP32[99782] = 29400216;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[99782]|0;
 $6 = $ld$addr;
 $7 = HEAP32[99844]|0;
 $sub$ptr$lhs$cast = $6;
 $sub$ptr$rhs$cast = $7;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 64)&-1;
 $mul = ($sub$ptr$div*62)|0;
 $add5 = (($5) + ($mul))|0;
 $addr = $add5;
 $8 = HEAP32[99762]|0;
 switch ($8|0) {
 case 12: case 11: case 10: case 9:  {
  $9 = $addr;
  $10 = HEAP32[99762]|0;
  $sub = (($10) - 9)|0;
  $arrayidx6 = (187648 + ($sub<<2)|0);
  HEAP32[$arrayidx6>>2] = $9;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $11 = $addr;
  HEAP32[99781] = $11;
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  $12 = $addr;
  HEAP32[99780] = $12;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $13 = HEAP32[32479]|0;
  $14 = HEAP32[99762]|0;
  HEAP32[$vararg_buffer>>2] = $14;
  (_fprintf($13,154416,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 }
}
function _PIT_CheckThing($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $add = 0, $add15 = 0, $add27 = 0, $add33 = 0, $add76 = 0, $and = 0, $and11 = 0, $and18 = 0, $and23 = 0;
 var $and67 = 0, $and71 = 0, $and83 = 0, $and87 = 0, $and88 = 0, $blockdist = 0, $call = 0, $call14 = 0, $call3 = 0, $call74 = 0, $cmp = 0, $cmp28 = 0, $cmp35 = 0, $cmp4 = 0, $cmp41 = 0, $cmp45 = 0, $cmp48 = 0, $cmp52 = 0, $cmp55 = 0, $cmp58 = 0;
 var $cmp62 = 0, $cmp7 = 0, $damage = 0, $damage16 = 0, $damage78 = 0, $flags = 0, $flags10 = 0, $flags17 = 0, $flags22 = 0, $flags66 = 0, $flags70 = 0, $flags82 = 0, $flags86 = 0, $height = 0, $height32 = 0, $info = 0, $info19 = 0, $info77 = 0, $lnot = 0, $lnot$ext = 0;
 var $lnot$ext100 = 0, $lnot$ext94 = 0, $lnot93 = 0, $lnot99 = 0, $momx = 0, $momy = 0, $momz = 0, $mul = 0, $mul79 = 0, $radius = 0, $radius1 = 0, $rem = 0, $rem75 = 0, $retval = 0, $solid = 0, $spawnstate = 0, $sub = 0, $sub2 = 0, $target = 0, $target39 = 0;
 var $target43 = 0, $target50 = 0, $target57 = 0, $target80 = 0, $thing$addr = 0, $tobool = 0, $tobool12 = 0, $tobool24 = 0, $tobool38 = 0, $tobool68 = 0, $tobool72 = 0, $tobool84 = 0, $tobool89 = 0, $tobool92 = 0, $tobool98 = 0, $type = 0, $type40 = 0, $type44 = 0, $type47 = 0, $type51 = 0;
 var $type54 = 0, $type61 = 0, $x = 0, $y = 0, $z = 0, $z26 = 0, $z31 = 0, $z34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 7;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $retval = 1;
  $90 = $retval;
  STACKTOP = sp;return ($90|0);
 }
 $2 = $thing$addr;
 $radius = ((($2)) + 64|0);
 $3 = HEAP32[$radius>>2]|0;
 $4 = HEAP32[99754]|0;
 $radius1 = ((($4)) + 64|0);
 $5 = HEAP32[$radius1>>2]|0;
 $add = (($3) + ($5))|0;
 $blockdist = $add;
 $6 = $thing$addr;
 $x = ((($6)) + 12|0);
 $7 = HEAP32[$x>>2]|0;
 $8 = HEAP32[99755]|0;
 $sub = (($7) - ($8))|0;
 $call = (Math_abs(($sub|0))|0);
 $9 = $blockdist;
 $cmp = ($call|0)>=($9|0);
 if (!($cmp)) {
  $10 = $thing$addr;
  $y = ((($10)) + 16|0);
  $11 = HEAP32[$y>>2]|0;
  $12 = HEAP32[99756]|0;
  $sub2 = (($11) - ($12))|0;
  $call3 = (Math_abs(($sub2|0))|0);
  $13 = $blockdist;
  $cmp4 = ($call3|0)>=($13|0);
  if (!($cmp4)) {
   $14 = $thing$addr;
   $15 = HEAP32[99754]|0;
   $cmp7 = ($14|0)==($15|0);
   if ($cmp7) {
    $retval = 1;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   }
   $16 = HEAP32[99754]|0;
   $flags10 = ((($16)) + 104|0);
   $17 = HEAP32[$flags10>>2]|0;
   $and11 = $17 & 16777216;
   $tobool12 = ($and11|0)!=(0);
   if ($tobool12) {
    $call14 = (_P_Random()|0);
    $rem = (($call14|0) % 8)&-1;
    $add15 = (($rem) + 1)|0;
    $18 = HEAP32[99754]|0;
    $info = ((($18)) + 92|0);
    $19 = HEAP32[$info>>2]|0;
    $damage16 = ((($19)) + 76|0);
    $20 = HEAP32[$damage16>>2]|0;
    $mul = Math_imul($add15, $20)|0;
    $damage = $mul;
    $21 = $thing$addr;
    $22 = HEAP32[99754]|0;
    $23 = HEAP32[99754]|0;
    $24 = $damage;
    _P_DamageMobj($21,$22,$23,$24);
    $25 = HEAP32[99754]|0;
    $flags17 = ((($25)) + 104|0);
    $26 = HEAP32[$flags17>>2]|0;
    $and18 = $26 & -16777217;
    HEAP32[$flags17>>2] = $and18;
    $27 = HEAP32[99754]|0;
    $momz = ((($27)) + 80|0);
    HEAP32[$momz>>2] = 0;
    $28 = HEAP32[99754]|0;
    $momy = ((($28)) + 76|0);
    HEAP32[$momy>>2] = 0;
    $29 = HEAP32[99754]|0;
    $momx = ((($29)) + 72|0);
    HEAP32[$momx>>2] = 0;
    $30 = HEAP32[99754]|0;
    $31 = HEAP32[99754]|0;
    $info19 = ((($31)) + 92|0);
    $32 = HEAP32[$info19>>2]|0;
    $spawnstate = ((($32)) + 4|0);
    $33 = HEAP32[$spawnstate>>2]|0;
    (_P_SetMobjState($30,$33)|0);
    $retval = 0;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   }
   $34 = HEAP32[99754]|0;
   $flags22 = ((($34)) + 104|0);
   $35 = HEAP32[$flags22>>2]|0;
   $and23 = $35 & 65536;
   $tobool24 = ($and23|0)!=(0);
   if (!($tobool24)) {
    $82 = $thing$addr;
    $flags82 = ((($82)) + 104|0);
    $83 = HEAP32[$flags82>>2]|0;
    $and83 = $83 & 1;
    $tobool84 = ($and83|0)!=(0);
    $84 = $thing$addr;
    $flags86 = ((($84)) + 104|0);
    $85 = HEAP32[$flags86>>2]|0;
    $and87 = $85 & 2;
    if (!($tobool84)) {
     $tobool98 = ($and87|0)!=(0);
     $lnot99 = $tobool98 ^ 1;
     $lnot$ext100 = $lnot99&1;
     $retval = $lnot$ext100;
     $90 = $retval;
     STACKTOP = sp;return ($90|0);
    }
    $solid = $and87;
    $86 = HEAP32[99757]|0;
    $and88 = $86 & 2048;
    $tobool89 = ($and88|0)!=(0);
    if ($tobool89) {
     $87 = $thing$addr;
     $88 = HEAP32[99754]|0;
     _P_TouchSpecialThing($87,$88);
    }
    $89 = $solid;
    $tobool92 = ($89|0)!=(0);
    $lnot93 = $tobool92 ^ 1;
    $lnot$ext94 = $lnot93&1;
    $retval = $lnot$ext94;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   }
   $36 = HEAP32[99754]|0;
   $z = ((($36)) + 20|0);
   $37 = HEAP32[$z>>2]|0;
   $38 = $thing$addr;
   $z26 = ((($38)) + 20|0);
   $39 = HEAP32[$z26>>2]|0;
   $40 = $thing$addr;
   $height = ((($40)) + 68|0);
   $41 = HEAP32[$height>>2]|0;
   $add27 = (($39) + ($41))|0;
   $cmp28 = ($37|0)>($add27|0);
   if ($cmp28) {
    $retval = 1;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   }
   $42 = HEAP32[99754]|0;
   $z31 = ((($42)) + 20|0);
   $43 = HEAP32[$z31>>2]|0;
   $44 = HEAP32[99754]|0;
   $height32 = ((($44)) + 68|0);
   $45 = HEAP32[$height32>>2]|0;
   $add33 = (($43) + ($45))|0;
   $46 = $thing$addr;
   $z34 = ((($46)) + 20|0);
   $47 = HEAP32[$z34>>2]|0;
   $cmp35 = ($add33|0)<($47|0);
   if ($cmp35) {
    $retval = 1;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   }
   $48 = HEAP32[99754]|0;
   $target = ((($48)) + 120|0);
   $49 = HEAP32[$target>>2]|0;
   $tobool38 = ($49|0)!=(0|0);
   L35: do {
    if ($tobool38) {
     $50 = HEAP32[99754]|0;
     $target39 = ((($50)) + 120|0);
     $51 = HEAP32[$target39>>2]|0;
     $type = ((($51)) + 88|0);
     $52 = HEAP32[$type>>2]|0;
     $53 = $thing$addr;
     $type40 = ((($53)) + 88|0);
     $54 = HEAP32[$type40>>2]|0;
     $cmp41 = ($52|0)==($54|0);
     do {
      if (!($cmp41)) {
       $55 = HEAP32[99754]|0;
       $target43 = ((($55)) + 120|0);
       $56 = HEAP32[$target43>>2]|0;
       $type44 = ((($56)) + 88|0);
       $57 = HEAP32[$type44>>2]|0;
       $cmp45 = ($57|0)==(17);
       if ($cmp45) {
        $58 = $thing$addr;
        $type47 = ((($58)) + 88|0);
        $59 = HEAP32[$type47>>2]|0;
        $cmp48 = ($59|0)==(15);
        if ($cmp48) {
         break;
        }
       }
       $60 = HEAP32[99754]|0;
       $target50 = ((($60)) + 120|0);
       $61 = HEAP32[$target50>>2]|0;
       $type51 = ((($61)) + 88|0);
       $62 = HEAP32[$type51>>2]|0;
       $cmp52 = ($62|0)==(15);
       if (!($cmp52)) {
        break L35;
       }
       $63 = $thing$addr;
       $type54 = ((($63)) + 88|0);
       $64 = HEAP32[$type54>>2]|0;
       $cmp55 = ($64|0)==(17);
       if (!($cmp55)) {
        break L35;
       }
      }
     } while(0);
     $65 = $thing$addr;
     $66 = HEAP32[99754]|0;
     $target57 = ((($66)) + 120|0);
     $67 = HEAP32[$target57>>2]|0;
     $cmp58 = ($65|0)==($67|0);
     if ($cmp58) {
      $retval = 1;
      $90 = $retval;
      STACKTOP = sp;return ($90|0);
     }
     $68 = $thing$addr;
     $type61 = ((($68)) + 88|0);
     $69 = HEAP32[$type61>>2]|0;
     $cmp62 = ($69|0)!=(0);
     if ($cmp62) {
      $retval = 0;
      $90 = $retval;
      STACKTOP = sp;return ($90|0);
     }
    }
   } while(0);
   $70 = $thing$addr;
   $flags66 = ((($70)) + 104|0);
   $71 = HEAP32[$flags66>>2]|0;
   $and67 = $71 & 4;
   $tobool68 = ($and67|0)!=(0);
   if ($tobool68) {
    $call74 = (_P_Random()|0);
    $rem75 = (($call74|0) % 8)&-1;
    $add76 = (($rem75) + 1)|0;
    $74 = HEAP32[99754]|0;
    $info77 = ((($74)) + 92|0);
    $75 = HEAP32[$info77>>2]|0;
    $damage78 = ((($75)) + 76|0);
    $76 = HEAP32[$damage78>>2]|0;
    $mul79 = Math_imul($add76, $76)|0;
    $damage = $mul79;
    $77 = $thing$addr;
    $78 = HEAP32[99754]|0;
    $79 = HEAP32[99754]|0;
    $target80 = ((($79)) + 120|0);
    $80 = HEAP32[$target80>>2]|0;
    $81 = $damage;
    _P_DamageMobj($77,$78,$80,$81);
    $retval = 0;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   } else {
    $72 = $thing$addr;
    $flags70 = ((($72)) + 104|0);
    $73 = HEAP32[$flags70>>2]|0;
    $and71 = $73 & 2;
    $tobool72 = ($and71|0)!=(0);
    $lnot = $tobool72 ^ 1;
    $lnot$ext = $lnot&1;
    $retval = $lnot$ext;
    $90 = $retval;
    STACKTOP = sp;return ($90|0);
   }
  }
 }
 $retval = 1;
 $90 = $retval;
 STACKTOP = sp;return ($90|0);
}
function _P_CheckPosition($thing,$x,$y) {
 $thing = $thing|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add16 = 0, $add3 = 0, $and = 0, $bx = 0, $by = 0, $call = 0, $call21 = 0, $call43 = 0, $ceilingheight = 0, $cmp = 0, $cmp19 = 0, $cmp38 = 0, $cmp41 = 0, $flags = 0, $inc = 0, $inc25 = 0;
 var $inc27 = 0, $inc48 = 0, $inc51 = 0, $newsubsec = 0, $radius = 0, $radius1 = 0, $radius2 = 0, $radius4 = 0, $retval = 0, $shr = 0, $shr11 = 0, $shr14 = 0, $shr17 = 0, $shr30 = 0, $shr32 = 0, $shr34 = 0, $shr36 = 0, $sub = 0, $sub12 = 0, $sub13 = 0;
 var $sub15 = 0, $sub29 = 0, $sub31 = 0, $sub33 = 0, $sub35 = 0, $sub5 = 0, $sub7 = 0, $sub8 = 0, $sub9 = 0, $thing$addr = 0, $tobool = 0, $tobool22 = 0, $tobool44 = 0, $x$addr = 0, $xh = 0, $xl = 0, $y$addr = 0, $yh = 0, $yl = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $thing$addr = $thing;
 $x$addr = $x;
 $y$addr = $y;
 $0 = $thing$addr;
 HEAP32[99754] = $0;
 $1 = $thing$addr;
 $flags = ((($1)) + 104|0);
 $2 = HEAP32[$flags>>2]|0;
 HEAP32[99757] = $2;
 $3 = $x$addr;
 HEAP32[99755] = $3;
 $4 = $y$addr;
 HEAP32[99756] = $4;
 $5 = $y$addr;
 $6 = HEAP32[99754]|0;
 $radius = ((($6)) + 64|0);
 $7 = HEAP32[$radius>>2]|0;
 $add = (($5) + ($7))|0;
 HEAP32[46912] = $add;
 $8 = $y$addr;
 $9 = HEAP32[99754]|0;
 $radius1 = ((($9)) + 64|0);
 $10 = HEAP32[$radius1>>2]|0;
 $sub = (($8) - ($10))|0;
 HEAP32[(187652)>>2] = $sub;
 $11 = $x$addr;
 $12 = HEAP32[99754]|0;
 $radius2 = ((($12)) + 64|0);
 $13 = HEAP32[$radius2>>2]|0;
 $add3 = (($11) + ($13))|0;
 HEAP32[(187660)>>2] = $add3;
 $14 = $x$addr;
 $15 = HEAP32[99754]|0;
 $radius4 = ((($15)) + 64|0);
 $16 = HEAP32[$radius4>>2]|0;
 $sub5 = (($14) - ($16))|0;
 HEAP32[(187656)>>2] = $sub5;
 $17 = $x$addr;
 $18 = $y$addr;
 $call = (_R_PointInSubsector($17,$18)|0);
 $newsubsec = $call;
 HEAP32[99758] = 0;
 $19 = $newsubsec;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[99759] = $21;
 HEAP32[99760] = $21;
 $22 = $newsubsec;
 $23 = HEAP32[$22>>2]|0;
 $ceilingheight = ((($23)) + 4|0);
 $24 = HEAP32[$ceilingheight>>2]|0;
 HEAP32[99761] = $24;
 $25 = HEAP32[32346]|0;
 $inc = (($25) + 1)|0;
 HEAP32[32346] = $inc;
 HEAP32[99762] = 0;
 $26 = HEAP32[99757]|0;
 $and = $26 & 4096;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $retval = 1;
  $61 = $retval;
  STACKTOP = sp;return ($61|0);
 }
 $27 = HEAP32[(187656)>>2]|0;
 $28 = HEAP32[99856]|0;
 $sub7 = (($27) - ($28))|0;
 $sub8 = (($sub7) - 2097152)|0;
 $shr = $sub8 >> 23;
 $xl = $shr;
 $29 = HEAP32[(187660)>>2]|0;
 $30 = HEAP32[99856]|0;
 $sub9 = (($29) - ($30))|0;
 $add10 = (($sub9) + 2097152)|0;
 $shr11 = $add10 >> 23;
 $xh = $shr11;
 $31 = HEAP32[(187652)>>2]|0;
 $32 = HEAP32[99857]|0;
 $sub12 = (($31) - ($32))|0;
 $sub13 = (($sub12) - 2097152)|0;
 $shr14 = $sub13 >> 23;
 $yl = $shr14;
 $33 = HEAP32[46912]|0;
 $34 = HEAP32[99857]|0;
 $sub15 = (($33) - ($34))|0;
 $add16 = (($sub15) + 2097152)|0;
 $shr17 = $add16 >> 23;
 $yh = $shr17;
 $35 = $xl;
 $bx = $35;
 L5: while(1) {
  $36 = $bx;
  $37 = $xh;
  $cmp = ($36|0)<=($37|0);
  if (!($cmp)) {
   break;
  }
  $38 = $yl;
  $by = $38;
  while(1) {
   $39 = $by;
   $40 = $yh;
   $cmp19 = ($39|0)<=($40|0);
   $41 = $bx;
   if (!($cmp19)) {
    break;
   }
   $42 = $by;
   $call21 = (_P_BlockThingsIterator($41,$42,144)|0);
   $tobool22 = ($call21|0)!=(0);
   if (!($tobool22)) {
    label = 8;
    break L5;
   }
   $43 = $by;
   $inc25 = (($43) + 1)|0;
   $by = $inc25;
  }
  $inc27 = (($41) + 1)|0;
  $bx = $inc27;
 }
 if ((label|0) == 8) {
  $retval = 0;
  $61 = $retval;
  STACKTOP = sp;return ($61|0);
 }
 $44 = HEAP32[(187656)>>2]|0;
 $45 = HEAP32[99856]|0;
 $sub29 = (($44) - ($45))|0;
 $shr30 = $sub29 >> 23;
 $xl = $shr30;
 $46 = HEAP32[(187660)>>2]|0;
 $47 = HEAP32[99856]|0;
 $sub31 = (($46) - ($47))|0;
 $shr32 = $sub31 >> 23;
 $xh = $shr32;
 $48 = HEAP32[(187652)>>2]|0;
 $49 = HEAP32[99857]|0;
 $sub33 = (($48) - ($49))|0;
 $shr34 = $sub33 >> 23;
 $yl = $shr34;
 $50 = HEAP32[46912]|0;
 $51 = HEAP32[99857]|0;
 $sub35 = (($50) - ($51))|0;
 $shr36 = $sub35 >> 23;
 $yh = $shr36;
 $52 = $xl;
 $bx = $52;
 L17: while(1) {
  $53 = $bx;
  $54 = $xh;
  $cmp38 = ($53|0)<=($54|0);
  if (!($cmp38)) {
   label = 19;
   break;
  }
  $55 = $yl;
  $by = $55;
  while(1) {
   $56 = $by;
   $57 = $yh;
   $cmp41 = ($56|0)<=($57|0);
   $58 = $bx;
   if (!($cmp41)) {
    break;
   }
   $59 = $by;
   $call43 = (_P_BlockLinesIterator($58,$59,145)|0);
   $tobool44 = ($call43|0)!=(0);
   if (!($tobool44)) {
    label = 16;
    break L17;
   }
   $60 = $by;
   $inc48 = (($60) + 1)|0;
   $by = $inc48;
  }
  $inc51 = (($58) + 1)|0;
  $bx = $inc51;
 }
 if ((label|0) == 16) {
  $retval = 0;
  $61 = $retval;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 19) {
  $retval = 1;
  $61 = $retval;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _P_TryMove($thing,$x,$y) {
 $thing = $thing|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $and = 0, $and14 = 0, $and23 = 0, $and36 = 0, $and6 = 0, $arrayidx = 0, $call = 0, $call42 = 0, $call43 = 0, $ceilingz = 0, $cmp = 0, $cmp10 = 0, $cmp19 = 0, $cmp27 = 0, $cmp44 = 0, $dec = 0, $flags = 0, $flags13 = 0, $flags22 = 0;
 var $flags35 = 0, $flags5 = 0, $floorz = 0, $height = 0, $height9 = 0, $ld = 0, $oldside = 0, $oldx = 0, $oldy = 0, $retval = 0, $side = 0, $special = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub18 = 0, $sub26 = 0, $sub8 = 0;
 var $thing$addr = 0, $tobool = 0, $tobool1 = 0, $tobool15 = 0, $tobool24 = 0, $tobool37 = 0, $tobool39 = 0, $tobool46 = 0, $tobool7 = 0, $x$addr = 0, $x31 = 0, $x33 = 0, $x40 = 0, $y$addr = 0, $y32 = 0, $y34 = 0, $y41 = 0, $z = 0, $z17 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $thing$addr = $thing;
 $x$addr = $x;
 $y$addr = $y;
 HEAP32[99763] = 0;
 $0 = $thing$addr;
 $1 = $x$addr;
 $2 = $y$addr;
 $call = (_P_CheckPosition($0,$1,$2)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $60 = $retval;
  STACKTOP = sp;return ($60|0);
 }
 $3 = $thing$addr;
 $flags = ((($3)) + 104|0);
 $4 = HEAP32[$flags>>2]|0;
 $and = $4 & 4096;
 $tobool1 = ($and|0)!=(0);
 if (!($tobool1)) {
  $5 = HEAP32[99761]|0;
  $6 = HEAP32[99760]|0;
  $sub = (($5) - ($6))|0;
  $7 = $thing$addr;
  $height = ((($7)) + 68|0);
  $8 = HEAP32[$height>>2]|0;
  $cmp = ($sub|0)<($8|0);
  if ($cmp) {
   $retval = 0;
   $60 = $retval;
   STACKTOP = sp;return ($60|0);
  }
  HEAP32[99763] = 1;
  $9 = $thing$addr;
  $flags5 = ((($9)) + 104|0);
  $10 = HEAP32[$flags5>>2]|0;
  $and6 = $10 & 32768;
  $tobool7 = ($and6|0)!=(0);
  if (!($tobool7)) {
   $11 = HEAP32[99761]|0;
   $12 = $thing$addr;
   $z = ((($12)) + 20|0);
   $13 = HEAP32[$z>>2]|0;
   $sub8 = (($11) - ($13))|0;
   $14 = $thing$addr;
   $height9 = ((($14)) + 68|0);
   $15 = HEAP32[$height9>>2]|0;
   $cmp10 = ($sub8|0)<($15|0);
   if ($cmp10) {
    $retval = 0;
    $60 = $retval;
    STACKTOP = sp;return ($60|0);
   }
  }
  $16 = $thing$addr;
  $flags13 = ((($16)) + 104|0);
  $17 = HEAP32[$flags13>>2]|0;
  $and14 = $17 & 32768;
  $tobool15 = ($and14|0)!=(0);
  if (!($tobool15)) {
   $18 = HEAP32[99760]|0;
   $19 = $thing$addr;
   $z17 = ((($19)) + 20|0);
   $20 = HEAP32[$z17>>2]|0;
   $sub18 = (($18) - ($20))|0;
   $cmp19 = ($sub18|0)>(1572864);
   if ($cmp19) {
    $retval = 0;
    $60 = $retval;
    STACKTOP = sp;return ($60|0);
   }
  }
  $21 = $thing$addr;
  $flags22 = ((($21)) + 104|0);
  $22 = HEAP32[$flags22>>2]|0;
  $and23 = $22 & 17408;
  $tobool24 = ($and23|0)!=(0);
  if (!($tobool24)) {
   $23 = HEAP32[99760]|0;
   $24 = HEAP32[99759]|0;
   $sub26 = (($23) - ($24))|0;
   $cmp27 = ($sub26|0)>(1572864);
   if ($cmp27) {
    $retval = 0;
    $60 = $retval;
    STACKTOP = sp;return ($60|0);
   }
  }
 }
 $25 = $thing$addr;
 _P_UnsetThingPosition($25);
 $26 = $thing$addr;
 $x31 = ((($26)) + 12|0);
 $27 = HEAP32[$x31>>2]|0;
 $oldx = $27;
 $28 = $thing$addr;
 $y32 = ((($28)) + 16|0);
 $29 = HEAP32[$y32>>2]|0;
 $oldy = $29;
 $30 = HEAP32[99760]|0;
 $31 = $thing$addr;
 $floorz = ((($31)) + 56|0);
 HEAP32[$floorz>>2] = $30;
 $32 = HEAP32[99761]|0;
 $33 = $thing$addr;
 $ceilingz = ((($33)) + 60|0);
 HEAP32[$ceilingz>>2] = $32;
 $34 = $x$addr;
 $35 = $thing$addr;
 $x33 = ((($35)) + 12|0);
 HEAP32[$x33>>2] = $34;
 $36 = $y$addr;
 $37 = $thing$addr;
 $y34 = ((($37)) + 16|0);
 HEAP32[$y34>>2] = $36;
 $38 = $thing$addr;
 _P_SetThingPosition($38);
 $39 = $thing$addr;
 $flags35 = ((($39)) + 104|0);
 $40 = HEAP32[$flags35>>2]|0;
 $and36 = $40 & 36864;
 $tobool37 = ($and36|0)!=(0);
 L25: do {
  if (!($tobool37)) {
   while(1) {
    $41 = HEAP32[99762]|0;
    $dec = (($41) + -1)|0;
    HEAP32[99762] = $dec;
    $tobool39 = ($41|0)!=(0);
    if (!($tobool39)) {
     break L25;
    }
    $42 = HEAP32[99762]|0;
    $arrayidx = (187664 + ($42<<2)|0);
    $43 = HEAP32[$arrayidx>>2]|0;
    $ld = $43;
    $44 = $thing$addr;
    $x40 = ((($44)) + 12|0);
    $45 = HEAP32[$x40>>2]|0;
    $46 = $thing$addr;
    $y41 = ((($46)) + 16|0);
    $47 = HEAP32[$y41>>2]|0;
    $48 = $ld;
    $call42 = (_P_PointOnLineSide($45,$47,$48)|0);
    $side = $call42;
    $49 = $oldx;
    $50 = $oldy;
    $51 = $ld;
    $call43 = (_P_PointOnLineSide($49,$50,$51)|0);
    $oldside = $call43;
    $52 = $side;
    $53 = $oldside;
    $cmp44 = ($52|0)!=($53|0);
    if ($cmp44) {
     $54 = $ld;
     $special = ((($54)) + 18|0);
     $55 = HEAP16[$special>>1]|0;
     $tobool46 = ($55<<16>>16)!=(0);
     if ($tobool46) {
      $56 = $ld;
      $57 = HEAP32[99844]|0;
      $sub$ptr$lhs$cast = $56;
      $sub$ptr$rhs$cast = $57;
      $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
      $sub$ptr$div = (($sub$ptr$sub|0) / 64)&-1;
      $58 = $oldside;
      $59 = $thing$addr;
      _P_CrossSpecialLine($sub$ptr$div,$58,$59);
     }
    }
   }
  }
 } while(0);
 $retval = 1;
 $60 = $retval;
 STACKTOP = sp;return ($60|0);
}
function _P_ThingHeightClip($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $ceilingz = 0, $ceilingz13 = 0, $ceilingz5 = 0, $ceilingz9 = 0, $cmp = 0;
 var $cmp17 = 0, $cmp6 = 0, $conv = 0, $floorz = 0, $floorz1 = 0, $floorz14 = 0, $floorz2 = 0, $height = 0, $height10 = 0, $height16 = 0, $onfloor = 0, $retval = 0, $sub = 0, $sub15 = 0, $thing$addr = 0, $tobool = 0, $x = 0, $y = 0, $z = 0, $z11 = 0;
 var $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $z = ((($0)) + 20|0);
 $1 = HEAP32[$z>>2]|0;
 $2 = $thing$addr;
 $floorz = ((($2)) + 56|0);
 $3 = HEAP32[$floorz>>2]|0;
 $cmp = ($1|0)==($3|0);
 $conv = $cmp&1;
 $onfloor = $conv;
 $4 = $thing$addr;
 $5 = $thing$addr;
 $x = ((($5)) + 12|0);
 $6 = HEAP32[$x>>2]|0;
 $7 = $thing$addr;
 $y = ((($7)) + 16|0);
 $8 = HEAP32[$y>>2]|0;
 (_P_CheckPosition($4,$6,$8)|0);
 $9 = HEAP32[99760]|0;
 $10 = $thing$addr;
 $floorz1 = ((($10)) + 56|0);
 HEAP32[$floorz1>>2] = $9;
 $11 = HEAP32[99761]|0;
 $12 = $thing$addr;
 $ceilingz = ((($12)) + 60|0);
 HEAP32[$ceilingz>>2] = $11;
 $13 = $onfloor;
 $tobool = ($13|0)!=(0);
 $14 = $thing$addr;
 if ($tobool) {
  $floorz2 = ((($14)) + 56|0);
  $15 = HEAP32[$floorz2>>2]|0;
  $16 = $thing$addr;
  $z3 = ((($16)) + 20|0);
  HEAP32[$z3>>2] = $15;
 } else {
  $z4 = ((($14)) + 20|0);
  $17 = HEAP32[$z4>>2]|0;
  $18 = $thing$addr;
  $height = ((($18)) + 68|0);
  $19 = HEAP32[$height>>2]|0;
  $add = (($17) + ($19))|0;
  $20 = $thing$addr;
  $ceilingz5 = ((($20)) + 60|0);
  $21 = HEAP32[$ceilingz5>>2]|0;
  $cmp6 = ($add|0)>($21|0);
  if ($cmp6) {
   $22 = $thing$addr;
   $ceilingz9 = ((($22)) + 60|0);
   $23 = HEAP32[$ceilingz9>>2]|0;
   $24 = $thing$addr;
   $height10 = ((($24)) + 68|0);
   $25 = HEAP32[$height10>>2]|0;
   $sub = (($23) - ($25))|0;
   $26 = $thing$addr;
   $z11 = ((($26)) + 20|0);
   HEAP32[$z11>>2] = $sub;
  }
 }
 $27 = $thing$addr;
 $ceilingz13 = ((($27)) + 60|0);
 $28 = HEAP32[$ceilingz13>>2]|0;
 $29 = $thing$addr;
 $floorz14 = ((($29)) + 56|0);
 $30 = HEAP32[$floorz14>>2]|0;
 $sub15 = (($28) - ($30))|0;
 $31 = $thing$addr;
 $height16 = ((($31)) + 68|0);
 $32 = HEAP32[$height16>>2]|0;
 $cmp17 = ($sub15|0)<($32|0);
 if ($cmp17) {
  $retval = 0;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else {
  $retval = 1;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _P_HitSlideLine($ld) {
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx19 = 0, $call = 0;
 var $call15 = 0, $call16 = 0, $call18 = 0, $call20 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp6 = 0, $deltaangle = 0, $dx = 0, $dy = 0, $ld$addr = 0, $lineangle = 0, $moveangle = 0, $movelen = 0, $newlen = 0, $shr = 0, $shr14 = 0;
 var $side = 0, $slopetype = 0, $slopetype1 = 0, $sub = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ld$addr = $ld;
 $0 = $ld$addr;
 $slopetype = ((($0)) + 44|0);
 $1 = HEAP32[$slopetype>>2]|0;
 $cmp = ($1|0)==(0);
 if ($cmp) {
  HEAP32[99764] = 0;
  STACKTOP = sp;return;
 }
 $2 = $ld$addr;
 $slopetype1 = ((($2)) + 44|0);
 $3 = HEAP32[$slopetype1>>2]|0;
 $cmp2 = ($3|0)==(1);
 if ($cmp2) {
  HEAP32[99765] = 0;
  STACKTOP = sp;return;
 }
 $4 = HEAP32[99766]|0;
 $x = ((($4)) + 12|0);
 $5 = HEAP32[$x>>2]|0;
 $6 = HEAP32[99766]|0;
 $y = ((($6)) + 16|0);
 $7 = HEAP32[$y>>2]|0;
 $8 = $ld$addr;
 $call = (_P_PointOnLineSide($5,$7,$8)|0);
 $side = $call;
 $9 = $ld$addr;
 $dx = ((($9)) + 8|0);
 $10 = HEAP32[$dx>>2]|0;
 $11 = $ld$addr;
 $dy = ((($11)) + 12|0);
 $12 = HEAP32[$dy>>2]|0;
 $call5 = (_R_PointToAngle2(0,0,$10,$12)|0);
 $lineangle = $call5;
 $13 = $side;
 $cmp6 = ($13|0)==(1);
 if ($cmp6) {
  $14 = $lineangle;
  $add = (($14) + -2147483648)|0;
  $lineangle = $add;
 }
 $15 = HEAP32[99765]|0;
 $16 = HEAP32[99764]|0;
 $call9 = (_R_PointToAngle2(0,0,$15,$16)|0);
 $moveangle = $call9;
 $17 = $moveangle;
 $18 = $lineangle;
 $sub = (($17) - ($18))|0;
 $deltaangle = $sub;
 $19 = $deltaangle;
 $cmp10 = ($19>>>0)>(2147483648);
 if ($cmp10) {
  $20 = $deltaangle;
  $add12 = (($20) + -2147483648)|0;
  $deltaangle = $add12;
 }
 $21 = $lineangle;
 $shr = $21 >>> 19;
 $lineangle = $shr;
 $22 = $deltaangle;
 $shr14 = $22 >>> 19;
 $deltaangle = $shr14;
 $23 = HEAP32[99765]|0;
 $24 = HEAP32[99764]|0;
 $call15 = (_P_AproxDistance($23,$24)|0);
 $movelen = $call15;
 $25 = $movelen;
 $26 = $deltaangle;
 $arrayidx = ((82992) + ($26<<2)|0);
 $27 = HEAP32[$arrayidx>>2]|0;
 $call16 = (_FixedMul($25,$27)|0);
 $newlen = $call16;
 $28 = $newlen;
 $29 = $lineangle;
 $arrayidx17 = ((82992) + ($29<<2)|0);
 $30 = HEAP32[$arrayidx17>>2]|0;
 $call18 = (_FixedMul($28,$30)|0);
 HEAP32[99765] = $call18;
 $31 = $newlen;
 $32 = $lineangle;
 $arrayidx19 = (74800 + ($32<<2)|0);
 $33 = HEAP32[$arrayidx19>>2]|0;
 $call20 = (_FixedMul($31,$33)|0);
 HEAP32[99764] = $call20;
 STACKTOP = sp;return;
}
function _PTR_SlideTraverse($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp21 = 0, $conv = 0, $d = 0, $flags = 0;
 var $height = 0, $height10 = 0, $in$addr = 0, $isaline = 0, $li = 0, $retval = 0, $sub = 0, $sub16 = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, $vararg_buffer = 0, $x = 0, $y = 0, $z = 0, $z15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $in$addr = $in;
 $0 = $in$addr;
 $isaline = ((($0)) + 4|0);
 $1 = HEAP32[$isaline>>2]|0;
 $tobool = ($1|0)!=(0);
 if (!($tobool)) {
  _I_Error(154490,$vararg_buffer);
 }
 $2 = $in$addr;
 $d = ((($2)) + 8|0);
 $3 = HEAP32[$d>>2]|0;
 $li = $3;
 $4 = $li;
 $flags = ((($4)) + 16|0);
 $5 = HEAP16[$flags>>1]|0;
 $conv = $5 << 16 >> 16;
 $and = $conv & 4;
 $tobool1 = ($and|0)!=(0);
 if ($tobool1) {
  $11 = $li;
  _P_LineOpening($11);
  $12 = HEAP32[99783]|0;
  $13 = HEAP32[99766]|0;
  $height = ((($13)) + 68|0);
  $14 = HEAP32[$height>>2]|0;
  $cmp = ($12|0)<($14|0);
  if (!($cmp)) {
   $15 = HEAP32[99784]|0;
   $16 = HEAP32[99766]|0;
   $z = ((($16)) + 20|0);
   $17 = HEAP32[$z>>2]|0;
   $sub = (($15) - ($17))|0;
   $18 = HEAP32[99766]|0;
   $height10 = ((($18)) + 68|0);
   $19 = HEAP32[$height10>>2]|0;
   $cmp11 = ($sub|0)<($19|0);
   if (!($cmp11)) {
    $20 = HEAP32[99785]|0;
    $21 = HEAP32[99766]|0;
    $z15 = ((($21)) + 20|0);
    $22 = HEAP32[$z15>>2]|0;
    $sub16 = (($20) - ($22))|0;
    $cmp17 = ($sub16|0)>(1572864);
    if (!($cmp17)) {
     $retval = 1;
     $30 = $retval;
     STACKTOP = sp;return ($30|0);
    }
   }
  }
 } else {
  $6 = HEAP32[99766]|0;
  $x = ((($6)) + 12|0);
  $7 = HEAP32[$x>>2]|0;
  $8 = HEAP32[99766]|0;
  $y = ((($8)) + 16|0);
  $9 = HEAP32[$y>>2]|0;
  $10 = $li;
  $call = (_P_PointOnLineSide($7,$9,$10)|0);
  $tobool3 = ($call|0)!=(0);
  if ($tobool3) {
   $retval = 1;
   $30 = $retval;
   STACKTOP = sp;return ($30|0);
  }
 }
 $23 = $in$addr;
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[99767]|0;
 $cmp21 = ($24|0)<($25|0);
 if ($cmp21) {
  $26 = HEAP32[99768]|0;
  HEAP32[99769] = $26;
  $27 = $in$addr;
  $28 = HEAP32[$27>>2]|0;
  HEAP32[99767] = $28;
  $29 = $li;
  HEAP32[99768] = $29;
 }
 $retval = 0;
 $30 = $retval;
 STACKTOP = sp;return ($30|0);
}
function _P_SlideMove($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add10 = 0, $add15 = 0, $add25 = 0, $add28 = 0, $add30 = 0, $add32 = 0, $add34 = 0, $add37 = 0, $add39 = 0, $add46 = 0, $add51 = 0, $add64 = 0, $add66 = 0, $add72 = 0;
 var $add87 = 0, $add89 = 0, $call47 = 0, $call60 = 0, $call62 = 0, $call67 = 0, $call81 = 0, $call83 = 0, $call90 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp41 = 0, $cmp57 = 0, $cmp74 = 0, $cmp77 = 0, $hitcount = 0, $inc = 0, $leadx = 0, $leady = 0;
 var $mo$addr = 0, $momx = 0, $momx27 = 0, $momx31 = 0, $momx36 = 0, $momx50 = 0, $momx59 = 0, $momx80 = 0, $momx84 = 0, $momy = 0, $momy29 = 0, $momy33 = 0, $momy38 = 0, $momy45 = 0, $momy61 = 0, $momy82 = 0, $momy85 = 0, $newx = 0, $newy = 0, $radius = 0;
 var $radius14 = 0, $radius17 = 0, $radius24 = 0, $radius4 = 0, $radius9 = 0, $spec$store$select = 0, $sub = 0, $sub18 = 0, $sub22 = 0, $sub56 = 0, $sub7 = 0, $sub73 = 0, $tobool = 0, $tobool68 = 0, $tobool91 = 0, $trailx = 0, $traily = 0, $x = 0, $x3 = 0, $x43 = 0;
 var $x49 = 0, $x63 = 0, $x8 = 0, $x86 = 0, $y = 0, $y16 = 0, $y23 = 0, $y44 = 0, $y52 = 0, $y65 = 0, $y88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 HEAP32[99766] = $0;
 $hitcount = 0;
 while(1) {
  $1 = $hitcount;
  $inc = (($1) + 1)|0;
  $hitcount = $inc;
  $cmp = ($inc|0)==(3);
  if ($cmp) {
   label = 10;
   break;
  }
  $2 = $mo$addr;
  $momx = ((($2)) + 72|0);
  $3 = HEAP32[$momx>>2]|0;
  $cmp1 = ($3|0)>(0);
  $4 = $mo$addr;
  $x = ((($4)) + 12|0);
  $5 = HEAP32[$x>>2]|0;
  $6 = $mo$addr;
  $radius = ((($6)) + 64|0);
  $7 = HEAP32[$radius>>2]|0;
  if ($cmp1) {
   $add = (($5) + ($7))|0;
   $leadx = $add;
   $8 = $mo$addr;
   $x3 = ((($8)) + 12|0);
   $9 = HEAP32[$x3>>2]|0;
   $10 = $mo$addr;
   $radius4 = ((($10)) + 64|0);
   $11 = HEAP32[$radius4>>2]|0;
   $sub = (($9) - ($11))|0;
   $trailx = $sub;
  } else {
   $sub7 = (($5) - ($7))|0;
   $leadx = $sub7;
   $12 = $mo$addr;
   $x8 = ((($12)) + 12|0);
   $13 = HEAP32[$x8>>2]|0;
   $14 = $mo$addr;
   $radius9 = ((($14)) + 64|0);
   $15 = HEAP32[$radius9>>2]|0;
   $add10 = (($13) + ($15))|0;
   $trailx = $add10;
  }
  $16 = $mo$addr;
  $momy = ((($16)) + 76|0);
  $17 = HEAP32[$momy>>2]|0;
  $cmp12 = ($17|0)>(0);
  $18 = $mo$addr;
  $y = ((($18)) + 16|0);
  $19 = HEAP32[$y>>2]|0;
  $20 = $mo$addr;
  $radius14 = ((($20)) + 64|0);
  $21 = HEAP32[$radius14>>2]|0;
  if ($cmp12) {
   $add15 = (($19) + ($21))|0;
   $leady = $add15;
   $22 = $mo$addr;
   $y16 = ((($22)) + 16|0);
   $23 = HEAP32[$y16>>2]|0;
   $24 = $mo$addr;
   $radius17 = ((($24)) + 64|0);
   $25 = HEAP32[$radius17>>2]|0;
   $sub18 = (($23) - ($25))|0;
   $traily = $sub18;
  } else {
   $sub22 = (($19) - ($21))|0;
   $leady = $sub22;
   $26 = $mo$addr;
   $y23 = ((($26)) + 16|0);
   $27 = HEAP32[$y23>>2]|0;
   $28 = $mo$addr;
   $radius24 = ((($28)) + 64|0);
   $29 = HEAP32[$radius24>>2]|0;
   $add25 = (($27) + ($29))|0;
   $traily = $add25;
  }
  HEAP32[99767] = 65537;
  $30 = $leadx;
  $31 = $leady;
  $32 = $leadx;
  $33 = $mo$addr;
  $momx27 = ((($33)) + 72|0);
  $34 = HEAP32[$momx27>>2]|0;
  $add28 = (($32) + ($34))|0;
  $35 = $leady;
  $36 = $mo$addr;
  $momy29 = ((($36)) + 76|0);
  $37 = HEAP32[$momy29>>2]|0;
  $add30 = (($35) + ($37))|0;
  (_P_PathTraverse($30,$31,$add28,$add30,1,146)|0);
  $38 = $trailx;
  $39 = $leady;
  $40 = $trailx;
  $41 = $mo$addr;
  $momx31 = ((($41)) + 72|0);
  $42 = HEAP32[$momx31>>2]|0;
  $add32 = (($40) + ($42))|0;
  $43 = $leady;
  $44 = $mo$addr;
  $momy33 = ((($44)) + 76|0);
  $45 = HEAP32[$momy33>>2]|0;
  $add34 = (($43) + ($45))|0;
  (_P_PathTraverse($38,$39,$add32,$add34,1,146)|0);
  $46 = $leadx;
  $47 = $traily;
  $48 = $leadx;
  $49 = $mo$addr;
  $momx36 = ((($49)) + 72|0);
  $50 = HEAP32[$momx36>>2]|0;
  $add37 = (($48) + ($50))|0;
  $51 = $traily;
  $52 = $mo$addr;
  $momy38 = ((($52)) + 76|0);
  $53 = HEAP32[$momy38>>2]|0;
  $add39 = (($51) + ($53))|0;
  (_P_PathTraverse($46,$47,$add37,$add39,1,146)|0);
  $54 = HEAP32[99767]|0;
  $cmp41 = ($54|0)==(65537);
  if ($cmp41) {
   label = 10;
   break;
  }
  $69 = HEAP32[99767]|0;
  $sub56 = (($69) - 2048)|0;
  HEAP32[99767] = $sub56;
  $70 = HEAP32[99767]|0;
  $cmp57 = ($70|0)>(0);
  if ($cmp57) {
   $71 = $mo$addr;
   $momx59 = ((($71)) + 72|0);
   $72 = HEAP32[$momx59>>2]|0;
   $73 = HEAP32[99767]|0;
   $call60 = (_FixedMul($72,$73)|0);
   $newx = $call60;
   $74 = $mo$addr;
   $momy61 = ((($74)) + 76|0);
   $75 = HEAP32[$momy61>>2]|0;
   $76 = HEAP32[99767]|0;
   $call62 = (_FixedMul($75,$76)|0);
   $newy = $call62;
   $77 = $mo$addr;
   $78 = $mo$addr;
   $x63 = ((($78)) + 12|0);
   $79 = HEAP32[$x63>>2]|0;
   $80 = $newx;
   $add64 = (($79) + ($80))|0;
   $81 = $mo$addr;
   $y65 = ((($81)) + 16|0);
   $82 = HEAP32[$y65>>2]|0;
   $83 = $newy;
   $add66 = (($82) + ($83))|0;
   $call67 = (_P_TryMove($77,$add64,$add66)|0);
   $tobool68 = ($call67|0)!=(0);
   if (!($tobool68)) {
    label = 10;
    break;
   }
  }
  $84 = HEAP32[99767]|0;
  $add72 = (($84) + 2048)|0;
  $sub73 = (65536 - ($add72))|0;
  HEAP32[99767] = $sub73;
  $85 = HEAP32[99767]|0;
  $cmp74 = ($85|0)>(65536);
  $spec$store$select = $cmp74 ? 65536 : $sub73;
  HEAP32[99767] = $spec$store$select;
  $86 = HEAP32[99767]|0;
  $cmp77 = ($86|0)<=(0);
  if ($cmp77) {
   label = 17;
   break;
  }
  $87 = $mo$addr;
  $momx80 = ((($87)) + 72|0);
  $88 = HEAP32[$momx80>>2]|0;
  $89 = HEAP32[99767]|0;
  $call81 = (_FixedMul($88,$89)|0);
  HEAP32[99765] = $call81;
  $90 = $mo$addr;
  $momy82 = ((($90)) + 76|0);
  $91 = HEAP32[$momy82>>2]|0;
  $92 = HEAP32[99767]|0;
  $call83 = (_FixedMul($91,$92)|0);
  HEAP32[99764] = $call83;
  $93 = HEAP32[99768]|0;
  _P_HitSlideLine($93);
  $94 = HEAP32[99765]|0;
  $95 = $mo$addr;
  $momx84 = ((($95)) + 72|0);
  HEAP32[$momx84>>2] = $94;
  $96 = HEAP32[99764]|0;
  $97 = $mo$addr;
  $momy85 = ((($97)) + 76|0);
  HEAP32[$momy85>>2] = $96;
  $98 = $mo$addr;
  $99 = $mo$addr;
  $x86 = ((($99)) + 12|0);
  $100 = HEAP32[$x86>>2]|0;
  $101 = HEAP32[99765]|0;
  $add87 = (($100) + ($101))|0;
  $102 = $mo$addr;
  $y88 = ((($102)) + 16|0);
  $103 = HEAP32[$y88>>2]|0;
  $104 = HEAP32[99764]|0;
  $add89 = (($103) + ($104))|0;
  $call90 = (_P_TryMove($98,$add87,$add89)|0);
  $tobool91 = ($call90|0)!=(0);
  if ($tobool91) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 10) {
  $55 = $mo$addr;
  $56 = $mo$addr;
  $x43 = ((($56)) + 12|0);
  $57 = HEAP32[$x43>>2]|0;
  $58 = $mo$addr;
  $y44 = ((($58)) + 16|0);
  $59 = HEAP32[$y44>>2]|0;
  $60 = $mo$addr;
  $momy45 = ((($60)) + 76|0);
  $61 = HEAP32[$momy45>>2]|0;
  $add46 = (($59) + ($61))|0;
  $call47 = (_P_TryMove($55,$57,$add46)|0);
  $tobool = ($call47|0)!=(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  $62 = $mo$addr;
  $63 = $mo$addr;
  $x49 = ((($63)) + 12|0);
  $64 = HEAP32[$x49>>2]|0;
  $65 = $mo$addr;
  $momx50 = ((($65)) + 72|0);
  $66 = HEAP32[$momx50>>2]|0;
  $add51 = (($64) + ($66))|0;
  $67 = $mo$addr;
  $y52 = ((($67)) + 16|0);
  $68 = HEAP32[$y52>>2]|0;
  (_P_TryMove($62,$add51,$68)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _PTR_AimTraverse($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $add = 0, $add74 = 0, $and = 0, $and47 = 0, $backsector = 0, $backsector19 = 0;
 var $backsector24 = 0, $backsector8 = 0, $call = 0, $call13 = 0, $call30 = 0, $call52 = 0, $call54 = 0, $call61 = 0, $ceilingheight = 0, $ceilingheight25 = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp20 = 0, $cmp26 = 0, $cmp31 = 0, $cmp36 = 0, $cmp42 = 0, $cmp55 = 0, $cmp6 = 0;
 var $cmp62 = 0, $cmp66 = 0, $cmp70 = 0, $conv = 0, $d = 0, $dist = 0, $div = 0, $flags = 0, $flags46 = 0, $frontsector = 0, $frontsector23 = 0, $height = 0, $in$addr = 0, $isaline = 0, $li = 0, $retval = 0, $slope = 0, $sub = 0, $sub29 = 0, $sub53 = 0;
 var $sub60 = 0, $th = 0, $thingbottomslope = 0, $thingtopslope = 0, $tobool = 0, $tobool1 = 0, $tobool48 = 0, $z = 0, $z59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $in$addr = $in;
 $0 = $in$addr;
 $isaline = ((($0)) + 4|0);
 $1 = HEAP32[$isaline>>2]|0;
 $tobool = ($1|0)!=(0);
 $2 = $in$addr;
 $d = ((($2)) + 8|0);
 if (!($tobool)) {
  $42 = HEAP32[$d>>2]|0;
  $th = $42;
  $43 = $th;
  $44 = HEAP32[99772]|0;
  $cmp42 = ($43|0)==($44|0);
  if ($cmp42) {
   $retval = 1;
   $73 = $retval;
   STACKTOP = sp;return ($73|0);
  }
  $45 = $th;
  $flags46 = ((($45)) + 104|0);
  $46 = HEAP32[$flags46>>2]|0;
  $and47 = $46 & 4;
  $tobool48 = ($and47|0)!=(0);
  if (!($tobool48)) {
   $retval = 1;
   $73 = $retval;
   STACKTOP = sp;return ($73|0);
  }
  $47 = HEAP32[99770]|0;
  $48 = $in$addr;
  $49 = HEAP32[$48>>2]|0;
  $call52 = (_FixedMul($47,$49)|0);
  $dist = $call52;
  $50 = $th;
  $z = ((($50)) + 20|0);
  $51 = HEAP32[$z>>2]|0;
  $52 = $th;
  $height = ((($52)) + 68|0);
  $53 = HEAP32[$height>>2]|0;
  $add = (($51) + ($53))|0;
  $54 = HEAP32[99771]|0;
  $sub53 = (($add) - ($54))|0;
  $55 = $dist;
  $call54 = (_FixedDiv($sub53,$55)|0);
  $thingtopslope = $call54;
  $56 = $thingtopslope;
  $57 = HEAP32[99894]|0;
  $cmp55 = ($56|0)<($57|0);
  if ($cmp55) {
   $retval = 1;
   $73 = $retval;
   STACKTOP = sp;return ($73|0);
  }
  $58 = $th;
  $z59 = ((($58)) + 20|0);
  $59 = HEAP32[$z59>>2]|0;
  $60 = HEAP32[99771]|0;
  $sub60 = (($59) - ($60))|0;
  $61 = $dist;
  $call61 = (_FixedDiv($sub60,$61)|0);
  $thingbottomslope = $call61;
  $62 = $thingbottomslope;
  $63 = HEAP32[99895]|0;
  $cmp62 = ($62|0)>($63|0);
  if ($cmp62) {
   $retval = 1;
   $73 = $retval;
   STACKTOP = sp;return ($73|0);
  }
  $64 = $thingtopslope;
  $65 = HEAP32[99895]|0;
  $cmp66 = ($64|0)>($65|0);
  if ($cmp66) {
   $66 = HEAP32[99895]|0;
   $thingtopslope = $66;
  }
  $67 = $thingbottomslope;
  $68 = HEAP32[99894]|0;
  $cmp70 = ($67|0)<($68|0);
  if ($cmp70) {
   $69 = HEAP32[99894]|0;
   $thingbottomslope = $69;
  }
  $70 = $thingtopslope;
  $71 = $thingbottomslope;
  $add74 = (($70) + ($71))|0;
  $div = (($add74|0) / 2)&-1;
  HEAP32[99773] = $div;
  $72 = $th;
  HEAP32[99774] = $72;
  $retval = 0;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 $3 = HEAP32[$d>>2]|0;
 $li = $3;
 $4 = $li;
 $flags = ((($4)) + 16|0);
 $5 = HEAP16[$flags>>1]|0;
 $conv = $5 << 16 >> 16;
 $and = $conv & 4;
 $tobool1 = ($and|0)!=(0);
 if (!($tobool1)) {
  $retval = 0;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 $6 = $li;
 _P_LineOpening($6);
 $7 = HEAP32[99785]|0;
 $8 = HEAP32[99784]|0;
 $cmp = ($7|0)>=($8|0);
 if ($cmp) {
  $retval = 0;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 $9 = HEAP32[99770]|0;
 $10 = $in$addr;
 $11 = HEAP32[$10>>2]|0;
 $call = (_FixedMul($9,$11)|0);
 $dist = $call;
 $12 = $li;
 $backsector = ((($12)) + 52|0);
 $13 = HEAP32[$backsector>>2]|0;
 $cmp6 = ($13|0)==(0|0);
 if ($cmp6) {
  label = 8;
 } else {
  $14 = $li;
  $frontsector = ((($14)) + 48|0);
  $15 = HEAP32[$frontsector>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $li;
  $backsector8 = ((($17)) + 52|0);
  $18 = HEAP32[$backsector8>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $cmp10 = ($16|0)!=($19|0);
  if ($cmp10) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $20 = HEAP32[99785]|0;
  $21 = HEAP32[99771]|0;
  $sub = (($20) - ($21))|0;
  $22 = $dist;
  $call13 = (_FixedDiv($sub,$22)|0);
  $slope = $call13;
  $23 = $slope;
  $24 = HEAP32[99894]|0;
  $cmp14 = ($23|0)>($24|0);
  if ($cmp14) {
   $25 = $slope;
   HEAP32[99894] = $25;
  }
 }
 $26 = $li;
 $backsector19 = ((($26)) + 52|0);
 $27 = HEAP32[$backsector19>>2]|0;
 $cmp20 = ($27|0)==(0|0);
 if ($cmp20) {
  label = 12;
 } else {
  $28 = $li;
  $frontsector23 = ((($28)) + 48|0);
  $29 = HEAP32[$frontsector23>>2]|0;
  $ceilingheight = ((($29)) + 4|0);
  $30 = HEAP32[$ceilingheight>>2]|0;
  $31 = $li;
  $backsector24 = ((($31)) + 52|0);
  $32 = HEAP32[$backsector24>>2]|0;
  $ceilingheight25 = ((($32)) + 4|0);
  $33 = HEAP32[$ceilingheight25>>2]|0;
  $cmp26 = ($30|0)!=($33|0);
  if ($cmp26) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $34 = HEAP32[99784]|0;
  $35 = HEAP32[99771]|0;
  $sub29 = (($34) - ($35))|0;
  $36 = $dist;
  $call30 = (_FixedDiv($sub29,$36)|0);
  $slope = $call30;
  $37 = $slope;
  $38 = HEAP32[99895]|0;
  $cmp31 = ($37|0)<($38|0);
  if ($cmp31) {
   $39 = $slope;
   HEAP32[99895] = $39;
  }
 }
 $40 = HEAP32[99895]|0;
 $41 = HEAP32[99894]|0;
 $cmp36 = ($40|0)<=($41|0);
 if ($cmp36) {
  $retval = 0;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 } else {
  $retval = 1;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _PTR_ShootTraverse($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add108 = 0, $add110 = 0, $add113 = 0, $add51 = 0, $add54 = 0, $add90 = 0, $and = 0, $and117 = 0, $and83 = 0, $backsector = 0, $backsector20 = 0, $backsector33 = 0, $backsector66 = 0;
 var $backsector68 = 0, $call = 0, $call105 = 0, $call107 = 0, $call109 = 0, $call111 = 0, $call112 = 0, $call15 = 0, $call26 = 0, $call39 = 0, $call47 = 0, $call49 = 0, $call50 = 0, $call52 = 0, $call53 = 0, $call88 = 0, $call9 = 0, $call92 = 0, $call99 = 0, $ceilingheight = 0;
 var $ceilingheight34 = 0, $ceilingheight61 = 0, $ceilingpic = 0, $ceilingpic69 = 0, $cmp = 0, $cmp10 = 0, $cmp100 = 0, $cmp16 = 0, $cmp22 = 0, $cmp27 = 0, $cmp35 = 0, $cmp40 = 0, $cmp57 = 0, $cmp62 = 0, $cmp71 = 0, $cmp78 = 0, $cmp93 = 0, $conv = 0, $conv56 = 0, $conv70 = 0;
 var $d = 0, $d114 = 0, $dist = 0, $flags = 0, $flags116 = 0, $flags82 = 0, $frac = 0, $frontsector = 0, $frontsector32 = 0, $frontsector55 = 0, $frontsector60 = 0, $height = 0, $in$addr = 0, $isaline = 0, $li = 0, $retval = 0, $slope = 0, $special = 0, $sub = 0, $sub106 = 0;
 var $sub14 = 0, $sub25 = 0, $sub38 = 0, $sub48 = 0, $sub91 = 0, $sub98 = 0, $th = 0, $thingbottomslope = 0, $thingtopslope = 0, $tobool = 0, $tobool1 = 0, $tobool118 = 0, $tobool122 = 0, $tobool3 = 0, $tobool67 = 0, $tobool84 = 0, $x = 0, $y = 0, $z = 0, $z89 = 0;
 var $z97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $in$addr = $in;
 $0 = $in$addr;
 $isaline = ((($0)) + 4|0);
 $1 = HEAP32[$isaline>>2]|0;
 $tobool = ($1|0)!=(0);
 $2 = $in$addr;
 $d = ((($2)) + 8|0);
 if (!($tobool)) {
  $78 = HEAP32[$d>>2]|0;
  $th = $78;
  $79 = $th;
  $80 = HEAP32[99772]|0;
  $cmp78 = ($79|0)==($80|0);
  if ($cmp78) {
   $retval = 1;
   $125 = $retval;
   STACKTOP = sp;return ($125|0);
  }
  $81 = $th;
  $flags82 = ((($81)) + 104|0);
  $82 = HEAP32[$flags82>>2]|0;
  $and83 = $82 & 4;
  $tobool84 = ($and83|0)!=(0);
  if (!($tobool84)) {
   $retval = 1;
   $125 = $retval;
   STACKTOP = sp;return ($125|0);
  }
  $83 = HEAP32[99770]|0;
  $84 = $in$addr;
  $85 = HEAP32[$84>>2]|0;
  $call88 = (_FixedMul($83,$85)|0);
  $dist = $call88;
  $86 = $th;
  $z89 = ((($86)) + 20|0);
  $87 = HEAP32[$z89>>2]|0;
  $88 = $th;
  $height = ((($88)) + 68|0);
  $89 = HEAP32[$height>>2]|0;
  $add90 = (($87) + ($89))|0;
  $90 = HEAP32[99771]|0;
  $sub91 = (($add90) - ($90))|0;
  $91 = $dist;
  $call92 = (_FixedDiv($sub91,$91)|0);
  $thingtopslope = $call92;
  $92 = $thingtopslope;
  $93 = HEAP32[99773]|0;
  $cmp93 = ($92|0)<($93|0);
  if ($cmp93) {
   $retval = 1;
   $125 = $retval;
   STACKTOP = sp;return ($125|0);
  }
  $94 = $th;
  $z97 = ((($94)) + 20|0);
  $95 = HEAP32[$z97>>2]|0;
  $96 = HEAP32[99771]|0;
  $sub98 = (($95) - ($96))|0;
  $97 = $dist;
  $call99 = (_FixedDiv($sub98,$97)|0);
  $thingbottomslope = $call99;
  $98 = $thingbottomslope;
  $99 = HEAP32[99773]|0;
  $cmp100 = ($98|0)>($99|0);
  if ($cmp100) {
   $retval = 1;
   $125 = $retval;
   STACKTOP = sp;return ($125|0);
  }
  $100 = $in$addr;
  $101 = HEAP32[$100>>2]|0;
  $102 = HEAP32[99770]|0;
  $call105 = (_FixedDiv(655360,$102)|0);
  $sub106 = (($101) - ($call105))|0;
  $frac = $sub106;
  $103 = HEAP32[99787]|0;
  $104 = HEAP32[(399156)>>2]|0;
  $105 = $frac;
  $call107 = (_FixedMul($104,$105)|0);
  $add108 = (($103) + ($call107))|0;
  $x = $add108;
  $106 = HEAP32[(399152)>>2]|0;
  $107 = HEAP32[(399160)>>2]|0;
  $108 = $frac;
  $call109 = (_FixedMul($107,$108)|0);
  $add110 = (($106) + ($call109))|0;
  $y = $add110;
  $109 = HEAP32[99771]|0;
  $110 = HEAP32[99773]|0;
  $111 = $frac;
  $112 = HEAP32[99770]|0;
  $call111 = (_FixedMul($111,$112)|0);
  $call112 = (_FixedMul($110,$call111)|0);
  $add113 = (($109) + ($call112))|0;
  $z = $add113;
  $113 = $in$addr;
  $d114 = ((($113)) + 8|0);
  $114 = HEAP32[$d114>>2]|0;
  $flags116 = ((($114)) + 104|0);
  $115 = HEAP32[$flags116>>2]|0;
  $and117 = $115 & 524288;
  $tobool118 = ($and117|0)!=(0);
  $116 = $x;
  $117 = $y;
  $118 = $z;
  if ($tobool118) {
   _P_SpawnPuff($116,$117,$118);
  } else {
   $119 = HEAP32[99775]|0;
   _P_SpawnBlood($116,$117,$118,$119);
  }
  $120 = HEAP32[99775]|0;
  $tobool122 = ($120|0)!=(0);
  if ($tobool122) {
   $121 = $th;
   $122 = HEAP32[99772]|0;
   $123 = HEAP32[99772]|0;
   $124 = HEAP32[99775]|0;
   _P_DamageMobj($121,$122,$123,$124);
  }
  $retval = 0;
  $125 = $retval;
  STACKTOP = sp;return ($125|0);
 }
 $3 = HEAP32[$d>>2]|0;
 $li = $3;
 $4 = $li;
 $special = ((($4)) + 18|0);
 $5 = HEAP16[$special>>1]|0;
 $tobool1 = ($5<<16>>16)!=(0);
 if ($tobool1) {
  $6 = HEAP32[99772]|0;
  $7 = $li;
  _P_ShootSpecialLine($6,$7);
 }
 $8 = $li;
 $flags = ((($8)) + 16|0);
 $9 = HEAP16[$flags>>1]|0;
 $conv = $9 << 16 >> 16;
 $and = $conv & 4;
 $tobool3 = ($and|0)!=(0);
 do {
  if ($tobool3) {
   $10 = $li;
   _P_LineOpening($10);
   $11 = HEAP32[99770]|0;
   $12 = $in$addr;
   $13 = HEAP32[$12>>2]|0;
   $call = (_FixedMul($11,$13)|0);
   $dist = $call;
   $14 = $li;
   $backsector = ((($14)) + 52|0);
   $15 = HEAP32[$backsector>>2]|0;
   $cmp = ($15|0)==(0|0);
   if ($cmp) {
    $16 = HEAP32[99785]|0;
    $17 = HEAP32[99771]|0;
    $sub = (($16) - ($17))|0;
    $18 = $dist;
    $call9 = (_FixedDiv($sub,$18)|0);
    $slope = $call9;
    $19 = $slope;
    $20 = HEAP32[99773]|0;
    $cmp10 = ($19|0)>($20|0);
    if ($cmp10) {
     break;
    }
    $21 = HEAP32[99784]|0;
    $22 = HEAP32[99771]|0;
    $sub14 = (($21) - ($22))|0;
    $23 = $dist;
    $call15 = (_FixedDiv($sub14,$23)|0);
    $slope = $call15;
    $24 = $slope;
    $25 = HEAP32[99773]|0;
    $cmp16 = ($24|0)<($25|0);
    if ($cmp16) {
     break;
    }
   } else {
    $26 = $li;
    $frontsector = ((($26)) + 48|0);
    $27 = HEAP32[$frontsector>>2]|0;
    $28 = HEAP32[$27>>2]|0;
    $29 = $li;
    $backsector20 = ((($29)) + 52|0);
    $30 = HEAP32[$backsector20>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $cmp22 = ($28|0)!=($31|0);
    if ($cmp22) {
     $32 = HEAP32[99785]|0;
     $33 = HEAP32[99771]|0;
     $sub25 = (($32) - ($33))|0;
     $34 = $dist;
     $call26 = (_FixedDiv($sub25,$34)|0);
     $slope = $call26;
     $35 = $slope;
     $36 = HEAP32[99773]|0;
     $cmp27 = ($35|0)>($36|0);
     if ($cmp27) {
      break;
     }
    }
    $37 = $li;
    $frontsector32 = ((($37)) + 48|0);
    $38 = HEAP32[$frontsector32>>2]|0;
    $ceilingheight = ((($38)) + 4|0);
    $39 = HEAP32[$ceilingheight>>2]|0;
    $40 = $li;
    $backsector33 = ((($40)) + 52|0);
    $41 = HEAP32[$backsector33>>2]|0;
    $ceilingheight34 = ((($41)) + 4|0);
    $42 = HEAP32[$ceilingheight34>>2]|0;
    $cmp35 = ($39|0)!=($42|0);
    if ($cmp35) {
     $43 = HEAP32[99784]|0;
     $44 = HEAP32[99771]|0;
     $sub38 = (($43) - ($44))|0;
     $45 = $dist;
     $call39 = (_FixedDiv($sub38,$45)|0);
     $slope = $call39;
     $46 = $slope;
     $47 = HEAP32[99773]|0;
     $cmp40 = ($46|0)<($47|0);
     if ($cmp40) {
      break;
     }
    }
   }
   $retval = 1;
   $125 = $retval;
   STACKTOP = sp;return ($125|0);
  }
 } while(0);
 $48 = $in$addr;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[99770]|0;
 $call47 = (_FixedDiv(262144,$50)|0);
 $sub48 = (($49) - ($call47))|0;
 $frac = $sub48;
 $51 = HEAP32[99787]|0;
 $52 = HEAP32[(399156)>>2]|0;
 $53 = $frac;
 $call49 = (_FixedMul($52,$53)|0);
 $add = (($51) + ($call49))|0;
 $x = $add;
 $54 = HEAP32[(399152)>>2]|0;
 $55 = HEAP32[(399160)>>2]|0;
 $56 = $frac;
 $call50 = (_FixedMul($55,$56)|0);
 $add51 = (($54) + ($call50))|0;
 $y = $add51;
 $57 = HEAP32[99771]|0;
 $58 = HEAP32[99773]|0;
 $59 = $frac;
 $60 = HEAP32[99770]|0;
 $call52 = (_FixedMul($59,$60)|0);
 $call53 = (_FixedMul($58,$call52)|0);
 $add54 = (($57) + ($call53))|0;
 $z = $add54;
 $61 = $li;
 $frontsector55 = ((($61)) + 48|0);
 $62 = HEAP32[$frontsector55>>2]|0;
 $ceilingpic = ((($62)) + 10|0);
 $63 = HEAP16[$ceilingpic>>1]|0;
 $conv56 = $63 << 16 >> 16;
 $64 = HEAP32[100032]|0;
 $cmp57 = ($conv56|0)==($64|0);
 if ($cmp57) {
  $65 = $z;
  $66 = $li;
  $frontsector60 = ((($66)) + 48|0);
  $67 = HEAP32[$frontsector60>>2]|0;
  $ceilingheight61 = ((($67)) + 4|0);
  $68 = HEAP32[$ceilingheight61>>2]|0;
  $cmp62 = ($65|0)>($68|0);
  if ($cmp62) {
   $retval = 0;
   $125 = $retval;
   STACKTOP = sp;return ($125|0);
  }
  $69 = $li;
  $backsector66 = ((($69)) + 52|0);
  $70 = HEAP32[$backsector66>>2]|0;
  $tobool67 = ($70|0)!=(0|0);
  if ($tobool67) {
   $71 = $li;
   $backsector68 = ((($71)) + 52|0);
   $72 = HEAP32[$backsector68>>2]|0;
   $ceilingpic69 = ((($72)) + 10|0);
   $73 = HEAP16[$ceilingpic69>>1]|0;
   $conv70 = $73 << 16 >> 16;
   $74 = HEAP32[100032]|0;
   $cmp71 = ($conv70|0)==($74|0);
   if ($cmp71) {
    $retval = 0;
    $125 = $retval;
    STACKTOP = sp;return ($125|0);
   }
  }
 }
 $75 = $x;
 $76 = $y;
 $77 = $z;
 _P_SpawnPuff($75,$76,$77);
 $retval = 0;
 $125 = $retval;
 STACKTOP = sp;return ($125|0);
}
function _P_AimLineAttack($t1,$angle,$distance) {
 $t1 = $t1|0;
 $angle = $angle|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $add7 = 0, $add8 = 0, $angle$addr = 0, $arrayidx = 0, $arrayidx3 = 0, $call = 0, $distance$addr = 0, $height = 0, $mul = 0, $mul4 = 0, $retval = 0;
 var $shr = 0, $shr1 = 0, $shr2 = 0, $shr6 = 0, $t1$addr = 0, $tobool = 0, $x = 0, $x2 = 0, $x9 = 0, $y = 0, $y10 = 0, $y2 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $t1$addr = $t1;
 $angle$addr = $angle;
 $distance$addr = $distance;
 $0 = $t1$addr;
 $call = (_P_SubstNullMobj($0)|0);
 $t1$addr = $call;
 $1 = $angle$addr;
 $shr = $1 >>> 19;
 $angle$addr = $shr;
 $2 = $t1$addr;
 HEAP32[99772] = $2;
 $3 = $t1$addr;
 $x = ((($3)) + 12|0);
 $4 = HEAP32[$x>>2]|0;
 $5 = $distance$addr;
 $shr1 = $5 >> 16;
 $6 = $angle$addr;
 $arrayidx = ((82992) + ($6<<2)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 $mul = Math_imul($shr1, $7)|0;
 $add = (($4) + ($mul))|0;
 $x2 = $add;
 $8 = $t1$addr;
 $y = ((($8)) + 16|0);
 $9 = HEAP32[$y>>2]|0;
 $10 = $distance$addr;
 $shr2 = $10 >> 16;
 $11 = $angle$addr;
 $arrayidx3 = (74800 + ($11<<2)|0);
 $12 = HEAP32[$arrayidx3>>2]|0;
 $mul4 = Math_imul($shr2, $12)|0;
 $add5 = (($9) + ($mul4))|0;
 $y2 = $add5;
 $13 = $t1$addr;
 $z = ((($13)) + 20|0);
 $14 = HEAP32[$z>>2]|0;
 $15 = $t1$addr;
 $height = ((($15)) + 68|0);
 $16 = HEAP32[$height>>2]|0;
 $shr6 = $16 >> 1;
 $add7 = (($14) + ($shr6))|0;
 $add8 = (($add7) + 524288)|0;
 HEAP32[99771] = $add8;
 HEAP32[99895] = 40960;
 HEAP32[99894] = -40960;
 $17 = $distance$addr;
 HEAP32[99770] = $17;
 HEAP32[99774] = 0;
 $18 = $t1$addr;
 $x9 = ((($18)) + 12|0);
 $19 = HEAP32[$x9>>2]|0;
 $20 = $t1$addr;
 $y10 = ((($20)) + 16|0);
 $21 = HEAP32[$y10>>2]|0;
 $22 = $x2;
 $23 = $y2;
 (_P_PathTraverse($19,$21,$22,$23,3,147)|0);
 $24 = HEAP32[99774]|0;
 $tobool = ($24|0)!=(0|0);
 if ($tobool) {
  $25 = HEAP32[99773]|0;
  $retval = $25;
  $26 = $retval;
  STACKTOP = sp;return ($26|0);
 } else {
  $retval = 0;
  $26 = $retval;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _P_LineAttack($t1,$angle,$distance,$slope,$damage) {
 $t1 = $t1|0;
 $angle = $angle|0;
 $distance = $distance|0;
 $slope = $slope|0;
 $damage = $damage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $add7 = 0, $add8 = 0, $angle$addr = 0, $arrayidx = 0, $arrayidx3 = 0, $damage$addr = 0, $distance$addr = 0, $height = 0, $mul = 0, $mul4 = 0, $shr = 0, $shr1 = 0, $shr2 = 0;
 var $shr6 = 0, $slope$addr = 0, $t1$addr = 0, $x = 0, $x2 = 0, $x9 = 0, $y = 0, $y10 = 0, $y2 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $t1$addr = $t1;
 $angle$addr = $angle;
 $distance$addr = $distance;
 $slope$addr = $slope;
 $damage$addr = $damage;
 $0 = $angle$addr;
 $shr = $0 >>> 19;
 $angle$addr = $shr;
 $1 = $t1$addr;
 HEAP32[99772] = $1;
 $2 = $damage$addr;
 HEAP32[99775] = $2;
 $3 = $t1$addr;
 $x = ((($3)) + 12|0);
 $4 = HEAP32[$x>>2]|0;
 $5 = $distance$addr;
 $shr1 = $5 >> 16;
 $6 = $angle$addr;
 $arrayidx = ((82992) + ($6<<2)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 $mul = Math_imul($shr1, $7)|0;
 $add = (($4) + ($mul))|0;
 $x2 = $add;
 $8 = $t1$addr;
 $y = ((($8)) + 16|0);
 $9 = HEAP32[$y>>2]|0;
 $10 = $distance$addr;
 $shr2 = $10 >> 16;
 $11 = $angle$addr;
 $arrayidx3 = (74800 + ($11<<2)|0);
 $12 = HEAP32[$arrayidx3>>2]|0;
 $mul4 = Math_imul($shr2, $12)|0;
 $add5 = (($9) + ($mul4))|0;
 $y2 = $add5;
 $13 = $t1$addr;
 $z = ((($13)) + 20|0);
 $14 = HEAP32[$z>>2]|0;
 $15 = $t1$addr;
 $height = ((($15)) + 68|0);
 $16 = HEAP32[$height>>2]|0;
 $shr6 = $16 >> 1;
 $add7 = (($14) + ($shr6))|0;
 $add8 = (($add7) + 524288)|0;
 HEAP32[99771] = $add8;
 $17 = $distance$addr;
 HEAP32[99770] = $17;
 $18 = $slope$addr;
 HEAP32[99773] = $18;
 $19 = $t1$addr;
 $x9 = ((($19)) + 12|0);
 $20 = HEAP32[$x9>>2]|0;
 $21 = $t1$addr;
 $y10 = ((($21)) + 16|0);
 $22 = HEAP32[$y10>>2]|0;
 $23 = $x2;
 $24 = $y2;
 (_P_PathTraverse($20,$22,$23,$24,3,148)|0);
 STACKTOP = sp;return;
}
function _PTR_UseTraverse($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0;
 var $cmp7 = 0, $d = 0, $d1 = 0, $d10 = 0, $d5 = 0, $in$addr = 0, $retval = 0, $side = 0, $special = 0, $tobool = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $in$addr = $in;
 $0 = $in$addr;
 $d = ((($0)) + 8|0);
 $1 = HEAP32[$d>>2]|0;
 $special = ((($1)) + 18|0);
 $2 = HEAP16[$special>>1]|0;
 $tobool = ($2<<16>>16)!=(0);
 if ($tobool) {
  $side = 0;
  $7 = HEAP32[99776]|0;
  $x = ((($7)) + 12|0);
  $8 = HEAP32[$x>>2]|0;
  $9 = HEAP32[99776]|0;
  $y = ((($9)) + 16|0);
  $10 = HEAP32[$y>>2]|0;
  $11 = $in$addr;
  $d5 = ((($11)) + 8|0);
  $12 = HEAP32[$d5>>2]|0;
  $call = (_P_PointOnLineSide($8,$10,$12)|0);
  $cmp7 = ($call|0)==(1);
  if ($cmp7) {
   $side = 1;
  }
  $13 = HEAP32[99776]|0;
  $14 = $in$addr;
  $d10 = ((($14)) + 8|0);
  $15 = HEAP32[$d10>>2]|0;
  $16 = $side;
  (_P_UseSpecialLine($13,$15,$16)|0);
  $retval = 0;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 $3 = $in$addr;
 $d1 = ((($3)) + 8|0);
 $4 = HEAP32[$d1>>2]|0;
 _P_LineOpening($4);
 $5 = HEAP32[99783]|0;
 $cmp = ($5|0)<=(0);
 if ($cmp) {
  $6 = HEAP32[99776]|0;
  _S_StartSound($6,81);
  $retval = 0;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 } else {
  $retval = 1;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _P_UseLines($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add7 = 0, $angle = 0, $angle2 = 0, $arrayidx = 0, $arrayidx5 = 0, $mul = 0, $mul6 = 0, $player$addr = 0, $shr = 0, $x = 0, $x1 = 0, $x2 = 0, $y = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $player$addr = $player;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[99776] = $1;
 $2 = $player$addr;
 $3 = HEAP32[$2>>2]|0;
 $angle2 = ((($3)) + 32|0);
 $4 = HEAP32[$angle2>>2]|0;
 $shr = $4 >>> 19;
 $angle = $shr;
 $5 = $player$addr;
 $6 = HEAP32[$5>>2]|0;
 $x = ((($6)) + 12|0);
 $7 = HEAP32[$x>>2]|0;
 $x1 = $7;
 $8 = $player$addr;
 $9 = HEAP32[$8>>2]|0;
 $y = ((($9)) + 16|0);
 $10 = HEAP32[$y>>2]|0;
 $y1 = $10;
 $11 = $x1;
 $12 = $angle;
 $arrayidx = ((82992) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $mul = $13<<6;
 $add = (($11) + ($mul))|0;
 $x2 = $add;
 $14 = $y1;
 $15 = $angle;
 $arrayidx5 = (74800 + ($15<<2)|0);
 $16 = HEAP32[$arrayidx5>>2]|0;
 $mul6 = $16<<6;
 $add7 = (($14) + ($mul6))|0;
 $y2 = $add7;
 $17 = $x1;
 $18 = $y1;
 $19 = $x2;
 $20 = $y2;
 (_P_PathTraverse($17,$18,$19,$20,1,149)|0);
 STACKTOP = sp;return;
}
function _PIT_RadiusAttack($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call17 = 0, $call8 = 0, $cmp = 0, $cmp11 = 0, $cmp14 = 0, $cmp2 = 0;
 var $cmp9 = 0, $cond = 0, $dist = 0, $dx = 0, $dy = 0, $flags = 0, $radius = 0, $retval = 0, $shr = 0, $spec$store$select = 0, $sub = 0, $sub10 = 0, $sub20 = 0, $sub7 = 0, $thing$addr = 0, $tobool = 0, $tobool18 = 0, $type = 0, $type1 = 0, $x = 0;
 var $x5 = 0, $y = 0, $y6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $retval = 1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 $2 = $thing$addr;
 $type = ((($2)) + 88|0);
 $3 = HEAP32[$type>>2]|0;
 $cmp = ($3|0)==(21);
 if (!($cmp)) {
  $4 = $thing$addr;
  $type1 = ((($4)) + 88|0);
  $5 = HEAP32[$type1>>2]|0;
  $cmp2 = ($5|0)==(19);
  if (!($cmp2)) {
   $6 = $thing$addr;
   $x = ((($6)) + 12|0);
   $7 = HEAP32[$x>>2]|0;
   $8 = HEAP32[99777]|0;
   $x5 = ((($8)) + 12|0);
   $9 = HEAP32[$x5>>2]|0;
   $sub = (($7) - ($9))|0;
   $call = (Math_abs(($sub|0))|0);
   $dx = $call;
   $10 = $thing$addr;
   $y = ((($10)) + 16|0);
   $11 = HEAP32[$y>>2]|0;
   $12 = HEAP32[99777]|0;
   $y6 = ((($12)) + 16|0);
   $13 = HEAP32[$y6>>2]|0;
   $sub7 = (($11) - ($13))|0;
   $call8 = (Math_abs(($sub7|0))|0);
   $dy = $call8;
   $14 = $dx;
   $15 = $dy;
   $cmp9 = ($14|0)>($15|0);
   $16 = $dx;
   $17 = $dy;
   $cond = $cmp9 ? $16 : $17;
   $dist = $cond;
   $18 = $dist;
   $19 = $thing$addr;
   $radius = ((($19)) + 64|0);
   $20 = HEAP32[$radius>>2]|0;
   $sub10 = (($18) - ($20))|0;
   $shr = $sub10 >> 16;
   $dist = $shr;
   $21 = $dist;
   $cmp11 = ($21|0)<(0);
   $spec$store$select = $cmp11 ? 0 : $shr;
   $dist = $spec$store$select;
   $22 = $dist;
   $23 = HEAP32[99778]|0;
   $cmp14 = ($22|0)>=($23|0);
   if ($cmp14) {
    $retval = 1;
    $31 = $retval;
    STACKTOP = sp;return ($31|0);
   }
   $24 = $thing$addr;
   $25 = HEAP32[99777]|0;
   $call17 = (_P_CheckSight($24,$25)|0);
   $tobool18 = ($call17|0)!=(0);
   if ($tobool18) {
    $26 = $thing$addr;
    $27 = HEAP32[99777]|0;
    $28 = HEAP32[99779]|0;
    $29 = HEAP32[99778]|0;
    $30 = $dist;
    $sub20 = (($29) - ($30))|0;
    _P_DamageMobj($26,$27,$28,$sub20);
   }
   $retval = 1;
   $31 = $retval;
   STACKTOP = sp;return ($31|0);
  }
 }
 $retval = 1;
 $31 = $retval;
 STACKTOP = sp;return ($31|0);
}
function _P_RadiusAttack($spot,$source,$damage) {
 $spot = $spot|0;
 $source = $source|0;
 $damage = $damage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add2 = 0, $add8 = 0, $cmp = 0, $cmp16 = 0, $damage$addr = 0, $dist = 0, $inc = 0, $inc19 = 0, $shl = 0;
 var $shr = 0, $shr10 = 0, $shr14 = 0, $shr6 = 0, $source$addr = 0, $spot$addr = 0, $sub = 0, $sub12 = 0, $sub13 = 0, $sub4 = 0, $sub5 = 0, $sub9 = 0, $x = 0, $x11 = 0, $x7 = 0, $xh = 0, $xl = 0, $y = 0, $y1 = 0, $y3 = 0;
 var $yh = 0, $yl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $spot$addr = $spot;
 $source$addr = $source;
 $damage$addr = $damage;
 $0 = $damage$addr;
 $add = (($0) + 2097152)|0;
 $shl = $add << 16;
 $dist = $shl;
 $1 = $spot$addr;
 $y1 = ((($1)) + 16|0);
 $2 = HEAP32[$y1>>2]|0;
 $3 = $dist;
 $add2 = (($2) + ($3))|0;
 $4 = HEAP32[99857]|0;
 $sub = (($add2) - ($4))|0;
 $shr = $sub >> 23;
 $yh = $shr;
 $5 = $spot$addr;
 $y3 = ((($5)) + 16|0);
 $6 = HEAP32[$y3>>2]|0;
 $7 = $dist;
 $sub4 = (($6) - ($7))|0;
 $8 = HEAP32[99857]|0;
 $sub5 = (($sub4) - ($8))|0;
 $shr6 = $sub5 >> 23;
 $yl = $shr6;
 $9 = $spot$addr;
 $x7 = ((($9)) + 12|0);
 $10 = HEAP32[$x7>>2]|0;
 $11 = $dist;
 $add8 = (($10) + ($11))|0;
 $12 = HEAP32[99856]|0;
 $sub9 = (($add8) - ($12))|0;
 $shr10 = $sub9 >> 23;
 $xh = $shr10;
 $13 = $spot$addr;
 $x11 = ((($13)) + 12|0);
 $14 = HEAP32[$x11>>2]|0;
 $15 = $dist;
 $sub12 = (($14) - ($15))|0;
 $16 = HEAP32[99856]|0;
 $sub13 = (($sub12) - ($16))|0;
 $shr14 = $sub13 >> 23;
 $xl = $shr14;
 $17 = $spot$addr;
 HEAP32[99777] = $17;
 $18 = $source$addr;
 HEAP32[99779] = $18;
 $19 = $damage$addr;
 HEAP32[99778] = $19;
 $20 = $yl;
 $y = $20;
 while(1) {
  $21 = $y;
  $22 = $yh;
  $cmp = ($21|0)<=($22|0);
  if (!($cmp)) {
   break;
  }
  $23 = $xl;
  $x = $23;
  while(1) {
   $24 = $x;
   $25 = $xh;
   $cmp16 = ($24|0)<=($25|0);
   if (!($cmp16)) {
    break;
   }
   $26 = $x;
   $27 = $y;
   (_P_BlockThingsIterator($26,$27,150)|0);
   $28 = $x;
   $inc = (($28) + 1)|0;
   $x = $inc;
  }
  $29 = $y;
  $inc19 = (($29) + 1)|0;
  $y = $inc19;
 }
 STACKTOP = sp;return;
}
function _PIT_ChangeSector($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and10 = 0, $and15 = 0, $and5 = 0, $call = 0, $call19 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $cmp = 0, $div = 0, $flags = 0, $flags4 = 0;
 var $flags9 = 0, $health = 0, $height = 0, $height18 = 0, $mo = 0, $momx = 0, $momy = 0, $radius = 0, $retval = 0, $shl = 0, $shl25 = 0, $sub = 0, $sub24 = 0, $thing$addr = 0, $tobool = 0, $tobool11 = 0, $tobool14 = 0, $tobool16 = 0, $tobool6 = 0, $x = 0;
 var $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $call = (_P_ThingHeightClip($0)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $retval = 1;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 $1 = $thing$addr;
 $health = ((($1)) + 108|0);
 $2 = HEAP32[$health>>2]|0;
 $cmp = ($2|0)<=(0);
 $3 = $thing$addr;
 if ($cmp) {
  (_P_SetMobjState($3,895)|0);
  $4 = $thing$addr;
  $flags = ((($4)) + 104|0);
  $5 = HEAP32[$flags>>2]|0;
  $and = $5 & -3;
  HEAP32[$flags>>2] = $and;
  $6 = $thing$addr;
  $height = ((($6)) + 68|0);
  HEAP32[$height>>2] = 0;
  $7 = $thing$addr;
  $radius = ((($7)) + 64|0);
  HEAP32[$radius>>2] = 0;
  $retval = 1;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 $flags4 = ((($3)) + 104|0);
 $8 = HEAP32[$flags4>>2]|0;
 $and5 = $8 & 131072;
 $tobool6 = ($and5|0)!=(0);
 $9 = $thing$addr;
 if ($tobool6) {
  _P_RemoveMobj($9);
  $retval = 1;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 $flags9 = ((($9)) + 104|0);
 $10 = HEAP32[$flags9>>2]|0;
 $and10 = $10 & 4;
 $tobool11 = ($and10|0)!=(0);
 if (!($tobool11)) {
  $retval = 1;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 HEAP32[99780] = 1;
 $11 = HEAP32[99781]|0;
 $tobool14 = ($11|0)!=(0);
 if ($tobool14) {
  $12 = HEAP32[99905]|0;
  $and15 = $12 & 3;
  $tobool16 = ($and15|0)!=(0);
  if (!($tobool16)) {
   $13 = $thing$addr;
   _P_DamageMobj($13,0,0,10);
   $14 = $thing$addr;
   $x = ((($14)) + 12|0);
   $15 = HEAP32[$x>>2]|0;
   $16 = $thing$addr;
   $y = ((($16)) + 16|0);
   $17 = HEAP32[$y>>2]|0;
   $18 = $thing$addr;
   $z = ((($18)) + 20|0);
   $19 = HEAP32[$z>>2]|0;
   $20 = $thing$addr;
   $height18 = ((($20)) + 68|0);
   $21 = HEAP32[$height18>>2]|0;
   $div = (($21|0) / 2)&-1;
   $add = (($19) + ($div))|0;
   $call19 = (_P_SpawnMobj($15,$17,$add,38)|0);
   $mo = $call19;
   $call20 = (_P_Random()|0);
   $call21 = (_P_Random()|0);
   $sub = (($call20) - ($call21))|0;
   $shl = $sub << 12;
   $22 = $mo;
   $momx = ((($22)) + 72|0);
   HEAP32[$momx>>2] = $shl;
   $call22 = (_P_Random()|0);
   $call23 = (_P_Random()|0);
   $sub24 = (($call22) - ($call23))|0;
   $shl25 = $sub24 << 12;
   $23 = $mo;
   $momy = ((($23)) + 76|0);
   HEAP32[$momy>>2] = $shl25;
  }
 }
 $retval = 1;
 $24 = $retval;
 STACKTOP = sp;return ($24|0);
}
function _P_ChangeSector($sector,$crunch) {
 $sector = $sector|0;
 $crunch = $crunch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0, $blockbox = 0, $blockbox1 = 0;
 var $blockbox3 = 0, $blockbox6 = 0, $cmp = 0, $cmp8 = 0, $crunch$addr = 0, $inc = 0, $inc11 = 0, $sector$addr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sector$addr = $sector;
 $crunch$addr = $crunch;
 HEAP32[99780] = 0;
 $0 = $crunch$addr;
 HEAP32[99781] = $0;
 $1 = $sector$addr;
 $blockbox = ((($1)) + 28|0);
 $arrayidx = ((($blockbox)) + 8|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $x = $2;
 while(1) {
  $3 = $x;
  $4 = $sector$addr;
  $blockbox1 = ((($4)) + 28|0);
  $arrayidx2 = ((($blockbox1)) + 12|0);
  $5 = HEAP32[$arrayidx2>>2]|0;
  $cmp = ($3|0)<=($5|0);
  if (!($cmp)) {
   break;
  }
  $6 = $sector$addr;
  $blockbox3 = ((($6)) + 28|0);
  $arrayidx4 = ((($blockbox3)) + 4|0);
  $7 = HEAP32[$arrayidx4>>2]|0;
  $y = $7;
  while(1) {
   $8 = $y;
   $9 = $sector$addr;
   $blockbox6 = ((($9)) + 28|0);
   $10 = HEAP32[$blockbox6>>2]|0;
   $cmp8 = ($8|0)<=($10|0);
   $11 = $x;
   if (!($cmp8)) {
    break;
   }
   $12 = $y;
   (_P_BlockThingsIterator($11,$12,151)|0);
   $13 = $y;
   $inc = (($13) + 1)|0;
   $y = $inc;
  }
  $inc11 = (($11) + 1)|0;
  $x = $inc11;
 }
 $14 = HEAP32[99780]|0;
 STACKTOP = sp;return ($14|0);
}
function _P_AproxDistance($dx,$dy) {
 $dx = $dx|0;
 $dy = $dy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $call = 0, $call1 = 0, $cmp = 0, $dx$addr = 0, $dy$addr = 0, $retval = 0, $shr = 0, $shr3 = 0, $sub = 0, $sub4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dx$addr = $dx;
 $dy$addr = $dy;
 $0 = $dx$addr;
 $call = (Math_abs(($0|0))|0);
 $dx$addr = $call;
 $1 = $dy$addr;
 $call1 = (Math_abs(($1|0))|0);
 $dy$addr = $call1;
 $2 = $dx$addr;
 $3 = $dy$addr;
 $cmp = ($2|0)<($3|0);
 $4 = $dx$addr;
 $5 = $dy$addr;
 $add = (($4) + ($5))|0;
 if ($cmp) {
  $6 = $dx$addr;
  $shr = $6 >> 1;
  $sub = (($add) - ($shr))|0;
  $retval = $sub;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 } else {
  $7 = $dy$addr;
  $shr3 = $7 >> 1;
  $sub4 = (($add) - ($shr3))|0;
  $retval = $sub4;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _P_PointOnLineSide($x,$y,$line) {
 $x = $x|0;
 $y = $y|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call34 = 0, $cmp = 0, $cmp15 = 0, $cmp19 = 0, $cmp23 = 0, $cmp35 = 0;
 var $cmp5 = 0, $cmp7 = 0, $conv = 0, $conv20 = 0, $conv24 = 0, $conv8 = 0, $dx = 0, $dx1 = 0, $dx18 = 0, $dx32 = 0, $dy = 0, $dy10 = 0, $dy31 = 0, $dy4 = 0, $left = 0, $line$addr = 0, $retval = 0, $right = 0, $shr = 0, $shr33 = 0;
 var $sub = 0, $sub30 = 0, $tobool = 0, $tobool11 = 0, $x$addr = 0, $y$addr = 0, $y14 = 0, $y29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $line$addr = $line;
 $0 = $line$addr;
 $dx1 = ((($0)) + 8|0);
 $1 = HEAP32[$dx1>>2]|0;
 $tobool = ($1|0)!=(0);
 if (!($tobool)) {
  $2 = $x$addr;
  $3 = $line$addr;
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $cmp = ($2|0)<=($5|0);
  $6 = $line$addr;
  $dy4 = ((($6)) + 12|0);
  $7 = HEAP32[$dy4>>2]|0;
  if ($cmp) {
   $cmp5 = ($7|0)>(0);
   $conv = $cmp5&1;
   $retval = $conv;
   $32 = $retval;
   STACKTOP = sp;return ($32|0);
  } else {
   $cmp7 = ($7|0)<(0);
   $conv8 = $cmp7&1;
   $retval = $conv8;
   $32 = $retval;
   STACKTOP = sp;return ($32|0);
  }
 }
 $8 = $line$addr;
 $dy10 = ((($8)) + 12|0);
 $9 = HEAP32[$dy10>>2]|0;
 $tobool11 = ($9|0)!=(0);
 if ($tobool11) {
  $16 = $x$addr;
  $17 = $line$addr;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $sub = (($16) - ($19))|0;
  $dx = $sub;
  $20 = $y$addr;
  $21 = $line$addr;
  $22 = HEAP32[$21>>2]|0;
  $y29 = ((($22)) + 4|0);
  $23 = HEAP32[$y29>>2]|0;
  $sub30 = (($20) - ($23))|0;
  $dy = $sub30;
  $24 = $line$addr;
  $dy31 = ((($24)) + 12|0);
  $25 = HEAP32[$dy31>>2]|0;
  $shr = $25 >> 16;
  $26 = $dx;
  $call = (_FixedMul($shr,$26)|0);
  $left = $call;
  $27 = $dy;
  $28 = $line$addr;
  $dx32 = ((($28)) + 8|0);
  $29 = HEAP32[$dx32>>2]|0;
  $shr33 = $29 >> 16;
  $call34 = (_FixedMul($27,$shr33)|0);
  $right = $call34;
  $30 = $right;
  $31 = $left;
  $cmp35 = ($30|0)<($31|0);
  if ($cmp35) {
   $retval = 0;
   $32 = $retval;
   STACKTOP = sp;return ($32|0);
  } else {
   $retval = 1;
   $32 = $retval;
   STACKTOP = sp;return ($32|0);
  }
 } else {
  $10 = $y$addr;
  $11 = $line$addr;
  $12 = HEAP32[$11>>2]|0;
  $y14 = ((($12)) + 4|0);
  $13 = HEAP32[$y14>>2]|0;
  $cmp15 = ($10|0)<=($13|0);
  $14 = $line$addr;
  $dx18 = ((($14)) + 8|0);
  $15 = HEAP32[$dx18>>2]|0;
  if ($cmp15) {
   $cmp19 = ($15|0)<(0);
   $conv20 = $cmp19&1;
   $retval = $conv20;
   $32 = $retval;
   STACKTOP = sp;return ($32|0);
  } else {
   $cmp23 = ($15|0)>(0);
   $conv24 = $cmp23&1;
   $retval = $conv24;
   $32 = $retval;
   STACKTOP = sp;return ($32|0);
  }
 }
 return (0)|0;
}
function _P_BoxOnLineSide($tmbox,$ld) {
 $tmbox = $tmbox|0;
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx26 = 0, $arrayidx28 = 0, $arrayidx29 = 0;
 var $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx36 = 0, $call = 0, $call30 = 0, $call34 = 0, $call37 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp19 = 0, $cmp38 = 0, $cmp4 = 0, $cmp6 = 0, $conv = 0, $conv13 = 0, $conv18 = 0, $conv5 = 0, $dx = 0, $dy = 0;
 var $ld$addr = 0, $p1 = 0, $p2 = 0, $retval = 0, $slopetype = 0, $tmbox$addr = 0, $xor = 0, $xor22 = 0, $xor23 = 0, $xor8 = 0, $y = 0, $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmbox$addr = $tmbox;
 $ld$addr = $ld;
 $p1 = 0;
 $p2 = 0;
 $0 = $ld$addr;
 $slopetype = ((($0)) + 44|0);
 $1 = HEAP32[$slopetype>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = $tmbox$addr;
  $3 = HEAP32[$2>>2]|0;
  $4 = $ld$addr;
  $5 = HEAP32[$4>>2]|0;
  $y = ((($5)) + 4|0);
  $6 = HEAP32[$y>>2]|0;
  $cmp = ($3|0)>($6|0);
  $conv = $cmp&1;
  $p1 = $conv;
  $7 = $tmbox$addr;
  $arrayidx1 = ((($7)) + 4|0);
  $8 = HEAP32[$arrayidx1>>2]|0;
  $9 = $ld$addr;
  $10 = HEAP32[$9>>2]|0;
  $y3 = ((($10)) + 4|0);
  $11 = HEAP32[$y3>>2]|0;
  $cmp4 = ($8|0)>($11|0);
  $conv5 = $cmp4&1;
  $p2 = $conv5;
  $12 = $ld$addr;
  $dx = ((($12)) + 8|0);
  $13 = HEAP32[$dx>>2]|0;
  $cmp6 = ($13|0)<(0);
  if ($cmp6) {
   $14 = $p1;
   $xor = $14 ^ 1;
   $p1 = $xor;
   $15 = $p2;
   $xor8 = $15 ^ 1;
   $p2 = $xor8;
  }
  break;
 }
 case 1:  {
  $16 = $tmbox$addr;
  $arrayidx10 = ((($16)) + 12|0);
  $17 = HEAP32[$arrayidx10>>2]|0;
  $18 = $ld$addr;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $cmp12 = ($17|0)<($20|0);
  $conv13 = $cmp12&1;
  $p1 = $conv13;
  $21 = $tmbox$addr;
  $arrayidx14 = ((($21)) + 8|0);
  $22 = HEAP32[$arrayidx14>>2]|0;
  $23 = $ld$addr;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $cmp17 = ($22|0)<($25|0);
  $conv18 = $cmp17&1;
  $p2 = $conv18;
  $26 = $ld$addr;
  $dy = ((($26)) + 12|0);
  $27 = HEAP32[$dy>>2]|0;
  $cmp19 = ($27|0)<(0);
  if ($cmp19) {
   $28 = $p1;
   $xor22 = $28 ^ 1;
   $p1 = $xor22;
   $29 = $p2;
   $xor23 = $29 ^ 1;
   $p2 = $xor23;
  }
  break;
 }
 case 2:  {
  $30 = $tmbox$addr;
  $arrayidx26 = ((($30)) + 8|0);
  $31 = HEAP32[$arrayidx26>>2]|0;
  $32 = $tmbox$addr;
  $33 = HEAP32[$32>>2]|0;
  $34 = $ld$addr;
  $call = (_P_PointOnLineSide($31,$33,$34)|0);
  $p1 = $call;
  $35 = $tmbox$addr;
  $arrayidx28 = ((($35)) + 12|0);
  $36 = HEAP32[$arrayidx28>>2]|0;
  $37 = $tmbox$addr;
  $arrayidx29 = ((($37)) + 4|0);
  $38 = HEAP32[$arrayidx29>>2]|0;
  $39 = $ld$addr;
  $call30 = (_P_PointOnLineSide($36,$38,$39)|0);
  $p2 = $call30;
  break;
 }
 case 3:  {
  $40 = $tmbox$addr;
  $arrayidx32 = ((($40)) + 12|0);
  $41 = HEAP32[$arrayidx32>>2]|0;
  $42 = $tmbox$addr;
  $43 = HEAP32[$42>>2]|0;
  $44 = $ld$addr;
  $call34 = (_P_PointOnLineSide($41,$43,$44)|0);
  $p1 = $call34;
  $45 = $tmbox$addr;
  $arrayidx35 = ((($45)) + 8|0);
  $46 = HEAP32[$arrayidx35>>2]|0;
  $47 = $tmbox$addr;
  $arrayidx36 = ((($47)) + 4|0);
  $48 = HEAP32[$arrayidx36>>2]|0;
  $49 = $ld$addr;
  $call37 = (_P_PointOnLineSide($46,$48,$49)|0);
  $p2 = $call37;
  break;
 }
 default: {
 }
 }
 $50 = $p1;
 $51 = $p2;
 $cmp38 = ($50|0)==($51|0);
 if ($cmp38) {
  $52 = $p1;
  $retval = $52;
  $53 = $retval;
  STACKTOP = sp;return ($53|0);
 } else {
  $retval = -1;
  $53 = $retval;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _P_PointOnDivlineSide($x,$y,$line) {
 $x = $x|0;
 $y = $y|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and36 = 0, $call = 0, $call46 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp18 = 0, $cmp22 = 0, $cmp47 = 0, $cmp5 = 0, $cmp7 = 0, $conv = 0, $conv19 = 0, $conv23 = 0, $conv8 = 0, $dx = 0, $dx1 = 0, $dx17 = 0, $dx29 = 0, $dx44 = 0, $dy = 0, $dy10 = 0, $dy28 = 0, $dy34 = 0;
 var $dy4 = 0, $left = 0, $line$addr = 0, $retval = 0, $right = 0, $shr = 0, $shr42 = 0, $shr43 = 0, $shr45 = 0, $sub = 0, $sub27 = 0, $tobool = 0, $tobool11 = 0, $tobool32 = 0, $tobool37 = 0, $x$addr = 0, $xor = 0, $xor30 = 0, $xor31 = 0, $xor35 = 0;
 var $y$addr = 0, $y13 = 0, $y26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $line$addr = $line;
 $0 = $line$addr;
 $dx1 = ((($0)) + 8|0);
 $1 = HEAP32[$dx1>>2]|0;
 $tobool = ($1|0)!=(0);
 if (!($tobool)) {
  $2 = $x$addr;
  $3 = $line$addr;
  $4 = HEAP32[$3>>2]|0;
  $cmp = ($2|0)<=($4|0);
  $5 = $line$addr;
  $dy4 = ((($5)) + 12|0);
  $6 = HEAP32[$dy4>>2]|0;
  if ($cmp) {
   $cmp5 = ($6|0)>(0);
   $conv = $cmp5&1;
   $retval = $conv;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $cmp7 = ($6|0)<(0);
   $conv8 = $cmp7&1;
   $retval = $conv8;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 $7 = $line$addr;
 $dy10 = ((($7)) + 12|0);
 $8 = HEAP32[$dy10>>2]|0;
 $tobool11 = ($8|0)!=(0);
 if (!($tobool11)) {
  $9 = $y$addr;
  $10 = $line$addr;
  $y13 = ((($10)) + 4|0);
  $11 = HEAP32[$y13>>2]|0;
  $cmp14 = ($9|0)<=($11|0);
  $12 = $line$addr;
  $dx17 = ((($12)) + 8|0);
  $13 = HEAP32[$dx17>>2]|0;
  if ($cmp14) {
   $cmp18 = ($13|0)<(0);
   $conv19 = $cmp18&1;
   $retval = $conv19;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $cmp22 = ($13|0)>(0);
   $conv23 = $cmp22&1;
   $retval = $conv23;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 $14 = $x$addr;
 $15 = $line$addr;
 $16 = HEAP32[$15>>2]|0;
 $sub = (($14) - ($16))|0;
 $dx = $sub;
 $17 = $y$addr;
 $18 = $line$addr;
 $y26 = ((($18)) + 4|0);
 $19 = HEAP32[$y26>>2]|0;
 $sub27 = (($17) - ($19))|0;
 $dy = $sub27;
 $20 = $line$addr;
 $dy28 = ((($20)) + 12|0);
 $21 = HEAP32[$dy28>>2]|0;
 $22 = $line$addr;
 $dx29 = ((($22)) + 8|0);
 $23 = HEAP32[$dx29>>2]|0;
 $xor = $21 ^ $23;
 $24 = $dx;
 $xor30 = $xor ^ $24;
 $25 = $dy;
 $xor31 = $xor30 ^ $25;
 $and = $xor31 & -2147483648;
 $tobool32 = ($and|0)!=(0);
 $26 = $line$addr;
 $dy34 = ((($26)) + 12|0);
 $27 = HEAP32[$dy34>>2]|0;
 if ($tobool32) {
  $28 = $dx;
  $xor35 = $27 ^ $28;
  $and36 = $xor35 & -2147483648;
  $tobool37 = ($and36|0)!=(0);
  if ($tobool37) {
   $retval = 1;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $retval = 0;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 } else {
  $shr = $27 >> 8;
  $29 = $dx;
  $shr42 = $29 >> 8;
  $call = (_FixedMul($shr,$shr42)|0);
  $left = $call;
  $30 = $dy;
  $shr43 = $30 >> 8;
  $31 = $line$addr;
  $dx44 = ((($31)) + 8|0);
  $32 = HEAP32[$dx44>>2]|0;
  $shr45 = $32 >> 8;
  $call46 = (_FixedMul($shr43,$shr45)|0);
  $right = $call46;
  $33 = $right;
  $34 = $left;
  $cmp47 = ($33|0)<($34|0);
  if ($cmp47) {
   $retval = 0;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $retval = 1;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 return (0)|0;
}
function _P_MakeDivline($li,$dl) {
 $li = $li|0;
 $dl = $dl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dl$addr = 0, $dx = 0, $dx4 = 0, $dy = 0, $dy5 = 0, $li$addr = 0;
 var $y = 0, $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $li$addr = $li;
 $dl$addr = $dl;
 $0 = $li$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $dl$addr;
 HEAP32[$3>>2] = $2;
 $4 = $li$addr;
 $5 = HEAP32[$4>>2]|0;
 $y = ((($5)) + 4|0);
 $6 = HEAP32[$y>>2]|0;
 $7 = $dl$addr;
 $y3 = ((($7)) + 4|0);
 HEAP32[$y3>>2] = $6;
 $8 = $li$addr;
 $dx = ((($8)) + 8|0);
 $9 = HEAP32[$dx>>2]|0;
 $10 = $dl$addr;
 $dx4 = ((($10)) + 8|0);
 HEAP32[$dx4>>2] = $9;
 $11 = $li$addr;
 $dy = ((($11)) + 12|0);
 $12 = HEAP32[$dy>>2]|0;
 $13 = $dl$addr;
 $dy5 = ((($13)) + 12|0);
 HEAP32[$dy5>>2] = $12;
 STACKTOP = sp;return;
}
function _P_InterceptVector($v2,$v1) {
 $v2 = $v2|0;
 $v1 = $v1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call14 = 0, $call15 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $den = 0, $dx = 0, $dx1 = 0, $dx13 = 0, $dy = 0, $dy3 = 0, $dy8 = 0, $frac = 0;
 var $num = 0, $retval = 0, $shr = 0, $shr12 = 0, $shr2 = 0, $shr7 = 0, $sub = 0, $sub11 = 0, $sub6 = 0, $v1$addr = 0, $v2$addr = 0, $y = 0, $y10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $v2$addr = $v2;
 $v1$addr = $v1;
 $0 = $v1$addr;
 $dy = ((($0)) + 12|0);
 $1 = HEAP32[$dy>>2]|0;
 $shr = $1 >> 8;
 $2 = $v2$addr;
 $dx = ((($2)) + 8|0);
 $3 = HEAP32[$dx>>2]|0;
 $call = (_FixedMul($shr,$3)|0);
 $4 = $v1$addr;
 $dx1 = ((($4)) + 8|0);
 $5 = HEAP32[$dx1>>2]|0;
 $shr2 = $5 >> 8;
 $6 = $v2$addr;
 $dy3 = ((($6)) + 12|0);
 $7 = HEAP32[$dy3>>2]|0;
 $call4 = (_FixedMul($shr2,$7)|0);
 $sub = (($call) - ($call4))|0;
 $den = $sub;
 $8 = $den;
 $cmp = ($8|0)==(0);
 if ($cmp) {
  $retval = 0;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 } else {
  $9 = $v1$addr;
  $10 = HEAP32[$9>>2]|0;
  $11 = $v2$addr;
  $12 = HEAP32[$11>>2]|0;
  $sub6 = (($10) - ($12))|0;
  $shr7 = $sub6 >> 8;
  $13 = $v1$addr;
  $dy8 = ((($13)) + 12|0);
  $14 = HEAP32[$dy8>>2]|0;
  $call9 = (_FixedMul($shr7,$14)|0);
  $15 = $v2$addr;
  $y = ((($15)) + 4|0);
  $16 = HEAP32[$y>>2]|0;
  $17 = $v1$addr;
  $y10 = ((($17)) + 4|0);
  $18 = HEAP32[$y10>>2]|0;
  $sub11 = (($16) - ($18))|0;
  $shr12 = $sub11 >> 8;
  $19 = $v1$addr;
  $dx13 = ((($19)) + 8|0);
  $20 = HEAP32[$dx13>>2]|0;
  $call14 = (_FixedMul($shr12,$20)|0);
  $add = (($call9) + ($call14))|0;
  $num = $add;
  $21 = $num;
  $22 = $den;
  $call15 = (_FixedDiv($21,$22)|0);
  $frac = $call15;
  $23 = $frac;
  $retval = $23;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _P_LineOpening($linedef) {
 $linedef = $linedef|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $back = 0, $backsector = 0, $ceilingheight = 0, $ceilingheight2 = 0, $ceilingheight6 = 0, $ceilingheight7 = 0, $cmp = 0, $cmp10 = 0, $cmp3 = 0, $conv = 0, $front = 0;
 var $frontsector = 0, $linedef$addr = 0, $sidenum = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $linedef$addr = $linedef;
 $0 = $linedef$addr;
 $sidenum = ((($0)) + 22|0);
 $arrayidx = ((($sidenum)) + 2|0);
 $1 = HEAP16[$arrayidx>>1]|0;
 $conv = $1 << 16 >> 16;
 $cmp = ($conv|0)==(-1);
 if ($cmp) {
  HEAP32[99783] = 0;
  STACKTOP = sp;return;
 }
 $2 = $linedef$addr;
 $frontsector = ((($2)) + 48|0);
 $3 = HEAP32[$frontsector>>2]|0;
 $front = $3;
 $4 = $linedef$addr;
 $backsector = ((($4)) + 52|0);
 $5 = HEAP32[$backsector>>2]|0;
 $back = $5;
 $6 = $front;
 $ceilingheight = ((($6)) + 4|0);
 $7 = HEAP32[$ceilingheight>>2]|0;
 $8 = $back;
 $ceilingheight2 = ((($8)) + 4|0);
 $9 = HEAP32[$ceilingheight2>>2]|0;
 $cmp3 = ($7|0)<($9|0);
 if ($cmp3) {
  $10 = $front;
  $ceilingheight6 = ((($10)) + 4|0);
  $11 = HEAP32[$ceilingheight6>>2]|0;
  HEAP32[99784] = $11;
 } else {
  $12 = $back;
  $ceilingheight7 = ((($12)) + 4|0);
  $13 = HEAP32[$ceilingheight7>>2]|0;
  HEAP32[99784] = $13;
 }
 $14 = $front;
 $15 = HEAP32[$14>>2]|0;
 $16 = $back;
 $17 = HEAP32[$16>>2]|0;
 $cmp10 = ($15|0)>($17|0);
 if ($cmp10) {
  $18 = $front;
  $19 = HEAP32[$18>>2]|0;
  HEAP32[99785] = $19;
  $20 = $back;
  $21 = HEAP32[$20>>2]|0;
  HEAP32[99786] = $21;
 } else {
  $22 = $back;
  $23 = HEAP32[$22>>2]|0;
  HEAP32[99785] = $23;
  $24 = $front;
  $25 = HEAP32[$24>>2]|0;
  HEAP32[99786] = $25;
 }
 $26 = HEAP32[99784]|0;
 $27 = HEAP32[99785]|0;
 $sub = (($26) - ($27))|0;
 HEAP32[99783] = $sub;
 STACKTOP = sp;return;
}
function _P_UnsetThingPosition($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and15 = 0, $arrayidx = 0, $blockx = 0, $blocky = 0, $bnext = 0, $bnext20 = 0, $bnext26 = 0, $bnext28 = 0, $bnext38 = 0, $bprev = 0, $bprev21 = 0;
 var $bprev23 = 0, $bprev27 = 0, $cmp = 0, $cmp32 = 0, $cmp34 = 0, $cmp36 = 0, $flags = 0, $flags14 = 0, $mul = 0, $or$cond = 0, $shr = 0, $shr31 = 0, $snext = 0, $snext10 = 0, $snext3 = 0, $snext8 = 0, $sprev = 0, $sprev4 = 0, $sprev5 = 0, $sprev9 = 0;
 var $sub = 0, $sub30 = 0, $subsector = 0, $thing$addr = 0, $thinglist = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $tobool18 = 0, $tobool24 = 0, $tobool6 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)!=(0);
 do {
  if (!($tobool)) {
   $2 = $thing$addr;
   $snext = ((($2)) + 24|0);
   $3 = HEAP32[$snext>>2]|0;
   $tobool1 = ($3|0)!=(0|0);
   if ($tobool1) {
    $4 = $thing$addr;
    $sprev = ((($4)) + 28|0);
    $5 = HEAP32[$sprev>>2]|0;
    $6 = $thing$addr;
    $snext3 = ((($6)) + 24|0);
    $7 = HEAP32[$snext3>>2]|0;
    $sprev4 = ((($7)) + 28|0);
    HEAP32[$sprev4>>2] = $5;
   }
   $8 = $thing$addr;
   $sprev5 = ((($8)) + 28|0);
   $9 = HEAP32[$sprev5>>2]|0;
   $tobool6 = ($9|0)!=(0|0);
   $10 = $thing$addr;
   $snext8 = ((($10)) + 24|0);
   $11 = HEAP32[$snext8>>2]|0;
   $12 = $thing$addr;
   if ($tobool6) {
    $sprev9 = ((($12)) + 28|0);
    $13 = HEAP32[$sprev9>>2]|0;
    $snext10 = ((($13)) + 24|0);
    HEAP32[$snext10>>2] = $11;
    break;
   } else {
    $subsector = ((($12)) + 52|0);
    $14 = HEAP32[$subsector>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $thinglist = ((($15)) + 72|0);
    HEAP32[$thinglist>>2] = $11;
    break;
   }
  }
 } while(0);
 $16 = $thing$addr;
 $flags14 = ((($16)) + 104|0);
 $17 = HEAP32[$flags14>>2]|0;
 $and15 = $17 & 16;
 $tobool16 = ($and15|0)!=(0);
 if ($tobool16) {
  STACKTOP = sp;return;
 }
 $18 = $thing$addr;
 $bnext = ((($18)) + 44|0);
 $19 = HEAP32[$bnext>>2]|0;
 $tobool18 = ($19|0)!=(0|0);
 if ($tobool18) {
  $20 = $thing$addr;
  $bprev = ((($20)) + 48|0);
  $21 = HEAP32[$bprev>>2]|0;
  $22 = $thing$addr;
  $bnext20 = ((($22)) + 44|0);
  $23 = HEAP32[$bnext20>>2]|0;
  $bprev21 = ((($23)) + 48|0);
  HEAP32[$bprev21>>2] = $21;
 }
 $24 = $thing$addr;
 $bprev23 = ((($24)) + 48|0);
 $25 = HEAP32[$bprev23>>2]|0;
 $tobool24 = ($25|0)!=(0|0);
 $26 = $thing$addr;
 if ($tobool24) {
  $bnext26 = ((($26)) + 44|0);
  $27 = HEAP32[$bnext26>>2]|0;
  $28 = $thing$addr;
  $bprev27 = ((($28)) + 48|0);
  $29 = HEAP32[$bprev27>>2]|0;
  $bnext28 = ((($29)) + 44|0);
  HEAP32[$bnext28>>2] = $27;
  STACKTOP = sp;return;
 }
 $x = ((($26)) + 12|0);
 $30 = HEAP32[$x>>2]|0;
 $31 = HEAP32[99856]|0;
 $sub = (($30) - ($31))|0;
 $shr = $sub >> 23;
 $blockx = $shr;
 $32 = $thing$addr;
 $y = ((($32)) + 16|0);
 $33 = HEAP32[$y>>2]|0;
 $34 = HEAP32[99857]|0;
 $sub30 = (($33) - ($34))|0;
 $shr31 = $sub30 >> 23;
 $blocky = $shr31;
 $35 = $blockx;
 $cmp = ($35|0)>=(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $36 = $blockx;
 $37 = HEAP32[99858]|0;
 $cmp32 = ($36|0)<($37|0);
 $38 = $blocky;
 $cmp34 = ($38|0)>=(0);
 $or$cond = $cmp32 & $cmp34;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $39 = $blocky;
 $40 = HEAP32[99859]|0;
 $cmp36 = ($39|0)<($40|0);
 if (!($cmp36)) {
  STACKTOP = sp;return;
 }
 $41 = $thing$addr;
 $bnext38 = ((($41)) + 44|0);
 $42 = HEAP32[$bnext38>>2]|0;
 $43 = HEAP32[99860]|0;
 $44 = $blocky;
 $45 = HEAP32[99858]|0;
 $mul = Math_imul($44, $45)|0;
 $46 = $blockx;
 $add = (($mul) + ($46))|0;
 $arrayidx = (($43) + ($add<<2)|0);
 HEAP32[$arrayidx>>2] = $42;
 STACKTOP = sp;return;
}
function _P_SetThingPosition($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and9 = 0, $arrayidx = 0, $blockx = 0, $blocky = 0, $bnext = 0, $bnext27 = 0;
 var $bprev = 0, $bprev24 = 0, $bprev26 = 0, $call = 0, $cmp = 0, $cmp16 = 0, $cmp18 = 0, $cmp20 = 0, $flags = 0, $flags8 = 0, $link = 0, $mul = 0, $or$cond = 0, $sec = 0, $shr = 0, $shr15 = 0, $snext = 0, $sprev = 0, $sprev5 = 0, $ss = 0;
 var $sub = 0, $sub14 = 0, $subsector = 0, $thing$addr = 0, $thinglist = 0, $thinglist1 = 0, $thinglist4 = 0, $thinglist6 = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool22 = 0, $x = 0, $x12 = 0, $y = 0, $y13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $thing$addr = $thing;
 $0 = $thing$addr;
 $x = ((($0)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 $2 = $thing$addr;
 $y = ((($2)) + 16|0);
 $3 = HEAP32[$y>>2]|0;
 $call = (_R_PointInSubsector($1,$3)|0);
 $ss = $call;
 $4 = $ss;
 $5 = $thing$addr;
 $subsector = ((($5)) + 52|0);
 HEAP32[$subsector>>2] = $4;
 $6 = $thing$addr;
 $flags = ((($6)) + 104|0);
 $7 = HEAP32[$flags>>2]|0;
 $and = $7 & 8;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $8 = $ss;
  $9 = HEAP32[$8>>2]|0;
  $sec = $9;
  $10 = $thing$addr;
  $sprev = ((($10)) + 28|0);
  HEAP32[$sprev>>2] = 0;
  $11 = $sec;
  $thinglist = ((($11)) + 72|0);
  $12 = HEAP32[$thinglist>>2]|0;
  $13 = $thing$addr;
  $snext = ((($13)) + 24|0);
  HEAP32[$snext>>2] = $12;
  $14 = $sec;
  $thinglist1 = ((($14)) + 72|0);
  $15 = HEAP32[$thinglist1>>2]|0;
  $tobool2 = ($15|0)!=(0|0);
  if ($tobool2) {
   $16 = $thing$addr;
   $17 = $sec;
   $thinglist4 = ((($17)) + 72|0);
   $18 = HEAP32[$thinglist4>>2]|0;
   $sprev5 = ((($18)) + 28|0);
   HEAP32[$sprev5>>2] = $16;
  }
  $19 = $thing$addr;
  $20 = $sec;
  $thinglist6 = ((($20)) + 72|0);
  HEAP32[$thinglist6>>2] = $19;
 }
 $21 = $thing$addr;
 $flags8 = ((($21)) + 104|0);
 $22 = HEAP32[$flags8>>2]|0;
 $and9 = $22 & 16;
 $tobool10 = ($and9|0)!=(0);
 if ($tobool10) {
  STACKTOP = sp;return;
 }
 $23 = $thing$addr;
 $x12 = ((($23)) + 12|0);
 $24 = HEAP32[$x12>>2]|0;
 $25 = HEAP32[99856]|0;
 $sub = (($24) - ($25))|0;
 $shr = $sub >> 23;
 $blockx = $shr;
 $26 = $thing$addr;
 $y13 = ((($26)) + 16|0);
 $27 = HEAP32[$y13>>2]|0;
 $28 = HEAP32[99857]|0;
 $sub14 = (($27) - ($28))|0;
 $shr15 = $sub14 >> 23;
 $blocky = $shr15;
 $29 = $blockx;
 $cmp = ($29|0)>=(0);
 if ($cmp) {
  $30 = $blockx;
  $31 = HEAP32[99858]|0;
  $cmp16 = ($30|0)<($31|0);
  $32 = $blocky;
  $cmp18 = ($32|0)>=(0);
  $or$cond = $cmp16 & $cmp18;
  if ($or$cond) {
   $33 = $blocky;
   $34 = HEAP32[99859]|0;
   $cmp20 = ($33|0)<($34|0);
   if ($cmp20) {
    $35 = HEAP32[99860]|0;
    $36 = $blocky;
    $37 = HEAP32[99858]|0;
    $mul = Math_imul($36, $37)|0;
    $38 = $blockx;
    $add = (($mul) + ($38))|0;
    $arrayidx = (($35) + ($add<<2)|0);
    $link = $arrayidx;
    $39 = $thing$addr;
    $bprev = ((($39)) + 48|0);
    HEAP32[$bprev>>2] = 0;
    $40 = $link;
    $41 = HEAP32[$40>>2]|0;
    $42 = $thing$addr;
    $bnext = ((($42)) + 44|0);
    HEAP32[$bnext>>2] = $41;
    $43 = $link;
    $44 = HEAP32[$43>>2]|0;
    $tobool22 = ($44|0)!=(0|0);
    if ($tobool22) {
     $45 = $thing$addr;
     $46 = $link;
     $47 = HEAP32[$46>>2]|0;
     $bprev24 = ((($47)) + 48|0);
     HEAP32[$bprev24>>2] = $45;
    }
    $48 = $thing$addr;
    $49 = $link;
    HEAP32[$49>>2] = $48;
    STACKTOP = sp;return;
   }
  }
 }
 $50 = $thing$addr;
 $bprev26 = ((($50)) + 48|0);
 HEAP32[$bprev26>>2] = 0;
 $51 = $thing$addr;
 $bnext27 = ((($51)) + 44|0);
 HEAP32[$bnext27>>2] = 0;
 STACKTOP = sp;return;
}
function _P_BlockLinesIterator($x,$y,$func) {
 $x = $x|0;
 $y = $y|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr6 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0;
 var $conv7 = 0, $func$addr = 0, $idxprom = 0, $incdec$ptr = 0, $ld = 0, $list = 0, $mul = 0, $offset = 0, $or$cond = 0, $retval = 0, $tobool = 0, $validcount = 0, $validcount14 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $func$addr = $func;
 $0 = $x$addr;
 $cmp = ($0|0)<(0);
 $1 = $y$addr;
 $cmp1 = ($1|0)<(0);
 $or$cond = $cmp | $cmp1;
 if (!($or$cond)) {
  $2 = $x$addr;
  $3 = HEAP32[99858]|0;
  $cmp3 = ($2|0)>=($3|0);
  if (!($cmp3)) {
   $4 = $y$addr;
   $5 = HEAP32[99859]|0;
   $cmp5 = ($4|0)>=($5|0);
   if (!($cmp5)) {
    $6 = $y$addr;
    $7 = HEAP32[99858]|0;
    $mul = Math_imul($6, $7)|0;
    $8 = $x$addr;
    $add = (($mul) + ($8))|0;
    $offset = $add;
    $9 = HEAP32[99855]|0;
    $10 = $offset;
    $add$ptr = (($9) + ($10<<1)|0);
    $11 = HEAP16[$add$ptr>>1]|0;
    $conv = $11 << 16 >> 16;
    $offset = $conv;
    $12 = HEAP32[99854]|0;
    $13 = $offset;
    $add$ptr6 = (($12) + ($13<<1)|0);
    $list = $add$ptr6;
    while(1) {
     $14 = $list;
     $15 = HEAP16[$14>>1]|0;
     $conv7 = $15 << 16 >> 16;
     $cmp8 = ($conv7|0)!=(-1);
     if (!($cmp8)) {
      label = 11;
      break;
     }
     $16 = HEAP32[99844]|0;
     $17 = $list;
     $18 = HEAP16[$17>>1]|0;
     $idxprom = $18 << 16 >> 16;
     $arrayidx = (($16) + ($idxprom<<6)|0);
     $ld = $arrayidx;
     $19 = $ld;
     $validcount = ((($19)) + 56|0);
     $20 = HEAP32[$validcount>>2]|0;
     $21 = HEAP32[32346]|0;
     $cmp10 = ($20|0)==($21|0);
     if (!($cmp10)) {
      $22 = HEAP32[32346]|0;
      $23 = $ld;
      $validcount14 = ((($23)) + 56|0);
      HEAP32[$validcount14>>2] = $22;
      $24 = $func$addr;
      $25 = $ld;
      $call = (FUNCTION_TABLE_ii[$24 & 255]($25)|0);
      $tobool = ($call|0)!=(0);
      if (!($tobool)) {
       label = 9;
       break;
      }
     }
     $26 = $list;
     $incdec$ptr = ((($26)) + 2|0);
     $list = $incdec$ptr;
    }
    if ((label|0) == 9) {
     $retval = 0;
     $27 = $retval;
     STACKTOP = sp;return ($27|0);
    }
    else if ((label|0) == 11) {
     $retval = 1;
     $27 = $retval;
     STACKTOP = sp;return ($27|0);
    }
   }
  }
 }
 $retval = 1;
 $27 = $retval;
 STACKTOP = sp;return ($27|0);
}
function _P_BlockThingsIterator($x,$y,$func) {
 $x = $x|0;
 $y = $y|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $bnext = 0;
 var $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp5 = 0, $func$addr = 0, $mobj = 0, $mul = 0, $or$cond = 0, $retval = 0, $tobool = 0, $tobool6 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $func$addr = $func;
 $0 = $x$addr;
 $cmp = ($0|0)<(0);
 $1 = $y$addr;
 $cmp1 = ($1|0)<(0);
 $or$cond = $cmp | $cmp1;
 if (!($or$cond)) {
  $2 = $x$addr;
  $3 = HEAP32[99858]|0;
  $cmp3 = ($2|0)>=($3|0);
  if (!($cmp3)) {
   $4 = $y$addr;
   $5 = HEAP32[99859]|0;
   $cmp5 = ($4|0)>=($5|0);
   if (!($cmp5)) {
    $6 = HEAP32[99860]|0;
    $7 = $y$addr;
    $8 = HEAP32[99858]|0;
    $mul = Math_imul($7, $8)|0;
    $9 = $x$addr;
    $add = (($mul) + ($9))|0;
    $arrayidx = (($6) + ($add<<2)|0);
    $10 = HEAP32[$arrayidx>>2]|0;
    $mobj = $10;
    while(1) {
     $11 = $mobj;
     $tobool = ($11|0)!=(0|0);
     if (!($tobool)) {
      label = 10;
      break;
     }
     $12 = $func$addr;
     $13 = $mobj;
     $call = (FUNCTION_TABLE_ii[$12 & 255]($13)|0);
     $tobool6 = ($call|0)!=(0);
     if (!($tobool6)) {
      label = 8;
      break;
     }
     $14 = $mobj;
     $bnext = ((($14)) + 44|0);
     $15 = HEAP32[$bnext>>2]|0;
     $mobj = $15;
    }
    if ((label|0) == 8) {
     $retval = 0;
     $16 = $retval;
     STACKTOP = sp;return ($16|0);
    }
    else if ((label|0) == 10) {
     $retval = 1;
     $16 = $retval;
     STACKTOP = sp;return ($16|0);
    }
   }
  }
 }
 $retval = 1;
 $16 = $retval;
 STACKTOP = sp;return ($16|0);
}
function _PIT_AddLineIntercepts($ld) {
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add12 = 0, $backsector = 0, $call = 0, $call10 = 0, $call11 = 0, $call13 = 0, $call17 = 0, $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp18 = 0, $cmp21 = 0, $cmp3 = 0, $cmp5 = 0, $d = 0, $dl = 0, $frac = 0, $incdec$ptr = 0;
 var $isaline = 0, $ld$addr = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $retval = 0, $s1 = 0, $s2 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool23 = 0, $v2 = 0, $v28 = 0, $y = 0, $y9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $dl = sp;
 $ld$addr = $ld;
 $0 = HEAP32[(399156)>>2]|0;
 $cmp = ($0|0)>(1048576);
 $1 = HEAP32[(399160)>>2]|0;
 $cmp1 = ($1|0)>(1048576);
 $or$cond = $cmp | $cmp1;
 $2 = HEAP32[(399156)>>2]|0;
 $cmp3 = ($2|0)<(-1048576);
 $or$cond1 = $or$cond | $cmp3;
 $3 = HEAP32[(399160)>>2]|0;
 $cmp5 = ($3|0)<(-1048576);
 $or$cond2 = $or$cond1 | $cmp5;
 if ($or$cond2) {
  $4 = $ld$addr;
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $ld$addr;
  $8 = HEAP32[$7>>2]|0;
  $y = ((($8)) + 4|0);
  $9 = HEAP32[$y>>2]|0;
  $call = (_P_PointOnDivlineSide($6,$9,399148)|0);
  $s1 = $call;
  $10 = $ld$addr;
  $v2 = ((($10)) + 4|0);
  $11 = HEAP32[$v2>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $ld$addr;
  $v28 = ((($13)) + 4|0);
  $14 = HEAP32[$v28>>2]|0;
  $y9 = ((($14)) + 4|0);
  $15 = HEAP32[$y9>>2]|0;
  $call10 = (_P_PointOnDivlineSide($12,$15,399148)|0);
  $s2 = $call10;
 } else {
  $16 = HEAP32[99787]|0;
  $17 = HEAP32[(399152)>>2]|0;
  $18 = $ld$addr;
  $call11 = (_P_PointOnLineSide($16,$17,$18)|0);
  $s1 = $call11;
  $19 = HEAP32[99787]|0;
  $20 = HEAP32[(399156)>>2]|0;
  $add = (($19) + ($20))|0;
  $21 = HEAP32[(399152)>>2]|0;
  $22 = HEAP32[(399160)>>2]|0;
  $add12 = (($21) + ($22))|0;
  $23 = $ld$addr;
  $call13 = (_P_PointOnLineSide($add,$add12,$23)|0);
  $s2 = $call13;
 }
 $24 = $s1;
 $25 = $s2;
 $cmp14 = ($24|0)==($25|0);
 if ($cmp14) {
  $retval = 1;
  $40 = $retval;
  STACKTOP = sp;return ($40|0);
 }
 $26 = $ld$addr;
 _P_MakeDivline($26,$dl);
 $call17 = (_P_InterceptVector(399148,$dl)|0);
 $frac = $call17;
 $27 = $frac;
 $cmp18 = ($27|0)<(0);
 if ($cmp18) {
  $retval = 1;
  $40 = $retval;
  STACKTOP = sp;return ($40|0);
 }
 $28 = HEAP32[99791]|0;
 $tobool = ($28|0)!=(0);
 $29 = $frac;
 $cmp21 = ($29|0)<(65536);
 $or$cond3 = $tobool & $cmp21;
 if ($or$cond3) {
  $30 = $ld$addr;
  $backsector = ((($30)) + 52|0);
  $31 = HEAP32[$backsector>>2]|0;
  $tobool23 = ($31|0)!=(0|0);
  if (!($tobool23)) {
   $retval = 0;
   $40 = $retval;
   STACKTOP = sp;return ($40|0);
  }
 }
 $32 = $frac;
 $33 = HEAP32[99792]|0;
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[99792]|0;
 $isaline = ((($34)) + 4|0);
 HEAP32[$isaline>>2] = 1;
 $35 = $ld$addr;
 $36 = HEAP32[99792]|0;
 $d = ((($36)) + 8|0);
 HEAP32[$d>>2] = $35;
 $37 = HEAP32[99792]|0;
 $sub$ptr$lhs$cast = $37;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (187744))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $38 = HEAP32[99792]|0;
 _InterceptsOverrun($sub$ptr$div,$38);
 $39 = HEAP32[99792]|0;
 $incdec$ptr = ((($39)) + 12|0);
 HEAP32[99792] = $incdec$ptr;
 $retval = 1;
 $40 = $retval;
 STACKTOP = sp;return ($40|0);
}
function _InterceptsOverrun($num_intercepts,$intercept) {
 $num_intercepts = $num_intercepts|0;
 $intercept = $intercept|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add2 = 0, $cmp = 0, $d = 0, $intercept$addr = 0, $isaline = 0, $location = 0, $mul = 0;
 var $num_intercepts$addr = 0, $sub = 0, $sub1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $num_intercepts$addr = $num_intercepts;
 $intercept$addr = $intercept;
 $0 = $num_intercepts$addr;
 $cmp = ($0|0)<=(128);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = $num_intercepts$addr;
 $sub = (($1) - 128)|0;
 $sub1 = (($sub) - 1)|0;
 $mul = ($sub1*12)|0;
 $location = $mul;
 $2 = $location;
 $3 = $intercept$addr;
 $4 = HEAP32[$3>>2]|0;
 _InterceptsMemoryOverrun($2,$4);
 $5 = $location;
 $add = (($5) + 4)|0;
 $6 = $intercept$addr;
 $isaline = ((($6)) + 4|0);
 $7 = HEAP32[$isaline>>2]|0;
 _InterceptsMemoryOverrun($add,$7);
 $8 = $location;
 $add2 = (($8) + 8)|0;
 $9 = $intercept$addr;
 $d = ((($9)) + 8|0);
 $10 = HEAP32[$d>>2]|0;
 $11 = $10;
 _InterceptsMemoryOverrun($add2,$11);
 STACKTOP = sp;return;
}
function _InterceptsMemoryOverrun($location,$value) {
 $location = $location|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add13 = 0, $add22 = 0, $addr = 0, $addr5 = 0, $and = 0, $and11 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx17 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $cmp = 0;
 var $cmp3 = 0, $cmp6 = 0, $conv = 0, $conv12 = 0, $div = 0, $div16 = 0, $i = 0, $inc = 0, $index = 0, $int16_array = 0, $location$addr = 0, $offset = 0, $shr = 0, $sub = 0, $tobool = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $location$addr = $location;
 $value$addr = $value;
 $i = 0;
 $offset = 0;
 while(1) {
  $0 = $i;
  $arrayidx = (49504 + (($0*12)|0)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $cmp = ($1|0)!=(0);
  if (!($cmp)) {
   label = 9;
   break;
  }
  $2 = $offset;
  $3 = $i;
  $arrayidx1 = (49504 + (($3*12)|0)|0);
  $4 = HEAP32[$arrayidx1>>2]|0;
  $add = (($2) + ($4))|0;
  $5 = $location$addr;
  $cmp3 = ($add|0)>($5|0);
  $6 = $i;
  $arrayidx4 = (49504 + (($6*12)|0)|0);
  if ($cmp3) {
   break;
  }
  $22 = HEAP32[$arrayidx4>>2]|0;
  $23 = $offset;
  $add22 = (($23) + ($22))|0;
  $offset = $add22;
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $addr5 = ((($arrayidx4)) + 4|0);
 $7 = HEAP32[$addr5>>2]|0;
 $addr = $7;
 $8 = $addr;
 $cmp6 = ($8|0)!=(0|0);
 if (!($cmp6)) {
  STACKTOP = sp;return;
 }
 $9 = $i;
 $arrayidx8 = (49504 + (($9*12)|0)|0);
 $int16_array = ((($arrayidx8)) + 8|0);
 $10 = HEAP32[$int16_array>>2]|0;
 $tobool = ($10|0)!=(0);
 $11 = $location$addr;
 $12 = $offset;
 $sub = (($11) - ($12))|0;
 if ($tobool) {
  $div = (($sub|0) / 2)&-1;
  $index = $div;
  $13 = $value$addr;
  $and = $13 & 65535;
  $conv = $and&65535;
  $14 = $addr;
  $15 = $index;
  $arrayidx10 = (($14) + ($15<<1)|0);
  HEAP16[$arrayidx10>>1] = $conv;
  $16 = $value$addr;
  $shr = $16 >> 16;
  $and11 = $shr & 65535;
  $conv12 = $and11&65535;
  $17 = $addr;
  $18 = $index;
  $add13 = (($18) + 1)|0;
  $arrayidx14 = (($17) + ($add13<<1)|0);
  HEAP16[$arrayidx14>>1] = $conv12;
  STACKTOP = sp;return;
 } else {
  $div16 = (($sub|0) / 4)&-1;
  $index = $div16;
  $19 = $value$addr;
  $20 = $addr;
  $21 = $index;
  $arrayidx17 = (($20) + ($21<<2)|0);
  HEAP32[$arrayidx17>>2] = $19;
  STACKTOP = sp;return;
 }
}
function _PIT_AddThingIntercepts($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add17 = 0, $add20 = 0, $add5 = 0, $call = 0, $call21 = 0, $call30 = 0, $cmp = 0, $cmp22 = 0, $cmp31 = 0, $conv = 0;
 var $d = 0, $dl = 0, $dx = 0, $dy = 0, $frac = 0, $incdec$ptr = 0, $isaline = 0, $radius = 0, $radius1 = 0, $radius16 = 0, $radius19 = 0, $radius4 = 0, $radius7 = 0, $retval = 0, $s1 = 0, $s2 = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0;
 var $sub14 = 0, $sub28 = 0, $sub29 = 0, $sub8 = 0, $thing$addr = 0, $tobool = 0, $tracepositive = 0, $x = 0, $x1 = 0, $x15 = 0, $x2 = 0, $x3 = 0, $xor = 0, $y = 0, $y1 = 0, $y18 = 0, $y2 = 0, $y27 = 0, $y6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $dl = sp + 8|0;
 $thing$addr = $thing;
 $0 = HEAP32[(399156)>>2]|0;
 $1 = HEAP32[(399160)>>2]|0;
 $xor = $0 ^ $1;
 $cmp = ($xor|0)>(0);
 $conv = $cmp&1;
 $tracepositive = $conv;
 $2 = $tracepositive;
 $tobool = ($2|0)!=(0);
 $3 = $thing$addr;
 $x = ((($3)) + 12|0);
 $4 = HEAP32[$x>>2]|0;
 $5 = $thing$addr;
 $radius = ((($5)) + 64|0);
 $6 = HEAP32[$radius>>2]|0;
 $sub = (($4) - ($6))|0;
 $x1 = $sub;
 $7 = $thing$addr;
 $y = ((($7)) + 16|0);
 $8 = HEAP32[$y>>2]|0;
 $9 = $thing$addr;
 $radius1 = ((($9)) + 64|0);
 $10 = HEAP32[$radius1>>2]|0;
 if ($tobool) {
  $add = (($8) + ($10))|0;
  $y1 = $add;
  $11 = $thing$addr;
  $x3 = ((($11)) + 12|0);
  $12 = HEAP32[$x3>>2]|0;
  $13 = $thing$addr;
  $radius4 = ((($13)) + 64|0);
  $14 = HEAP32[$radius4>>2]|0;
  $add5 = (($12) + ($14))|0;
  $x2 = $add5;
  $15 = $thing$addr;
  $y6 = ((($15)) + 16|0);
  $16 = HEAP32[$y6>>2]|0;
  $17 = $thing$addr;
  $radius7 = ((($17)) + 64|0);
  $18 = HEAP32[$radius7>>2]|0;
  $sub8 = (($16) - ($18))|0;
  $y2 = $sub8;
 } else {
  $sub14 = (($8) - ($10))|0;
  $y1 = $sub14;
  $19 = $thing$addr;
  $x15 = ((($19)) + 12|0);
  $20 = HEAP32[$x15>>2]|0;
  $21 = $thing$addr;
  $radius16 = ((($21)) + 64|0);
  $22 = HEAP32[$radius16>>2]|0;
  $add17 = (($20) + ($22))|0;
  $x2 = $add17;
  $23 = $thing$addr;
  $y18 = ((($23)) + 16|0);
  $24 = HEAP32[$y18>>2]|0;
  $25 = $thing$addr;
  $radius19 = ((($25)) + 64|0);
  $26 = HEAP32[$radius19>>2]|0;
  $add20 = (($24) + ($26))|0;
  $y2 = $add20;
 }
 $27 = $x1;
 $28 = $y1;
 $call = (_P_PointOnDivlineSide($27,$28,399148)|0);
 $s1 = $call;
 $29 = $x2;
 $30 = $y2;
 $call21 = (_P_PointOnDivlineSide($29,$30,399148)|0);
 $s2 = $call21;
 $31 = $s1;
 $32 = $s2;
 $cmp22 = ($31|0)==($32|0);
 if ($cmp22) {
  $retval = 1;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 }
 $33 = $x1;
 HEAP32[$dl>>2] = $33;
 $34 = $y1;
 $y27 = ((($dl)) + 4|0);
 HEAP32[$y27>>2] = $34;
 $35 = $x2;
 $36 = $x1;
 $sub28 = (($35) - ($36))|0;
 $dx = ((($dl)) + 8|0);
 HEAP32[$dx>>2] = $sub28;
 $37 = $y2;
 $38 = $y1;
 $sub29 = (($37) - ($38))|0;
 $dy = ((($dl)) + 12|0);
 HEAP32[$dy>>2] = $sub29;
 $call30 = (_P_InterceptVector(399148,$dl)|0);
 $frac = $call30;
 $39 = $frac;
 $cmp31 = ($39|0)<(0);
 if ($cmp31) {
  $retval = 1;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 } else {
  $40 = $frac;
  $41 = HEAP32[99792]|0;
  HEAP32[$41>>2] = $40;
  $42 = HEAP32[99792]|0;
  $isaline = ((($42)) + 4|0);
  HEAP32[$isaline>>2] = 0;
  $43 = $thing$addr;
  $44 = HEAP32[99792]|0;
  $d = ((($44)) + 8|0);
  HEAP32[$d>>2] = $43;
  $45 = HEAP32[99792]|0;
  $sub$ptr$lhs$cast = $45;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - (187744))|0;
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $46 = HEAP32[99792]|0;
  _InterceptsOverrun($sub$ptr$div,$46);
  $47 = HEAP32[99792]|0;
  $incdec$ptr = ((($47)) + 12|0);
  HEAP32[99792] = $incdec$ptr;
  $retval = 1;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _P_TraverseIntercepts($func,$maxfrac) {
 $func = $func|0;
 $maxfrac = $maxfrac|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0;
 var $cmp3 = 0, $count = 0, $dec = 0, $dist = 0, $func$addr = 0, $in = 0, $incdec$ptr = 0, $maxfrac$addr = 0, $retval = 0, $scan = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $func$addr = $func;
 $maxfrac$addr = $maxfrac;
 $0 = HEAP32[99792]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (187744))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $count = $sub$ptr$div;
 $in = 0;
 while(1) {
  $1 = $count;
  $dec = (($1) + -1)|0;
  $count = $dec;
  $tobool = ($1|0)!=(0);
  if (!($tobool)) {
   label = 13;
   break;
  }
  $dist = 2147483647;
  $scan = 187744;
  while(1) {
   $2 = $scan;
   $3 = HEAP32[99792]|0;
   $cmp = ($2>>>0)<($3>>>0);
   if (!($cmp)) {
    break;
   }
   $4 = $scan;
   $5 = HEAP32[$4>>2]|0;
   $6 = $dist;
   $cmp1 = ($5|0)<($6|0);
   if ($cmp1) {
    $7 = $scan;
    $8 = HEAP32[$7>>2]|0;
    $dist = $8;
    $9 = $scan;
    $in = $9;
   }
   $10 = $scan;
   $incdec$ptr = ((($10)) + 12|0);
   $scan = $incdec$ptr;
  }
  $11 = $dist;
  $12 = $maxfrac$addr;
  $cmp3 = ($11|0)>($12|0);
  if ($cmp3) {
   label = 9;
   break;
  }
  $13 = $func$addr;
  $14 = $in;
  $call = (FUNCTION_TABLE_ii[$13 & 255]($14)|0);
  $tobool6 = ($call|0)!=(0);
  if (!($tobool6)) {
   label = 11;
   break;
  }
  $15 = $in;
  HEAP32[$15>>2] = 2147483647;
 }
 if ((label|0) == 9) {
  $retval = 1;
  $16 = $retval;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 11) {
  $retval = 0;
  $16 = $retval;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 13) {
  $retval = 1;
  $16 = $retval;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _P_PathTraverse($x1,$y1,$x2,$y2,$flags,$trav) {
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $flags = $flags|0;
 $trav = $trav|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $add = 0, $add38 = 0, $add6 = 0, $add62 = 0, $add86 = 0, $add87 = 0, $add92 = 0, $add93 = 0, $and = 0, $and1 = 0, $and20 = 0, $and28 = 0;
 var $and3 = 0, $and42 = 0, $and52 = 0, $and64 = 0, $and71 = 0, $call = 0, $call24 = 0, $call31 = 0, $call32 = 0, $call37 = 0, $call46 = 0, $call47 = 0, $call55 = 0, $call56 = 0, $call61 = 0, $call66 = 0, $call74 = 0, $call97 = 0, $cmp = 0, $cmp17 = 0;
 var $cmp25 = 0, $cmp39 = 0, $cmp4 = 0, $cmp49 = 0, $cmp63 = 0, $cmp79 = 0, $cmp80 = 0, $cmp84 = 0, $cmp90 = 0, $count = 0, $flags$addr = 0, $inc = 0, $inc96 = 0, $mapx = 0, $mapxstep = 0, $mapy = 0, $mapystep = 0, $partial = 0, $retval = 0, $shr = 0;
 var $shr12 = 0, $shr15 = 0, $shr16 = 0, $shr19 = 0, $shr27 = 0, $shr36 = 0, $shr41 = 0, $shr51 = 0, $shr60 = 0, $shr83 = 0, $shr89 = 0, $sub = 0, $sub10 = 0, $sub11 = 0, $sub13 = 0, $sub14 = 0, $sub2 = 0, $sub21 = 0, $sub22 = 0, $sub23 = 0;
 var $sub29 = 0, $sub30 = 0, $sub43 = 0, $sub44 = 0, $sub45 = 0, $sub53 = 0, $sub54 = 0, $sub8 = 0, $sub9 = 0, $tobool = 0, $tobool67 = 0, $tobool72 = 0, $tobool75 = 0, $trav$addr = 0, $x1$addr = 0, $x2$addr = 0, $xintercept = 0, $xstep = 0, $xt1 = 0, $xt2 = 0;
 var $y1$addr = 0, $y2$addr = 0, $yintercept = 0, $ystep = 0, $yt1 = 0, $yt2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $x1$addr = $x1;
 $y1$addr = $y1;
 $x2$addr = $x2;
 $y2$addr = $y2;
 $flags$addr = $flags;
 $trav$addr = $trav;
 $0 = $flags$addr;
 $and = $0 & 4;
 HEAP32[99791] = $and;
 $1 = HEAP32[32346]|0;
 $inc = (($1) + 1)|0;
 HEAP32[32346] = $inc;
 HEAP32[99792] = 187744;
 $2 = $x1$addr;
 $3 = HEAP32[99856]|0;
 $sub = (($2) - ($3))|0;
 $and1 = $sub & 8388607;
 $cmp = ($and1|0)==(0);
 if ($cmp) {
  $4 = $x1$addr;
  $add = (($4) + 65536)|0;
  $x1$addr = $add;
 }
 $5 = $y1$addr;
 $6 = HEAP32[99857]|0;
 $sub2 = (($5) - ($6))|0;
 $and3 = $sub2 & 8388607;
 $cmp4 = ($and3|0)==(0);
 if ($cmp4) {
  $7 = $y1$addr;
  $add6 = (($7) + 65536)|0;
  $y1$addr = $add6;
 }
 $8 = $x1$addr;
 HEAP32[99787] = $8;
 $9 = $y1$addr;
 HEAP32[(399152)>>2] = $9;
 $10 = $x2$addr;
 $11 = $x1$addr;
 $sub8 = (($10) - ($11))|0;
 HEAP32[(399156)>>2] = $sub8;
 $12 = $y2$addr;
 $13 = $y1$addr;
 $sub9 = (($12) - ($13))|0;
 HEAP32[(399160)>>2] = $sub9;
 $14 = HEAP32[99856]|0;
 $15 = $x1$addr;
 $sub10 = (($15) - ($14))|0;
 $x1$addr = $sub10;
 $16 = HEAP32[99857]|0;
 $17 = $y1$addr;
 $sub11 = (($17) - ($16))|0;
 $y1$addr = $sub11;
 $18 = $x1$addr;
 $shr = $18 >> 23;
 $xt1 = $shr;
 $19 = $y1$addr;
 $shr12 = $19 >> 23;
 $yt1 = $shr12;
 $20 = HEAP32[99856]|0;
 $21 = $x2$addr;
 $sub13 = (($21) - ($20))|0;
 $x2$addr = $sub13;
 $22 = HEAP32[99857]|0;
 $23 = $y2$addr;
 $sub14 = (($23) - ($22))|0;
 $y2$addr = $sub14;
 $24 = $x2$addr;
 $shr15 = $24 >> 23;
 $xt2 = $shr15;
 $25 = $y2$addr;
 $shr16 = $25 >> 23;
 $yt2 = $shr16;
 $26 = $xt2;
 $27 = $xt1;
 $cmp17 = ($26|0)>($27|0);
 do {
  if ($cmp17) {
   $mapxstep = 1;
   $28 = $x1$addr;
   $shr19 = $28 >> 7;
   $and20 = $shr19 & 65535;
   $sub21 = (65536 - ($and20))|0;
   $partial = $sub21;
   $29 = $y2$addr;
   $30 = $y1$addr;
   $sub22 = (($29) - ($30))|0;
   $31 = $x2$addr;
   $32 = $x1$addr;
   $sub23 = (($31) - ($32))|0;
   $call = (Math_abs(($sub23|0))|0);
   $call24 = (_FixedDiv($sub22,$call)|0);
   $ystep = $call24;
  } else {
   $33 = $xt2;
   $34 = $xt1;
   $cmp25 = ($33|0)<($34|0);
   if ($cmp25) {
    $mapxstep = -1;
    $35 = $x1$addr;
    $shr27 = $35 >> 7;
    $and28 = $shr27 & 65535;
    $partial = $and28;
    $36 = $y2$addr;
    $37 = $y1$addr;
    $sub29 = (($36) - ($37))|0;
    $38 = $x2$addr;
    $39 = $x1$addr;
    $sub30 = (($38) - ($39))|0;
    $call31 = (Math_abs(($sub30|0))|0);
    $call32 = (_FixedDiv($sub29,$call31)|0);
    $ystep = $call32;
    break;
   } else {
    $mapxstep = 0;
    $partial = 65536;
    $ystep = 16777216;
    break;
   }
  }
 } while(0);
 $40 = $y1$addr;
 $shr36 = $40 >> 7;
 $41 = $partial;
 $42 = $ystep;
 $call37 = (_FixedMul($41,$42)|0);
 $add38 = (($shr36) + ($call37))|0;
 $yintercept = $add38;
 $43 = $yt2;
 $44 = $yt1;
 $cmp39 = ($43|0)>($44|0);
 do {
  if ($cmp39) {
   $mapystep = 1;
   $45 = $y1$addr;
   $shr41 = $45 >> 7;
   $and42 = $shr41 & 65535;
   $sub43 = (65536 - ($and42))|0;
   $partial = $sub43;
   $46 = $x2$addr;
   $47 = $x1$addr;
   $sub44 = (($46) - ($47))|0;
   $48 = $y2$addr;
   $49 = $y1$addr;
   $sub45 = (($48) - ($49))|0;
   $call46 = (Math_abs(($sub45|0))|0);
   $call47 = (_FixedDiv($sub44,$call46)|0);
   $xstep = $call47;
  } else {
   $50 = $yt2;
   $51 = $yt1;
   $cmp49 = ($50|0)<($51|0);
   if ($cmp49) {
    $mapystep = -1;
    $52 = $y1$addr;
    $shr51 = $52 >> 7;
    $and52 = $shr51 & 65535;
    $partial = $and52;
    $53 = $x2$addr;
    $54 = $x1$addr;
    $sub53 = (($53) - ($54))|0;
    $55 = $y2$addr;
    $56 = $y1$addr;
    $sub54 = (($55) - ($56))|0;
    $call55 = (Math_abs(($sub54|0))|0);
    $call56 = (_FixedDiv($sub53,$call55)|0);
    $xstep = $call56;
    break;
   } else {
    $mapystep = 0;
    $partial = 65536;
    $xstep = 16777216;
    break;
   }
  }
 } while(0);
 $57 = $x1$addr;
 $shr60 = $57 >> 7;
 $58 = $partial;
 $59 = $xstep;
 $call61 = (_FixedMul($58,$59)|0);
 $add62 = (($shr60) + ($call61))|0;
 $xintercept = $add62;
 $60 = $xt1;
 $mapx = $60;
 $61 = $yt1;
 $mapy = $61;
 $count = 0;
 while(1) {
  $62 = $count;
  $cmp63 = ($62|0)<(64);
  if (!($cmp63)) {
   label = 30;
   break;
  }
  $63 = $flags$addr;
  $and64 = $63 & 1;
  $tobool = ($and64|0)!=(0);
  if ($tobool) {
   $64 = $mapx;
   $65 = $mapy;
   $call66 = (_P_BlockLinesIterator($64,$65,152)|0);
   $tobool67 = ($call66|0)!=(0);
   if (!($tobool67)) {
    label = 19;
    break;
   }
  }
  $66 = $flags$addr;
  $and71 = $66 & 2;
  $tobool72 = ($and71|0)!=(0);
  if ($tobool72) {
   $67 = $mapx;
   $68 = $mapy;
   $call74 = (_P_BlockThingsIterator($67,$68,153)|0);
   $tobool75 = ($call74|0)!=(0);
   if (!($tobool75)) {
    label = 22;
    break;
   }
  }
  $69 = $mapx;
  $70 = $xt2;
  $cmp79 = ($69|0)==($70|0);
  if ($cmp79) {
   $71 = $mapy;
   $72 = $yt2;
   $cmp80 = ($71|0)==($72|0);
   if ($cmp80) {
    label = 30;
    break;
   }
  }
  $73 = $yintercept;
  $shr83 = $73 >> 16;
  $74 = $mapy;
  $cmp84 = ($shr83|0)==($74|0);
  if ($cmp84) {
   $75 = $ystep;
   $76 = $yintercept;
   $add86 = (($76) + ($75))|0;
   $yintercept = $add86;
   $77 = $mapxstep;
   $78 = $mapx;
   $add87 = (($78) + ($77))|0;
   $mapx = $add87;
  } else {
   $79 = $xintercept;
   $shr89 = $79 >> 16;
   $80 = $mapx;
   $cmp90 = ($shr89|0)==($80|0);
   if ($cmp90) {
    $81 = $xstep;
    $82 = $xintercept;
    $add92 = (($82) + ($81))|0;
    $xintercept = $add92;
    $83 = $mapystep;
    $84 = $mapy;
    $add93 = (($84) + ($83))|0;
    $mapy = $add93;
   }
  }
  $85 = $count;
  $inc96 = (($85) + 1)|0;
  $count = $inc96;
 }
 if ((label|0) == 19) {
  $retval = 0;
  $87 = $retval;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 22) {
  $retval = 0;
  $87 = $retval;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 30) {
  $86 = $trav$addr;
  $call97 = (_P_TraverseIntercepts($86,65536)|0);
  $retval = $call97;
  $87 = $retval;
  STACKTOP = sp;return ($87|0);
 }
 return (0)|0;
}
function _P_SetMobjState($mobj,$state) {
 $mobj = $mobj|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action = 0, $action7 = 0, $arrayidx = 0, $cmp = 0, $frame = 0, $frame5 = 0, $lnot = 0, $mobj$addr = 0, $nextstate = 0, $retval = 0, $sprite4 = 0, $st = 0, $state$addr = 0, $state1 = 0, $state2 = 0;
 var $tics = 0, $tics10 = 0, $tics3 = 0, $tobool = 0, $tobool11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mobj$addr = $mobj;
 $state$addr = $state;
 while(1) {
  $0 = $state$addr;
  $cmp = ($0|0)==(0);
  if ($cmp) {
   label = 3;
   break;
  }
  $3 = $state$addr;
  $arrayidx = (3568 + (($3*28)|0)|0);
  $st = $arrayidx;
  $4 = $st;
  $5 = $mobj$addr;
  $state2 = ((($5)) + 100|0);
  HEAP32[$state2>>2] = $4;
  $6 = $st;
  $tics = ((($6)) + 8|0);
  $7 = HEAP32[$tics>>2]|0;
  $8 = $mobj$addr;
  $tics3 = ((($8)) + 96|0);
  HEAP32[$tics3>>2] = $7;
  $9 = $st;
  $10 = HEAP32[$9>>2]|0;
  $11 = $mobj$addr;
  $sprite4 = ((($11)) + 36|0);
  HEAP32[$sprite4>>2] = $10;
  $12 = $st;
  $frame = ((($12)) + 4|0);
  $13 = HEAP32[$frame>>2]|0;
  $14 = $mobj$addr;
  $frame5 = ((($14)) + 40|0);
  HEAP32[$frame5>>2] = $13;
  $15 = $st;
  $action = ((($15)) + 12|0);
  $16 = HEAP32[$action>>2]|0;
  $tobool = ($16|0)!=(0|0);
  if ($tobool) {
   $17 = $st;
   $action7 = ((($17)) + 12|0);
   $18 = HEAP32[$action7>>2]|0;
   $19 = $mobj$addr;
   FUNCTION_TABLE_vi[$18 & 255]($19);
  }
  $20 = $st;
  $nextstate = ((($20)) + 16|0);
  $21 = HEAP32[$nextstate>>2]|0;
  $state$addr = $21;
  $22 = $mobj$addr;
  $tics10 = ((($22)) + 96|0);
  $23 = HEAP32[$tics10>>2]|0;
  $tobool11 = ($23|0)!=(0);
  $lnot = $tobool11 ^ 1;
  if (!($lnot)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 3) {
  $1 = $mobj$addr;
  $state1 = ((($1)) + 100|0);
  HEAP32[$state1>>2] = 0;
  $2 = $mobj$addr;
  _P_RemoveMobj($2);
  $retval = 0;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 7) {
  $retval = 1;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _P_RemoveMobj($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add12 = 0, $and = 0, $and13 = 0, $and2 = 0, $and9 = 0, $arrayidx = 0, $arrayidx8 = 0, $cmp = 0, $cmp10 = 0, $cmp7 = 0, $flags = 0, $flags1 = 0, $mobj$addr = 0, $spawnpoint = 0, $tobool = 0, $tobool3 = 0, $type = 0, $type6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mobj$addr = $mobj;
 $0 = $mobj$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $2 = $mobj$addr;
  $flags1 = ((($2)) + 104|0);
  $3 = HEAP32[$flags1>>2]|0;
  $and2 = $3 & 131072;
  $tobool3 = ($and2|0)!=(0);
  if (!($tobool3)) {
   $4 = $mobj$addr;
   $type = ((($4)) + 88|0);
   $5 = HEAP32[$type>>2]|0;
   $cmp = ($5|0)!=(56);
   if ($cmp) {
    $6 = $mobj$addr;
    $type6 = ((($6)) + 88|0);
    $7 = HEAP32[$type6>>2]|0;
    $cmp7 = ($7|0)!=(58);
    if ($cmp7) {
     $8 = HEAP32[99793]|0;
     $arrayidx = (190016 + (($8*10)|0)|0);
     $9 = $mobj$addr;
     $spawnpoint = ((($9)) + 140|0);
     ;HEAP16[$arrayidx>>1]=HEAP16[$spawnpoint>>1]|0;HEAP16[$arrayidx+2>>1]=HEAP16[$spawnpoint+2>>1]|0;HEAP16[$arrayidx+4>>1]=HEAP16[$spawnpoint+4>>1]|0;HEAP16[$arrayidx+6>>1]=HEAP16[$spawnpoint+6>>1]|0;HEAP16[$arrayidx+8>>1]=HEAP16[$spawnpoint+8>>1]|0;
     $10 = HEAP32[99905]|0;
     $11 = HEAP32[99793]|0;
     $arrayidx8 = (191296 + ($11<<2)|0);
     HEAP32[$arrayidx8>>2] = $10;
     $12 = HEAP32[99793]|0;
     $add = (($12) + 1)|0;
     $and9 = $add & 127;
     HEAP32[99793] = $and9;
     $13 = HEAP32[99793]|0;
     $14 = HEAP32[99794]|0;
     $cmp10 = ($13|0)==($14|0);
     if ($cmp10) {
      $15 = HEAP32[99794]|0;
      $add12 = (($15) + 1)|0;
      $and13 = $add12 & 127;
      HEAP32[99794] = $and13;
     }
    }
   }
  }
 }
 $16 = $mobj$addr;
 _P_UnsetThingPosition($16);
 $17 = $mobj$addr;
 _S_StopSound($17);
 $18 = $mobj$addr;
 _P_RemoveThinker($18);
 STACKTOP = sp;return;
}
function _P_ExplodeMissile($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $and = 0, $and4 = 0, $arrayidx = 0, $call1 = 0, $cmp = 0, $deathsound = 0, $deathsound7 = 0, $deathstate = 0, $flags = 0, $info = 0, $info6 = 0, $mo$addr = 0, $momx = 0, $momy = 0, $momz = 0, $sub = 0, $tics = 0, $tics2 = 0, $tics3 = 0;
 var $tobool = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $momz = ((($0)) + 80|0);
 HEAP32[$momz>>2] = 0;
 $1 = $mo$addr;
 $momy = ((($1)) + 76|0);
 HEAP32[$momy>>2] = 0;
 $2 = $mo$addr;
 $momx = ((($2)) + 72|0);
 HEAP32[$momx>>2] = 0;
 $3 = $mo$addr;
 $4 = $mo$addr;
 $type = ((($4)) + 88|0);
 $5 = HEAP32[$type>>2]|0;
 $arrayidx = (30656 + (($5*92)|0)|0);
 $deathstate = ((($arrayidx)) + 48|0);
 $6 = HEAP32[$deathstate>>2]|0;
 (_P_SetMobjState($3,$6)|0);
 $call1 = (_P_Random()|0);
 $and = $call1 & 3;
 $7 = $mo$addr;
 $tics = ((($7)) + 96|0);
 $8 = HEAP32[$tics>>2]|0;
 $sub = (($8) - ($and))|0;
 HEAP32[$tics>>2] = $sub;
 $9 = $mo$addr;
 $tics2 = ((($9)) + 96|0);
 $10 = HEAP32[$tics2>>2]|0;
 $cmp = ($10|0)<(1);
 if ($cmp) {
  $11 = $mo$addr;
  $tics3 = ((($11)) + 96|0);
  HEAP32[$tics3>>2] = 1;
 }
 $12 = $mo$addr;
 $flags = ((($12)) + 104|0);
 $13 = HEAP32[$flags>>2]|0;
 $and4 = $13 & -65537;
 HEAP32[$flags>>2] = $and4;
 $14 = $mo$addr;
 $info = ((($14)) + 92|0);
 $15 = HEAP32[$info>>2]|0;
 $deathsound = ((($15)) + 56|0);
 $16 = HEAP32[$deathsound>>2]|0;
 $tobool = ($16|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $17 = $mo$addr;
 $18 = $mo$addr;
 $info6 = ((($18)) + 92|0);
 $19 = HEAP32[$info6>>2]|0;
 $deathsound7 = ((($19)) + 56|0);
 $20 = HEAP32[$deathsound7>>2]|0;
 _S_StartSound($17,$20);
 STACKTOP = sp;return;
}
function _P_XYMovement($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0;
 var $add36 = 0, $add40 = 0, $add42 = 0, $and = 0, $and5 = 0, $and52 = 0, $and74 = 0, $and81 = 0, $and90 = 0, $backsector = 0, $backsector59 = 0, $call156 = 0, $call159 = 0, $call44 = 0, $ceilingpic = 0, $cheats = 0, $cmd = 0, $cmd138 = 0, $cmp = 0, $cmp102 = 0;
 var $cmp106 = 0, $cmp110 = 0, $cmp117 = 0, $cmp121 = 0, $cmp125 = 0, $cmp129 = 0, $cmp135 = 0, $cmp14 = 0, $cmp140 = 0, $cmp146 = 0, $cmp20 = 0, $cmp25 = 0, $cmp32 = 0, $cmp33 = 0, $cmp60 = 0, $cmp85 = 0, $cmp94 = 0, $cmp98 = 0, $conv = 0, $conv134 = 0;
 var $conv139 = 0, $div = 0, $div35 = 0, $flags = 0, $flags4 = 0, $flags51 = 0, $flags80 = 0, $flags89 = 0, $floorz = 0, $floorz109 = 0, $info = 0, $mo$addr = 0, $momx = 0, $momx10 = 0, $momx116 = 0, $momx12 = 0, $momx120 = 0, $momx152 = 0, $momx155 = 0, $momx157 = 0;
 var $momx16 = 0, $momx30 = 0, $momx66 = 0, $momx7 = 0, $momx78 = 0, $momx93 = 0, $momx97 = 0, $momy = 0, $momy101 = 0, $momy105 = 0, $momy124 = 0, $momy128 = 0, $momy153 = 0, $momy158 = 0, $momy160 = 0, $momy19 = 0, $momy22 = 0, $momy27 = 0, $momy31 = 0, $momy6 = 0;
 var $momy65 = 0, $momy77 = 0, $momz = 0, $or$cond = 0, $player = 0, $player47 = 0, $player9 = 0, $ptryx = 0, $ptryy = 0, $shr = 0, $shr37 = 0, $sidemove = 0, $spawnstate = 0, $state = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $subsector = 0, $tobool = 0;
 var $tobool1 = 0, $tobool132 = 0, $tobool143 = 0, $tobool2 = 0, $tobool45 = 0, $tobool48 = 0, $tobool53 = 0, $tobool55 = 0, $tobool57 = 0, $tobool70 = 0, $tobool71 = 0, $tobool72 = 0, $tobool75 = 0, $tobool82 = 0, $tobool91 = 0, $x = 0, $xmove = 0, $y = 0, $y41 = 0, $ymove = 0;
 var $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $momx = ((($0)) + 72|0);
 $1 = HEAP32[$momx>>2]|0;
 $tobool = ($1|0)!=(0);
 if (!($tobool)) {
  $2 = $mo$addr;
  $momy = ((($2)) + 76|0);
  $3 = HEAP32[$momy>>2]|0;
  $tobool1 = ($3|0)!=(0);
  if (!($tobool1)) {
   $4 = $mo$addr;
   $flags = ((($4)) + 104|0);
   $5 = HEAP32[$flags>>2]|0;
   $and = $5 & 16777216;
   $tobool2 = ($and|0)!=(0);
   if (!($tobool2)) {
    STACKTOP = sp;return;
   }
   $6 = $mo$addr;
   $flags4 = ((($6)) + 104|0);
   $7 = HEAP32[$flags4>>2]|0;
   $and5 = $7 & -16777217;
   HEAP32[$flags4>>2] = $and5;
   $8 = $mo$addr;
   $momz = ((($8)) + 80|0);
   HEAP32[$momz>>2] = 0;
   $9 = $mo$addr;
   $momy6 = ((($9)) + 76|0);
   HEAP32[$momy6>>2] = 0;
   $10 = $mo$addr;
   $momx7 = ((($10)) + 72|0);
   HEAP32[$momx7>>2] = 0;
   $11 = $mo$addr;
   $12 = $mo$addr;
   $info = ((($12)) + 92|0);
   $13 = HEAP32[$info>>2]|0;
   $spawnstate = ((($13)) + 4|0);
   $14 = HEAP32[$spawnstate>>2]|0;
   (_P_SetMobjState($11,$14)|0);
   STACKTOP = sp;return;
  }
 }
 $15 = $mo$addr;
 $player9 = ((($15)) + 132|0);
 $16 = HEAP32[$player9>>2]|0;
 $player = $16;
 $17 = $mo$addr;
 $momx10 = ((($17)) + 72|0);
 $18 = HEAP32[$momx10>>2]|0;
 $cmp = ($18|0)>(1966080);
 $19 = $mo$addr;
 $momx12 = ((($19)) + 72|0);
 if ($cmp) {
  HEAP32[$momx12>>2] = 1966080;
 } else {
  $20 = HEAP32[$momx12>>2]|0;
  $cmp14 = ($20|0)<(-1966080);
  if ($cmp14) {
   $21 = $mo$addr;
   $momx16 = ((($21)) + 72|0);
   HEAP32[$momx16>>2] = -1966080;
  }
 }
 $22 = $mo$addr;
 $momy19 = ((($22)) + 76|0);
 $23 = HEAP32[$momy19>>2]|0;
 $cmp20 = ($23|0)>(1966080);
 $24 = $mo$addr;
 $momy22 = ((($24)) + 76|0);
 if ($cmp20) {
  HEAP32[$momy22>>2] = 1966080;
 } else {
  $25 = HEAP32[$momy22>>2]|0;
  $cmp25 = ($25|0)<(-1966080);
  if ($cmp25) {
   $26 = $mo$addr;
   $momy27 = ((($26)) + 76|0);
   HEAP32[$momy27>>2] = -1966080;
  }
 }
 $27 = $mo$addr;
 $momx30 = ((($27)) + 72|0);
 $28 = HEAP32[$momx30>>2]|0;
 $xmove = $28;
 $29 = $mo$addr;
 $momy31 = ((($29)) + 76|0);
 $30 = HEAP32[$momy31>>2]|0;
 $ymove = $30;
 L19: while(1) {
  $31 = $xmove;
  $cmp32 = ($31|0)>(983040);
  $32 = $ymove;
  $cmp33 = ($32|0)>(983040);
  $or$cond = $cmp32 | $cmp33;
  $33 = $mo$addr;
  $x = ((($33)) + 12|0);
  $34 = HEAP32[$x>>2]|0;
  $35 = $xmove;
  if ($or$cond) {
   $div = (($35|0) / 2)&-1;
   $add = (($34) + ($div))|0;
   $ptryx = $add;
   $36 = $mo$addr;
   $y = ((($36)) + 16|0);
   $37 = HEAP32[$y>>2]|0;
   $38 = $ymove;
   $div35 = (($38|0) / 2)&-1;
   $add36 = (($37) + ($div35))|0;
   $ptryy = $add36;
   $39 = $xmove;
   $shr = $39 >> 1;
   $xmove = $shr;
   $40 = $ymove;
   $shr37 = $40 >> 1;
   $ymove = $shr37;
  } else {
   $add40 = (($34) + ($35))|0;
   $ptryx = $add40;
   $41 = $mo$addr;
   $y41 = ((($41)) + 16|0);
   $42 = HEAP32[$y41>>2]|0;
   $43 = $ymove;
   $add42 = (($42) + ($43))|0;
   $ptryy = $add42;
   $ymove = 0;
   $xmove = 0;
  }
  $44 = $mo$addr;
  $45 = $ptryx;
  $46 = $ptryy;
  $call44 = (_P_TryMove($44,$45,$46)|0);
  $tobool45 = ($call44|0)!=(0);
  do {
   if (!($tobool45)) {
    $47 = $mo$addr;
    $player47 = ((($47)) + 132|0);
    $48 = HEAP32[$player47>>2]|0;
    $tobool48 = ($48|0)!=(0|0);
    $49 = $mo$addr;
    if ($tobool48) {
     _P_SlideMove($49);
     break;
    }
    $flags51 = ((($49)) + 104|0);
    $50 = HEAP32[$flags51>>2]|0;
    $and52 = $50 & 65536;
    $tobool53 = ($and52|0)!=(0);
    if (!($tobool53)) {
     $60 = $mo$addr;
     $momy65 = ((($60)) + 76|0);
     HEAP32[$momy65>>2] = 0;
     $61 = $mo$addr;
     $momx66 = ((($61)) + 72|0);
     HEAP32[$momx66>>2] = 0;
     break;
    }
    $51 = HEAP32[99758]|0;
    $tobool55 = ($51|0)!=(0|0);
    if ($tobool55) {
     $52 = HEAP32[99758]|0;
     $backsector = ((($52)) + 52|0);
     $53 = HEAP32[$backsector>>2]|0;
     $tobool57 = ($53|0)!=(0|0);
     if ($tobool57) {
      $54 = HEAP32[99758]|0;
      $backsector59 = ((($54)) + 52|0);
      $55 = HEAP32[$backsector59>>2]|0;
      $ceilingpic = ((($55)) + 10|0);
      $56 = HEAP16[$ceilingpic>>1]|0;
      $conv = $56 << 16 >> 16;
      $57 = HEAP32[100032]|0;
      $cmp60 = ($conv|0)==($57|0);
      if ($cmp60) {
       label = 24;
       break L19;
      }
     }
    }
    $59 = $mo$addr;
    _P_ExplodeMissile($59);
   }
  } while(0);
  $62 = $xmove;
  $tobool70 = ($62|0)!=(0);
  $63 = $ymove;
  $tobool71 = ($63|0)!=(0);
  $64 = $tobool70 ? 1 : $tobool71;
  if (!($64)) {
   break;
  }
 }
 if ((label|0) == 24) {
  $58 = $mo$addr;
  _P_RemoveMobj($58);
  STACKTOP = sp;return;
 }
 $65 = $player;
 $tobool72 = ($65|0)!=(0|0);
 if ($tobool72) {
  $66 = $player;
  $cheats = ((($66)) + 204|0);
  $67 = HEAP32[$cheats>>2]|0;
  $and74 = $67 & 4;
  $tobool75 = ($and74|0)!=(0);
  if ($tobool75) {
   $68 = $mo$addr;
   $momy77 = ((($68)) + 76|0);
   HEAP32[$momy77>>2] = 0;
   $69 = $mo$addr;
   $momx78 = ((($69)) + 72|0);
   HEAP32[$momx78>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $70 = $mo$addr;
 $flags80 = ((($70)) + 104|0);
 $71 = HEAP32[$flags80>>2]|0;
 $and81 = $71 & 16842752;
 $tobool82 = ($and81|0)!=(0);
 if ($tobool82) {
  STACKTOP = sp;return;
 }
 $72 = $mo$addr;
 $z = ((($72)) + 20|0);
 $73 = HEAP32[$z>>2]|0;
 $74 = $mo$addr;
 $floorz = ((($74)) + 56|0);
 $75 = HEAP32[$floorz>>2]|0;
 $cmp85 = ($73|0)>($75|0);
 if ($cmp85) {
  STACKTOP = sp;return;
 }
 $76 = $mo$addr;
 $flags89 = ((($76)) + 104|0);
 $77 = HEAP32[$flags89>>2]|0;
 $and90 = $77 & 1048576;
 $tobool91 = ($and90|0)!=(0);
 do {
  if ($tobool91) {
   $78 = $mo$addr;
   $momx93 = ((($78)) + 72|0);
   $79 = HEAP32[$momx93>>2]|0;
   $cmp94 = ($79|0)>(16384);
   if (!($cmp94)) {
    $80 = $mo$addr;
    $momx97 = ((($80)) + 72|0);
    $81 = HEAP32[$momx97>>2]|0;
    $cmp98 = ($81|0)<(-16384);
    if (!($cmp98)) {
     $82 = $mo$addr;
     $momy101 = ((($82)) + 76|0);
     $83 = HEAP32[$momy101>>2]|0;
     $cmp102 = ($83|0)>(16384);
     if (!($cmp102)) {
      $84 = $mo$addr;
      $momy105 = ((($84)) + 76|0);
      $85 = HEAP32[$momy105>>2]|0;
      $cmp106 = ($85|0)<(-16384);
      if (!($cmp106)) {
       break;
      }
     }
    }
   }
   $86 = $mo$addr;
   $floorz109 = ((($86)) + 56|0);
   $87 = HEAP32[$floorz109>>2]|0;
   $88 = $mo$addr;
   $subsector = ((($88)) + 52|0);
   $89 = HEAP32[$subsector>>2]|0;
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[$90>>2]|0;
   $cmp110 = ($87|0)!=($91|0);
   if ($cmp110) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $92 = $mo$addr;
 $momx116 = ((($92)) + 72|0);
 $93 = HEAP32[$momx116>>2]|0;
 $cmp117 = ($93|0)>(-4096);
 do {
  if ($cmp117) {
   $94 = $mo$addr;
   $momx120 = ((($94)) + 72|0);
   $95 = HEAP32[$momx120>>2]|0;
   $cmp121 = ($95|0)<(4096);
   if ($cmp121) {
    $96 = $mo$addr;
    $momy124 = ((($96)) + 76|0);
    $97 = HEAP32[$momy124>>2]|0;
    $cmp125 = ($97|0)>(-4096);
    if ($cmp125) {
     $98 = $mo$addr;
     $momy128 = ((($98)) + 76|0);
     $99 = HEAP32[$momy128>>2]|0;
     $cmp129 = ($99|0)<(4096);
     if ($cmp129) {
      $100 = $player;
      $tobool132 = ($100|0)!=(0|0);
      if ($tobool132) {
       $101 = $player;
       $cmd = ((($101)) + 8|0);
       $102 = HEAP8[$cmd>>0]|0;
       $conv134 = $102 << 24 >> 24;
       $cmp135 = ($conv134|0)==(0);
       if (!($cmp135)) {
        break;
       }
       $103 = $player;
       $cmd138 = ((($103)) + 8|0);
       $sidemove = ((($cmd138)) + 1|0);
       $104 = HEAP8[$sidemove>>0]|0;
       $conv139 = $104 << 24 >> 24;
       $cmp140 = ($conv139|0)==(0);
       if (!($cmp140)) {
        break;
       }
      }
      $105 = $player;
      $tobool143 = ($105|0)!=(0|0);
      if ($tobool143) {
       $106 = $player;
       $107 = HEAP32[$106>>2]|0;
       $state = ((($107)) + 100|0);
       $108 = HEAP32[$state>>2]|0;
       $sub$ptr$lhs$cast = $108;
       $sub$ptr$sub = (($sub$ptr$lhs$cast) - (3568))|0;
       $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
       $sub = (($sub$ptr$div) - 150)|0;
       $cmp146 = ($sub>>>0)<(4);
       if ($cmp146) {
        $109 = $player;
        $110 = HEAP32[$109>>2]|0;
        (_P_SetMobjState($110,149)|0);
       }
      }
      $111 = $mo$addr;
      $momx152 = ((($111)) + 72|0);
      HEAP32[$momx152>>2] = 0;
      $112 = $mo$addr;
      $momy153 = ((($112)) + 76|0);
      HEAP32[$momy153>>2] = 0;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $113 = $mo$addr;
 $momx155 = ((($113)) + 72|0);
 $114 = HEAP32[$momx155>>2]|0;
 $call156 = (_FixedMul($114,59392)|0);
 $115 = $mo$addr;
 $momx157 = ((($115)) + 72|0);
 HEAP32[$momx157>>2] = $call156;
 $116 = $mo$addr;
 $momy158 = ((($116)) + 76|0);
 $117 = HEAP32[$momy158>>2]|0;
 $call159 = (_FixedMul($117,59392)|0);
 $118 = $mo$addr;
 $momy160 = ((($118)) + 76|0);
 HEAP32[$momy160>>2] = $call159;
 STACKTOP = sp;return;
}
function _P_ZMovement($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add124 = 0, $add31 = 0, $add47 = 0, $and = 0, $and102 = 0, $and108 = 0, $and139 = 0, $and147 = 0, $and15 = 0, $and151 = 0, $and19 = 0, $and60 = 0, $and90 = 0, $and98 = 0, $call = 0;
 var $ceilingz = 0, $ceilingz134 = 0, $cmp = 0, $cmp112 = 0, $cmp125 = 0, $cmp129 = 0, $cmp34 = 0, $cmp37 = 0, $cmp41 = 0, $cmp44 = 0, $cmp54 = 0, $cmp56 = 0, $cmp68 = 0, $cmp75 = 0, $conv = 0, $correct_lost_soul_bounce = 0, $delta = 0, $deltaviewheight = 0, $deltaviewheight81 = 0, $dist = 0;
 var $flags = 0, $flags101 = 0, $flags107 = 0, $flags138 = 0, $flags14 = 0, $flags146 = 0, $flags150 = 0, $flags18 = 0, $flags59 = 0, $flags89 = 0, $flags97 = 0, $floorz = 0, $floorz1 = 0, $floorz53 = 0, $floorz85 = 0, $height = 0, $height123 = 0, $height135 = 0, $mo$addr = 0, $momz = 0;
 var $momz111 = 0, $momz115 = 0, $momz128 = 0, $momz132 = 0, $momz142 = 0, $momz144 = 0, $momz63 = 0, $momz65 = 0, $momz67 = 0, $momz74 = 0, $momz78 = 0, $momz83 = 0, $momz93 = 0, $momz95 = 0, $mul = 0, $mul43 = 0, $player = 0, $player3 = 0, $player5 = 0, $player71 = 0;
 var $player8 = 0, $player80 = 0, $shr = 0, $shr30 = 0, $shr79 = 0, $sub = 0, $sub118 = 0, $sub136 = 0, $sub143 = 0, $sub24 = 0, $sub27 = 0, $sub33 = 0, $sub36 = 0, $sub4 = 0, $sub40 = 0, $sub64 = 0, $sub7 = 0, $sub94 = 0, $target = 0, $target22 = 0;
 var $target25 = 0, $target28 = 0, $tobool = 0, $tobool10 = 0, $tobool103 = 0, $tobool109 = 0, $tobool12 = 0, $tobool140 = 0, $tobool148 = 0, $tobool152 = 0, $tobool16 = 0, $tobool20 = 0, $tobool57 = 0, $tobool61 = 0, $tobool72 = 0, $tobool87 = 0, $tobool91 = 0, $tobool99 = 0, $viewheight = 0, $viewheight6 = 0;
 var $x = 0, $x23 = 0, $y = 0, $y26 = 0, $z = 0, $z122 = 0, $z137 = 0, $z2 = 0, $z29 = 0, $z32 = 0, $z39 = 0, $z46 = 0, $z52 = 0, $z86 = 0, $z9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $player = ((($0)) + 132|0);
 $1 = HEAP32[$player>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $mo$addr;
  $z = ((($2)) + 20|0);
  $3 = HEAP32[$z>>2]|0;
  $4 = $mo$addr;
  $floorz = ((($4)) + 56|0);
  $5 = HEAP32[$floorz>>2]|0;
  $cmp = ($3|0)<($5|0);
  if ($cmp) {
   $6 = $mo$addr;
   $floorz1 = ((($6)) + 56|0);
   $7 = HEAP32[$floorz1>>2]|0;
   $8 = $mo$addr;
   $z2 = ((($8)) + 20|0);
   $9 = HEAP32[$z2>>2]|0;
   $sub = (($7) - ($9))|0;
   $10 = $mo$addr;
   $player3 = ((($10)) + 132|0);
   $11 = HEAP32[$player3>>2]|0;
   $viewheight = ((($11)) + 28|0);
   $12 = HEAP32[$viewheight>>2]|0;
   $sub4 = (($12) - ($sub))|0;
   HEAP32[$viewheight>>2] = $sub4;
   $13 = $mo$addr;
   $player5 = ((($13)) + 132|0);
   $14 = HEAP32[$player5>>2]|0;
   $viewheight6 = ((($14)) + 28|0);
   $15 = HEAP32[$viewheight6>>2]|0;
   $sub7 = (2686976 - ($15))|0;
   $shr = $sub7 >> 3;
   $16 = $mo$addr;
   $player8 = ((($16)) + 132|0);
   $17 = HEAP32[$player8>>2]|0;
   $deltaviewheight = ((($17)) + 32|0);
   HEAP32[$deltaviewheight>>2] = $shr;
  }
 }
 $18 = $mo$addr;
 $momz = ((($18)) + 80|0);
 $19 = HEAP32[$momz>>2]|0;
 $20 = $mo$addr;
 $z9 = ((($20)) + 20|0);
 $21 = HEAP32[$z9>>2]|0;
 $add = (($21) + ($19))|0;
 HEAP32[$z9>>2] = $add;
 $22 = $mo$addr;
 $flags = ((($22)) + 104|0);
 $23 = HEAP32[$flags>>2]|0;
 $and = $23 & 16384;
 $tobool10 = ($and|0)!=(0);
 do {
  if ($tobool10) {
   $24 = $mo$addr;
   $target = ((($24)) + 120|0);
   $25 = HEAP32[$target>>2]|0;
   $tobool12 = ($25|0)!=(0|0);
   if ($tobool12) {
    $26 = $mo$addr;
    $flags14 = ((($26)) + 104|0);
    $27 = HEAP32[$flags14>>2]|0;
    $and15 = $27 & 16777216;
    $tobool16 = ($and15|0)!=(0);
    if (!($tobool16)) {
     $28 = $mo$addr;
     $flags18 = ((($28)) + 104|0);
     $29 = HEAP32[$flags18>>2]|0;
     $and19 = $29 & 2097152;
     $tobool20 = ($and19|0)!=(0);
     if (!($tobool20)) {
      $30 = $mo$addr;
      $x = ((($30)) + 12|0);
      $31 = HEAP32[$x>>2]|0;
      $32 = $mo$addr;
      $target22 = ((($32)) + 120|0);
      $33 = HEAP32[$target22>>2]|0;
      $x23 = ((($33)) + 12|0);
      $34 = HEAP32[$x23>>2]|0;
      $sub24 = (($31) - ($34))|0;
      $35 = $mo$addr;
      $y = ((($35)) + 16|0);
      $36 = HEAP32[$y>>2]|0;
      $37 = $mo$addr;
      $target25 = ((($37)) + 120|0);
      $38 = HEAP32[$target25>>2]|0;
      $y26 = ((($38)) + 16|0);
      $39 = HEAP32[$y26>>2]|0;
      $sub27 = (($36) - ($39))|0;
      $call = (_P_AproxDistance($sub24,$sub27)|0);
      $dist = $call;
      $40 = $mo$addr;
      $target28 = ((($40)) + 120|0);
      $41 = HEAP32[$target28>>2]|0;
      $z29 = ((($41)) + 20|0);
      $42 = HEAP32[$z29>>2]|0;
      $43 = $mo$addr;
      $height = ((($43)) + 68|0);
      $44 = HEAP32[$height>>2]|0;
      $shr30 = $44 >> 1;
      $add31 = (($42) + ($shr30))|0;
      $45 = $mo$addr;
      $z32 = ((($45)) + 20|0);
      $46 = HEAP32[$z32>>2]|0;
      $sub33 = (($add31) - ($46))|0;
      $delta = $sub33;
      $47 = $delta;
      $cmp34 = ($47|0)<(0);
      if ($cmp34) {
       $48 = $dist;
       $49 = $delta;
       $mul = ($49*3)|0;
       $sub36 = (0 - ($mul))|0;
       $cmp37 = ($48|0)<($sub36|0);
       if ($cmp37) {
        $50 = $mo$addr;
        $z39 = ((($50)) + 20|0);
        $51 = HEAP32[$z39>>2]|0;
        $sub40 = (($51) - 262144)|0;
        HEAP32[$z39>>2] = $sub40;
        break;
       }
      }
      $52 = $delta;
      $cmp41 = ($52|0)>(0);
      if ($cmp41) {
       $53 = $dist;
       $54 = $delta;
       $mul43 = ($54*3)|0;
       $cmp44 = ($53|0)<($mul43|0);
       if ($cmp44) {
        $55 = $mo$addr;
        $z46 = ((($55)) + 20|0);
        $56 = HEAP32[$z46>>2]|0;
        $add47 = (($56) + 262144)|0;
        HEAP32[$z46>>2] = $add47;
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = $mo$addr;
 $z52 = ((($57)) + 20|0);
 $58 = HEAP32[$z52>>2]|0;
 $59 = $mo$addr;
 $floorz53 = ((($59)) + 56|0);
 $60 = HEAP32[$floorz53>>2]|0;
 $cmp54 = ($58|0)<=($60|0);
 do {
  if ($cmp54) {
   $61 = HEAP32[32169]|0;
   $cmp56 = ($61>>>0)>=(6);
   $conv = $cmp56&1;
   $correct_lost_soul_bounce = $conv;
   $62 = $correct_lost_soul_bounce;
   $tobool57 = ($62|0)!=(0);
   if ($tobool57) {
    $63 = $mo$addr;
    $flags59 = ((($63)) + 104|0);
    $64 = HEAP32[$flags59>>2]|0;
    $and60 = $64 & 16777216;
    $tobool61 = ($and60|0)!=(0);
    if ($tobool61) {
     $65 = $mo$addr;
     $momz63 = ((($65)) + 80|0);
     $66 = HEAP32[$momz63>>2]|0;
     $sub64 = (0 - ($66))|0;
     $67 = $mo$addr;
     $momz65 = ((($67)) + 80|0);
     HEAP32[$momz65>>2] = $sub64;
    }
   }
   $68 = $mo$addr;
   $momz67 = ((($68)) + 80|0);
   $69 = HEAP32[$momz67>>2]|0;
   $cmp68 = ($69|0)<(0);
   if ($cmp68) {
    $70 = $mo$addr;
    $player71 = ((($70)) + 132|0);
    $71 = HEAP32[$player71>>2]|0;
    $tobool72 = ($71|0)!=(0|0);
    if ($tobool72) {
     $72 = $mo$addr;
     $momz74 = ((($72)) + 80|0);
     $73 = HEAP32[$momz74>>2]|0;
     $cmp75 = ($73|0)<(-524288);
     if ($cmp75) {
      $74 = $mo$addr;
      $momz78 = ((($74)) + 80|0);
      $75 = HEAP32[$momz78>>2]|0;
      $shr79 = $75 >> 3;
      $76 = $mo$addr;
      $player80 = ((($76)) + 132|0);
      $77 = HEAP32[$player80>>2]|0;
      $deltaviewheight81 = ((($77)) + 32|0);
      HEAP32[$deltaviewheight81>>2] = $shr79;
      $78 = $mo$addr;
      _S_StartSound($78,34);
     }
    }
    $79 = $mo$addr;
    $momz83 = ((($79)) + 80|0);
    HEAP32[$momz83>>2] = 0;
   }
   $80 = $mo$addr;
   $floorz85 = ((($80)) + 56|0);
   $81 = HEAP32[$floorz85>>2]|0;
   $82 = $mo$addr;
   $z86 = ((($82)) + 20|0);
   HEAP32[$z86>>2] = $81;
   $83 = $correct_lost_soul_bounce;
   $tobool87 = ($83|0)!=(0);
   if (!($tobool87)) {
    $84 = $mo$addr;
    $flags89 = ((($84)) + 104|0);
    $85 = HEAP32[$flags89>>2]|0;
    $and90 = $85 & 16777216;
    $tobool91 = ($and90|0)!=(0);
    if ($tobool91) {
     $86 = $mo$addr;
     $momz93 = ((($86)) + 80|0);
     $87 = HEAP32[$momz93>>2]|0;
     $sub94 = (0 - ($87))|0;
     $88 = $mo$addr;
     $momz95 = ((($88)) + 80|0);
     HEAP32[$momz95>>2] = $sub94;
    }
   }
   $89 = $mo$addr;
   $flags97 = ((($89)) + 104|0);
   $90 = HEAP32[$flags97>>2]|0;
   $and98 = $90 & 65536;
   $tobool99 = ($and98|0)!=(0);
   if ($tobool99) {
    $91 = $mo$addr;
    $flags101 = ((($91)) + 104|0);
    $92 = HEAP32[$flags101>>2]|0;
    $and102 = $92 & 4096;
    $tobool103 = ($and102|0)!=(0);
    if (!($tobool103)) {
     $93 = $mo$addr;
     _P_ExplodeMissile($93);
     STACKTOP = sp;return;
    }
   }
  } else {
   $94 = $mo$addr;
   $flags107 = ((($94)) + 104|0);
   $95 = HEAP32[$flags107>>2]|0;
   $and108 = $95 & 512;
   $tobool109 = ($and108|0)!=(0);
   if (!($tobool109)) {
    $96 = $mo$addr;
    $momz111 = ((($96)) + 80|0);
    $97 = HEAP32[$momz111>>2]|0;
    $cmp112 = ($97|0)==(0);
    $98 = $mo$addr;
    $momz115 = ((($98)) + 80|0);
    if ($cmp112) {
     HEAP32[$momz115>>2] = -131072;
     break;
    } else {
     $99 = HEAP32[$momz115>>2]|0;
     $sub118 = (($99) - 65536)|0;
     HEAP32[$momz115>>2] = $sub118;
     break;
    }
   }
  }
 } while(0);
 $100 = $mo$addr;
 $z122 = ((($100)) + 20|0);
 $101 = HEAP32[$z122>>2]|0;
 $102 = $mo$addr;
 $height123 = ((($102)) + 68|0);
 $103 = HEAP32[$height123>>2]|0;
 $add124 = (($101) + ($103))|0;
 $104 = $mo$addr;
 $ceilingz = ((($104)) + 60|0);
 $105 = HEAP32[$ceilingz>>2]|0;
 $cmp125 = ($add124|0)>($105|0);
 if (!($cmp125)) {
  STACKTOP = sp;return;
 }
 $106 = $mo$addr;
 $momz128 = ((($106)) + 80|0);
 $107 = HEAP32[$momz128>>2]|0;
 $cmp129 = ($107|0)>(0);
 if ($cmp129) {
  $108 = $mo$addr;
  $momz132 = ((($108)) + 80|0);
  HEAP32[$momz132>>2] = 0;
 }
 $109 = $mo$addr;
 $ceilingz134 = ((($109)) + 60|0);
 $110 = HEAP32[$ceilingz134>>2]|0;
 $111 = $mo$addr;
 $height135 = ((($111)) + 68|0);
 $112 = HEAP32[$height135>>2]|0;
 $sub136 = (($110) - ($112))|0;
 $113 = $mo$addr;
 $z137 = ((($113)) + 20|0);
 HEAP32[$z137>>2] = $sub136;
 $114 = $mo$addr;
 $flags138 = ((($114)) + 104|0);
 $115 = HEAP32[$flags138>>2]|0;
 $and139 = $115 & 16777216;
 $tobool140 = ($and139|0)!=(0);
 if ($tobool140) {
  $116 = $mo$addr;
  $momz142 = ((($116)) + 80|0);
  $117 = HEAP32[$momz142>>2]|0;
  $sub143 = (0 - ($117))|0;
  $118 = $mo$addr;
  $momz144 = ((($118)) + 80|0);
  HEAP32[$momz144>>2] = $sub143;
 }
 $119 = $mo$addr;
 $flags146 = ((($119)) + 104|0);
 $120 = HEAP32[$flags146>>2]|0;
 $and147 = $120 & 65536;
 $tobool148 = ($and147|0)!=(0);
 if (!($tobool148)) {
  STACKTOP = sp;return;
 }
 $121 = $mo$addr;
 $flags150 = ((($121)) + 104|0);
 $122 = HEAP32[$flags150>>2]|0;
 $and151 = $122 & 4096;
 $tobool152 = ($and151|0)!=(0);
 if ($tobool152) {
  STACKTOP = sp;return;
 }
 $123 = $mo$addr;
 _P_ExplodeMissile($123);
 STACKTOP = sp;return;
}
function _P_NightmareRespawn($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and23 = 0, $angle = 0, $angle21 = 0, $call = 0, $call12 = 0, $call17 = 0, $call8 = 0, $call9 = 0, $conv = 0, $conv20 = 0, $conv22 = 0, $conv4 = 0, $div = 0, $flags = 0, $flags26 = 0;
 var $info = 0, $mo = 0, $mobj$addr = 0, $mthing = 0, $mul = 0, $options = 0, $or = 0, $reactiontime = 0, $shl = 0, $shl5 = 0, $spawnpoint = 0, $spawnpoint13 = 0, $spawnpoint18 = 0, $spawnpoint19 = 0, $spawnpoint2 = 0, $ss = 0, $subsector = 0, $tobool = 0, $tobool14 = 0, $tobool24 = 0;
 var $type = 0, $x = 0, $x6 = 0, $y = 0, $y3 = 0, $y7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mobj$addr = $mobj;
 $0 = $mobj$addr;
 $spawnpoint = ((($0)) + 140|0);
 $1 = HEAP16[$spawnpoint>>1]|0;
 $conv = $1 << 16 >> 16;
 $shl = $conv << 16;
 $x = $shl;
 $2 = $mobj$addr;
 $spawnpoint2 = ((($2)) + 140|0);
 $y3 = ((($spawnpoint2)) + 2|0);
 $3 = HEAP16[$y3>>1]|0;
 $conv4 = $3 << 16 >> 16;
 $shl5 = $conv4 << 16;
 $y = $shl5;
 $4 = $mobj$addr;
 $5 = $x;
 $6 = $y;
 $call = (_P_CheckPosition($4,$5,$6)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $7 = $mobj$addr;
 $x6 = ((($7)) + 12|0);
 $8 = HEAP32[$x6>>2]|0;
 $9 = $mobj$addr;
 $y7 = ((($9)) + 16|0);
 $10 = HEAP32[$y7>>2]|0;
 $11 = $mobj$addr;
 $subsector = ((($11)) + 52|0);
 $12 = HEAP32[$subsector>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $call8 = (_P_SpawnMobj($8,$10,$14,39)|0);
 $mo = $call8;
 $15 = $mo;
 _S_StartSound($15,35);
 $16 = $x;
 $17 = $y;
 $call9 = (_R_PointInSubsector($16,$17)|0);
 $ss = $call9;
 $18 = $x;
 $19 = $y;
 $20 = $ss;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $call12 = (_P_SpawnMobj($18,$19,$22,39)|0);
 $mo = $call12;
 $23 = $mo;
 _S_StartSound($23,35);
 $24 = $mobj$addr;
 $spawnpoint13 = ((($24)) + 140|0);
 $mthing = $spawnpoint13;
 $25 = $mobj$addr;
 $info = ((($25)) + 92|0);
 $26 = HEAP32[$info>>2]|0;
 $flags = ((($26)) + 84|0);
 $27 = HEAP32[$flags>>2]|0;
 $and = $27 & 256;
 $tobool14 = ($and|0)!=(0);
 if ($tobool14) {
  $z = 2147483647;
 } else {
  $z = -2147483648;
 }
 $28 = $x;
 $29 = $y;
 $30 = $z;
 $31 = $mobj$addr;
 $type = ((($31)) + 88|0);
 $32 = HEAP32[$type>>2]|0;
 $call17 = (_P_SpawnMobj($28,$29,$30,$32)|0);
 $mo = $call17;
 $33 = $mo;
 $spawnpoint18 = ((($33)) + 140|0);
 $34 = $mobj$addr;
 $spawnpoint19 = ((($34)) + 140|0);
 ;HEAP32[$spawnpoint18>>2]=HEAP32[$spawnpoint19>>2]|0;HEAP32[$spawnpoint18+4>>2]=HEAP32[$spawnpoint19+4>>2]|0;HEAP16[$spawnpoint18+8>>1]=HEAP16[$spawnpoint19+8>>1]|0;
 $35 = $mthing;
 $angle = ((($35)) + 4|0);
 $36 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $conv20 = $36 << 16 >> 16;
 $div = (($conv20|0) / 45)&-1;
 $mul = $div<<29;
 $37 = $mo;
 $angle21 = ((($37)) + 32|0);
 HEAP32[$angle21>>2] = $mul;
 $38 = $mthing;
 $options = ((($38)) + 8|0);
 $39 = HEAPU8[$options>>0]|(HEAPU8[$options+1>>0]<<8);
 $conv22 = $39 << 16 >> 16;
 $and23 = $conv22 & 8;
 $tobool24 = ($and23|0)!=(0);
 if ($tobool24) {
  $40 = $mo;
  $flags26 = ((($40)) + 104|0);
  $41 = HEAP32[$flags26>>2]|0;
  $or = $41 | 32;
  HEAP32[$flags26>>2] = $or;
 }
 $42 = $mo;
 $reactiontime = ((($42)) + 124|0);
 HEAP32[$reactiontime>>2] = 18;
 $43 = $mobj$addr;
 _P_RemoveMobj($43);
 STACKTOP = sp;return;
}
function _P_SpawnMobj($x,$y,$z,$type) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $call = 0, $call9 = 0, $ceilingheight = 0, $ceilingz = 0, $ceilingz22 = 0, $cmp = 0, $cmp16 = 0, $cmp20 = 0, $flags = 0, $flags7 = 0, $floorz = 0;
 var $floorz18 = 0, $frame = 0, $frame13 = 0, $function = 0, $health = 0, $height = 0, $height24 = 0, $height6 = 0, $info = 0, $info2 = 0, $info23 = 0, $lastlook = 0, $mobj = 0, $radius = 0, $radius5 = 0, $reactiontime = 0, $reactiontime8 = 0, $rem = 0, $spawnhealth = 0, $spawnstate = 0;
 var $sprite12 = 0, $st = 0, $state = 0, $sub = 0, $subsector = 0, $subsector14 = 0, $tics = 0, $tics11 = 0, $type$addr = 0, $type1 = 0, $x$addr = 0, $x3 = 0, $y$addr = 0, $y4 = 0, $z$addr = 0, $z19 = 0, $z25 = 0, $z27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $z$addr = $z;
 $type$addr = $type;
 $call = (_Z_Malloc(156,5,0)|0);
 $mobj = $call;
 $0 = $mobj;
 _memset(($0|0),0,156)|0;
 $1 = $type$addr;
 $arrayidx = (30656 + (($1*92)|0)|0);
 $info = $arrayidx;
 $2 = $type$addr;
 $3 = $mobj;
 $type1 = ((($3)) + 88|0);
 HEAP32[$type1>>2] = $2;
 $4 = $info;
 $5 = $mobj;
 $info2 = ((($5)) + 92|0);
 HEAP32[$info2>>2] = $4;
 $6 = $x$addr;
 $7 = $mobj;
 $x3 = ((($7)) + 12|0);
 HEAP32[$x3>>2] = $6;
 $8 = $y$addr;
 $9 = $mobj;
 $y4 = ((($9)) + 16|0);
 HEAP32[$y4>>2] = $8;
 $10 = $info;
 $radius = ((($10)) + 64|0);
 $11 = HEAP32[$radius>>2]|0;
 $12 = $mobj;
 $radius5 = ((($12)) + 64|0);
 HEAP32[$radius5>>2] = $11;
 $13 = $info;
 $height = ((($13)) + 68|0);
 $14 = HEAP32[$height>>2]|0;
 $15 = $mobj;
 $height6 = ((($15)) + 68|0);
 HEAP32[$height6>>2] = $14;
 $16 = $info;
 $flags = ((($16)) + 84|0);
 $17 = HEAP32[$flags>>2]|0;
 $18 = $mobj;
 $flags7 = ((($18)) + 104|0);
 HEAP32[$flags7>>2] = $17;
 $19 = $info;
 $spawnhealth = ((($19)) + 8|0);
 $20 = HEAP32[$spawnhealth>>2]|0;
 $21 = $mobj;
 $health = ((($21)) + 108|0);
 HEAP32[$health>>2] = $20;
 $22 = HEAP32[99425]|0;
 $cmp = ($22|0)!=(4);
 if ($cmp) {
  $23 = $info;
  $reactiontime = ((($23)) + 20|0);
  $24 = HEAP32[$reactiontime>>2]|0;
  $25 = $mobj;
  $reactiontime8 = ((($25)) + 124|0);
  HEAP32[$reactiontime8>>2] = $24;
 }
 $call9 = (_P_Random()|0);
 $rem = (($call9|0) % 4)&-1;
 $26 = $mobj;
 $lastlook = ((($26)) + 136|0);
 HEAP32[$lastlook>>2] = $rem;
 $27 = $info;
 $spawnstate = ((($27)) + 4|0);
 $28 = HEAP32[$spawnstate>>2]|0;
 $arrayidx10 = (3568 + (($28*28)|0)|0);
 $st = $arrayidx10;
 $29 = $st;
 $30 = $mobj;
 $state = ((($30)) + 100|0);
 HEAP32[$state>>2] = $29;
 $31 = $st;
 $tics = ((($31)) + 8|0);
 $32 = HEAP32[$tics>>2]|0;
 $33 = $mobj;
 $tics11 = ((($33)) + 96|0);
 HEAP32[$tics11>>2] = $32;
 $34 = $st;
 $35 = HEAP32[$34>>2]|0;
 $36 = $mobj;
 $sprite12 = ((($36)) + 36|0);
 HEAP32[$sprite12>>2] = $35;
 $37 = $st;
 $frame = ((($37)) + 4|0);
 $38 = HEAP32[$frame>>2]|0;
 $39 = $mobj;
 $frame13 = ((($39)) + 40|0);
 HEAP32[$frame13>>2] = $38;
 $40 = $mobj;
 _P_SetThingPosition($40);
 $41 = $mobj;
 $subsector = ((($41)) + 52|0);
 $42 = HEAP32[$subsector>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = $mobj;
 $floorz = ((($45)) + 56|0);
 HEAP32[$floorz>>2] = $44;
 $46 = $mobj;
 $subsector14 = ((($46)) + 52|0);
 $47 = HEAP32[$subsector14>>2]|0;
 $48 = HEAP32[$47>>2]|0;
 $ceilingheight = ((($48)) + 4|0);
 $49 = HEAP32[$ceilingheight>>2]|0;
 $50 = $mobj;
 $ceilingz = ((($50)) + 60|0);
 HEAP32[$ceilingz>>2] = $49;
 $51 = $z$addr;
 $cmp16 = ($51|0)==(-2147483648);
 if ($cmp16) {
  $52 = $mobj;
  $floorz18 = ((($52)) + 56|0);
  $53 = HEAP32[$floorz18>>2]|0;
  $54 = $mobj;
  $z19 = ((($54)) + 20|0);
  HEAP32[$z19>>2] = $53;
  $64 = $mobj;
  $function = ((($64)) + 8|0);
  HEAP32[$function>>2] = 136;
  $65 = $mobj;
  _P_AddThinker($65);
  $66 = $mobj;
  STACKTOP = sp;return ($66|0);
 }
 $55 = $z$addr;
 $cmp20 = ($55|0)==(2147483647);
 if ($cmp20) {
  $56 = $mobj;
  $ceilingz22 = ((($56)) + 60|0);
  $57 = HEAP32[$ceilingz22>>2]|0;
  $58 = $mobj;
  $info23 = ((($58)) + 92|0);
  $59 = HEAP32[$info23>>2]|0;
  $height24 = ((($59)) + 68|0);
  $60 = HEAP32[$height24>>2]|0;
  $sub = (($57) - ($60))|0;
  $61 = $mobj;
  $z25 = ((($61)) + 20|0);
  HEAP32[$z25>>2] = $sub;
  $64 = $mobj;
  $function = ((($64)) + 8|0);
  HEAP32[$function>>2] = 136;
  $65 = $mobj;
  _P_AddThinker($65);
  $66 = $mobj;
  STACKTOP = sp;return ($66|0);
 } else {
  $62 = $z$addr;
  $63 = $mobj;
  $z27 = ((($63)) + 20|0);
  HEAP32[$z27>>2] = $62;
  $64 = $mobj;
  $function = ((($64)) + 8|0);
  HEAP32[$function>>2] = 136;
  $65 = $mobj;
  _P_AddThinker($65);
  $66 = $mobj;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _P_MobjThinker($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and28 = 0, $and39 = 0, $call43 = 0;
 var $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp36 = 0, $cmp44 = 0, $cmp6 = 0, $dec = 0, $flags = 0, $flags27 = 0, $floorz = 0, $function = 0, $function11 = 0, $inc = 0, $mobj$addr = 0, $momx = 0, $momy = 0, $momz = 0, $movecount = 0, $movecount35 = 0, $nextstate = 0;
 var $or$cond = 0, $state = 0, $tics = 0, $tics19 = 0, $tics20 = 0, $tobool = 0, $tobool1 = 0, $tobool21 = 0, $tobool29 = 0, $tobool3 = 0, $tobool32 = 0, $tobool40 = 0, $tobool8 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mobj$addr = $mobj;
 $0 = $mobj$addr;
 $momx = ((($0)) + 72|0);
 $1 = HEAP32[$momx>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  label = 4;
 } else {
  $2 = $mobj$addr;
  $momy = ((($2)) + 76|0);
  $3 = HEAP32[$momy>>2]|0;
  $tobool1 = ($3|0)!=(0);
  if ($tobool1) {
   label = 4;
  } else {
   $4 = $mobj$addr;
   $flags = ((($4)) + 104|0);
   $5 = HEAP32[$flags>>2]|0;
   $and = $5 & 16777216;
   $tobool3 = ($and|0)!=(0);
   if ($tobool3) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $6 = $mobj$addr;
  _P_XYMovement($6);
  $7 = $mobj$addr;
  $function = ((($7)) + 8|0);
  $8 = HEAP32[$function>>2]|0;
  $cmp = ($8|0)==((-1)|0);
  if ($cmp) {
   STACKTOP = sp;return;
  }
 }
 $9 = $mobj$addr;
 $z = ((($9)) + 20|0);
 $10 = HEAP32[$z>>2]|0;
 $11 = $mobj$addr;
 $floorz = ((($11)) + 56|0);
 $12 = HEAP32[$floorz>>2]|0;
 $cmp6 = ($10|0)!=($12|0);
 if ($cmp6) {
  label = 7;
 } else {
  $13 = $mobj$addr;
  $momz = ((($13)) + 80|0);
  $14 = HEAP32[$momz>>2]|0;
  $tobool8 = ($14|0)!=(0);
  if ($tobool8) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = $mobj$addr;
  _P_ZMovement($15);
  $16 = $mobj$addr;
  $function11 = ((($16)) + 8|0);
  $17 = HEAP32[$function11>>2]|0;
  $cmp13 = ($17|0)==((-1)|0);
  if ($cmp13) {
   STACKTOP = sp;return;
  }
 }
 $18 = $mobj$addr;
 $tics = ((($18)) + 96|0);
 $19 = HEAP32[$tics>>2]|0;
 $cmp17 = ($19|0)!=(-1);
 $20 = $mobj$addr;
 if ($cmp17) {
  $tics19 = ((($20)) + 96|0);
  $21 = HEAP32[$tics19>>2]|0;
  $dec = (($21) + -1)|0;
  HEAP32[$tics19>>2] = $dec;
  $22 = $mobj$addr;
  $tics20 = ((($22)) + 96|0);
  $23 = HEAP32[$tics20>>2]|0;
  $tobool21 = ($23|0)!=(0);
  if ($tobool21) {
   STACKTOP = sp;return;
  } else {
   $24 = $mobj$addr;
   $25 = $mobj$addr;
   $state = ((($25)) + 100|0);
   $26 = HEAP32[$state>>2]|0;
   $nextstate = ((($26)) + 16|0);
   $27 = HEAP32[$nextstate>>2]|0;
   (_P_SetMobjState($24,$27)|0);
   STACKTOP = sp;return;
  }
 }
 $flags27 = ((($20)) + 104|0);
 $28 = HEAP32[$flags27>>2]|0;
 $and28 = $28 & 4194304;
 $tobool29 = ($and28|0)!=(0);
 $29 = HEAP32[99495]|0;
 $tobool32 = ($29|0)!=(0);
 $or$cond = $tobool29 & $tobool32;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $30 = $mobj$addr;
 $movecount = ((($30)) + 116|0);
 $31 = HEAP32[$movecount>>2]|0;
 $inc = (($31) + 1)|0;
 HEAP32[$movecount>>2] = $inc;
 $32 = $mobj$addr;
 $movecount35 = ((($32)) + 116|0);
 $33 = HEAP32[$movecount35>>2]|0;
 $cmp36 = ($33|0)<(420);
 if ($cmp36) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[99905]|0;
 $and39 = $34 & 31;
 $tobool40 = ($and39|0)!=(0);
 if ($tobool40) {
  STACKTOP = sp;return;
 }
 $call43 = (_P_Random()|0);
 $cmp44 = ($call43|0)>(4);
 if ($cmp44) {
  STACKTOP = sp;return;
 }
 $35 = $mobj$addr;
 _P_NightmareRespawn($35);
 STACKTOP = sp;return;
}
function _P_RespawnSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and27 = 0;
 var $angle = 0, $angle26 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx21 = 0, $arrayidx7 = 0, $call = 0, $call12 = 0, $call24 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp17 = 0, $cmp4 = 0, $conv = 0, $conv10 = 0, $conv15 = 0, $conv25 = 0, $div = 0, $flags = 0;
 var $i = 0, $inc = 0, $mo = 0, $mthing = 0, $mul = 0, $shl = 0, $shl11 = 0, $spawnpoint = 0, $ss = 0, $sub = 0, $tobool = 0, $type = 0, $x = 0, $y = 0, $y9 = 0, $z = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = HEAP32[99430]|0;
 $cmp = ($0|0)!=(2);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99793]|0;
 $2 = HEAP32[99794]|0;
 $cmp1 = ($1|0)==($2|0);
 if ($cmp1) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99905]|0;
 $4 = HEAP32[99794]|0;
 $arrayidx = (191296 + ($4<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $sub = (($3) - ($5))|0;
 $cmp4 = ($sub|0)<(1050);
 if ($cmp4) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[99794]|0;
 $arrayidx7 = (190016 + (($6*10)|0)|0);
 $mthing = $arrayidx7;
 $7 = $mthing;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
 $conv = $8 << 16 >> 16;
 $shl = $conv << 16;
 $x = $shl;
 $9 = $mthing;
 $y9 = ((($9)) + 2|0);
 $10 = HEAPU8[$y9>>0]|(HEAPU8[$y9+1>>0]<<8);
 $conv10 = $10 << 16 >> 16;
 $shl11 = $conv10 << 16;
 $y = $shl11;
 $11 = $x;
 $12 = $y;
 $call = (_R_PointInSubsector($11,$12)|0);
 $ss = $call;
 $13 = $x;
 $14 = $y;
 $15 = $ss;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $call12 = (_P_SpawnMobj($13,$14,$17,40)|0);
 $mo = $call12;
 $18 = $mo;
 _S_StartSound($18,90);
 $i = 0;
 while(1) {
  $19 = $i;
  $cmp13 = ($19|0)<(137);
  if (!($cmp13)) {
   break;
  }
  $20 = $mthing;
  $type = ((($20)) + 6|0);
  $21 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
  $conv15 = $21 << 16 >> 16;
  $22 = $i;
  $arrayidx16 = (30656 + (($22*92)|0)|0);
  $23 = HEAP32[$arrayidx16>>2]|0;
  $cmp17 = ($conv15|0)==($23|0);
  if ($cmp17) {
   break;
  }
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 $25 = $i;
 $arrayidx21 = (30656 + (($25*92)|0)|0);
 $flags = ((($arrayidx21)) + 84|0);
 $26 = HEAP32[$flags>>2]|0;
 $and = $26 & 256;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $z = 2147483647;
 } else {
  $z = -2147483648;
 }
 $27 = $x;
 $28 = $y;
 $29 = $z;
 $30 = $i;
 $call24 = (_P_SpawnMobj($27,$28,$29,$30)|0);
 $mo = $call24;
 $31 = $mo;
 $spawnpoint = ((($31)) + 140|0);
 $32 = $mthing;
 dest=$spawnpoint; src=$32; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $33 = $mthing;
 $angle = ((($33)) + 4|0);
 $34 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $conv25 = $34 << 16 >> 16;
 $div = (($conv25|0) / 45)&-1;
 $mul = $div<<29;
 $35 = $mo;
 $angle26 = ((($35)) + 32|0);
 HEAP32[$angle26>>2] = $mul;
 $36 = HEAP32[99794]|0;
 $add = (($36) + 1)|0;
 $and27 = $add & 127;
 HEAP32[99794] = $and27;
 STACKTOP = sp;return;
}
function _P_SpawnPlayer($mthing) {
 $mthing = $mthing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $angle33 = 0, $arrayidx = 0, $arrayidx40 = 0, $arrayidx9 = 0, $bonuscount = 0, $call = 0, $cards = 0, $cmp = 0;
 var $cmp10 = 0, $cmp24 = 0, $cmp38 = 0, $cmp45 = 0, $conv = 0, $conv14 = 0, $conv18 = 0, $conv20 = 0, $conv23 = 0, $conv28 = 0, $conv3 = 0, $conv32 = 0, $conv43 = 0, $conv7 = 0, $damagecount = 0, $div = 0, $extralight = 0, $fixedcolormap = 0, $flags = 0, $health = 0;
 var $health34 = 0, $i = 0, $inc = 0, $message = 0, $mobj = 0, $mthing$addr = 0, $mul = 0, $or = 0, $p = 0, $player = 0, $playerstate = 0, $playerstate35 = 0, $refire = 0, $shl = 0, $shl21 = 0, $shl30 = 0, $sub = 0, $sub15 = 0, $sub29 = 0, $sub44 = 0;
 var $sub8 = 0, $tobool = 0, $tobool36 = 0, $type = 0, $type13 = 0, $type2 = 0, $type22 = 0, $type27 = 0, $type42 = 0, $type6 = 0, $viewheight = 0, $x = 0, $y = 0, $y19 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mthing$addr = $mthing;
 $0 = $mthing$addr;
 $type = ((($0)) + 6|0);
 $1 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $cmp = ($conv|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = $mthing$addr;
 $type2 = ((($2)) + 6|0);
 $3 = HEAPU8[$type2>>0]|(HEAPU8[$type2+1>>0]<<8);
 $conv3 = $3 << 16 >> 16;
 $sub = (($conv3) - 1)|0;
 $arrayidx = (183040 + ($sub<<2)|0);
 $4 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($4|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $5 = $mthing$addr;
 $type6 = ((($5)) + 6|0);
 $6 = HEAPU8[$type6>>0]|(HEAPU8[$type6+1>>0]<<8);
 $conv7 = $6 << 16 >> 16;
 $sub8 = (($conv7) - 1)|0;
 $arrayidx9 = (183056 + (($sub8*288)|0)|0);
 $p = $arrayidx9;
 $7 = $p;
 $playerstate = ((($7)) + 4|0);
 $8 = HEAP32[$playerstate>>2]|0;
 $cmp10 = ($8|0)==(2);
 if ($cmp10) {
  $9 = $mthing$addr;
  $type13 = ((($9)) + 6|0);
  $10 = HEAPU8[$type13>>0]|(HEAPU8[$type13+1>>0]<<8);
  $conv14 = $10 << 16 >> 16;
  $sub15 = (($conv14) - 1)|0;
  _G_PlayerReborn($sub15);
 }
 $11 = $mthing$addr;
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
 $conv18 = $12 << 16 >> 16;
 $shl = $conv18 << 16;
 $x = $shl;
 $13 = $mthing$addr;
 $y19 = ((($13)) + 2|0);
 $14 = HEAPU8[$y19>>0]|(HEAPU8[$y19+1>>0]<<8);
 $conv20 = $14 << 16 >> 16;
 $shl21 = $conv20 << 16;
 $y = $shl21;
 $z = -2147483648;
 $15 = $x;
 $16 = $y;
 $17 = $z;
 $call = (_P_SpawnMobj($15,$16,$17,0)|0);
 $mobj = $call;
 $18 = $mthing$addr;
 $type22 = ((($18)) + 6|0);
 $19 = HEAPU8[$type22>>0]|(HEAPU8[$type22+1>>0]<<8);
 $conv23 = $19 << 16 >> 16;
 $cmp24 = ($conv23|0)>(1);
 if ($cmp24) {
  $20 = $mthing$addr;
  $type27 = ((($20)) + 6|0);
  $21 = HEAPU8[$type27>>0]|(HEAPU8[$type27+1>>0]<<8);
  $conv28 = $21 << 16 >> 16;
  $sub29 = (($conv28) - 1)|0;
  $shl30 = $sub29 << 26;
  $22 = $mobj;
  $flags = ((($22)) + 104|0);
  $23 = HEAP32[$flags>>2]|0;
  $or = $23 | $shl30;
  HEAP32[$flags>>2] = $or;
 }
 $24 = $mthing$addr;
 $angle = ((($24)) + 4|0);
 $25 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $conv32 = $25 << 16 >> 16;
 $div = (($conv32|0) / 45)&-1;
 $mul = $div<<29;
 $26 = $mobj;
 $angle33 = ((($26)) + 32|0);
 HEAP32[$angle33>>2] = $mul;
 $27 = $p;
 $28 = $mobj;
 $player = ((($28)) + 132|0);
 HEAP32[$player>>2] = $27;
 $29 = $p;
 $health = ((($29)) + 40|0);
 $30 = HEAP32[$health>>2]|0;
 $31 = $mobj;
 $health34 = ((($31)) + 108|0);
 HEAP32[$health34>>2] = $30;
 $32 = $mobj;
 $33 = $p;
 HEAP32[$33>>2] = $32;
 $34 = $p;
 $playerstate35 = ((($34)) + 4|0);
 HEAP32[$playerstate35>>2] = 0;
 $35 = $p;
 $refire = ((($35)) + 208|0);
 HEAP32[$refire>>2] = 0;
 $36 = $p;
 $message = ((($36)) + 224|0);
 HEAP32[$message>>2] = 0;
 $37 = $p;
 $damagecount = ((($37)) + 228|0);
 HEAP32[$damagecount>>2] = 0;
 $38 = $p;
 $bonuscount = ((($38)) + 232|0);
 HEAP32[$bonuscount>>2] = 0;
 $39 = $p;
 $extralight = ((($39)) + 240|0);
 HEAP32[$extralight>>2] = 0;
 $40 = $p;
 $fixedcolormap = ((($40)) + 244|0);
 HEAP32[$fixedcolormap>>2] = 0;
 $41 = $p;
 $viewheight = ((($41)) + 28|0);
 HEAP32[$viewheight>>2] = 2686976;
 $42 = $p;
 _P_SetupPsprites($42);
 $43 = HEAP32[99430]|0;
 $tobool36 = ($43|0)!=(0);
 L13: do {
  if ($tobool36) {
   $i = 0;
   while(1) {
    $44 = $i;
    $cmp38 = ($44|0)<(6);
    if (!($cmp38)) {
     break L13;
    }
    $45 = $p;
    $cards = ((($45)) + 76|0);
    $46 = $i;
    $arrayidx40 = (($cards) + ($46<<2)|0);
    HEAP32[$arrayidx40>>2] = 1;
    $47 = $i;
    $inc = (($47) + 1)|0;
    $i = $inc;
   }
  }
 } while(0);
 $48 = $mthing$addr;
 $type42 = ((($48)) + 6|0);
 $49 = HEAPU8[$type42>>0]|(HEAPU8[$type42+1>>0]<<8);
 $conv43 = $49 << 16 >> 16;
 $sub44 = (($conv43) - 1)|0;
 $50 = HEAP32[99415]|0;
 $cmp45 = ($sub44|0)==($50|0);
 if (!($cmp45)) {
  STACKTOP = sp;return;
 }
 _ST_Start();
 _HU_Start();
 STACKTOP = sp;return;
}
function _P_SpawnMapThing($mthing) {
 $mthing = $mthing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and100 = 0, $and106 = 0, $and115 = 0;
 var $and39 = 0, $and65 = 0, $and75 = 0, $and87 = 0, $angle = 0, $angle112 = 0, $arrayidx = 0, $arrayidx47 = 0, $arrayidx64 = 0, $arrayidx73 = 0, $arrayidx85 = 0, $bit = 0, $call = 0, $call95 = 0, $cmp = 0, $cmp14 = 0, $cmp2 = 0, $cmp27 = 0, $cmp30 = 0, $cmp43 = 0;
 var $cmp48 = 0, $cmp52 = 0, $cmp71 = 0, $cmp8 = 0, $cmp92 = 0, $conv = 0, $conv111 = 0, $conv114 = 0, $conv13 = 0, $conv18 = 0, $conv23 = 0, $conv38 = 0, $conv46 = 0, $conv56 = 0, $conv58 = 0, $conv60 = 0, $conv7 = 0, $conv80 = 0, $conv83 = 0, $div = 0;
 var $flags = 0, $flags105 = 0, $flags118 = 0, $flags74 = 0, $flags86 = 0, $flags99 = 0, $i = 0, $inc = 0, $inc103 = 0, $inc109 = 0, $incdec$ptr = 0, $mobj = 0, $mthing$addr = 0, $mul = 0, $options = 0, $options113 = 0, $options37 = 0, $or = 0, $rem = 0, $shl = 0;
 var $shl81 = 0, $shl84 = 0, $spawnpoint = 0, $sub = 0, $sub34 = 0, $tics = 0, $tics96 = 0, $tics97 = 0, $tobool = 0, $tobool101 = 0, $tobool107 = 0, $tobool116 = 0, $tobool22 = 0, $tobool24 = 0, $tobool40 = 0, $tobool62 = 0, $tobool66 = 0, $tobool69 = 0, $tobool76 = 0, $tobool88 = 0;
 var $type = 0, $type12 = 0, $type17 = 0, $type45 = 0, $type55 = 0, $type6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x = 0, $y = 0, $y59 = 0, $y82 = 0, $z = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $mthing$addr = $mthing;
 $0 = $mthing$addr;
 $type = ((($0)) + 6|0);
 $1 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $cmp = ($conv|0)==(11);
 if ($cmp) {
  $2 = HEAP32[99861]|0;
  $3 = 192036;
  $cmp2 = ($2>>>0)<($3>>>0);
  if (!($cmp2)) {
   STACKTOP = sp;return;
  }
  $4 = HEAP32[99861]|0;
  $5 = $mthing$addr;
  dest=$4; src=$5; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $6 = HEAP32[99861]|0;
  $incdec$ptr = ((($6)) + 10|0);
  HEAP32[99861] = $incdec$ptr;
  STACKTOP = sp;return;
 }
 $7 = $mthing$addr;
 $type6 = ((($7)) + 6|0);
 $8 = HEAPU8[$type6>>0]|(HEAPU8[$type6+1>>0]<<8);
 $conv7 = $8 << 16 >> 16;
 $cmp8 = ($conv7|0)<=(0);
 if ($cmp8) {
  STACKTOP = sp;return;
 }
 $9 = $mthing$addr;
 $type12 = ((($9)) + 6|0);
 $10 = HEAPU8[$type12>>0]|(HEAPU8[$type12+1>>0]<<8);
 $conv13 = $10 << 16 >> 16;
 $cmp14 = ($conv13|0)<=(4);
 if ($cmp14) {
  $11 = $mthing$addr;
  $type17 = ((($11)) + 6|0);
  $12 = HEAPU8[$type17>>0]|(HEAPU8[$type17+1>>0]<<8);
  $conv18 = $12 << 16 >> 16;
  $sub = (($conv18) - 1)|0;
  $arrayidx = (192048 + (($sub*10)|0)|0);
  $13 = $mthing$addr;
  dest=$arrayidx; src=$13; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $14 = HEAP32[99430]|0;
  $tobool = ($14|0)!=(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  $15 = $mthing$addr;
  _P_SpawnPlayer($15);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[99433]|0;
 $tobool22 = ($16|0)!=(0);
 if (!($tobool22)) {
  $17 = $mthing$addr;
  $options = ((($17)) + 8|0);
  $18 = HEAPU8[$options>>0]|(HEAPU8[$options+1>>0]<<8);
  $conv23 = $18 << 16 >> 16;
  $and = $conv23 & 16;
  $tobool24 = ($and|0)!=(0);
  if ($tobool24) {
   STACKTOP = sp;return;
  }
 }
 $19 = HEAP32[99425]|0;
 $cmp27 = ($19|0)==(0);
 do {
  if ($cmp27) {
   $bit = 1;
  } else {
   $20 = HEAP32[99425]|0;
   $cmp30 = ($20|0)==(4);
   if ($cmp30) {
    $bit = 4;
    break;
   } else {
    $21 = HEAP32[99425]|0;
    $sub34 = (($21) - 1)|0;
    $shl = 1 << $sub34;
    $bit = $shl;
    break;
   }
  }
 } while(0);
 $22 = $mthing$addr;
 $options37 = ((($22)) + 8|0);
 $23 = HEAPU8[$options37>>0]|(HEAPU8[$options37+1>>0]<<8);
 $conv38 = $23 << 16 >> 16;
 $24 = $bit;
 $and39 = $conv38 & $24;
 $tobool40 = ($and39|0)!=(0);
 if (!($tobool40)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $25 = $i;
  $cmp43 = ($25|0)<(137);
  if (!($cmp43)) {
   break;
  }
  $26 = $mthing$addr;
  $type45 = ((($26)) + 6|0);
  $27 = HEAPU8[$type45>>0]|(HEAPU8[$type45+1>>0]<<8);
  $conv46 = $27 << 16 >> 16;
  $28 = $i;
  $arrayidx47 = (30656 + (($28*92)|0)|0);
  $29 = HEAP32[$arrayidx47>>2]|0;
  $cmp48 = ($conv46|0)==($29|0);
  if ($cmp48) {
   break;
  }
  $30 = $i;
  $inc = (($30) + 1)|0;
  $i = $inc;
 }
 $31 = $i;
 $cmp52 = ($31|0)==(137);
 if ($cmp52) {
  $32 = $mthing$addr;
  $type55 = ((($32)) + 6|0);
  $33 = HEAPU8[$type55>>0]|(HEAPU8[$type55+1>>0]<<8);
  $conv56 = $33 << 16 >> 16;
  $34 = $mthing$addr;
  $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8);
  $conv58 = $35 << 16 >> 16;
  $36 = $mthing$addr;
  $y59 = ((($36)) + 2|0);
  $37 = HEAPU8[$y59>>0]|(HEAPU8[$y59+1>>0]<<8);
  $conv60 = $37 << 16 >> 16;
  HEAP32[$vararg_buffer>>2] = $conv56;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv58;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $conv60;
  _I_Error(154521,$vararg_buffer);
 }
 $38 = HEAP32[99430]|0;
 $tobool62 = ($38|0)!=(0);
 if ($tobool62) {
  $39 = $i;
  $arrayidx64 = (30656 + (($39*92)|0)|0);
  $flags = ((($arrayidx64)) + 84|0);
  $40 = HEAP32[$flags>>2]|0;
  $and65 = $40 & 33554432;
  $tobool66 = ($and65|0)!=(0);
  if ($tobool66) {
   STACKTOP = sp;return;
  }
 }
 $41 = HEAP32[99380]|0;
 $tobool69 = ($41|0)!=(0);
 if ($tobool69) {
  $42 = $i;
  $cmp71 = ($42|0)==(18);
  if ($cmp71) {
   STACKTOP = sp;return;
  }
  $43 = $i;
  $arrayidx73 = (30656 + (($43*92)|0)|0);
  $flags74 = ((($arrayidx73)) + 84|0);
  $44 = HEAP32[$flags74>>2]|0;
  $and75 = $44 & 4194304;
  $tobool76 = ($and75|0)!=(0);
  if ($tobool76) {
   STACKTOP = sp;return;
  }
 }
 $45 = $mthing$addr;
 $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8);
 $conv80 = $46 << 16 >> 16;
 $shl81 = $conv80 << 16;
 $x = $shl81;
 $47 = $mthing$addr;
 $y82 = ((($47)) + 2|0);
 $48 = HEAPU8[$y82>>0]|(HEAPU8[$y82+1>>0]<<8);
 $conv83 = $48 << 16 >> 16;
 $shl84 = $conv83 << 16;
 $y = $shl84;
 $49 = $i;
 $arrayidx85 = (30656 + (($49*92)|0)|0);
 $flags86 = ((($arrayidx85)) + 84|0);
 $50 = HEAP32[$flags86>>2]|0;
 $and87 = $50 & 256;
 $tobool88 = ($and87|0)!=(0);
 if ($tobool88) {
  $z = 2147483647;
 } else {
  $z = -2147483648;
 }
 $51 = $x;
 $52 = $y;
 $53 = $z;
 $54 = $i;
 $call = (_P_SpawnMobj($51,$52,$53,$54)|0);
 $mobj = $call;
 $55 = $mobj;
 $spawnpoint = ((($55)) + 140|0);
 $56 = $mthing$addr;
 dest=$spawnpoint; src=$56; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $57 = $mobj;
 $tics = ((($57)) + 96|0);
 $58 = HEAP32[$tics>>2]|0;
 $cmp92 = ($58|0)>(0);
 if ($cmp92) {
  $call95 = (_P_Random()|0);
  $59 = $mobj;
  $tics96 = ((($59)) + 96|0);
  $60 = HEAP32[$tics96>>2]|0;
  $rem = (($call95|0) % ($60|0))&-1;
  $add = (1 + ($rem))|0;
  $61 = $mobj;
  $tics97 = ((($61)) + 96|0);
  HEAP32[$tics97>>2] = $add;
 }
 $62 = $mobj;
 $flags99 = ((($62)) + 104|0);
 $63 = HEAP32[$flags99>>2]|0;
 $and100 = $63 & 4194304;
 $tobool101 = ($and100|0)!=(0);
 if ($tobool101) {
  $64 = HEAP32[99488]|0;
  $inc103 = (($64) + 1)|0;
  HEAP32[99488] = $inc103;
 }
 $65 = $mobj;
 $flags105 = ((($65)) + 104|0);
 $66 = HEAP32[$flags105>>2]|0;
 $and106 = $66 & 8388608;
 $tobool107 = ($and106|0)!=(0);
 if ($tobool107) {
  $67 = HEAP32[99489]|0;
  $inc109 = (($67) + 1)|0;
  HEAP32[99489] = $inc109;
 }
 $68 = $mthing$addr;
 $angle = ((($68)) + 4|0);
 $69 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 $conv111 = $69 << 16 >> 16;
 $div = (($conv111|0) / 45)&-1;
 $mul = $div<<29;
 $70 = $mobj;
 $angle112 = ((($70)) + 32|0);
 HEAP32[$angle112>>2] = $mul;
 $71 = $mthing$addr;
 $options113 = ((($71)) + 8|0);
 $72 = HEAPU8[$options113>>0]|(HEAPU8[$options113+1>>0]<<8);
 $conv114 = $72 << 16 >> 16;
 $and115 = $conv114 & 8;
 $tobool116 = ($and115|0)!=(0);
 if (!($tobool116)) {
  STACKTOP = sp;return;
 }
 $73 = $mobj;
 $flags118 = ((($73)) + 104|0);
 $74 = HEAP32[$flags118>>2]|0;
 $or = $74 | 32;
 HEAP32[$flags118>>2] = $or;
 STACKTOP = sp;return;
}
function _P_SpawnPuff($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $cmp = 0, $cmp7 = 0;
 var $momz = 0, $shl = 0, $sub = 0, $sub4 = 0, $th = 0, $tics = 0, $tics5 = 0, $tics6 = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $z$addr = $z;
 $call = (_P_Random()|0);
 $call1 = (_P_Random()|0);
 $sub = (($call) - ($call1))|0;
 $shl = $sub << 10;
 $0 = $z$addr;
 $add = (($0) + ($shl))|0;
 $z$addr = $add;
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $z$addr;
 $call2 = (_P_SpawnMobj($1,$2,$3,37)|0);
 $th = $call2;
 $4 = $th;
 $momz = ((($4)) + 80|0);
 HEAP32[$momz>>2] = 65536;
 $call3 = (_P_Random()|0);
 $and = $call3 & 3;
 $5 = $th;
 $tics = ((($5)) + 96|0);
 $6 = HEAP32[$tics>>2]|0;
 $sub4 = (($6) - ($and))|0;
 HEAP32[$tics>>2] = $sub4;
 $7 = $th;
 $tics5 = ((($7)) + 96|0);
 $8 = HEAP32[$tics5>>2]|0;
 $cmp = ($8|0)<(1);
 if ($cmp) {
  $9 = $th;
  $tics6 = ((($9)) + 96|0);
  HEAP32[$tics6>>2] = 1;
 }
 $10 = HEAP32[99770]|0;
 $cmp7 = ($10|0)==(4194304);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $11 = $th;
 (_P_SetMobjState($11,95)|0);
 STACKTOP = sp;return;
}
function _P_SpawnBlood($x,$y,$z,$damage) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $damage = $damage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $call3 = 0, $cmp = 0, $cmp11 = 0, $cmp7 = 0, $cmp8 = 0, $damage$addr = 0, $momz = 0, $or$cond = 0, $shl = 0, $sub = 0, $sub4 = 0, $th = 0, $tics = 0, $tics5 = 0, $tics6 = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $z$addr = $z;
 $damage$addr = $damage;
 $call = (_P_Random()|0);
 $call1 = (_P_Random()|0);
 $sub = (($call) - ($call1))|0;
 $shl = $sub << 10;
 $0 = $z$addr;
 $add = (($0) + ($shl))|0;
 $z$addr = $add;
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $z$addr;
 $call2 = (_P_SpawnMobj($1,$2,$3,38)|0);
 $th = $call2;
 $4 = $th;
 $momz = ((($4)) + 80|0);
 HEAP32[$momz>>2] = 131072;
 $call3 = (_P_Random()|0);
 $and = $call3 & 3;
 $5 = $th;
 $tics = ((($5)) + 96|0);
 $6 = HEAP32[$tics>>2]|0;
 $sub4 = (($6) - ($and))|0;
 HEAP32[$tics>>2] = $sub4;
 $7 = $th;
 $tics5 = ((($7)) + 96|0);
 $8 = HEAP32[$tics5>>2]|0;
 $cmp = ($8|0)<(1);
 if ($cmp) {
  $9 = $th;
  $tics6 = ((($9)) + 96|0);
  HEAP32[$tics6>>2] = 1;
 }
 $10 = $damage$addr;
 $cmp7 = ($10|0)<=(12);
 $11 = $damage$addr;
 $cmp8 = ($11|0)>=(9);
 $or$cond = $cmp7 & $cmp8;
 if ($or$cond) {
  $12 = $th;
  (_P_SetMobjState($12,91)|0);
  STACKTOP = sp;return;
 }
 $13 = $damage$addr;
 $cmp11 = ($13|0)<(9);
 if (!($cmp11)) {
  STACKTOP = sp;return;
 }
 $14 = $th;
 (_P_SetMobjState($14,92)|0);
 STACKTOP = sp;return;
}
function _P_CheckMissileSpawn($th) {
 $th = $th|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add4 = 0, $add6 = 0, $and = 0, $call = 0, $call9 = 0, $cmp = 0, $momx = 0, $momy = 0, $momz = 0, $shr = 0, $shr3 = 0, $shr5 = 0, $sub = 0, $th$addr = 0, $tics = 0, $tics1 = 0;
 var $tics2 = 0, $tobool = 0, $x = 0, $x7 = 0, $y = 0, $y8 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $th$addr = $th;
 $call = (_P_Random()|0);
 $and = $call & 3;
 $0 = $th$addr;
 $tics = ((($0)) + 96|0);
 $1 = HEAP32[$tics>>2]|0;
 $sub = (($1) - ($and))|0;
 HEAP32[$tics>>2] = $sub;
 $2 = $th$addr;
 $tics1 = ((($2)) + 96|0);
 $3 = HEAP32[$tics1>>2]|0;
 $cmp = ($3|0)<(1);
 if ($cmp) {
  $4 = $th$addr;
  $tics2 = ((($4)) + 96|0);
  HEAP32[$tics2>>2] = 1;
 }
 $5 = $th$addr;
 $momx = ((($5)) + 72|0);
 $6 = HEAP32[$momx>>2]|0;
 $shr = $6 >> 1;
 $7 = $th$addr;
 $x = ((($7)) + 12|0);
 $8 = HEAP32[$x>>2]|0;
 $add = (($8) + ($shr))|0;
 HEAP32[$x>>2] = $add;
 $9 = $th$addr;
 $momy = ((($9)) + 76|0);
 $10 = HEAP32[$momy>>2]|0;
 $shr3 = $10 >> 1;
 $11 = $th$addr;
 $y = ((($11)) + 16|0);
 $12 = HEAP32[$y>>2]|0;
 $add4 = (($12) + ($shr3))|0;
 HEAP32[$y>>2] = $add4;
 $13 = $th$addr;
 $momz = ((($13)) + 80|0);
 $14 = HEAP32[$momz>>2]|0;
 $shr5 = $14 >> 1;
 $15 = $th$addr;
 $z = ((($15)) + 20|0);
 $16 = HEAP32[$z>>2]|0;
 $add6 = (($16) + ($shr5))|0;
 HEAP32[$z>>2] = $add6;
 $17 = $th$addr;
 $18 = $th$addr;
 $x7 = ((($18)) + 12|0);
 $19 = HEAP32[$x7>>2]|0;
 $20 = $th$addr;
 $y8 = ((($20)) + 16|0);
 $21 = HEAP32[$y8>>2]|0;
 $call9 = (_P_TryMove($17,$19,$21)|0);
 $tobool = ($call9|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $22 = $th$addr;
 _P_ExplodeMissile($22);
 STACKTOP = sp;return;
}
function _P_SubstNullMobj($mobj) {
 $mobj = $mobj|0;
 var $0 = 0, $1 = 0, $cmp = 0, $mobj$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mobj$addr = $mobj;
 $0 = $mobj$addr;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  HEAP32[(399192)>>2] = 0;
  HEAP32[(399196)>>2] = 0;
  HEAP32[(399200)>>2] = 0;
  HEAP32[(399284)>>2] = 0;
  $mobj$addr = 399180;
 }
 $1 = $mobj$addr;
 STACKTOP = sp;return ($1|0);
}
function _P_SpawnMissile($source,$dest,$type) {
 $source = $source|0;
 $dest = $dest|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add12 = 0, $an = 0, $and = 0, $angle = 0, $arrayidx = 0, $arrayidx18 = 0, $call = 0, $call10 = 0, $call11 = 0, $call15 = 0, $call19 = 0, $call26 = 0, $call7 = 0, $cmp = 0, $dest$addr = 0, $dist = 0;
 var $div = 0, $div34 = 0, $flags = 0, $info = 0, $info1 = 0, $info14 = 0, $info16 = 0, $info27 = 0, $momx = 0, $momy = 0, $momz = 0, $seesound = 0, $seesound2 = 0, $shl = 0, $shr = 0, $source$addr = 0, $spec$store$select = 0, $speed = 0, $speed17 = 0, $speed28 = 0;
 var $sub = 0, $sub22 = 0, $sub25 = 0, $sub33 = 0, $target = 0, $th = 0, $tobool = 0, $tobool8 = 0, $type$addr = 0, $x = 0, $x20 = 0, $x21 = 0, $x3 = 0, $x5 = 0, $y = 0, $y23 = 0, $y24 = 0, $y4 = 0, $y6 = 0, $z = 0;
 var $z31 = 0, $z32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $source$addr = $source;
 $dest$addr = $dest;
 $type$addr = $type;
 $0 = $source$addr;
 $x = ((($0)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 $2 = $source$addr;
 $y = ((($2)) + 16|0);
 $3 = HEAP32[$y>>2]|0;
 $4 = $source$addr;
 $z = ((($4)) + 20|0);
 $5 = HEAP32[$z>>2]|0;
 $add = (($5) + 2097152)|0;
 $6 = $type$addr;
 $call = (_P_SpawnMobj($1,$3,$add,$6)|0);
 $th = $call;
 $7 = $th;
 $info = ((($7)) + 92|0);
 $8 = HEAP32[$info>>2]|0;
 $seesound = ((($8)) + 16|0);
 $9 = HEAP32[$seesound>>2]|0;
 $tobool = ($9|0)!=(0);
 if ($tobool) {
  $10 = $th;
  $11 = $th;
  $info1 = ((($11)) + 92|0);
  $12 = HEAP32[$info1>>2]|0;
  $seesound2 = ((($12)) + 16|0);
  $13 = HEAP32[$seesound2>>2]|0;
  _S_StartSound($10,$13);
 }
 $14 = $source$addr;
 $15 = $th;
 $target = ((($15)) + 120|0);
 HEAP32[$target>>2] = $14;
 $16 = $source$addr;
 $x3 = ((($16)) + 12|0);
 $17 = HEAP32[$x3>>2]|0;
 $18 = $source$addr;
 $y4 = ((($18)) + 16|0);
 $19 = HEAP32[$y4>>2]|0;
 $20 = $dest$addr;
 $x5 = ((($20)) + 12|0);
 $21 = HEAP32[$x5>>2]|0;
 $22 = $dest$addr;
 $y6 = ((($22)) + 16|0);
 $23 = HEAP32[$y6>>2]|0;
 $call7 = (_R_PointToAngle2($17,$19,$21,$23)|0);
 $an = $call7;
 $24 = $dest$addr;
 $flags = ((($24)) + 104|0);
 $25 = HEAP32[$flags>>2]|0;
 $and = $25 & 262144;
 $tobool8 = ($and|0)!=(0);
 if ($tobool8) {
  $call10 = (_P_Random()|0);
  $call11 = (_P_Random()|0);
  $sub = (($call10) - ($call11))|0;
  $shl = $sub << 20;
  $26 = $an;
  $add12 = (($26) + ($shl))|0;
  $an = $add12;
 }
 $27 = $an;
 $28 = $th;
 $angle = ((($28)) + 32|0);
 HEAP32[$angle>>2] = $27;
 $29 = $an;
 $shr = $29 >>> 19;
 $an = $shr;
 $30 = $th;
 $info14 = ((($30)) + 92|0);
 $31 = HEAP32[$info14>>2]|0;
 $speed = ((($31)) + 60|0);
 $32 = HEAP32[$speed>>2]|0;
 $33 = $an;
 $arrayidx = ((82992) + ($33<<2)|0);
 $34 = HEAP32[$arrayidx>>2]|0;
 $call15 = (_FixedMul($32,$34)|0);
 $35 = $th;
 $momx = ((($35)) + 72|0);
 HEAP32[$momx>>2] = $call15;
 $36 = $th;
 $info16 = ((($36)) + 92|0);
 $37 = HEAP32[$info16>>2]|0;
 $speed17 = ((($37)) + 60|0);
 $38 = HEAP32[$speed17>>2]|0;
 $39 = $an;
 $arrayidx18 = (74800 + ($39<<2)|0);
 $40 = HEAP32[$arrayidx18>>2]|0;
 $call19 = (_FixedMul($38,$40)|0);
 $41 = $th;
 $momy = ((($41)) + 76|0);
 HEAP32[$momy>>2] = $call19;
 $42 = $dest$addr;
 $x20 = ((($42)) + 12|0);
 $43 = HEAP32[$x20>>2]|0;
 $44 = $source$addr;
 $x21 = ((($44)) + 12|0);
 $45 = HEAP32[$x21>>2]|0;
 $sub22 = (($43) - ($45))|0;
 $46 = $dest$addr;
 $y23 = ((($46)) + 16|0);
 $47 = HEAP32[$y23>>2]|0;
 $48 = $source$addr;
 $y24 = ((($48)) + 16|0);
 $49 = HEAP32[$y24>>2]|0;
 $sub25 = (($47) - ($49))|0;
 $call26 = (_P_AproxDistance($sub22,$sub25)|0);
 $dist = $call26;
 $50 = $dist;
 $51 = $th;
 $info27 = ((($51)) + 92|0);
 $52 = HEAP32[$info27>>2]|0;
 $speed28 = ((($52)) + 60|0);
 $53 = HEAP32[$speed28>>2]|0;
 $div = (($50|0) / ($53|0))&-1;
 $dist = $div;
 $54 = $dist;
 $cmp = ($54|0)<(1);
 $spec$store$select = $cmp ? 1 : $div;
 $dist = $spec$store$select;
 $55 = $dest$addr;
 $z31 = ((($55)) + 20|0);
 $56 = HEAP32[$z31>>2]|0;
 $57 = $source$addr;
 $z32 = ((($57)) + 20|0);
 $58 = HEAP32[$z32>>2]|0;
 $sub33 = (($56) - ($58))|0;
 $59 = $dist;
 $div34 = (($sub33|0) / ($59|0))&-1;
 $60 = $th;
 $momz = ((($60)) + 80|0);
 HEAP32[$momz>>2] = $div34;
 $61 = $th;
 _P_CheckMissileSpawn($61);
 $62 = $th;
 STACKTOP = sp;return ($62|0);
}
function _P_SpawnPlayerMissile($source,$type) {
 $source = $source|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add13 = 0, $an = 0, $angle = 0, $angle20 = 0, $angle7 = 0;
 var $arrayidx = 0, $arrayidx26 = 0, $call = 0, $call1 = 0, $call14 = 0, $call22 = 0, $call27 = 0, $call30 = 0, $call4 = 0, $info = 0, $info17 = 0, $info21 = 0, $info23 = 0, $info28 = 0, $momx = 0, $momy = 0, $momz = 0, $seesound = 0, $seesound18 = 0, $shr = 0;
 var $shr25 = 0, $slope = 0, $source$addr = 0, $speed = 0, $speed24 = 0, $speed29 = 0, $sub = 0, $target = 0, $th = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $tobool5 = 0, $type$addr = 0, $x = 0, $x10 = 0, $y = 0, $y11 = 0, $z = 0, $z12 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $source$addr = $source;
 $type$addr = $type;
 $0 = $source$addr;
 $angle = ((($0)) + 32|0);
 $1 = HEAP32[$angle>>2]|0;
 $an = $1;
 $2 = $source$addr;
 $3 = $an;
 $call = (_P_AimLineAttack($2,$3,67108864)|0);
 $slope = $call;
 $4 = HEAP32[99774]|0;
 $tobool = ($4|0)!=(0|0);
 if (!($tobool)) {
  $5 = $an;
  $add = (($5) + 67108864)|0;
  $an = $add;
  $6 = $source$addr;
  $7 = $an;
  $call1 = (_P_AimLineAttack($6,$7,67108864)|0);
  $slope = $call1;
  $8 = HEAP32[99774]|0;
  $tobool2 = ($8|0)!=(0|0);
  if (!($tobool2)) {
   $9 = $an;
   $sub = (($9) - 134217728)|0;
   $an = $sub;
   $10 = $source$addr;
   $11 = $an;
   $call4 = (_P_AimLineAttack($10,$11,67108864)|0);
   $slope = $call4;
  }
  $12 = HEAP32[99774]|0;
  $tobool5 = ($12|0)!=(0|0);
  if (!($tobool5)) {
   $13 = $source$addr;
   $angle7 = ((($13)) + 32|0);
   $14 = HEAP32[$angle7>>2]|0;
   $an = $14;
   $slope = 0;
  }
 }
 $15 = $source$addr;
 $x10 = ((($15)) + 12|0);
 $16 = HEAP32[$x10>>2]|0;
 $x = $16;
 $17 = $source$addr;
 $y11 = ((($17)) + 16|0);
 $18 = HEAP32[$y11>>2]|0;
 $y = $18;
 $19 = $source$addr;
 $z12 = ((($19)) + 20|0);
 $20 = HEAP32[$z12>>2]|0;
 $add13 = (($20) + 2097152)|0;
 $z = $add13;
 $21 = $x;
 $22 = $y;
 $23 = $z;
 $24 = $type$addr;
 $call14 = (_P_SpawnMobj($21,$22,$23,$24)|0);
 $th = $call14;
 $25 = $th;
 $info = ((($25)) + 92|0);
 $26 = HEAP32[$info>>2]|0;
 $seesound = ((($26)) + 16|0);
 $27 = HEAP32[$seesound>>2]|0;
 $tobool15 = ($27|0)!=(0);
 if ($tobool15) {
  $28 = $th;
  $29 = $th;
  $info17 = ((($29)) + 92|0);
  $30 = HEAP32[$info17>>2]|0;
  $seesound18 = ((($30)) + 16|0);
  $31 = HEAP32[$seesound18>>2]|0;
  _S_StartSound($28,$31);
 }
 $32 = $source$addr;
 $33 = $th;
 $target = ((($33)) + 120|0);
 HEAP32[$target>>2] = $32;
 $34 = $an;
 $35 = $th;
 $angle20 = ((($35)) + 32|0);
 HEAP32[$angle20>>2] = $34;
 $36 = $th;
 $info21 = ((($36)) + 92|0);
 $37 = HEAP32[$info21>>2]|0;
 $speed = ((($37)) + 60|0);
 $38 = HEAP32[$speed>>2]|0;
 $39 = $an;
 $shr = $39 >>> 19;
 $arrayidx = ((82992) + ($shr<<2)|0);
 $40 = HEAP32[$arrayidx>>2]|0;
 $call22 = (_FixedMul($38,$40)|0);
 $41 = $th;
 $momx = ((($41)) + 72|0);
 HEAP32[$momx>>2] = $call22;
 $42 = $th;
 $info23 = ((($42)) + 92|0);
 $43 = HEAP32[$info23>>2]|0;
 $speed24 = ((($43)) + 60|0);
 $44 = HEAP32[$speed24>>2]|0;
 $45 = $an;
 $shr25 = $45 >>> 19;
 $arrayidx26 = (74800 + ($shr25<<2)|0);
 $46 = HEAP32[$arrayidx26>>2]|0;
 $call27 = (_FixedMul($44,$46)|0);
 $47 = $th;
 $momy = ((($47)) + 76|0);
 HEAP32[$momy>>2] = $call27;
 $48 = $th;
 $info28 = ((($48)) + 92|0);
 $49 = HEAP32[$info28>>2]|0;
 $speed29 = ((($49)) + 60|0);
 $50 = HEAP32[$speed29>>2]|0;
 $51 = $slope;
 $call30 = (_FixedMul($50,$51)|0);
 $52 = $th;
 $momz = ((($52)) + 80|0);
 HEAP32[$momz>>2] = $call30;
 $53 = $th;
 _P_CheckMissileSpawn($53);
 STACKTOP = sp;return;
}
function _T_PlatRaise($plat) {
 $plat = $plat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $and = 0, $call = 0, $call28 = 0, $cmp = 0, $cmp13 = 0, $cmp2 = 0, $cmp29 = 0, $cmp43 = 0, $cmp6 = 0, $count = 0, $count16 = 0, $count32 = 0, $count38 = 0, $crush = 0, $crush7 = 0, $dec = 0, $high = 0, $low = 0, $low42 = 0, $plat$addr = 0;
 var $res = 0, $sector = 0, $sector11 = 0, $sector18 = 0, $sector26 = 0, $sector34 = 0, $sector4 = 0, $sector41 = 0, $sector49 = 0, $soundorg = 0, $soundorg12 = 0, $soundorg19 = 0, $soundorg35 = 0, $soundorg50 = 0, $speed = 0, $speed27 = 0, $status = 0, $status10 = 0, $status17 = 0, $status33 = 0;
 var $status45 = 0, $tobool = 0, $tobool39 = 0, $tobool8 = 0, $type = 0, $type1 = 0, $type20 = 0, $wait = 0, $wait15 = 0, $wait31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $plat$addr = $plat;
 $0 = $plat$addr;
 $status = ((($0)) + 36|0);
 $1 = HEAP32[$status>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = $plat$addr;
  $sector = ((($2)) + 12|0);
  $3 = HEAP32[$sector>>2]|0;
  $4 = $plat$addr;
  $speed = ((($4)) + 16|0);
  $5 = HEAP32[$speed>>2]|0;
  $6 = $plat$addr;
  $high = ((($6)) + 24|0);
  $7 = HEAP32[$high>>2]|0;
  $8 = $plat$addr;
  $crush = ((($8)) + 44|0);
  $9 = HEAP32[$crush>>2]|0;
  $call = (_T_MovePlane($3,$5,$7,$9,0,1)|0);
  $res = $call;
  $10 = $plat$addr;
  $type = ((($10)) + 52|0);
  $11 = HEAP32[$type>>2]|0;
  $cmp = ($11|0)==(2);
  if ($cmp) {
   label = 4;
  } else {
   $12 = $plat$addr;
   $type1 = ((($12)) + 52|0);
   $13 = HEAP32[$type1>>2]|0;
   $cmp2 = ($13|0)==(3);
   if ($cmp2) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   $14 = HEAP32[99905]|0;
   $and = $14 & 7;
   $tobool = ($and|0)!=(0);
   if (!($tobool)) {
    $15 = $plat$addr;
    $sector4 = ((($15)) + 12|0);
    $16 = HEAP32[$sector4>>2]|0;
    $soundorg = ((($16)) + 44|0);
    _S_StartSound($soundorg,22);
   }
  }
  $17 = $res;
  $cmp6 = ($17|0)==(1);
  if ($cmp6) {
   $18 = $plat$addr;
   $crush7 = ((($18)) + 44|0);
   $19 = HEAP32[$crush7>>2]|0;
   $tobool8 = ($19|0)!=(0);
   if (!($tobool8)) {
    $20 = $plat$addr;
    $wait = ((($20)) + 28|0);
    $21 = HEAP32[$wait>>2]|0;
    $22 = $plat$addr;
    $count = ((($22)) + 32|0);
    HEAP32[$count>>2] = $21;
    $23 = $plat$addr;
    $status10 = ((($23)) + 36|0);
    HEAP32[$status10>>2] = 1;
    $24 = $plat$addr;
    $sector11 = ((($24)) + 12|0);
    $25 = HEAP32[$sector11>>2]|0;
    $soundorg12 = ((($25)) + 44|0);
    _S_StartSound($soundorg12,18);
    STACKTOP = sp;return;
   }
  }
  $26 = $res;
  $cmp13 = ($26|0)==(2);
  if (!($cmp13)) {
   STACKTOP = sp;return;
  }
  $27 = $plat$addr;
  $wait15 = ((($27)) + 28|0);
  $28 = HEAP32[$wait15>>2]|0;
  $29 = $plat$addr;
  $count16 = ((($29)) + 32|0);
  HEAP32[$count16>>2] = $28;
  $30 = $plat$addr;
  $status17 = ((($30)) + 36|0);
  HEAP32[$status17>>2] = 2;
  $31 = $plat$addr;
  $sector18 = ((($31)) + 12|0);
  $32 = HEAP32[$sector18>>2]|0;
  $soundorg19 = ((($32)) + 44|0);
  _S_StartSound($soundorg19,19);
  $33 = $plat$addr;
  $type20 = ((($33)) + 52|0);
  $34 = HEAP32[$type20>>2]|0;
  switch ($34|0) {
  case 1: case 4:  {
   $35 = $plat$addr;
   _P_RemoveActivePlat($35);
   STACKTOP = sp;return;
   break;
  }
  case 3: case 2:  {
   $36 = $plat$addr;
   _P_RemoveActivePlat($36);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 1:  {
  $37 = $plat$addr;
  $sector26 = ((($37)) + 12|0);
  $38 = HEAP32[$sector26>>2]|0;
  $39 = $plat$addr;
  $speed27 = ((($39)) + 16|0);
  $40 = HEAP32[$speed27>>2]|0;
  $41 = $plat$addr;
  $low = ((($41)) + 20|0);
  $42 = HEAP32[$low>>2]|0;
  $call28 = (_T_MovePlane($38,$40,$42,0,0,-1)|0);
  $res = $call28;
  $43 = $res;
  $cmp29 = ($43|0)==(2);
  if (!($cmp29)) {
   STACKTOP = sp;return;
  }
  $44 = $plat$addr;
  $wait31 = ((($44)) + 28|0);
  $45 = HEAP32[$wait31>>2]|0;
  $46 = $plat$addr;
  $count32 = ((($46)) + 32|0);
  HEAP32[$count32>>2] = $45;
  $47 = $plat$addr;
  $status33 = ((($47)) + 36|0);
  HEAP32[$status33>>2] = 2;
  $48 = $plat$addr;
  $sector34 = ((($48)) + 12|0);
  $49 = HEAP32[$sector34>>2]|0;
  $soundorg35 = ((($49)) + 44|0);
  _S_StartSound($soundorg35,19);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $50 = $plat$addr;
  $count38 = ((($50)) + 32|0);
  $51 = HEAP32[$count38>>2]|0;
  $dec = (($51) + -1)|0;
  HEAP32[$count38>>2] = $dec;
  $tobool39 = ($dec|0)!=(0);
  if ($tobool39) {
   STACKTOP = sp;return;
  }
  $52 = $plat$addr;
  $sector41 = ((($52)) + 12|0);
  $53 = HEAP32[$sector41>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $plat$addr;
  $low42 = ((($55)) + 20|0);
  $56 = HEAP32[$low42>>2]|0;
  $cmp43 = ($54|0)==($56|0);
  $57 = $plat$addr;
  $status45 = ((($57)) + 36|0);
  if ($cmp43) {
   HEAP32[$status45>>2] = 0;
  } else {
   HEAP32[$status45>>2] = 1;
  }
  $58 = $plat$addr;
  $sector49 = ((($58)) + 12|0);
  $59 = HEAP32[$sector49>>2]|0;
  $soundorg50 = ((($59)) + 44|0);
  _S_StartSound($soundorg50,18);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _P_RemoveActivePlat($plat) {
 $plat = $plat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $cmp = 0, $cmp1 = 0, $i = 0, $inc = 0, $plat$addr = 0, $sector = 0;
 var $specialdata = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $plat$addr = $plat;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = $plat$addr;
  $2 = $i;
  $arrayidx = (191808 + ($2<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($1|0)==($3|0);
  $4 = $i;
  if ($cmp1) {
   label = 4;
   break;
  }
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $arrayidx2 = (191808 + ($4<<2)|0);
  $5 = HEAP32[$arrayidx2>>2]|0;
  $sector = ((($5)) + 12|0);
  $6 = HEAP32[$sector>>2]|0;
  $specialdata = ((($6)) + 76|0);
  HEAP32[$specialdata>>2] = 0;
  $7 = $i;
  $arrayidx3 = (191808 + ($7<<2)|0);
  $8 = HEAP32[$arrayidx3>>2]|0;
  _P_RemoveThinker($8);
  $9 = $i;
  $arrayidx4 = (191808 + ($9<<2)|0);
  HEAP32[$arrayidx4>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  _I_Error(154566,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _EV_DoPlat($line,$type,$amount) {
 $line = $line|0;
 $type = $type|0;
 $amount = $amount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $amount$addr = 0, $and = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx21 = 0, $call = 0, $call15 = 0, $call2 = 0, $call32 = 0, $call48 = 0, $call65 = 0;
 var $call75 = 0, $call86 = 0, $cmp = 0, $cmp35 = 0, $cmp52 = 0, $cmp69 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv8 = 0, $crush = 0, $floorpic = 0, $floorpic14 = 0, $floorpic23 = 0, $floorpic24 = 0, $function = 0, $high = 0, $high26 = 0, $high42 = 0, $high59 = 0;
 var $high76 = 0, $high77 = 0, $high83 = 0, $idxprom = 0, $idxprom20 = 0, $line$addr = 0, $low = 0, $low33 = 0, $low39 = 0, $low49 = 0, $low50 = 0, $low56 = 0, $low66 = 0, $low67 = 0, $low73 = 0, $mul = 0, $plat = 0, $rtn = 0, $sec = 0, $secnum = 0;
 var $sector = 0, $sector13 = 0, $sector22 = 0, $sector4 = 0, $sidenum = 0, $sidenum18 = 0, $soundorg = 0, $soundorg29 = 0, $soundorg45 = 0, $soundorg62 = 0, $soundorg88 = 0, $special = 0, $specialdata = 0, $specialdata5 = 0, $speed = 0, $speed17 = 0, $speed31 = 0, $speed47 = 0, $speed64 = 0, $status = 0;
 var $status28 = 0, $status44 = 0, $status61 = 0, $status87 = 0, $tag = 0, $tag7 = 0, $tag9 = 0, $tobool = 0, $type$addr = 0, $type3 = 0, $wait = 0, $wait27 = 0, $wait43 = 0, $wait60 = 0, $wait85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $type$addr = $type;
 $amount$addr = $amount;
 $secnum = -1;
 $rtn = 0;
 $0 = $type$addr;
 $cond = ($0|0)==(0);
 if ($cond) {
  $1 = $line$addr;
  $tag = ((($1)) + 20|0);
  $2 = HEAP16[$tag>>1]|0;
  $conv = $2 << 16 >> 16;
  _P_ActivateInStasis($conv);
 }
 while(1) {
  $3 = $line$addr;
  $4 = $secnum;
  $call = (_P_FindSectorFromLineTag($3,$4)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   break;
  }
  $5 = HEAP32[99850]|0;
  $6 = $secnum;
  $arrayidx = (($5) + (($6*88)|0)|0);
  $sec = $arrayidx;
  $7 = $sec;
  $specialdata = ((($7)) + 76|0);
  $8 = HEAP32[$specialdata>>2]|0;
  $tobool = ($8|0)!=(0|0);
  if ($tobool) {
   continue;
  }
  $rtn = 1;
  $call2 = (_Z_Malloc(56,6,0)|0);
  $plat = $call2;
  $9 = $plat;
  _P_AddThinker($9);
  $10 = $type$addr;
  $11 = $plat;
  $type3 = ((($11)) + 52|0);
  HEAP32[$type3>>2] = $10;
  $12 = $sec;
  $13 = $plat;
  $sector = ((($13)) + 12|0);
  HEAP32[$sector>>2] = $12;
  $14 = $plat;
  $15 = $plat;
  $sector4 = ((($15)) + 12|0);
  $16 = HEAP32[$sector4>>2]|0;
  $specialdata5 = ((($16)) + 76|0);
  HEAP32[$specialdata5>>2] = $14;
  $17 = $plat;
  $function = ((($17)) + 8|0);
  HEAP32[$function>>2] = 135;
  $18 = $plat;
  $crush = ((($18)) + 44|0);
  HEAP32[$crush>>2] = 0;
  $19 = $line$addr;
  $tag7 = ((($19)) + 20|0);
  $20 = HEAP16[$tag7>>1]|0;
  $conv8 = $20 << 16 >> 16;
  $21 = $plat;
  $tag9 = ((($21)) + 48|0);
  HEAP32[$tag9>>2] = $conv8;
  $22 = $type$addr;
  switch ($22|0) {
  case 3:  {
   $23 = $plat;
   $speed = ((($23)) + 16|0);
   HEAP32[$speed>>2] = 32768;
   $24 = HEAP32[99845]|0;
   $25 = $line$addr;
   $sidenum = ((($25)) + 22|0);
   $26 = HEAP16[$sidenum>>1]|0;
   $idxprom = $26 << 16 >> 16;
   $arrayidx12 = (($24) + (($idxprom*20)|0)|0);
   $sector13 = ((($arrayidx12)) + 16|0);
   $27 = HEAP32[$sector13>>2]|0;
   $floorpic = ((($27)) + 8|0);
   $28 = HEAP16[$floorpic>>1]|0;
   $29 = $sec;
   $floorpic14 = ((($29)) + 8|0);
   HEAP16[$floorpic14>>1] = $28;
   $30 = $sec;
   $31 = $sec;
   $32 = HEAP32[$31>>2]|0;
   $call15 = (_P_FindNextHighestFloor($30,$32)|0);
   $33 = $plat;
   $high = ((($33)) + 24|0);
   HEAP32[$high>>2] = $call15;
   $34 = $plat;
   $wait = ((($34)) + 28|0);
   HEAP32[$wait>>2] = 0;
   $35 = $plat;
   $status = ((($35)) + 36|0);
   HEAP32[$status>>2] = 0;
   $36 = $sec;
   $special = ((($36)) + 14|0);
   HEAP16[$special>>1] = 0;
   $37 = $sec;
   $soundorg = ((($37)) + 44|0);
   _S_StartSound($soundorg,22);
   break;
  }
  case 2:  {
   $38 = $plat;
   $speed17 = ((($38)) + 16|0);
   HEAP32[$speed17>>2] = 32768;
   $39 = HEAP32[99845]|0;
   $40 = $line$addr;
   $sidenum18 = ((($40)) + 22|0);
   $41 = HEAP16[$sidenum18>>1]|0;
   $idxprom20 = $41 << 16 >> 16;
   $arrayidx21 = (($39) + (($idxprom20*20)|0)|0);
   $sector22 = ((($arrayidx21)) + 16|0);
   $42 = HEAP32[$sector22>>2]|0;
   $floorpic23 = ((($42)) + 8|0);
   $43 = HEAP16[$floorpic23>>1]|0;
   $44 = $sec;
   $floorpic24 = ((($44)) + 8|0);
   HEAP16[$floorpic24>>1] = $43;
   $45 = $sec;
   $46 = HEAP32[$45>>2]|0;
   $47 = $amount$addr;
   $mul = $47<<16;
   $add = (($46) + ($mul))|0;
   $48 = $plat;
   $high26 = ((($48)) + 24|0);
   HEAP32[$high26>>2] = $add;
   $49 = $plat;
   $wait27 = ((($49)) + 28|0);
   HEAP32[$wait27>>2] = 0;
   $50 = $plat;
   $status28 = ((($50)) + 36|0);
   HEAP32[$status28>>2] = 0;
   $51 = $sec;
   $soundorg29 = ((($51)) + 44|0);
   _S_StartSound($soundorg29,22);
   break;
  }
  case 1:  {
   $52 = $plat;
   $speed31 = ((($52)) + 16|0);
   HEAP32[$speed31>>2] = 262144;
   $53 = $sec;
   $call32 = (_P_FindLowestFloorSurrounding($53)|0);
   $54 = $plat;
   $low = ((($54)) + 20|0);
   HEAP32[$low>>2] = $call32;
   $55 = $plat;
   $low33 = ((($55)) + 20|0);
   $56 = HEAP32[$low33>>2]|0;
   $57 = $sec;
   $58 = HEAP32[$57>>2]|0;
   $cmp35 = ($56|0)>($58|0);
   if ($cmp35) {
    $59 = $sec;
    $60 = HEAP32[$59>>2]|0;
    $61 = $plat;
    $low39 = ((($61)) + 20|0);
    HEAP32[$low39>>2] = $60;
   }
   $62 = $sec;
   $63 = HEAP32[$62>>2]|0;
   $64 = $plat;
   $high42 = ((($64)) + 24|0);
   HEAP32[$high42>>2] = $63;
   $65 = $plat;
   $wait43 = ((($65)) + 28|0);
   HEAP32[$wait43>>2] = 105;
   $66 = $plat;
   $status44 = ((($66)) + 36|0);
   HEAP32[$status44>>2] = 1;
   $67 = $sec;
   $soundorg45 = ((($67)) + 44|0);
   _S_StartSound($soundorg45,18);
   break;
  }
  case 4:  {
   $68 = $plat;
   $speed47 = ((($68)) + 16|0);
   HEAP32[$speed47>>2] = 524288;
   $69 = $sec;
   $call48 = (_P_FindLowestFloorSurrounding($69)|0);
   $70 = $plat;
   $low49 = ((($70)) + 20|0);
   HEAP32[$low49>>2] = $call48;
   $71 = $plat;
   $low50 = ((($71)) + 20|0);
   $72 = HEAP32[$low50>>2]|0;
   $73 = $sec;
   $74 = HEAP32[$73>>2]|0;
   $cmp52 = ($72|0)>($74|0);
   if ($cmp52) {
    $75 = $sec;
    $76 = HEAP32[$75>>2]|0;
    $77 = $plat;
    $low56 = ((($77)) + 20|0);
    HEAP32[$low56>>2] = $76;
   }
   $78 = $sec;
   $79 = HEAP32[$78>>2]|0;
   $80 = $plat;
   $high59 = ((($80)) + 24|0);
   HEAP32[$high59>>2] = $79;
   $81 = $plat;
   $wait60 = ((($81)) + 28|0);
   HEAP32[$wait60>>2] = 105;
   $82 = $plat;
   $status61 = ((($82)) + 36|0);
   HEAP32[$status61>>2] = 1;
   $83 = $sec;
   $soundorg62 = ((($83)) + 44|0);
   _S_StartSound($soundorg62,18);
   break;
  }
  case 0:  {
   $84 = $plat;
   $speed64 = ((($84)) + 16|0);
   HEAP32[$speed64>>2] = 65536;
   $85 = $sec;
   $call65 = (_P_FindLowestFloorSurrounding($85)|0);
   $86 = $plat;
   $low66 = ((($86)) + 20|0);
   HEAP32[$low66>>2] = $call65;
   $87 = $plat;
   $low67 = ((($87)) + 20|0);
   $88 = HEAP32[$low67>>2]|0;
   $89 = $sec;
   $90 = HEAP32[$89>>2]|0;
   $cmp69 = ($88|0)>($90|0);
   if ($cmp69) {
    $91 = $sec;
    $92 = HEAP32[$91>>2]|0;
    $93 = $plat;
    $low73 = ((($93)) + 20|0);
    HEAP32[$low73>>2] = $92;
   }
   $94 = $sec;
   $call75 = (_P_FindHighestFloorSurrounding($94)|0);
   $95 = $plat;
   $high76 = ((($95)) + 24|0);
   HEAP32[$high76>>2] = $call75;
   $96 = $plat;
   $high77 = ((($96)) + 24|0);
   $97 = HEAP32[$high77>>2]|0;
   $98 = $sec;
   $99 = HEAP32[$98>>2]|0;
   $cmp79 = ($97|0)<($99|0);
   if ($cmp79) {
    $100 = $sec;
    $101 = HEAP32[$100>>2]|0;
    $102 = $plat;
    $high83 = ((($102)) + 24|0);
    HEAP32[$high83>>2] = $101;
   }
   $103 = $plat;
   $wait85 = ((($103)) + 28|0);
   HEAP32[$wait85>>2] = 105;
   $call86 = (_P_Random()|0);
   $and = $call86 & 1;
   $104 = $plat;
   $status87 = ((($104)) + 36|0);
   HEAP32[$status87>>2] = $and;
   $105 = $sec;
   $soundorg88 = ((($105)) + 44|0);
   _S_StartSound($soundorg88,18);
   break;
  }
  default: {
  }
  }
  $106 = $plat;
  _P_AddActivePlat($106);
 }
 $107 = $rtn;
 STACKTOP = sp;return ($107|0);
}
function _P_ActivateInStasis($tag) {
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0;
 var $arrayidx10 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $function = 0, $i = 0, $inc = 0, $oldstatus = 0, $status = 0, $status9 = 0, $tag$addr = 0, $tag2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tag$addr = $tag;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (191808 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0|0);
  if ($tobool) {
   $3 = $i;
   $arrayidx1 = (191808 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx1>>2]|0;
   $tag2 = ((($4)) + 48|0);
   $5 = HEAP32[$tag2>>2]|0;
   $6 = $tag$addr;
   $cmp3 = ($5|0)==($6|0);
   if ($cmp3) {
    $7 = $i;
    $arrayidx5 = (191808 + ($7<<2)|0);
    $8 = HEAP32[$arrayidx5>>2]|0;
    $status = ((($8)) + 36|0);
    $9 = HEAP32[$status>>2]|0;
    $cmp6 = ($9|0)==(3);
    if ($cmp6) {
     $10 = $i;
     $arrayidx7 = (191808 + ($10<<2)|0);
     $11 = HEAP32[$arrayidx7>>2]|0;
     $oldstatus = ((($11)) + 40|0);
     $12 = HEAP32[$oldstatus>>2]|0;
     $13 = $i;
     $arrayidx8 = (191808 + ($13<<2)|0);
     $14 = HEAP32[$arrayidx8>>2]|0;
     $status9 = ((($14)) + 36|0);
     HEAP32[$status9>>2] = $12;
     $15 = $i;
     $arrayidx10 = (191808 + ($15<<2)|0);
     $16 = HEAP32[$arrayidx10>>2]|0;
     $function = ((($16)) + 8|0);
     HEAP32[$function>>2] = 135;
    }
   }
  }
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _P_AddActivePlat($plat) {
 $plat = $plat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $cmp1 = 0, $i = 0, $inc = 0, $plat$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $plat$addr = $plat;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = $i;
  $arrayidx = (191808 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($2|0)==(0|0);
  if ($cmp1) {
   label = 4;
   break;
  }
  $5 = $i;
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $3 = $plat$addr;
  $4 = $i;
  $arrayidx2 = (191808 + ($4<<2)|0);
  HEAP32[$arrayidx2>>2] = $3;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  _I_Error(154603,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _EV_StopPlat($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx11 = 0, $arrayidx13 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $cmp = 0, $cmp2 = 0, $cmp6 = 0, $conv = 0, $function = 0, $inc = 0, $j = 0, $line$addr = 0, $oldstatus = 0, $status = 0, $status12 = 0, $status9 = 0;
 var $tag = 0, $tag5 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $line$addr = $line;
 $j = 0;
 while(1) {
  $0 = $j;
  $cmp = ($0|0)<(30);
  if (!($cmp)) {
   break;
  }
  $1 = $j;
  $arrayidx = (191808 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0|0);
  if ($tobool) {
   $3 = $j;
   $arrayidx1 = (191808 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx1>>2]|0;
   $status = ((($4)) + 36|0);
   $5 = HEAP32[$status>>2]|0;
   $cmp2 = ($5|0)!=(3);
   if ($cmp2) {
    $6 = $j;
    $arrayidx4 = (191808 + ($6<<2)|0);
    $7 = HEAP32[$arrayidx4>>2]|0;
    $tag = ((($7)) + 48|0);
    $8 = HEAP32[$tag>>2]|0;
    $9 = $line$addr;
    $tag5 = ((($9)) + 20|0);
    $10 = HEAP16[$tag5>>1]|0;
    $conv = $10 << 16 >> 16;
    $cmp6 = ($8|0)==($conv|0);
    if ($cmp6) {
     $11 = $j;
     $arrayidx8 = (191808 + ($11<<2)|0);
     $12 = HEAP32[$arrayidx8>>2]|0;
     $status9 = ((($12)) + 36|0);
     $13 = HEAP32[$status9>>2]|0;
     $14 = $j;
     $arrayidx10 = (191808 + ($14<<2)|0);
     $15 = HEAP32[$arrayidx10>>2]|0;
     $oldstatus = ((($15)) + 40|0);
     HEAP32[$oldstatus>>2] = $13;
     $16 = $j;
     $arrayidx11 = (191808 + ($16<<2)|0);
     $17 = HEAP32[$arrayidx11>>2]|0;
     $status12 = ((($17)) + 36|0);
     HEAP32[$status12>>2] = 3;
     $18 = $j;
     $arrayidx13 = (191808 + ($18<<2)|0);
     $19 = HEAP32[$arrayidx13>>2]|0;
     $function = ((($19)) + 8|0);
     HEAP32[$function>>2] = 0;
    }
   }
  }
  $20 = $j;
  $inc = (($20) + 1)|0;
  $j = $inc;
 }
 STACKTOP = sp;return;
}
function _P_SetPsprite($player,$position,$stnum) {
 $player = $player|0;
 $position = $position|0;
 $stnum = $stnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action = 0, $action12 = 0, $arrayidx = 0, $arrayidx2 = 0, $lnot = 0, $misc1 = 0, $misc17 = 0, $misc2 = 0, $nextstate = 0;
 var $player$addr = 0, $position$addr = 0, $psp = 0, $psprites = 0, $shl = 0, $shl8 = 0, $state = 0, $stnum$addr = 0, $sx = 0, $sy = 0, $tics = 0, $tics20 = 0, $tics4 = 0, $tobool = 0, $tobool10 = 0, $tobool15 = 0, $tobool21 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $player$addr = $player;
 $position$addr = $position;
 $stnum$addr = $stnum;
 $0 = $player$addr;
 $psprites = ((($0)) + 252|0);
 $1 = $position$addr;
 $arrayidx = (($psprites) + ($1<<4)|0);
 $psp = $arrayidx;
 while(1) {
  $2 = $stnum$addr;
  $tobool = ($2|0)!=(0);
  if (!($tobool)) {
   label = 3;
   break;
  }
  $4 = $stnum$addr;
  $arrayidx2 = (3568 + (($4*28)|0)|0);
  $state = $arrayidx2;
  $5 = $state;
  $6 = $psp;
  HEAP32[$6>>2] = $5;
  $7 = $state;
  $tics = ((($7)) + 8|0);
  $8 = HEAP32[$tics>>2]|0;
  $9 = $psp;
  $tics4 = ((($9)) + 4|0);
  HEAP32[$tics4>>2] = $8;
  $10 = $state;
  $misc1 = ((($10)) + 20|0);
  $11 = HEAP32[$misc1>>2]|0;
  $tobool5 = ($11|0)!=(0);
  if ($tobool5) {
   $12 = $state;
   $misc17 = ((($12)) + 20|0);
   $13 = HEAP32[$misc17>>2]|0;
   $shl = $13 << 16;
   $14 = $psp;
   $sx = ((($14)) + 8|0);
   HEAP32[$sx>>2] = $shl;
   $15 = $state;
   $misc2 = ((($15)) + 24|0);
   $16 = HEAP32[$misc2>>2]|0;
   $shl8 = $16 << 16;
   $17 = $psp;
   $sy = ((($17)) + 12|0);
   HEAP32[$sy>>2] = $shl8;
  }
  $18 = $state;
  $action = ((($18)) + 12|0);
  $19 = HEAP32[$action>>2]|0;
  $tobool10 = ($19|0)!=(0|0);
  if ($tobool10) {
   $20 = $state;
   $action12 = ((($20)) + 12|0);
   $21 = HEAP32[$action12>>2]|0;
   $22 = $player$addr;
   $23 = $psp;
   FUNCTION_TABLE_vii[$21 & 255]($22,$23);
   $24 = $psp;
   $25 = HEAP32[$24>>2]|0;
   $tobool15 = ($25|0)!=(0|0);
   if (!($tobool15)) {
    label = 9;
    break;
   }
  }
  $26 = $psp;
  $27 = HEAP32[$26>>2]|0;
  $nextstate = ((($27)) + 16|0);
  $28 = HEAP32[$nextstate>>2]|0;
  $stnum$addr = $28;
  $29 = $psp;
  $tics20 = ((($29)) + 4|0);
  $30 = HEAP32[$tics20>>2]|0;
  $tobool21 = ($30|0)!=(0);
  $lnot = $tobool21 ^ 1;
  if (!($lnot)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $3 = $psp;
  HEAP32[$3>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _P_BringUpWeapon($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp3 = 0, $newstate = 0;
 var $pendingweapon = 0, $pendingweapon1 = 0, $pendingweapon2 = 0, $pendingweapon6 = 0, $pendingweapon7 = 0, $player$addr = 0, $psprites = 0, $readyweapon = 0, $sy = 0, $upstate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $pendingweapon = ((($0)) + 124|0);
 $1 = HEAP32[$pendingweapon>>2]|0;
 $cmp = ($1|0)==(10);
 if ($cmp) {
  $2 = $player$addr;
  $readyweapon = ((($2)) + 120|0);
  $3 = HEAP32[$readyweapon>>2]|0;
  $4 = $player$addr;
  $pendingweapon1 = ((($4)) + 124|0);
  HEAP32[$pendingweapon1>>2] = $3;
 }
 $5 = $player$addr;
 $pendingweapon2 = ((($5)) + 124|0);
 $6 = HEAP32[$pendingweapon2>>2]|0;
 $cmp3 = ($6|0)==(7);
 if ($cmp3) {
  $7 = $player$addr;
  $8 = HEAP32[$7>>2]|0;
  _S_StartSound($8,10);
 }
 $9 = $player$addr;
 $pendingweapon6 = ((($9)) + 124|0);
 $10 = HEAP32[$pendingweapon6>>2]|0;
 $arrayidx = (512 + (($10*24)|0)|0);
 $upstate = ((($arrayidx)) + 4|0);
 $11 = HEAP32[$upstate>>2]|0;
 $newstate = $11;
 $12 = $player$addr;
 $pendingweapon7 = ((($12)) + 124|0);
 HEAP32[$pendingweapon7>>2] = 10;
 $13 = $player$addr;
 $psprites = ((($13)) + 252|0);
 $sy = ((($psprites)) + 12|0);
 HEAP32[$sy>>2] = 8388608;
 $14 = $player$addr;
 $15 = $newstate;
 _P_SetPsprite($14,0,$15);
 STACKTOP = sp;return;
}
function _P_CheckAmmo($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ammo = 0, $ammo15 = 0, $ammo26 = 0;
 var $ammo38 = 0, $ammo48 = 0, $ammo54 = 0, $ammo70 = 0, $ammo80 = 0, $ammo9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx100 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx23 = 0, $arrayidx27 = 0, $arrayidx35 = 0, $arrayidx45 = 0, $arrayidx49 = 0, $arrayidx61 = 0, $arrayidx67 = 0, $arrayidx71 = 0, $arrayidx77 = 0;
 var $arrayidx81 = 0, $cmp = 0, $cmp11 = 0, $cmp19 = 0, $cmp28 = 0, $cmp30 = 0, $cmp4 = 0, $cmp8 = 0, $cmp82 = 0, $cmp84 = 0, $cmp98 = 0, $count = 0, $downstate = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $pendingweapon = 0, $pendingweapon32 = 0, $pendingweapon42 = 0, $pendingweapon52 = 0;
 var $pendingweapon58 = 0, $pendingweapon64 = 0, $pendingweapon74 = 0, $pendingweapon86 = 0, $pendingweapon88 = 0, $pendingweapon97 = 0, $player$addr = 0, $readyweapon = 0, $readyweapon2 = 0, $readyweapon3 = 0, $readyweapon99 = 0, $retval = 0, $tobool = 0, $tobool17 = 0, $tobool24 = 0, $tobool36 = 0, $tobool40 = 0, $tobool46 = 0, $tobool50 = 0, $tobool56 = 0;
 var $tobool62 = 0, $tobool68 = 0, $tobool72 = 0, $tobool78 = 0, $weaponowned = 0, $weaponowned22 = 0, $weaponowned34 = 0, $weaponowned44 = 0, $weaponowned60 = 0, $weaponowned66 = 0, $weaponowned76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $readyweapon = ((($0)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($1*24)|0)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $ammo = $2;
 $3 = $player$addr;
 $readyweapon2 = ((($3)) + 120|0);
 $4 = HEAP32[$readyweapon2>>2]|0;
 $cmp = ($4|0)==(6);
 do {
  if ($cmp) {
   $count = 40;
  } else {
   $5 = $player$addr;
   $readyweapon3 = ((($5)) + 120|0);
   $6 = HEAP32[$readyweapon3>>2]|0;
   $cmp4 = ($6|0)==(8);
   if ($cmp4) {
    $count = 2;
    break;
   } else {
    $count = 1;
    break;
   }
  }
 } while(0);
 $7 = $ammo;
 $cmp8 = ($7|0)==(5);
 if (!($cmp8)) {
  $8 = $player$addr;
  $ammo9 = ((($8)) + 164|0);
  $9 = $ammo;
  $arrayidx10 = (($ammo9) + ($9<<2)|0);
  $10 = HEAP32[$arrayidx10>>2]|0;
  $11 = $count;
  $cmp11 = ($10|0)>=($11|0);
  if (!($cmp11)) {
   while(1) {
    $12 = $player$addr;
    $weaponowned = ((($12)) + 128|0);
    $arrayidx14 = ((($weaponowned)) + 20|0);
    $13 = HEAP32[$arrayidx14>>2]|0;
    $tobool = ($13|0)!=(0);
    if ($tobool) {
     $14 = $player$addr;
     $ammo15 = ((($14)) + 164|0);
     $arrayidx16 = ((($ammo15)) + 8|0);
     $15 = HEAP32[$arrayidx16>>2]|0;
     $tobool17 = ($15|0)!=(0);
     $16 = HEAP32[32168]|0;
     $cmp19 = ($16|0)!=(0);
     $or$cond = $tobool17 & $cmp19;
     if ($or$cond) {
      $17 = $player$addr;
      $pendingweapon = ((($17)) + 124|0);
      HEAP32[$pendingweapon>>2] = 5;
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
    do {
     if ((label|0) == 13) {
      label = 0;
      $18 = $player$addr;
      $weaponowned22 = ((($18)) + 128|0);
      $arrayidx23 = ((($weaponowned22)) + 32|0);
      $19 = HEAP32[$arrayidx23>>2]|0;
      $tobool24 = ($19|0)!=(0);
      if ($tobool24) {
       $20 = $player$addr;
       $ammo26 = ((($20)) + 164|0);
       $arrayidx27 = ((($ammo26)) + 4|0);
       $21 = HEAP32[$arrayidx27>>2]|0;
       $cmp28 = ($21|0)>(2);
       $22 = HEAP32[32168]|0;
       $cmp30 = ($22|0)==(2);
       $or$cond1 = $cmp28 & $cmp30;
       if ($or$cond1) {
        $23 = $player$addr;
        $pendingweapon32 = ((($23)) + 124|0);
        HEAP32[$pendingweapon32>>2] = 8;
        break;
       }
      }
      $24 = $player$addr;
      $weaponowned34 = ((($24)) + 128|0);
      $arrayidx35 = ((($weaponowned34)) + 12|0);
      $25 = HEAP32[$arrayidx35>>2]|0;
      $tobool36 = ($25|0)!=(0);
      if ($tobool36) {
       $26 = $player$addr;
       $ammo38 = ((($26)) + 164|0);
       $27 = HEAP32[$ammo38>>2]|0;
       $tobool40 = ($27|0)!=(0);
       if ($tobool40) {
        $28 = $player$addr;
        $pendingweapon42 = ((($28)) + 124|0);
        HEAP32[$pendingweapon42>>2] = 3;
        break;
       }
      }
      $29 = $player$addr;
      $weaponowned44 = ((($29)) + 128|0);
      $arrayidx45 = ((($weaponowned44)) + 8|0);
      $30 = HEAP32[$arrayidx45>>2]|0;
      $tobool46 = ($30|0)!=(0);
      if ($tobool46) {
       $31 = $player$addr;
       $ammo48 = ((($31)) + 164|0);
       $arrayidx49 = ((($ammo48)) + 4|0);
       $32 = HEAP32[$arrayidx49>>2]|0;
       $tobool50 = ($32|0)!=(0);
       if ($tobool50) {
        $33 = $player$addr;
        $pendingweapon52 = ((($33)) + 124|0);
        HEAP32[$pendingweapon52>>2] = 2;
        break;
       }
      }
      $34 = $player$addr;
      $ammo54 = ((($34)) + 164|0);
      $35 = HEAP32[$ammo54>>2]|0;
      $tobool56 = ($35|0)!=(0);
      $36 = $player$addr;
      if ($tobool56) {
       $pendingweapon58 = ((($36)) + 124|0);
       HEAP32[$pendingweapon58>>2] = 1;
       break;
      }
      $weaponowned60 = ((($36)) + 128|0);
      $arrayidx61 = ((($weaponowned60)) + 28|0);
      $37 = HEAP32[$arrayidx61>>2]|0;
      $tobool62 = ($37|0)!=(0);
      $38 = $player$addr;
      if ($tobool62) {
       $pendingweapon64 = ((($38)) + 124|0);
       HEAP32[$pendingweapon64>>2] = 7;
       break;
      }
      $weaponowned66 = ((($38)) + 128|0);
      $arrayidx67 = ((($weaponowned66)) + 16|0);
      $39 = HEAP32[$arrayidx67>>2]|0;
      $tobool68 = ($39|0)!=(0);
      if ($tobool68) {
       $40 = $player$addr;
       $ammo70 = ((($40)) + 164|0);
       $arrayidx71 = ((($ammo70)) + 12|0);
       $41 = HEAP32[$arrayidx71>>2]|0;
       $tobool72 = ($41|0)!=(0);
       if ($tobool72) {
        $42 = $player$addr;
        $pendingweapon74 = ((($42)) + 124|0);
        HEAP32[$pendingweapon74>>2] = 4;
        break;
       }
      }
      $43 = $player$addr;
      $weaponowned76 = ((($43)) + 128|0);
      $arrayidx77 = ((($weaponowned76)) + 24|0);
      $44 = HEAP32[$arrayidx77>>2]|0;
      $tobool78 = ($44|0)!=(0);
      if ($tobool78) {
       $45 = $player$addr;
       $ammo80 = ((($45)) + 164|0);
       $arrayidx81 = ((($ammo80)) + 8|0);
       $46 = HEAP32[$arrayidx81>>2]|0;
       $cmp82 = ($46|0)>(40);
       $47 = HEAP32[32168]|0;
       $cmp84 = ($47|0)!=(0);
       $or$cond2 = $cmp82 & $cmp84;
       if ($or$cond2) {
        $48 = $player$addr;
        $pendingweapon86 = ((($48)) + 124|0);
        HEAP32[$pendingweapon86>>2] = 6;
        break;
       }
      }
      $49 = $player$addr;
      $pendingweapon88 = ((($49)) + 124|0);
      HEAP32[$pendingweapon88>>2] = 0;
     }
    } while(0);
    $50 = $player$addr;
    $pendingweapon97 = ((($50)) + 124|0);
    $51 = HEAP32[$pendingweapon97>>2]|0;
    $cmp98 = ($51|0)==(10);
    if (!($cmp98)) {
     break;
    }
   }
   $52 = $player$addr;
   $53 = $player$addr;
   $readyweapon99 = ((($53)) + 120|0);
   $54 = HEAP32[$readyweapon99>>2]|0;
   $arrayidx100 = (512 + (($54*24)|0)|0);
   $downstate = ((($arrayidx100)) + 8|0);
   $55 = HEAP32[$downstate>>2]|0;
   _P_SetPsprite($52,0,$55);
   $retval = 0;
   $56 = $retval;
   STACKTOP = sp;return ($56|0);
  }
 }
 $retval = 1;
 $56 = $retval;
 STACKTOP = sp;return ($56|0);
}
function _P_FireWeapon($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $atkstate = 0, $call = 0, $newstate = 0, $player$addr = 0, $readyweapon = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $call = (_P_CheckAmmo($0)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $1 = $player$addr;
 $2 = HEAP32[$1>>2]|0;
 (_P_SetMobjState($2,154)|0);
 $3 = $player$addr;
 $readyweapon = ((($3)) + 120|0);
 $4 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($4*24)|0)|0);
 $atkstate = ((($arrayidx)) + 16|0);
 $5 = HEAP32[$atkstate>>2]|0;
 $newstate = $5;
 $6 = $player$addr;
 $7 = $newstate;
 _P_SetPsprite($6,0,$7);
 $8 = $player$addr;
 $9 = HEAP32[$8>>2]|0;
 $10 = $player$addr;
 $11 = HEAP32[$10>>2]|0;
 _P_NoiseAlert($9,$11);
 STACKTOP = sp;return;
}
function _P_DropWeapon($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $downstate = 0, $player$addr = 0, $readyweapon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $1 = $player$addr;
 $readyweapon = ((($1)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($2*24)|0)|0);
 $downstate = ((($arrayidx)) + 8|0);
 $3 = HEAP32[$downstate>>2]|0;
 _P_SetPsprite($0,0,$3);
 STACKTOP = sp;return;
}
function _A_WeaponReady($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add39 = 0, $and = 0, $and32 = 0, $and35 = 0, $angle = 0, $arrayidx = 0, $arrayidx33 = 0, $arrayidx37 = 0, $attackdown = 0, $attackdown28 = 0, $bob = 0, $bob36 = 0, $buttons = 0, $call34 = 0;
 var $call38 = 0, $cmd = 0, $cmp = 0, $cmp11 = 0, $cmp21 = 0, $cmp25 = 0, $cmp3 = 0, $cmp5 = 0, $cmp7 = 0, $conv = 0, $downstate = 0, $health = 0, $mul = 0, $newstate = 0, $pendingweapon = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, $readyweapon14 = 0, $readyweapon20 = 0;
 var $readyweapon24 = 0, $state = 0, $state2 = 0, $sx = 0, $sy = 0, $tobool = 0, $tobool16 = 0, $tobool18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 $state = ((($1)) + 100|0);
 $2 = HEAP32[$state>>2]|0;
 $cmp = ($2|0)==((7880)|0);
 if ($cmp) {
  label = 3;
 } else {
  $3 = $player$addr;
  $4 = HEAP32[$3>>2]|0;
  $state2 = ((($4)) + 100|0);
  $5 = HEAP32[$state2>>2]|0;
  $cmp3 = ($5|0)==((7908)|0);
  if ($cmp3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = $player$addr;
  $7 = HEAP32[$6>>2]|0;
  (_P_SetMobjState($7,149)|0);
 }
 $8 = $player$addr;
 $readyweapon = ((($8)) + 120|0);
 $9 = HEAP32[$readyweapon>>2]|0;
 $cmp5 = ($9|0)==(7);
 if ($cmp5) {
  $10 = $psp$addr;
  $11 = HEAP32[$10>>2]|0;
  $cmp7 = ($11|0)==((5444)|0);
  if ($cmp7) {
   $12 = $player$addr;
   $13 = HEAP32[$12>>2]|0;
   _S_StartSound($13,11);
  }
 }
 $14 = $player$addr;
 $pendingweapon = ((($14)) + 124|0);
 $15 = HEAP32[$pendingweapon>>2]|0;
 $cmp11 = ($15|0)!=(10);
 if (!($cmp11)) {
  $16 = $player$addr;
  $health = ((($16)) + 40|0);
  $17 = HEAP32[$health>>2]|0;
  $tobool = ($17|0)!=(0);
  if ($tobool) {
   $23 = $player$addr;
   $cmd = ((($23)) + 8|0);
   $buttons = ((($cmd)) + 5|0);
   $24 = HEAP8[$buttons>>0]|0;
   $conv = $24&255;
   $and = $conv & 1;
   $tobool16 = ($and|0)!=(0);
   $25 = $player$addr;
   $attackdown = ((($25)) + 196|0);
   do {
    if ($tobool16) {
     $26 = HEAP32[$attackdown>>2]|0;
     $tobool18 = ($26|0)!=(0);
     if ($tobool18) {
      $27 = $player$addr;
      $readyweapon20 = ((($27)) + 120|0);
      $28 = HEAP32[$readyweapon20>>2]|0;
      $cmp21 = ($28|0)!=(4);
      if (!($cmp21)) {
       break;
      }
      $29 = $player$addr;
      $readyweapon24 = ((($29)) + 120|0);
      $30 = HEAP32[$readyweapon24>>2]|0;
      $cmp25 = ($30|0)!=(6);
      if (!($cmp25)) {
       break;
      }
     }
     $31 = $player$addr;
     $attackdown28 = ((($31)) + 196|0);
     HEAP32[$attackdown28>>2] = 1;
     $32 = $player$addr;
     _P_FireWeapon($32);
     STACKTOP = sp;return;
    } else {
     HEAP32[$attackdown>>2] = 0;
    }
   } while(0);
   $33 = HEAP32[99905]|0;
   $mul = $33<<7;
   $and32 = $mul & 8191;
   $angle = $and32;
   $34 = $player$addr;
   $bob = ((($34)) + 36|0);
   $35 = HEAP32[$bob>>2]|0;
   $36 = $angle;
   $arrayidx33 = ((82992) + ($36<<2)|0);
   $37 = HEAP32[$arrayidx33>>2]|0;
   $call34 = (_FixedMul($35,$37)|0);
   $add = (65536 + ($call34))|0;
   $38 = $psp$addr;
   $sx = ((($38)) + 8|0);
   HEAP32[$sx>>2] = $add;
   $39 = $angle;
   $and35 = $39 & 4095;
   $angle = $and35;
   $40 = $player$addr;
   $bob36 = ((($40)) + 36|0);
   $41 = HEAP32[$bob36>>2]|0;
   $42 = $angle;
   $arrayidx37 = (74800 + ($42<<2)|0);
   $43 = HEAP32[$arrayidx37>>2]|0;
   $call38 = (_FixedMul($41,$43)|0);
   $add39 = (2097152 + ($call38))|0;
   $44 = $psp$addr;
   $sy = ((($44)) + 12|0);
   HEAP32[$sy>>2] = $add39;
   STACKTOP = sp;return;
  }
 }
 $18 = $player$addr;
 $readyweapon14 = ((($18)) + 120|0);
 $19 = HEAP32[$readyweapon14>>2]|0;
 $arrayidx = (512 + (($19*24)|0)|0);
 $downstate = ((($arrayidx)) + 8|0);
 $20 = HEAP32[$downstate>>2]|0;
 $newstate = $20;
 $21 = $player$addr;
 $22 = $newstate;
 _P_SetPsprite($21,0,$22);
 STACKTOP = sp;return;
}
function _A_ReFire($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $buttons = 0, $cmd = 0, $cmp = 0, $conv = 0, $health = 0, $inc = 0, $pendingweapon = 0, $player$addr = 0;
 var $psp$addr = 0, $refire = 0, $refire4 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $cmd = ((($0)) + 8|0);
 $buttons = ((($cmd)) + 5|0);
 $1 = HEAP8[$buttons>>0]|0;
 $conv = $1&255;
 $and = $conv & 1;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $2 = $player$addr;
  $pendingweapon = ((($2)) + 124|0);
  $3 = HEAP32[$pendingweapon>>2]|0;
  $cmp = ($3|0)==(10);
  if ($cmp) {
   $4 = $player$addr;
   $health = ((($4)) + 40|0);
   $5 = HEAP32[$health>>2]|0;
   $tobool3 = ($5|0)!=(0);
   if ($tobool3) {
    $6 = $player$addr;
    $refire = ((($6)) + 208|0);
    $7 = HEAP32[$refire>>2]|0;
    $inc = (($7) + 1)|0;
    HEAP32[$refire>>2] = $inc;
    $8 = $player$addr;
    _P_FireWeapon($8);
    STACKTOP = sp;return;
   }
  }
 }
 $9 = $player$addr;
 $refire4 = ((($9)) + 208|0);
 HEAP32[$refire4>>2] = 0;
 $10 = $player$addr;
 (_P_CheckAmmo($10)|0);
 STACKTOP = sp;return;
}
function _A_CheckReload($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 (_P_CheckAmmo($0)|0);
 STACKTOP = sp;return;
}
function _A_Lower($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $cmp = 0, $cmp2 = 0, $health = 0, $pendingweapon = 0, $player$addr = 0, $playerstate = 0;
 var $psp$addr = 0, $readyweapon = 0, $sy = 0, $sy1 = 0, $sy4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $psp$addr;
 $sy = ((($0)) + 12|0);
 $1 = HEAP32[$sy>>2]|0;
 $add = (($1) + 393216)|0;
 HEAP32[$sy>>2] = $add;
 $2 = $psp$addr;
 $sy1 = ((($2)) + 12|0);
 $3 = HEAP32[$sy1>>2]|0;
 $cmp = ($3|0)<(8388608);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $4 = $player$addr;
 $playerstate = ((($4)) + 4|0);
 $5 = HEAP32[$playerstate>>2]|0;
 $cmp2 = ($5|0)==(1);
 if ($cmp2) {
  $6 = $psp$addr;
  $sy4 = ((($6)) + 12|0);
  HEAP32[$sy4>>2] = 8388608;
  STACKTOP = sp;return;
 }
 $7 = $player$addr;
 $health = ((($7)) + 40|0);
 $8 = HEAP32[$health>>2]|0;
 $tobool = ($8|0)!=(0);
 $9 = $player$addr;
 if ($tobool) {
  $pendingweapon = ((($9)) + 124|0);
  $10 = HEAP32[$pendingweapon>>2]|0;
  $11 = $player$addr;
  $readyweapon = ((($11)) + 120|0);
  HEAP32[$readyweapon>>2] = $10;
  $12 = $player$addr;
  _P_BringUpWeapon($12);
  STACKTOP = sp;return;
 } else {
  _P_SetPsprite($9,0,0);
  STACKTOP = sp;return;
 }
}
function _A_Raise($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $newstate = 0, $player$addr = 0, $psp$addr = 0, $readystate = 0, $readyweapon = 0, $sub = 0, $sy = 0, $sy1 = 0;
 var $sy2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $psp$addr;
 $sy = ((($0)) + 12|0);
 $1 = HEAP32[$sy>>2]|0;
 $sub = (($1) - 393216)|0;
 HEAP32[$sy>>2] = $sub;
 $2 = $psp$addr;
 $sy1 = ((($2)) + 12|0);
 $3 = HEAP32[$sy1>>2]|0;
 $cmp = ($3|0)>(2097152);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $4 = $psp$addr;
 $sy2 = ((($4)) + 12|0);
 HEAP32[$sy2>>2] = 2097152;
 $5 = $player$addr;
 $readyweapon = ((($5)) + 120|0);
 $6 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($6*24)|0)|0);
 $readystate = ((($arrayidx)) + 12|0);
 $7 = HEAP32[$readystate>>2]|0;
 $newstate = $7;
 $8 = $player$addr;
 $9 = $newstate;
 _P_SetPsprite($8,0,$9);
 STACKTOP = sp;return;
}
function _A_GunFlash($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $flashstate = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 (_P_SetMobjState($1,155)|0);
 $2 = $player$addr;
 $3 = $player$addr;
 $readyweapon = ((($3)) + 120|0);
 $4 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($4*24)|0)|0);
 $flashstate = ((($arrayidx)) + 20|0);
 $5 = HEAP32[$flashstate>>2]|0;
 _P_SetPsprite($2,1,$5);
 STACKTOP = sp;return;
}
function _A_Punch($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $angle = 0, $angle1 = 0, $angle18 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call2 = 0, $call3 = 0;
 var $call7 = 0, $damage = 0, $mul = 0, $player$addr = 0, $powers = 0, $psp$addr = 0, $rem = 0, $shl = 0, $shl4 = 0, $slope = 0, $sub = 0, $tobool = 0, $tobool9 = 0, $x = 0, $x14 = 0, $y = 0, $y15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $call = (_P_Random()|0);
 $rem = (($call|0) % 10)&-1;
 $add = (($rem) + 1)|0;
 $shl = $add << 1;
 $damage = $shl;
 $0 = $player$addr;
 $powers = ((($0)) + 52|0);
 $arrayidx = ((($powers)) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = $damage;
  $mul = ($2*10)|0;
  $damage = $mul;
 }
 $3 = $player$addr;
 $4 = HEAP32[$3>>2]|0;
 $angle1 = ((($4)) + 32|0);
 $5 = HEAP32[$angle1>>2]|0;
 $angle = $5;
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl4 = $sub << 18;
 $6 = $angle;
 $add5 = (($6) + ($shl4))|0;
 $angle = $add5;
 $7 = $player$addr;
 $8 = HEAP32[$7>>2]|0;
 $9 = $angle;
 $call7 = (_P_AimLineAttack($8,$9,4194304)|0);
 $slope = $call7;
 $10 = $player$addr;
 $11 = HEAP32[$10>>2]|0;
 $12 = $angle;
 $13 = $slope;
 $14 = $damage;
 _P_LineAttack($11,$12,4194304,$13,$14);
 $15 = HEAP32[99774]|0;
 $tobool9 = ($15|0)!=(0|0);
 if (!($tobool9)) {
  STACKTOP = sp;return;
 }
 $16 = $player$addr;
 $17 = HEAP32[$16>>2]|0;
 _S_StartSound($17,83);
 $18 = $player$addr;
 $19 = HEAP32[$18>>2]|0;
 $x = ((($19)) + 12|0);
 $20 = HEAP32[$x>>2]|0;
 $21 = $player$addr;
 $22 = HEAP32[$21>>2]|0;
 $y = ((($22)) + 16|0);
 $23 = HEAP32[$y>>2]|0;
 $24 = HEAP32[99774]|0;
 $x14 = ((($24)) + 12|0);
 $25 = HEAP32[$x14>>2]|0;
 $26 = HEAP32[99774]|0;
 $y15 = ((($26)) + 16|0);
 $27 = HEAP32[$y15>>2]|0;
 $call16 = (_R_PointToAngle2($20,$23,$25,$27)|0);
 $28 = $player$addr;
 $29 = HEAP32[$28>>2]|0;
 $angle18 = ((($29)) + 32|0);
 HEAP32[$angle18>>2] = $call16;
 STACKTOP = sp;return;
}
function _A_Saw($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add24 = 0, $add4 = 0, $add43 = 0, $angle = 0, $angle1 = 0, $angle16 = 0, $angle20 = 0, $angle26 = 0, $angle28 = 0, $angle39 = 0, $angle42 = 0;
 var $call = 0, $call14 = 0, $call2 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp22 = 0, $cmp35 = 0, $damage = 0, $flags = 0, $mul = 0, $or = 0, $player$addr = 0, $psp$addr = 0, $rem = 0, $shl = 0, $slope = 0, $sub = 0, $sub17 = 0, $sub21 = 0;
 var $sub29 = 0, $sub37 = 0, $tobool = 0, $x = 0, $x12 = 0, $y = 0, $y13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $call = (_P_Random()|0);
 $rem = (($call|0) % 10)&-1;
 $add = (($rem) + 1)|0;
 $mul = $add<<1;
 $damage = $mul;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 $angle1 = ((($1)) + 32|0);
 $2 = HEAP32[$angle1>>2]|0;
 $angle = $2;
 $call2 = (_P_Random()|0);
 $call3 = (_P_Random()|0);
 $sub = (($call2) - ($call3))|0;
 $shl = $sub << 18;
 $3 = $angle;
 $add4 = (($3) + ($shl))|0;
 $angle = $add4;
 $4 = $player$addr;
 $5 = HEAP32[$4>>2]|0;
 $6 = $angle;
 $call6 = (_P_AimLineAttack($5,$6,4194305)|0);
 $slope = $call6;
 $7 = $player$addr;
 $8 = HEAP32[$7>>2]|0;
 $9 = $angle;
 $10 = $slope;
 $11 = $damage;
 _P_LineAttack($8,$9,4194305,$10,$11);
 $12 = HEAP32[99774]|0;
 $tobool = ($12|0)!=(0|0);
 $13 = $player$addr;
 $14 = HEAP32[$13>>2]|0;
 if (!($tobool)) {
  _S_StartSound($14,12);
  STACKTOP = sp;return;
 }
 _S_StartSound($14,13);
 $15 = $player$addr;
 $16 = HEAP32[$15>>2]|0;
 $x = ((($16)) + 12|0);
 $17 = HEAP32[$x>>2]|0;
 $18 = $player$addr;
 $19 = HEAP32[$18>>2]|0;
 $y = ((($19)) + 16|0);
 $20 = HEAP32[$y>>2]|0;
 $21 = HEAP32[99774]|0;
 $x12 = ((($21)) + 12|0);
 $22 = HEAP32[$x12>>2]|0;
 $23 = HEAP32[99774]|0;
 $y13 = ((($23)) + 16|0);
 $24 = HEAP32[$y13>>2]|0;
 $call14 = (_R_PointToAngle2($17,$20,$22,$24)|0);
 $angle = $call14;
 $25 = $angle;
 $26 = $player$addr;
 $27 = HEAP32[$26>>2]|0;
 $angle16 = ((($27)) + 32|0);
 $28 = HEAP32[$angle16>>2]|0;
 $sub17 = (($25) - ($28))|0;
 $cmp = ($sub17>>>0)>(2147483648);
 $29 = $angle;
 $30 = $player$addr;
 $31 = HEAP32[$30>>2]|0;
 $angle20 = ((($31)) + 32|0);
 $32 = HEAP32[$angle20>>2]|0;
 $sub21 = (($29) - ($32))|0;
 do {
  if ($cmp) {
   $cmp22 = ($sub21|0)<(-53687091);
   if ($cmp22) {
    $33 = $angle;
    $add24 = (($33) + 51130563)|0;
    $34 = $player$addr;
    $35 = HEAP32[$34>>2]|0;
    $angle26 = ((($35)) + 32|0);
    HEAP32[$angle26>>2] = $add24;
    break;
   } else {
    $36 = $player$addr;
    $37 = HEAP32[$36>>2]|0;
    $angle28 = ((($37)) + 32|0);
    $38 = HEAP32[$angle28>>2]|0;
    $sub29 = (($38) - 53687091)|0;
    HEAP32[$angle28>>2] = $sub29;
    break;
   }
  } else {
   $cmp35 = ($sub21>>>0)>(53687091);
   if ($cmp35) {
    $39 = $angle;
    $sub37 = (($39) - 51130563)|0;
    $40 = $player$addr;
    $41 = HEAP32[$40>>2]|0;
    $angle39 = ((($41)) + 32|0);
    HEAP32[$angle39>>2] = $sub37;
    break;
   } else {
    $42 = $player$addr;
    $43 = HEAP32[$42>>2]|0;
    $angle42 = ((($43)) + 32|0);
    $44 = HEAP32[$angle42>>2]|0;
    $add43 = (($44) + 53687091)|0;
    HEAP32[$angle42>>2] = $add43;
    break;
   }
  }
 } while(0);
 $45 = $player$addr;
 $46 = HEAP32[$45>>2]|0;
 $flags = ((($46)) + 104|0);
 $47 = HEAP32[$flags>>2]|0;
 $or = $47 | 128;
 HEAP32[$flags>>2] = $or;
 STACKTOP = sp;return;
}
function _A_FireMissile($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = $player$addr;
 $readyweapon = ((($1)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($2*24)|0)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 _DecreaseAmmo($0,$3,1);
 $4 = $player$addr;
 $5 = HEAP32[$4>>2]|0;
 _P_SpawnPlayerMissile($5,33);
 STACKTOP = sp;return;
}
function _DecreaseAmmo($player,$ammonum,$amount) {
 $player = $player|0;
 $ammonum = $ammonum|0;
 $amount = $amount|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ammo = 0, $ammonum$addr = 0, $amount$addr = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $maxammo = 0, $player$addr = 0, $sub = 0, $sub1 = 0, $sub3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $ammonum$addr = $ammonum;
 $amount$addr = $amount;
 $0 = $ammonum$addr;
 $cmp = ($0|0)<(4);
 $1 = $amount$addr;
 $2 = $player$addr;
 if ($cmp) {
  $ammo = ((($2)) + 164|0);
  $3 = $ammonum$addr;
  $arrayidx = (($ammo) + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $sub = (($4) - ($1))|0;
  HEAP32[$arrayidx>>2] = $sub;
  STACKTOP = sp;return;
 } else {
  $maxammo = ((($2)) + 180|0);
  $5 = $ammonum$addr;
  $sub1 = (($5) - 4)|0;
  $arrayidx2 = (($maxammo) + ($sub1<<2)|0);
  $6 = HEAP32[$arrayidx2>>2]|0;
  $sub3 = (($6) - ($1))|0;
  HEAP32[$arrayidx2>>2] = $sub3;
  STACKTOP = sp;return;
 }
}
function _A_FireBFG($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = $player$addr;
 $readyweapon = ((($1)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($2*24)|0)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 _DecreaseAmmo($0,$3,40);
 $4 = $player$addr;
 $5 = HEAP32[$4>>2]|0;
 _P_SpawnPlayerMissile($5,35);
 STACKTOP = sp;return;
}
function _A_FirePlasma($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $arrayidx2 = 0, $call = 0, $flashstate = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, $readyweapon1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = $player$addr;
 $readyweapon = ((($1)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($2*24)|0)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 _DecreaseAmmo($0,$3,1);
 $4 = $player$addr;
 $5 = $player$addr;
 $readyweapon1 = ((($5)) + 120|0);
 $6 = HEAP32[$readyweapon1>>2]|0;
 $arrayidx2 = (512 + (($6*24)|0)|0);
 $flashstate = ((($arrayidx2)) + 20|0);
 $7 = HEAP32[$flashstate>>2]|0;
 $call = (_P_Random()|0);
 $and = $call & 1;
 $add = (($7) + ($and))|0;
 _P_SetPsprite($4,1,$add);
 $8 = $player$addr;
 $9 = HEAP32[$8>>2]|0;
 _P_SpawnPlayerMissile($9,34);
 STACKTOP = sp;return;
}
function _P_BulletSlope($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $an = 0, $angle = 0, $call = 0, $call1 = 0, $call4 = 0, $mo$addr = 0, $sub = 0;
 var $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $0 = $mo$addr;
 $angle = ((($0)) + 32|0);
 $1 = HEAP32[$angle>>2]|0;
 $an = $1;
 $2 = $mo$addr;
 $3 = $an;
 $call = (_P_AimLineAttack($2,$3,67108864)|0);
 HEAP32[99834] = $call;
 $4 = HEAP32[99774]|0;
 $tobool = ($4|0)!=(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $5 = $an;
 $add = (($5) + 67108864)|0;
 $an = $add;
 $6 = $mo$addr;
 $7 = $an;
 $call1 = (_P_AimLineAttack($6,$7,67108864)|0);
 HEAP32[99834] = $call1;
 $8 = HEAP32[99774]|0;
 $tobool2 = ($8|0)!=(0|0);
 if ($tobool2) {
  STACKTOP = sp;return;
 }
 $9 = $an;
 $sub = (($9) - 134217728)|0;
 $an = $sub;
 $10 = $mo$addr;
 $11 = $an;
 $call4 = (_P_AimLineAttack($10,$11,67108864)|0);
 HEAP32[99834] = $call4;
 STACKTOP = sp;return;
}
function _P_GunShot($mo,$accurate) {
 $mo = $mo|0;
 $accurate = $accurate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $accurate$addr = 0, $add = 0, $add4 = 0, $angle = 0, $angle1 = 0, $call = 0, $call2 = 0, $call3 = 0, $damage = 0, $mo$addr = 0, $mul = 0, $rem = 0;
 var $shl = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $mo$addr = $mo;
 $accurate$addr = $accurate;
 $call = (_P_Random()|0);
 $rem = (($call|0) % 3)&-1;
 $add = (($rem) + 1)|0;
 $mul = ($add*5)|0;
 $damage = $mul;
 $0 = $mo$addr;
 $angle1 = ((($0)) + 32|0);
 $1 = HEAP32[$angle1>>2]|0;
 $angle = $1;
 $2 = $accurate$addr;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  $call2 = (_P_Random()|0);
  $call3 = (_P_Random()|0);
  $sub = (($call2) - ($call3))|0;
  $shl = $sub << 18;
  $3 = $angle;
  $add4 = (($3) + ($shl))|0;
  $angle = $add4;
 }
 $4 = $mo$addr;
 $5 = $angle;
 $6 = HEAP32[99834]|0;
 $7 = $damage;
 _P_LineAttack($4,$5,134217728,$6,$7);
 STACKTOP = sp;return;
}
function _A_FirePistol($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0;
 var $flashstate = 0, $lnot = 0, $lnot$ext = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, $readyweapon2 = 0, $refire = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,1);
 $2 = $player$addr;
 $3 = HEAP32[$2>>2]|0;
 (_P_SetMobjState($3,155)|0);
 $4 = $player$addr;
 $5 = $player$addr;
 $readyweapon = ((($5)) + 120|0);
 $6 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($6*24)|0)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 _DecreaseAmmo($4,$7,1);
 $8 = $player$addr;
 $9 = $player$addr;
 $readyweapon2 = ((($9)) + 120|0);
 $10 = HEAP32[$readyweapon2>>2]|0;
 $arrayidx3 = (512 + (($10*24)|0)|0);
 $flashstate = ((($arrayidx3)) + 20|0);
 $11 = HEAP32[$flashstate>>2]|0;
 _P_SetPsprite($8,1,$11);
 $12 = $player$addr;
 $13 = HEAP32[$12>>2]|0;
 _P_BulletSlope($13);
 $14 = $player$addr;
 $15 = HEAP32[$14>>2]|0;
 $16 = $player$addr;
 $refire = ((($16)) + 208|0);
 $17 = HEAP32[$refire>>2]|0;
 $tobool = ($17|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 _P_GunShot($15,$lnot$ext);
 STACKTOP = sp;return;
}
function _A_FireShotgun($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0;
 var $cmp = 0, $flashstate = 0, $i = 0, $inc = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, $readyweapon2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,2);
 $2 = $player$addr;
 $3 = HEAP32[$2>>2]|0;
 (_P_SetMobjState($3,155)|0);
 $4 = $player$addr;
 $5 = $player$addr;
 $readyweapon = ((($5)) + 120|0);
 $6 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($6*24)|0)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 _DecreaseAmmo($4,$7,1);
 $8 = $player$addr;
 $9 = $player$addr;
 $readyweapon2 = ((($9)) + 120|0);
 $10 = HEAP32[$readyweapon2>>2]|0;
 $arrayidx3 = (512 + (($10*24)|0)|0);
 $flashstate = ((($arrayidx3)) + 20|0);
 $11 = HEAP32[$flashstate>>2]|0;
 _P_SetPsprite($8,1,$11);
 $12 = $player$addr;
 $13 = HEAP32[$12>>2]|0;
 _P_BulletSlope($13);
 $i = 0;
 while(1) {
  $14 = $i;
  $cmp = ($14|0)<(7);
  if (!($cmp)) {
   break;
  }
  $15 = $player$addr;
  $16 = HEAP32[$15>>2]|0;
  _P_GunShot($16,0);
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _A_FireShotgun2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add16 = 0, $angle = 0, $angle7 = 0, $arrayidx = 0, $arrayidx3 = 0, $call12 = 0, $call13 = 0, $call5 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $damage = 0, $flashstate = 0;
 var $i = 0, $inc = 0, $mul = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, $readyweapon2 = 0, $rem = 0, $shl = 0, $shl15 = 0, $sub = 0, $sub14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,4);
 $2 = $player$addr;
 $3 = HEAP32[$2>>2]|0;
 (_P_SetMobjState($3,155)|0);
 $4 = $player$addr;
 $5 = $player$addr;
 $readyweapon = ((($5)) + 120|0);
 $6 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($6*24)|0)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 _DecreaseAmmo($4,$7,2);
 $8 = $player$addr;
 $9 = $player$addr;
 $readyweapon2 = ((($9)) + 120|0);
 $10 = HEAP32[$readyweapon2>>2]|0;
 $arrayidx3 = (512 + (($10*24)|0)|0);
 $flashstate = ((($arrayidx3)) + 20|0);
 $11 = HEAP32[$flashstate>>2]|0;
 _P_SetPsprite($8,1,$11);
 $12 = $player$addr;
 $13 = HEAP32[$12>>2]|0;
 _P_BulletSlope($13);
 $i = 0;
 while(1) {
  $14 = $i;
  $cmp = ($14|0)<(20);
  if (!($cmp)) {
   break;
  }
  $call5 = (_P_Random()|0);
  $rem = (($call5|0) % 3)&-1;
  $add = (($rem) + 1)|0;
  $mul = ($add*5)|0;
  $damage = $mul;
  $15 = $player$addr;
  $16 = HEAP32[$15>>2]|0;
  $angle7 = ((($16)) + 32|0);
  $17 = HEAP32[$angle7>>2]|0;
  $angle = $17;
  $call8 = (_P_Random()|0);
  $call9 = (_P_Random()|0);
  $sub = (($call8) - ($call9))|0;
  $shl = $sub << 19;
  $18 = $angle;
  $add10 = (($18) + ($shl))|0;
  $angle = $add10;
  $19 = $player$addr;
  $20 = HEAP32[$19>>2]|0;
  $21 = $angle;
  $22 = HEAP32[99834]|0;
  $call12 = (_P_Random()|0);
  $call13 = (_P_Random()|0);
  $sub14 = (($call12) - ($call13))|0;
  $shl15 = $sub14 << 5;
  $add16 = (($22) + ($shl15))|0;
  $23 = $damage;
  _P_LineAttack($20,$21,134217728,$add16,$23);
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _A_FireCGun($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $ammo = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx5 = 0, $arrayidx8 = 0, $flashstate = 0, $lnot = 0, $lnot$ext = 0, $player$addr = 0, $psp$addr = 0, $readyweapon = 0, $readyweapon4 = 0, $readyweapon7 = 0, $refire = 0;
 var $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,1);
 $2 = $player$addr;
 $ammo = ((($2)) + 164|0);
 $3 = $player$addr;
 $readyweapon = ((($3)) + 120|0);
 $4 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($4*24)|0)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $arrayidx2 = (($ammo) + ($5<<2)|0);
 $6 = HEAP32[$arrayidx2>>2]|0;
 $tobool = ($6|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $7 = $player$addr;
 $8 = HEAP32[$7>>2]|0;
 (_P_SetMobjState($8,155)|0);
 $9 = $player$addr;
 $10 = $player$addr;
 $readyweapon4 = ((($10)) + 120|0);
 $11 = HEAP32[$readyweapon4>>2]|0;
 $arrayidx5 = (512 + (($11*24)|0)|0);
 $12 = HEAP32[$arrayidx5>>2]|0;
 _DecreaseAmmo($9,$12,1);
 $13 = $player$addr;
 $14 = $player$addr;
 $readyweapon7 = ((($14)) + 120|0);
 $15 = HEAP32[$readyweapon7>>2]|0;
 $arrayidx8 = (512 + (($15*24)|0)|0);
 $flashstate = ((($arrayidx8)) + 20|0);
 $16 = HEAP32[$flashstate>>2]|0;
 $17 = $psp$addr;
 $18 = HEAP32[$17>>2]|0;
 $add$ptr = (($18) + (($16*28)|0)|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ((5024)))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
 _P_SetPsprite($13,1,$sub$ptr$div);
 $19 = $player$addr;
 $20 = HEAP32[$19>>2]|0;
 _P_BulletSlope($20);
 $21 = $player$addr;
 $22 = HEAP32[$21>>2]|0;
 $23 = $player$addr;
 $refire = ((($23)) + 208|0);
 $24 = HEAP32[$refire>>2]|0;
 $tobool11 = ($24|0)!=(0);
 $lnot = $tobool11 ^ 1;
 $lnot$ext = $lnot&1;
 _P_GunShot($22,$lnot$ext);
 STACKTOP = sp;return;
}
function _A_Light0($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $extralight = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $extralight = ((($0)) + 240|0);
 HEAP32[$extralight>>2] = 0;
 STACKTOP = sp;return;
}
function _A_Light1($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $extralight = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $extralight = ((($0)) + 240|0);
 HEAP32[$extralight>>2] = 1;
 STACKTOP = sp;return;
}
function _A_Light2($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $extralight = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $extralight = ((($0)) + 240|0);
 HEAP32[$extralight>>2] = 2;
 STACKTOP = sp;return;
}
function _A_BFGSpray($mo) {
 $mo = $mo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add1 = 0, $add7 = 0, $add8 = 0, $an = 0, $and = 0, $angle = 0, $call6 = 0, $cmp = 0, $cmp4 = 0, $damage = 0, $height = 0, $i = 0, $inc = 0;
 var $inc12 = 0, $j = 0, $mo$addr = 0, $mul = 0, $shr = 0, $sub = 0, $target = 0, $target10 = 0, $target9 = 0, $tobool = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $mo$addr = $mo;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(40);
  if (!($cmp)) {
   break;
  }
  $1 = $mo$addr;
  $angle = ((($1)) + 32|0);
  $2 = HEAP32[$angle>>2]|0;
  $sub = (($2) - 536870912)|0;
  $3 = $i;
  $mul = Math_imul(26843545, $3)|0;
  $add = (($sub) + ($mul))|0;
  $an = $add;
  $4 = $mo$addr;
  $target = ((($4)) + 120|0);
  $5 = HEAP32[$target>>2]|0;
  $6 = $an;
  (_P_AimLineAttack($5,$6,67108864)|0);
  $7 = HEAP32[99774]|0;
  $tobool = ($7|0)!=(0|0);
  if ($tobool) {
   $8 = HEAP32[99774]|0;
   $x = ((($8)) + 12|0);
   $9 = HEAP32[$x>>2]|0;
   $10 = HEAP32[99774]|0;
   $y = ((($10)) + 16|0);
   $11 = HEAP32[$y>>2]|0;
   $12 = HEAP32[99774]|0;
   $z = ((($12)) + 20|0);
   $13 = HEAP32[$z>>2]|0;
   $14 = HEAP32[99774]|0;
   $height = ((($14)) + 68|0);
   $15 = HEAP32[$height>>2]|0;
   $shr = $15 >> 2;
   $add1 = (($13) + ($shr))|0;
   (_P_SpawnMobj($9,$11,$add1,42)|0);
   $damage = 0;
   $j = 0;
   while(1) {
    $16 = $j;
    $cmp4 = ($16|0)<(15);
    if (!($cmp4)) {
     break;
    }
    $call6 = (_P_Random()|0);
    $and = $call6 & 7;
    $add7 = (($and) + 1)|0;
    $17 = $damage;
    $add8 = (($17) + ($add7))|0;
    $damage = $add8;
    $18 = $j;
    $inc = (($18) + 1)|0;
    $j = $inc;
   }
   $19 = HEAP32[99774]|0;
   $20 = $mo$addr;
   $target9 = ((($20)) + 120|0);
   $21 = HEAP32[$target9>>2]|0;
   $22 = $mo$addr;
   $target10 = ((($22)) + 120|0);
   $23 = HEAP32[$target10>>2]|0;
   $24 = $damage;
   _P_DamageMobj($19,$21,$23,$24);
  }
  $25 = $i;
  $inc12 = (($25) + 1)|0;
  $i = $inc12;
 }
 STACKTOP = sp;return;
}
function _A_BFGsound($player,$psp) {
 $player = $player|0;
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $player$addr = 0, $psp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $psp$addr = $psp;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 _S_StartSound($1,9);
 STACKTOP = sp;return;
}
function _P_SetupPsprites($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $pendingweapon = 0, $player$addr = 0, $psprites = 0, $readyweapon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(2);
  $1 = $player$addr;
  if (!($cmp)) {
   break;
  }
  $psprites = ((($1)) + 252|0);
  $2 = $i;
  $arrayidx = (($psprites) + ($2<<4)|0);
  HEAP32[$arrayidx>>2] = 0;
  $3 = $i;
  $inc = (($3) + 1)|0;
  $i = $inc;
 }
 $readyweapon = ((($1)) + 120|0);
 $4 = HEAP32[$readyweapon>>2]|0;
 $5 = $player$addr;
 $pendingweapon = ((($5)) + 124|0);
 HEAP32[$pendingweapon>>2] = $4;
 $6 = $player$addr;
 _P_BringUpWeapon($6);
 STACKTOP = sp;return;
}
function _P_MovePsprites($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx14 = 0, $arrayidx19 = 0, $cmp = 0, $cmp2 = 0, $dec = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $nextstate = 0, $player$addr = 0, $psp = 0, $psprites = 0, $psprites11 = 0, $psprites13 = 0, $psprites16 = 0, $psprites18 = 0, $state = 0;
 var $sx = 0, $sx15 = 0, $sy = 0, $sy20 = 0, $tics = 0, $tics4 = 0, $tics5 = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $psprites = ((($0)) + 252|0);
 $psp = $psprites;
 $i = 0;
 while(1) {
  $1 = $i;
  $cmp = ($1|0)<(2);
  if (!($cmp)) {
   break;
  }
  $2 = $psp;
  $3 = HEAP32[$2>>2]|0;
  $state = $3;
  $tobool = ($3|0)!=(0|0);
  if ($tobool) {
   $4 = $psp;
   $tics = ((($4)) + 4|0);
   $5 = HEAP32[$tics>>2]|0;
   $cmp2 = ($5|0)!=(-1);
   if ($cmp2) {
    $6 = $psp;
    $tics4 = ((($6)) + 4|0);
    $7 = HEAP32[$tics4>>2]|0;
    $dec = (($7) + -1)|0;
    HEAP32[$tics4>>2] = $dec;
    $8 = $psp;
    $tics5 = ((($8)) + 4|0);
    $9 = HEAP32[$tics5>>2]|0;
    $tobool6 = ($9|0)!=(0);
    if (!($tobool6)) {
     $10 = $player$addr;
     $11 = $i;
     $12 = $psp;
     $13 = HEAP32[$12>>2]|0;
     $nextstate = ((($13)) + 16|0);
     $14 = HEAP32[$nextstate>>2]|0;
     _P_SetPsprite($10,$11,$14);
    }
   }
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
  $16 = $psp;
  $incdec$ptr = ((($16)) + 16|0);
  $psp = $incdec$ptr;
 }
 $17 = $player$addr;
 $psprites11 = ((($17)) + 252|0);
 $sx = ((($psprites11)) + 8|0);
 $18 = HEAP32[$sx>>2]|0;
 $19 = $player$addr;
 $psprites13 = ((($19)) + 252|0);
 $arrayidx14 = ((($psprites13)) + 16|0);
 $sx15 = ((($arrayidx14)) + 8|0);
 HEAP32[$sx15>>2] = $18;
 $20 = $player$addr;
 $psprites16 = ((($20)) + 252|0);
 $sy = ((($psprites16)) + 12|0);
 $21 = HEAP32[$sy>>2]|0;
 $22 = $player$addr;
 $psprites18 = ((($22)) + 252|0);
 $arrayidx19 = ((($psprites18)) + 16|0);
 $sy20 = ((($arrayidx19)) + 12|0);
 HEAP32[$sy20>>2] = $21;
 STACKTOP = sp;return;
}
function _P_TempSaveGameFile() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99837]|0;
 $cmp = ($0|0)==(0|0);
 if (!($cmp)) {
  $2 = HEAP32[99837]|0;
  STACKTOP = sp;return ($2|0);
 }
 $1 = HEAP32[99385]|0;
 HEAP32[$vararg_buffer>>2] = 154635;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $call = (_M_StringJoin($1,$vararg_buffer)|0);
 HEAP32[99837] = $call;
 $2 = HEAP32[99837]|0;
 STACKTOP = sp;return ($2|0);
}
function _P_SaveGameFile($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $basename = 0, $call = 0, $call1 = 0, $cmp = 0, $slot$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $basename = sp;
 $slot$addr = $slot;
 $0 = HEAP32[99838]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $1 = HEAP32[99385]|0;
  $call = (_strlen($1)|0);
  $add = (($call) + 32)|0;
  HEAP32[99839] = $add;
  $2 = HEAP32[99839]|0;
  $call1 = (_malloc($2)|0);
  HEAP32[99838] = $call1;
 }
 $3 = $slot$addr;
 HEAP32[$vararg_buffer>>2] = $3;
 (_snprintf($basename,32,154644,$vararg_buffer)|0);
 $4 = HEAP32[99838]|0;
 $5 = HEAP32[99839]|0;
 $6 = HEAP32[99385]|0;
 HEAP32[$vararg_buffer1>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $basename;
 (_M_snprintf($4,$5,154658,$vararg_buffer1)|0);
 $7 = HEAP32[99838]|0;
 STACKTOP = sp;return ($7|0);
}
function _P_WriteSaveGameHeader($description) {
 $description = $description|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $and = 0, $and34 = 0, $and36 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx2 = 0, $arrayidx27 = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp24 = 0, $cmp4 = 0, $conv = 0, $conv20 = 0, $conv21 = 0, $conv22 = 0, $conv28 = 0;
 var $conv32 = 0, $conv35 = 0, $conv37 = 0, $description$addr = 0, $i = 0, $inc = 0, $inc18 = 0, $inc30 = 0, $inc8 = 0, $name = 0, $shr = 0, $shr33 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $name = sp;
 $description$addr = $description;
 $i = 0;
 while(1) {
  $0 = $description$addr;
  $1 = $i;
  $arrayidx = (($0) + ($1)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $conv = $2 << 24 >> 24;
  $cmp = ($conv|0)!=(0);
  if (!($cmp)) {
   break;
  }
  $3 = $description$addr;
  $4 = $i;
  $arrayidx2 = (($3) + ($4)|0);
  $5 = HEAP8[$arrayidx2>>0]|0;
  _saveg_write8($5);
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 while(1) {
  $7 = $i;
  $cmp4 = ($7|0)<(24);
  if (!($cmp4)) {
   break;
  }
  _saveg_write8(0);
  $8 = $i;
  $inc8 = (($8) + 1)|0;
  $i = $inc8;
 }
 ;HEAP32[$name>>2]=0|0;HEAP32[$name+4>>2]=0|0;HEAP32[$name+8>>2]=0|0;HEAP32[$name+12>>2]=0|0;
 $call = (_G_VanillaVersionCode()|0);
 HEAP32[$vararg_buffer>>2] = $call;
 (_M_snprintf($name,16,154663,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $cmp13 = ($9|0)<(16);
  if (!($cmp13)) {
   break;
  }
  $10 = $i;
  $arrayidx16 = (($name) + ($10)|0);
  $11 = HEAP8[$arrayidx16>>0]|0;
  _saveg_write8($11);
  $12 = $i;
  $inc18 = (($12) + 1)|0;
  $i = $inc18;
 }
 $13 = HEAP32[99425]|0;
 $conv20 = $13&255;
 _saveg_write8($conv20);
 $14 = HEAP32[99424]|0;
 $conv21 = $14&255;
 _saveg_write8($conv21);
 $15 = HEAP32[99423]|0;
 $conv22 = $15&255;
 _saveg_write8($conv22);
 $i = 0;
 while(1) {
  $16 = $i;
  $cmp24 = ($16|0)<(4);
  if (!($cmp24)) {
   break;
  }
  $17 = $i;
  $arrayidx27 = (183040 + ($17<<2)|0);
  $18 = HEAP32[$arrayidx27>>2]|0;
  $conv28 = $18&255;
  _saveg_write8($conv28);
  $19 = $i;
  $inc30 = (($19) + 1)|0;
  $i = $inc30;
 }
 $20 = HEAP32[99905]|0;
 $shr = $20 >> 16;
 $and = $shr & 255;
 $conv32 = $and&255;
 _saveg_write8($conv32);
 $21 = HEAP32[99905]|0;
 $shr33 = $21 >> 8;
 $and34 = $shr33 & 255;
 $conv35 = $and34&255;
 _saveg_write8($conv35);
 $22 = HEAP32[99905]|0;
 $and36 = $22 & 255;
 $conv37 = $and36&255;
 _saveg_write8($conv37);
 STACKTOP = sp;return;
}
function _saveg_write8($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $or$cond = 0, $tobool = 0, $value$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $value$addr = sp + 4|0;
 HEAP8[$value$addr>>0] = $value;
 $0 = HEAP32[99835]|0;
 $call = (_fwrite($value$addr,1,1,$0)|0);
 $cmp = ($call>>>0)>=(1);
 $1 = HEAP32[99836]|0;
 $tobool = ($1|0)!=(0);
 $or$cond = $cmp | $tobool;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[32479]|0;
 (_fprintf($2,154674,$vararg_buffer)|0);
 HEAP32[99836] = 1;
 STACKTOP = sp;return;
}
function _P_ReadSaveGameHeader() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $add = 0, $add37 = 0, $arrayidx = 0, $arrayidx26 = 0, $b = 0, $c = 0, $call13 = 0;
 var $call15 = 0, $call16 = 0, $call18 = 0, $call24 = 0, $call31 = 0, $call32 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $cmp14 = 0, $cmp2 = 0, $cmp21 = 0, $conv = 0, $conv17 = 0, $conv19 = 0, $conv25 = 0, $conv33 = 0, $conv34 = 0, $conv36 = 0, $i = 0;
 var $inc = 0, $inc28 = 0, $inc6 = 0, $read_vcheck = 0, $retval = 0, $shl = 0, $shl35 = 0, $vararg_buffer = 0, $vcheck = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $vcheck = sp + 16|0;
 $read_vcheck = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(24);
  if (!($cmp)) {
   break;
  }
  (_saveg_read8()|0);
  $1 = $i;
  $inc = (($1) + 1)|0;
  $i = $inc;
 }
 $i = 0;
 while(1) {
  $2 = $i;
  $cmp2 = ($2|0)<(16);
  if (!($cmp2)) {
   break;
  }
  $call4 = (_saveg_read8()|0);
  $3 = $i;
  $arrayidx = (($read_vcheck) + ($3)|0);
  HEAP8[$arrayidx>>0] = $call4;
  $4 = $i;
  $inc6 = (($4) + 1)|0;
  $i = $inc6;
 }
 ;HEAP32[$vcheck>>2]=0|0;HEAP32[$vcheck+4>>2]=0|0;HEAP32[$vcheck+8>>2]=0|0;HEAP32[$vcheck+12>>2]=0|0;
 $call9 = (_G_VanillaVersionCode()|0);
 HEAP32[$vararg_buffer>>2] = $call9;
 (_M_snprintf($vcheck,16,154663,$vararg_buffer)|0);
 $call13 = (_strcmp($read_vcheck,$vcheck)|0);
 $cmp14 = ($call13|0)!=(0);
 if ($cmp14) {
  $retval = 0;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 $call15 = (_saveg_read8()|0);
 $conv = $call15&255;
 HEAP32[99425] = $conv;
 $call16 = (_saveg_read8()|0);
 $conv17 = $call16&255;
 HEAP32[99424] = $conv17;
 $call18 = (_saveg_read8()|0);
 $conv19 = $call18&255;
 HEAP32[99423] = $conv19;
 $i = 0;
 while(1) {
  $5 = $i;
  $cmp21 = ($5|0)<(4);
  $call24 = (_saveg_read8()|0);
  if (!($cmp21)) {
   break;
  }
  $conv25 = $call24&255;
  $6 = $i;
  $arrayidx26 = (183040 + ($6<<2)|0);
  HEAP32[$arrayidx26>>2] = $conv25;
  $7 = $i;
  $inc28 = (($7) + 1)|0;
  $i = $inc28;
 }
 $a = $call24;
 $call31 = (_saveg_read8()|0);
 $b = $call31;
 $call32 = (_saveg_read8()|0);
 $c = $call32;
 $8 = $a;
 $conv33 = $8&255;
 $shl = $conv33 << 16;
 $9 = $b;
 $conv34 = $9&255;
 $shl35 = $conv34 << 8;
 $add = (($shl) + ($shl35))|0;
 $10 = $c;
 $conv36 = $10&255;
 $add37 = (($add) + ($conv36))|0;
 HEAP32[99905] = $add37;
 $retval = 1;
 $11 = $retval;
 STACKTOP = sp;return ($11|0);
}
function _saveg_read8() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $or$cond = 0, $result = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $result = sp + 4|0;
 $0 = HEAP32[99835]|0;
 $call = (_fread($result,1,1,$0)|0);
 $cmp = ($call>>>0)>=(1);
 $1 = HEAP32[99836]|0;
 $tobool = ($1|0)!=(0);
 $or$cond = $cmp | $tobool;
 if ($or$cond) {
  $3 = HEAP8[$result>>0]|0;
  STACKTOP = sp;return ($3|0);
 }
 $2 = HEAP32[32479]|0;
 (_fprintf($2,154719,$vararg_buffer)|0);
 HEAP32[99836] = 1;
 $3 = HEAP8[$result>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function _P_ReadSaveGameEOF() {
 var $0 = 0, $call = 0, $cmp = 0, $conv = 0, $conv1 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_saveg_read8()|0);
 $conv = $call&255;
 $value = $conv;
 $0 = $value;
 $cmp = ($0|0)==(29);
 $conv1 = $cmp&1;
 STACKTOP = sp;return ($conv1|0);
}
function _P_WriteSaveGameEOF() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _saveg_write8(29);
 return;
}
function _P_ArchivePlayers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $i = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   _saveg_write_pad();
   $3 = $i;
   $arrayidx1 = (183056 + (($3*288)|0)|0);
   _saveg_write_player_t($arrayidx1);
  }
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _saveg_write_pad() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $and1 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $padding = 0, $pos = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99835]|0;
 $call = (_ftell($0)|0);
 $pos = $call;
 $1 = $pos;
 $and = $1 & 3;
 $sub = (4 - ($and))|0;
 $and1 = $sub & 3;
 $padding = $and1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $padding;
  $cmp = ($2|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  _saveg_write8(0);
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _saveg_write_player_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $ammo = 0, $armorpoints = 0, $armortype = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx18 = 0, $arrayidx25 = 0, $arrayidx32 = 0, $arrayidx39 = 0, $arrayidx4 = 0, $attackdown = 0, $attacker = 0, $backpack = 0, $bob = 0, $bonuscount = 0;
 var $cards = 0, $cheats = 0, $cmd = 0, $cmp = 0, $cmp16 = 0, $cmp2 = 0, $cmp23 = 0, $cmp30 = 0, $cmp37 = 0, $cmp9 = 0, $colormap = 0, $damagecount = 0, $deltaviewheight = 0, $didsecret = 0, $extralight = 0, $fixedcolormap = 0, $frags = 0, $health = 0, $i = 0, $inc = 0;
 var $inc13 = 0, $inc20 = 0, $inc27 = 0, $inc34 = 0, $inc41 = 0, $inc6 = 0, $itemcount = 0, $killcount = 0, $maxammo = 0, $message = 0, $pendingweapon = 0, $playerstate = 0, $powers = 0, $psprites = 0, $readyweapon = 0, $refire = 0, $secretcount = 0, $str$addr = 0, $usedown = 0, $viewheight = 0;
 var $viewz = 0, $weaponowned = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAP32[$0>>2]|0;
 _saveg_writep($1);
 $2 = $str$addr;
 $playerstate = ((($2)) + 4|0);
 $3 = HEAP32[$playerstate>>2]|0;
 _saveg_write32($3);
 $4 = $str$addr;
 $cmd = ((($4)) + 8|0);
 _saveg_write_ticcmd_t($cmd);
 $5 = $str$addr;
 $viewz = ((($5)) + 24|0);
 $6 = HEAP32[$viewz>>2]|0;
 _saveg_write32($6);
 $7 = $str$addr;
 $viewheight = ((($7)) + 28|0);
 $8 = HEAP32[$viewheight>>2]|0;
 _saveg_write32($8);
 $9 = $str$addr;
 $deltaviewheight = ((($9)) + 32|0);
 $10 = HEAP32[$deltaviewheight>>2]|0;
 _saveg_write32($10);
 $11 = $str$addr;
 $bob = ((($11)) + 36|0);
 $12 = HEAP32[$bob>>2]|0;
 _saveg_write32($12);
 $13 = $str$addr;
 $health = ((($13)) + 40|0);
 $14 = HEAP32[$health>>2]|0;
 _saveg_write32($14);
 $15 = $str$addr;
 $armorpoints = ((($15)) + 44|0);
 $16 = HEAP32[$armorpoints>>2]|0;
 _saveg_write32($16);
 $17 = $str$addr;
 $armortype = ((($17)) + 48|0);
 $18 = HEAP32[$armortype>>2]|0;
 _saveg_write32($18);
 $i = 0;
 while(1) {
  $19 = $i;
  $cmp = ($19|0)<(6);
  if (!($cmp)) {
   break;
  }
  $20 = $str$addr;
  $powers = ((($20)) + 52|0);
  $21 = $i;
  $arrayidx = (($powers) + ($21<<2)|0);
  $22 = HEAP32[$arrayidx>>2]|0;
  _saveg_write32($22);
  $23 = $i;
  $inc = (($23) + 1)|0;
  $i = $inc;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $cmp2 = ($24|0)<(6);
  $25 = $str$addr;
  if (!($cmp2)) {
   break;
  }
  $cards = ((($25)) + 76|0);
  $26 = $i;
  $arrayidx4 = (($cards) + ($26<<2)|0);
  $27 = HEAP32[$arrayidx4>>2]|0;
  _saveg_write32($27);
  $28 = $i;
  $inc6 = (($28) + 1)|0;
  $i = $inc6;
 }
 $backpack = ((($25)) + 100|0);
 $29 = HEAP32[$backpack>>2]|0;
 _saveg_write32($29);
 $i = 0;
 while(1) {
  $30 = $i;
  $cmp9 = ($30|0)<(4);
  $31 = $str$addr;
  if (!($cmp9)) {
   break;
  }
  $frags = ((($31)) + 104|0);
  $32 = $i;
  $arrayidx11 = (($frags) + ($32<<2)|0);
  $33 = HEAP32[$arrayidx11>>2]|0;
  _saveg_write32($33);
  $34 = $i;
  $inc13 = (($34) + 1)|0;
  $i = $inc13;
 }
 $readyweapon = ((($31)) + 120|0);
 $35 = HEAP32[$readyweapon>>2]|0;
 _saveg_write32($35);
 $36 = $str$addr;
 $pendingweapon = ((($36)) + 124|0);
 $37 = HEAP32[$pendingweapon>>2]|0;
 _saveg_write32($37);
 $i = 0;
 while(1) {
  $38 = $i;
  $cmp16 = ($38|0)<(9);
  if (!($cmp16)) {
   break;
  }
  $39 = $str$addr;
  $weaponowned = ((($39)) + 128|0);
  $40 = $i;
  $arrayidx18 = (($weaponowned) + ($40<<2)|0);
  $41 = HEAP32[$arrayidx18>>2]|0;
  _saveg_write32($41);
  $42 = $i;
  $inc20 = (($42) + 1)|0;
  $i = $inc20;
 }
 $i = 0;
 while(1) {
  $43 = $i;
  $cmp23 = ($43|0)<(4);
  if (!($cmp23)) {
   break;
  }
  $44 = $str$addr;
  $ammo = ((($44)) + 164|0);
  $45 = $i;
  $arrayidx25 = (($ammo) + ($45<<2)|0);
  $46 = HEAP32[$arrayidx25>>2]|0;
  _saveg_write32($46);
  $47 = $i;
  $inc27 = (($47) + 1)|0;
  $i = $inc27;
 }
 $i = 0;
 while(1) {
  $48 = $i;
  $cmp30 = ($48|0)<(4);
  $49 = $str$addr;
  if (!($cmp30)) {
   break;
  }
  $maxammo = ((($49)) + 180|0);
  $50 = $i;
  $arrayidx32 = (($maxammo) + ($50<<2)|0);
  $51 = HEAP32[$arrayidx32>>2]|0;
  _saveg_write32($51);
  $52 = $i;
  $inc34 = (($52) + 1)|0;
  $i = $inc34;
 }
 $attackdown = ((($49)) + 196|0);
 $53 = HEAP32[$attackdown>>2]|0;
 _saveg_write32($53);
 $54 = $str$addr;
 $usedown = ((($54)) + 200|0);
 $55 = HEAP32[$usedown>>2]|0;
 _saveg_write32($55);
 $56 = $str$addr;
 $cheats = ((($56)) + 204|0);
 $57 = HEAP32[$cheats>>2]|0;
 _saveg_write32($57);
 $58 = $str$addr;
 $refire = ((($58)) + 208|0);
 $59 = HEAP32[$refire>>2]|0;
 _saveg_write32($59);
 $60 = $str$addr;
 $killcount = ((($60)) + 212|0);
 $61 = HEAP32[$killcount>>2]|0;
 _saveg_write32($61);
 $62 = $str$addr;
 $itemcount = ((($62)) + 216|0);
 $63 = HEAP32[$itemcount>>2]|0;
 _saveg_write32($63);
 $64 = $str$addr;
 $secretcount = ((($64)) + 220|0);
 $65 = HEAP32[$secretcount>>2]|0;
 _saveg_write32($65);
 $66 = $str$addr;
 $message = ((($66)) + 224|0);
 $67 = HEAP32[$message>>2]|0;
 _saveg_writep($67);
 $68 = $str$addr;
 $damagecount = ((($68)) + 228|0);
 $69 = HEAP32[$damagecount>>2]|0;
 _saveg_write32($69);
 $70 = $str$addr;
 $bonuscount = ((($70)) + 232|0);
 $71 = HEAP32[$bonuscount>>2]|0;
 _saveg_write32($71);
 $72 = $str$addr;
 $attacker = ((($72)) + 236|0);
 $73 = HEAP32[$attacker>>2]|0;
 _saveg_writep($73);
 $74 = $str$addr;
 $extralight = ((($74)) + 240|0);
 $75 = HEAP32[$extralight>>2]|0;
 _saveg_write32($75);
 $76 = $str$addr;
 $fixedcolormap = ((($76)) + 244|0);
 $77 = HEAP32[$fixedcolormap>>2]|0;
 _saveg_write32($77);
 $78 = $str$addr;
 $colormap = ((($78)) + 248|0);
 $79 = HEAP32[$colormap>>2]|0;
 _saveg_write32($79);
 $i = 0;
 while(1) {
  $80 = $i;
  $cmp37 = ($80|0)<(2);
  $81 = $str$addr;
  if (!($cmp37)) {
   break;
  }
  $psprites = ((($81)) + 252|0);
  $82 = $i;
  $arrayidx39 = (($psprites) + ($82<<4)|0);
  _saveg_write_pspdef_t($arrayidx39);
  $83 = $i;
  $inc41 = (($83) + 1)|0;
  $i = $inc41;
 }
 $didsecret = ((($81)) + 284|0);
 $84 = HEAP32[$didsecret>>2]|0;
 _saveg_write32($84);
 STACKTOP = sp;return;
}
function _saveg_writep($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $p$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $0 = $p$addr;
 $1 = $0;
 _saveg_write32($1);
 STACKTOP = sp;return;
}
function _saveg_write32($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $and1 = 0, $and4 = 0, $and7 = 0, $conv = 0, $conv2 = 0, $conv5 = 0, $conv8 = 0, $shr = 0, $shr3 = 0, $shr6 = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = $value;
 $0 = $value$addr;
 $and = $0 & 255;
 $conv = $and&255;
 _saveg_write8($conv);
 $1 = $value$addr;
 $shr = $1 >> 8;
 $and1 = $shr & 255;
 $conv2 = $and1&255;
 _saveg_write8($conv2);
 $2 = $value$addr;
 $shr3 = $2 >> 16;
 $and4 = $shr3 & 255;
 $conv5 = $and4&255;
 _saveg_write8($conv5);
 $3 = $value$addr;
 $shr6 = $3 >> 24;
 $and7 = $shr6 & 255;
 $conv8 = $and7&255;
 _saveg_write8($conv8);
 STACKTOP = sp;return;
}
function _saveg_write_ticcmd_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angleturn = 0, $buttons = 0, $chatchar = 0, $consistancy = 0, $conv = 0, $sidemove = 0, $str$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAP8[$0>>0]|0;
 _saveg_write8($1);
 $2 = $str$addr;
 $sidemove = ((($2)) + 1|0);
 $3 = HEAP8[$sidemove>>0]|0;
 _saveg_write8($3);
 $4 = $str$addr;
 $angleturn = ((($4)) + 2|0);
 $5 = HEAP16[$angleturn>>1]|0;
 _saveg_write16($5);
 $6 = $str$addr;
 $consistancy = ((($6)) + 6|0);
 $7 = HEAP8[$consistancy>>0]|0;
 $conv = $7&255;
 _saveg_write16($conv);
 $8 = $str$addr;
 $chatchar = ((($8)) + 4|0);
 $9 = HEAP8[$chatchar>>0]|0;
 _saveg_write8($9);
 $10 = $str$addr;
 $buttons = ((($10)) + 5|0);
 $11 = HEAP8[$buttons>>0]|0;
 _saveg_write8($11);
 STACKTOP = sp;return;
}
function _saveg_write_pspdef_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $sx = 0, $sy = 0, $tics = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $str$addr;
  $3 = HEAP32[$2>>2]|0;
  $sub$ptr$lhs$cast = $3;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - (3568))|0;
  $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
  _saveg_write32($sub$ptr$div);
 } else {
  _saveg_write32(0);
 }
 $4 = $str$addr;
 $tics = ((($4)) + 4|0);
 $5 = HEAP32[$tics>>2]|0;
 _saveg_write32($5);
 $6 = $str$addr;
 $sx = ((($6)) + 8|0);
 $7 = HEAP32[$sx>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $sy = ((($8)) + 12|0);
 $9 = HEAP32[$sy>>2]|0;
 _saveg_write32($9);
 STACKTOP = sp;return;
}
function _saveg_write16($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $and = 0, $and3 = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $conv4 = 0, $shr = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = $value;
 $0 = $value$addr;
 $conv = $0 << 16 >> 16;
 $and = $conv & 255;
 $conv1 = $and&255;
 _saveg_write8($conv1);
 $1 = $value$addr;
 $conv2 = $1 << 16 >> 16;
 $shr = $conv2 >> 8;
 $and3 = $shr & 255;
 $conv4 = $and3&255;
 _saveg_write8($conv4);
 STACKTOP = sp;return;
}
function _P_UnArchivePlayers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $attacker = 0, $cmp = 0, $i = 0, $inc = 0, $message = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   _saveg_read_pad();
   $3 = $i;
   $arrayidx1 = (183056 + (($3*288)|0)|0);
   _saveg_read_player_t($arrayidx1);
   $4 = $i;
   $arrayidx2 = (183056 + (($4*288)|0)|0);
   HEAP32[$arrayidx2>>2] = 0;
   $5 = $i;
   $arrayidx3 = (183056 + (($5*288)|0)|0);
   $message = ((($arrayidx3)) + 224|0);
   HEAP32[$message>>2] = 0;
   $6 = $i;
   $arrayidx4 = (183056 + (($6*288)|0)|0);
   $attacker = ((($arrayidx4)) + 236|0);
   HEAP32[$attacker>>2] = 0;
  }
  $7 = $i;
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _saveg_read_pad() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $and1 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $padding = 0, $pos = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99835]|0;
 $call = (_ftell($0)|0);
 $pos = $call;
 $1 = $pos;
 $and = $1 & 3;
 $sub = (4 - ($and))|0;
 $and1 = $sub & 3;
 $padding = $and1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $padding;
  $cmp = ($2|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  (_saveg_read8()|0);
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _saveg_read_player_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ammo = 0, $armorpoints = 0, $armortype = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx23 = 0, $arrayidx33 = 0;
 var $arrayidx41 = 0, $arrayidx49 = 0, $arrayidx70 = 0, $attackdown = 0, $attacker = 0, $backpack = 0, $bob = 0, $bonuscount = 0, $call = 0, $call1 = 0, $call13 = 0, $call2 = 0, $call22 = 0, $call28 = 0, $call3 = 0, $call32 = 0, $call4 = 0, $call40 = 0, $call48 = 0, $call5 = 0;
 var $call54 = 0, $call55 = 0, $call56 = 0, $call57 = 0, $call58 = 0, $call59 = 0, $call6 = 0, $call60 = 0, $call61 = 0, $call62 = 0, $call63 = 0, $call64 = 0, $call65 = 0, $call66 = 0, $call7 = 0, $call74 = 0, $call8 = 0, $call9 = 0, $cards = 0, $cheats = 0;
 var $cmd = 0, $cmp = 0, $cmp11 = 0, $cmp20 = 0, $cmp30 = 0, $cmp38 = 0, $cmp46 = 0, $cmp68 = 0, $colormap = 0, $damagecount = 0, $deltaviewheight = 0, $didsecret = 0, $extralight = 0, $fixedcolormap = 0, $frags = 0, $health = 0, $i = 0, $inc = 0, $inc16 = 0, $inc25 = 0;
 var $inc35 = 0, $inc43 = 0, $inc51 = 0, $inc72 = 0, $itemcount = 0, $killcount = 0, $maxammo = 0, $message = 0, $pendingweapon = 0, $playerstate = 0, $powers = 0, $psprites = 0, $readyweapon = 0, $refire = 0, $secretcount = 0, $str$addr = 0, $usedown = 0, $viewheight = 0, $viewz = 0, $weaponowned = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $call = (_saveg_readp()|0);
 $0 = $str$addr;
 HEAP32[$0>>2] = $call;
 $call1 = (_saveg_read32()|0);
 $1 = $str$addr;
 $playerstate = ((($1)) + 4|0);
 HEAP32[$playerstate>>2] = $call1;
 $2 = $str$addr;
 $cmd = ((($2)) + 8|0);
 _saveg_read_ticcmd_t($cmd);
 $call2 = (_saveg_read32()|0);
 $3 = $str$addr;
 $viewz = ((($3)) + 24|0);
 HEAP32[$viewz>>2] = $call2;
 $call3 = (_saveg_read32()|0);
 $4 = $str$addr;
 $viewheight = ((($4)) + 28|0);
 HEAP32[$viewheight>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $5 = $str$addr;
 $deltaviewheight = ((($5)) + 32|0);
 HEAP32[$deltaviewheight>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $6 = $str$addr;
 $bob = ((($6)) + 36|0);
 HEAP32[$bob>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $7 = $str$addr;
 $health = ((($7)) + 40|0);
 HEAP32[$health>>2] = $call6;
 $call7 = (_saveg_read32()|0);
 $8 = $str$addr;
 $armorpoints = ((($8)) + 44|0);
 HEAP32[$armorpoints>>2] = $call7;
 $call8 = (_saveg_read32()|0);
 $9 = $str$addr;
 $armortype = ((($9)) + 48|0);
 HEAP32[$armortype>>2] = $call8;
 $i = 0;
 while(1) {
  $10 = $i;
  $cmp = ($10|0)<(6);
  if (!($cmp)) {
   break;
  }
  $call9 = (_saveg_read32()|0);
  $11 = $str$addr;
  $powers = ((($11)) + 52|0);
  $12 = $i;
  $arrayidx = (($powers) + ($12<<2)|0);
  HEAP32[$arrayidx>>2] = $call9;
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 $i = 0;
 while(1) {
  $14 = $i;
  $cmp11 = ($14|0)<(6);
  $call13 = (_saveg_read32()|0);
  $15 = $str$addr;
  if (!($cmp11)) {
   break;
  }
  $cards = ((($15)) + 76|0);
  $16 = $i;
  $arrayidx14 = (($cards) + ($16<<2)|0);
  HEAP32[$arrayidx14>>2] = $call13;
  $17 = $i;
  $inc16 = (($17) + 1)|0;
  $i = $inc16;
 }
 $backpack = ((($15)) + 100|0);
 HEAP32[$backpack>>2] = $call13;
 $i = 0;
 while(1) {
  $18 = $i;
  $cmp20 = ($18|0)<(4);
  $call22 = (_saveg_read32()|0);
  $19 = $str$addr;
  if (!($cmp20)) {
   break;
  }
  $frags = ((($19)) + 104|0);
  $20 = $i;
  $arrayidx23 = (($frags) + ($20<<2)|0);
  HEAP32[$arrayidx23>>2] = $call22;
  $21 = $i;
  $inc25 = (($21) + 1)|0;
  $i = $inc25;
 }
 $readyweapon = ((($19)) + 120|0);
 HEAP32[$readyweapon>>2] = $call22;
 $call28 = (_saveg_read32()|0);
 $22 = $str$addr;
 $pendingweapon = ((($22)) + 124|0);
 HEAP32[$pendingweapon>>2] = $call28;
 $i = 0;
 while(1) {
  $23 = $i;
  $cmp30 = ($23|0)<(9);
  if (!($cmp30)) {
   break;
  }
  $call32 = (_saveg_read32()|0);
  $24 = $str$addr;
  $weaponowned = ((($24)) + 128|0);
  $25 = $i;
  $arrayidx33 = (($weaponowned) + ($25<<2)|0);
  HEAP32[$arrayidx33>>2] = $call32;
  $26 = $i;
  $inc35 = (($26) + 1)|0;
  $i = $inc35;
 }
 $i = 0;
 while(1) {
  $27 = $i;
  $cmp38 = ($27|0)<(4);
  if (!($cmp38)) {
   break;
  }
  $call40 = (_saveg_read32()|0);
  $28 = $str$addr;
  $ammo = ((($28)) + 164|0);
  $29 = $i;
  $arrayidx41 = (($ammo) + ($29<<2)|0);
  HEAP32[$arrayidx41>>2] = $call40;
  $30 = $i;
  $inc43 = (($30) + 1)|0;
  $i = $inc43;
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $cmp46 = ($31|0)<(4);
  $call48 = (_saveg_read32()|0);
  $32 = $str$addr;
  if (!($cmp46)) {
   break;
  }
  $maxammo = ((($32)) + 180|0);
  $33 = $i;
  $arrayidx49 = (($maxammo) + ($33<<2)|0);
  HEAP32[$arrayidx49>>2] = $call48;
  $34 = $i;
  $inc51 = (($34) + 1)|0;
  $i = $inc51;
 }
 $attackdown = ((($32)) + 196|0);
 HEAP32[$attackdown>>2] = $call48;
 $call54 = (_saveg_read32()|0);
 $35 = $str$addr;
 $usedown = ((($35)) + 200|0);
 HEAP32[$usedown>>2] = $call54;
 $call55 = (_saveg_read32()|0);
 $36 = $str$addr;
 $cheats = ((($36)) + 204|0);
 HEAP32[$cheats>>2] = $call55;
 $call56 = (_saveg_read32()|0);
 $37 = $str$addr;
 $refire = ((($37)) + 208|0);
 HEAP32[$refire>>2] = $call56;
 $call57 = (_saveg_read32()|0);
 $38 = $str$addr;
 $killcount = ((($38)) + 212|0);
 HEAP32[$killcount>>2] = $call57;
 $call58 = (_saveg_read32()|0);
 $39 = $str$addr;
 $itemcount = ((($39)) + 216|0);
 HEAP32[$itemcount>>2] = $call58;
 $call59 = (_saveg_read32()|0);
 $40 = $str$addr;
 $secretcount = ((($40)) + 220|0);
 HEAP32[$secretcount>>2] = $call59;
 $call60 = (_saveg_readp()|0);
 $41 = $str$addr;
 $message = ((($41)) + 224|0);
 HEAP32[$message>>2] = $call60;
 $call61 = (_saveg_read32()|0);
 $42 = $str$addr;
 $damagecount = ((($42)) + 228|0);
 HEAP32[$damagecount>>2] = $call61;
 $call62 = (_saveg_read32()|0);
 $43 = $str$addr;
 $bonuscount = ((($43)) + 232|0);
 HEAP32[$bonuscount>>2] = $call62;
 $call63 = (_saveg_readp()|0);
 $44 = $str$addr;
 $attacker = ((($44)) + 236|0);
 HEAP32[$attacker>>2] = $call63;
 $call64 = (_saveg_read32()|0);
 $45 = $str$addr;
 $extralight = ((($45)) + 240|0);
 HEAP32[$extralight>>2] = $call64;
 $call65 = (_saveg_read32()|0);
 $46 = $str$addr;
 $fixedcolormap = ((($46)) + 244|0);
 HEAP32[$fixedcolormap>>2] = $call65;
 $call66 = (_saveg_read32()|0);
 $47 = $str$addr;
 $colormap = ((($47)) + 248|0);
 HEAP32[$colormap>>2] = $call66;
 $i = 0;
 while(1) {
  $48 = $i;
  $cmp68 = ($48|0)<(2);
  if (!($cmp68)) {
   break;
  }
  $49 = $str$addr;
  $psprites = ((($49)) + 252|0);
  $50 = $i;
  $arrayidx70 = (($psprites) + ($50<<4)|0);
  _saveg_read_pspdef_t($arrayidx70);
  $51 = $i;
  $inc72 = (($51) + 1)|0;
  $i = $inc72;
 }
 $call74 = (_saveg_read32()|0);
 $52 = $str$addr;
 $didsecret = ((($52)) + 284|0);
 HEAP32[$didsecret>>2] = $call74;
 STACKTOP = sp;return;
}
function _saveg_readp() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_saveg_read32()|0);
 $0 = $call;
 return ($0|0);
}
function _saveg_read32() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $call3 = 0, $call7 = 0, $conv = 0, $conv2 = 0, $conv4 = 0, $conv8 = 0, $or = 0, $or10 = 0, $or6 = 0, $result = 0, $shl = 0, $shl5 = 0, $shl9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_saveg_read8()|0);
 $conv = $call&255;
 $result = $conv;
 $call1 = (_saveg_read8()|0);
 $conv2 = $call1&255;
 $shl = $conv2 << 8;
 $0 = $result;
 $or = $0 | $shl;
 $result = $or;
 $call3 = (_saveg_read8()|0);
 $conv4 = $call3&255;
 $shl5 = $conv4 << 16;
 $1 = $result;
 $or6 = $1 | $shl5;
 $result = $or6;
 $call7 = (_saveg_read8()|0);
 $conv8 = $call7&255;
 $shl9 = $conv8 << 24;
 $2 = $result;
 $or10 = $2 | $shl9;
 $result = $or10;
 $3 = $result;
 STACKTOP = sp;return ($3|0);
}
function _saveg_read_ticcmd_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $angleturn = 0, $buttons = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $chatchar = 0, $consistancy = 0, $conv = 0, $sidemove = 0, $str$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $call = (_saveg_read8()|0);
 $0 = $str$addr;
 HEAP8[$0>>0] = $call;
 $call1 = (_saveg_read8()|0);
 $1 = $str$addr;
 $sidemove = ((($1)) + 1|0);
 HEAP8[$sidemove>>0] = $call1;
 $call2 = (_saveg_read16()|0);
 $2 = $str$addr;
 $angleturn = ((($2)) + 2|0);
 HEAP16[$angleturn>>1] = $call2;
 $call3 = (_saveg_read16()|0);
 $conv = $call3&255;
 $3 = $str$addr;
 $consistancy = ((($3)) + 6|0);
 HEAP8[$consistancy>>0] = $conv;
 $call4 = (_saveg_read8()|0);
 $4 = $str$addr;
 $chatchar = ((($4)) + 4|0);
 HEAP8[$chatchar>>0] = $call4;
 $call5 = (_saveg_read8()|0);
 $5 = $str$addr;
 $buttons = ((($5)) + 5|0);
 HEAP8[$buttons>>0] = $call5;
 STACKTOP = sp;return;
}
function _saveg_read_pspdef_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $call = 0, $call3 = 0, $call4 = 0, $call5 = 0, $cmp = 0, $state = 0, $str$addr = 0, $sx = 0, $sy = 0, $tics = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $call = (_saveg_read32()|0);
 $state = $call;
 $0 = $state;
 $cmp = ($0|0)>(0);
 if ($cmp) {
  $1 = $state;
  $arrayidx = (3568 + (($1*28)|0)|0);
  $2 = $str$addr;
  HEAP32[$2>>2] = $arrayidx;
 } else {
  $3 = $str$addr;
  HEAP32[$3>>2] = 0;
 }
 $call3 = (_saveg_read32()|0);
 $4 = $str$addr;
 $tics = ((($4)) + 4|0);
 HEAP32[$tics>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $5 = $str$addr;
 $sx = ((($5)) + 8|0);
 HEAP32[$sx>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $6 = $str$addr;
 $sy = ((($6)) + 12|0);
 HEAP32[$sy>>2] = $call5;
 STACKTOP = sp;return;
}
function _saveg_read16() {
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $conv = 0, $conv2 = 0, $conv3 = 0, $or = 0, $result = 0, $shl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_saveg_read8()|0);
 $conv = $call&255;
 $result = $conv;
 $call1 = (_saveg_read8()|0);
 $conv2 = $call1&255;
 $shl = $conv2 << 8;
 $0 = $result;
 $or = $0 | $shl;
 $result = $or;
 $1 = $result;
 $conv3 = $1&65535;
 STACKTOP = sp;return ($conv3|0);
}
function _P_ArchiveWorld() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx18 = 0, $bottomtexture = 0, $ceilingheight = 0, $ceilingpic = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp4 = 0, $conv = 0;
 var $conv13 = 0, $conv2 = 0, $conv20 = 0, $conv22 = 0, $flags = 0, $floorpic = 0, $i = 0, $idxprom = 0, $inc = 0, $inc24 = 0, $inc27 = 0, $incdec$ptr = 0, $incdec$ptr28 = 0, $j = 0, $li = 0, $lightlevel = 0, $midtexture = 0, $rowoffset = 0, $sec = 0, $shr = 0;
 var $shr1 = 0, $shr19 = 0, $shr21 = 0, $si = 0, $sidenum = 0, $sidenum16 = 0, $special = 0, $special7 = 0, $tag = 0, $tag8 = 0, $toptexture = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $i = 0;
 $0 = HEAP32[99850]|0;
 $sec = $0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[99849]|0;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sec;
  $4 = HEAP32[$3>>2]|0;
  $shr = $4 >> 16;
  $conv = $shr&65535;
  _saveg_write16($conv);
  $5 = $sec;
  $ceilingheight = ((($5)) + 4|0);
  $6 = HEAP32[$ceilingheight>>2]|0;
  $shr1 = $6 >> 16;
  $conv2 = $shr1&65535;
  _saveg_write16($conv2);
  $7 = $sec;
  $floorpic = ((($7)) + 8|0);
  $8 = HEAP16[$floorpic>>1]|0;
  _saveg_write16($8);
  $9 = $sec;
  $ceilingpic = ((($9)) + 10|0);
  $10 = HEAP16[$ceilingpic>>1]|0;
  _saveg_write16($10);
  $11 = $sec;
  $lightlevel = ((($11)) + 12|0);
  $12 = HEAP16[$lightlevel>>1]|0;
  _saveg_write16($12);
  $13 = $sec;
  $special = ((($13)) + 14|0);
  $14 = HEAP16[$special>>1]|0;
  _saveg_write16($14);
  $15 = $sec;
  $tag = ((($15)) + 16|0);
  $16 = HEAP16[$tag>>1]|0;
  _saveg_write16($16);
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
  $18 = $sec;
  $incdec$ptr = ((($18)) + 88|0);
  $sec = $incdec$ptr;
 }
 $i = 0;
 $19 = HEAP32[99844]|0;
 $li = $19;
 while(1) {
  $20 = $i;
  $21 = HEAP32[99853]|0;
  $cmp4 = ($20|0)<($21|0);
  if (!($cmp4)) {
   break;
  }
  $22 = $li;
  $flags = ((($22)) + 16|0);
  $23 = HEAP16[$flags>>1]|0;
  _saveg_write16($23);
  $24 = $li;
  $special7 = ((($24)) + 18|0);
  $25 = HEAP16[$special7>>1]|0;
  _saveg_write16($25);
  $26 = $li;
  $tag8 = ((($26)) + 20|0);
  $27 = HEAP16[$tag8>>1]|0;
  _saveg_write16($27);
  $j = 0;
  while(1) {
   $28 = $j;
   $cmp10 = ($28|0)<(2);
   if (!($cmp10)) {
    break;
   }
   $29 = $li;
   $sidenum = ((($29)) + 22|0);
   $30 = $j;
   $arrayidx = (($sidenum) + ($30<<1)|0);
   $31 = HEAP16[$arrayidx>>1]|0;
   $conv13 = $31 << 16 >> 16;
   $cmp14 = ($conv13|0)==(-1);
   if (!($cmp14)) {
    $32 = HEAP32[99845]|0;
    $33 = $li;
    $sidenum16 = ((($33)) + 22|0);
    $34 = $j;
    $arrayidx17 = (($sidenum16) + ($34<<1)|0);
    $35 = HEAP16[$arrayidx17>>1]|0;
    $idxprom = $35 << 16 >> 16;
    $arrayidx18 = (($32) + (($idxprom*20)|0)|0);
    $si = $arrayidx18;
    $36 = $si;
    $37 = HEAP32[$36>>2]|0;
    $shr19 = $37 >> 16;
    $conv20 = $shr19&65535;
    _saveg_write16($conv20);
    $38 = $si;
    $rowoffset = ((($38)) + 4|0);
    $39 = HEAP32[$rowoffset>>2]|0;
    $shr21 = $39 >> 16;
    $conv22 = $shr21&65535;
    _saveg_write16($conv22);
    $40 = $si;
    $toptexture = ((($40)) + 8|0);
    $41 = HEAP16[$toptexture>>1]|0;
    _saveg_write16($41);
    $42 = $si;
    $bottomtexture = ((($42)) + 10|0);
    $43 = HEAP16[$bottomtexture>>1]|0;
    _saveg_write16($43);
    $44 = $si;
    $midtexture = ((($44)) + 12|0);
    $45 = HEAP16[$midtexture>>1]|0;
    _saveg_write16($45);
   }
   $46 = $j;
   $inc24 = (($46) + 1)|0;
   $j = $inc24;
  }
  $47 = $i;
  $inc27 = (($47) + 1)|0;
  $i = $inc27;
  $48 = $li;
  $incdec$ptr28 = ((($48)) + 64|0);
  $li = $incdec$ptr28;
 }
 STACKTOP = sp;return;
}
function _P_UnArchiveWorld() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx26 = 0, $arrayidx27 = 0, $bottomtexture = 0;
 var $call = 0, $call1 = 0, $call13 = 0, $call14 = 0, $call16 = 0, $call28 = 0, $call31 = 0, $call34 = 0, $call35 = 0, $call36 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $ceilingheight = 0, $ceilingpic = 0, $cmp = 0, $cmp10 = 0, $cmp19 = 0;
 var $cmp23 = 0, $conv = 0, $conv2 = 0, $conv22 = 0, $conv29 = 0, $conv32 = 0, $flags = 0, $floorpic = 0, $i = 0, $idxprom = 0, $inc = 0, $inc38 = 0, $inc41 = 0, $incdec$ptr = 0, $incdec$ptr42 = 0, $j = 0, $li = 0, $lightlevel = 0, $midtexture = 0, $rowoffset = 0;
 var $sec = 0, $shl = 0, $shl3 = 0, $shl30 = 0, $shl33 = 0, $si = 0, $sidenum = 0, $sidenum25 = 0, $soundtarget = 0, $special = 0, $special15 = 0, $specialdata = 0, $tag = 0, $tag17 = 0, $toptexture = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $i = 0;
 $0 = HEAP32[99850]|0;
 $sec = $0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[99849]|0;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $call = (_saveg_read16()|0);
  $conv = $call << 16 >> 16;
  $shl = $conv << 16;
  $3 = $sec;
  HEAP32[$3>>2] = $shl;
  $call1 = (_saveg_read16()|0);
  $conv2 = $call1 << 16 >> 16;
  $shl3 = $conv2 << 16;
  $4 = $sec;
  $ceilingheight = ((($4)) + 4|0);
  HEAP32[$ceilingheight>>2] = $shl3;
  $call4 = (_saveg_read16()|0);
  $5 = $sec;
  $floorpic = ((($5)) + 8|0);
  HEAP16[$floorpic>>1] = $call4;
  $call5 = (_saveg_read16()|0);
  $6 = $sec;
  $ceilingpic = ((($6)) + 10|0);
  HEAP16[$ceilingpic>>1] = $call5;
  $call6 = (_saveg_read16()|0);
  $7 = $sec;
  $lightlevel = ((($7)) + 12|0);
  HEAP16[$lightlevel>>1] = $call6;
  $call7 = (_saveg_read16()|0);
  $8 = $sec;
  $special = ((($8)) + 14|0);
  HEAP16[$special>>1] = $call7;
  $call8 = (_saveg_read16()|0);
  $9 = $sec;
  $tag = ((($9)) + 16|0);
  HEAP16[$tag>>1] = $call8;
  $10 = $sec;
  $specialdata = ((($10)) + 76|0);
  HEAP32[$specialdata>>2] = 0;
  $11 = $sec;
  $soundtarget = ((($11)) + 24|0);
  HEAP32[$soundtarget>>2] = 0;
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
  $13 = $sec;
  $incdec$ptr = ((($13)) + 88|0);
  $sec = $incdec$ptr;
 }
 $i = 0;
 $14 = HEAP32[99844]|0;
 $li = $14;
 while(1) {
  $15 = $i;
  $16 = HEAP32[99853]|0;
  $cmp10 = ($15|0)<($16|0);
  if (!($cmp10)) {
   break;
  }
  $call13 = (_saveg_read16()|0);
  $17 = $li;
  $flags = ((($17)) + 16|0);
  HEAP16[$flags>>1] = $call13;
  $call14 = (_saveg_read16()|0);
  $18 = $li;
  $special15 = ((($18)) + 18|0);
  HEAP16[$special15>>1] = $call14;
  $call16 = (_saveg_read16()|0);
  $19 = $li;
  $tag17 = ((($19)) + 20|0);
  HEAP16[$tag17>>1] = $call16;
  $j = 0;
  while(1) {
   $20 = $j;
   $cmp19 = ($20|0)<(2);
   if (!($cmp19)) {
    break;
   }
   $21 = $li;
   $sidenum = ((($21)) + 22|0);
   $22 = $j;
   $arrayidx = (($sidenum) + ($22<<1)|0);
   $23 = HEAP16[$arrayidx>>1]|0;
   $conv22 = $23 << 16 >> 16;
   $cmp23 = ($conv22|0)==(-1);
   if (!($cmp23)) {
    $24 = HEAP32[99845]|0;
    $25 = $li;
    $sidenum25 = ((($25)) + 22|0);
    $26 = $j;
    $arrayidx26 = (($sidenum25) + ($26<<1)|0);
    $27 = HEAP16[$arrayidx26>>1]|0;
    $idxprom = $27 << 16 >> 16;
    $arrayidx27 = (($24) + (($idxprom*20)|0)|0);
    $si = $arrayidx27;
    $call28 = (_saveg_read16()|0);
    $conv29 = $call28 << 16 >> 16;
    $shl30 = $conv29 << 16;
    $28 = $si;
    HEAP32[$28>>2] = $shl30;
    $call31 = (_saveg_read16()|0);
    $conv32 = $call31 << 16 >> 16;
    $shl33 = $conv32 << 16;
    $29 = $si;
    $rowoffset = ((($29)) + 4|0);
    HEAP32[$rowoffset>>2] = $shl33;
    $call34 = (_saveg_read16()|0);
    $30 = $si;
    $toptexture = ((($30)) + 8|0);
    HEAP16[$toptexture>>1] = $call34;
    $call35 = (_saveg_read16()|0);
    $31 = $si;
    $bottomtexture = ((($31)) + 10|0);
    HEAP16[$bottomtexture>>1] = $call35;
    $call36 = (_saveg_read16()|0);
    $32 = $si;
    $midtexture = ((($32)) + 12|0);
    HEAP16[$midtexture>>1] = $call36;
   }
   $33 = $j;
   $inc38 = (($33) + 1)|0;
   $j = $inc38;
  }
  $34 = $i;
  $inc41 = (($34) + 1)|0;
  $i = $inc41;
  $35 = $li;
  $incdec$ptr42 = ((($35)) + 64|0);
  $li = $incdec$ptr42;
 }
 STACKTOP = sp;return;
}
function _P_ArchiveThinkers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp1 = 0, $function = 0, $next = 0, $th = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(399612)>>2]|0;
 $th = $0;
 while(1) {
  $1 = $th;
  $cmp = ($1|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $2 = $th;
  $function = ((($2)) + 8|0);
  $3 = HEAP32[$function>>2]|0;
  $cmp1 = ($3|0)==(136|0);
  if ($cmp1) {
   _saveg_write8(1);
   _saveg_write_pad();
   $4 = $th;
   _saveg_write_mobj_t($4);
  }
  $5 = $th;
  $next = ((($5)) + 4|0);
  $6 = HEAP32[$next>>2]|0;
  $th = $6;
 }
 _saveg_write8(0);
 STACKTOP = sp;return;
}
function _saveg_write_mobj_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $angle = 0, $bnext = 0, $bprev = 0, $ceilingz = 0, $flags = 0, $floorz = 0, $frame = 0, $health = 0, $height = 0;
 var $info = 0, $lastlook = 0, $momx = 0, $momy = 0, $momz = 0, $movecount = 0, $movedir = 0, $player = 0, $player1 = 0, $radius = 0, $reactiontime = 0, $snext = 0, $spawnpoint = 0, $sprev = 0, $sprite = 0, $state = 0, $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$div4 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$lhs$cast2 = 0, $sub$ptr$sub = 0, $sub$ptr$sub3 = 0, $subsector = 0, $target = 0, $threshold = 0, $tics = 0, $tobool = 0, $tracer = 0, $type = 0, $validcount = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $x = ((($1)) + 12|0);
 $2 = HEAP32[$x>>2]|0;
 _saveg_write32($2);
 $3 = $str$addr;
 $y = ((($3)) + 16|0);
 $4 = HEAP32[$y>>2]|0;
 _saveg_write32($4);
 $5 = $str$addr;
 $z = ((($5)) + 20|0);
 $6 = HEAP32[$z>>2]|0;
 _saveg_write32($6);
 $7 = $str$addr;
 $snext = ((($7)) + 24|0);
 $8 = HEAP32[$snext>>2]|0;
 _saveg_writep($8);
 $9 = $str$addr;
 $sprev = ((($9)) + 28|0);
 $10 = HEAP32[$sprev>>2]|0;
 _saveg_writep($10);
 $11 = $str$addr;
 $angle = ((($11)) + 32|0);
 $12 = HEAP32[$angle>>2]|0;
 _saveg_write32($12);
 $13 = $str$addr;
 $sprite = ((($13)) + 36|0);
 $14 = HEAP32[$sprite>>2]|0;
 _saveg_write32($14);
 $15 = $str$addr;
 $frame = ((($15)) + 40|0);
 $16 = HEAP32[$frame>>2]|0;
 _saveg_write32($16);
 $17 = $str$addr;
 $bnext = ((($17)) + 44|0);
 $18 = HEAP32[$bnext>>2]|0;
 _saveg_writep($18);
 $19 = $str$addr;
 $bprev = ((($19)) + 48|0);
 $20 = HEAP32[$bprev>>2]|0;
 _saveg_writep($20);
 $21 = $str$addr;
 $subsector = ((($21)) + 52|0);
 $22 = HEAP32[$subsector>>2]|0;
 _saveg_writep($22);
 $23 = $str$addr;
 $floorz = ((($23)) + 56|0);
 $24 = HEAP32[$floorz>>2]|0;
 _saveg_write32($24);
 $25 = $str$addr;
 $ceilingz = ((($25)) + 60|0);
 $26 = HEAP32[$ceilingz>>2]|0;
 _saveg_write32($26);
 $27 = $str$addr;
 $radius = ((($27)) + 64|0);
 $28 = HEAP32[$radius>>2]|0;
 _saveg_write32($28);
 $29 = $str$addr;
 $height = ((($29)) + 68|0);
 $30 = HEAP32[$height>>2]|0;
 _saveg_write32($30);
 $31 = $str$addr;
 $momx = ((($31)) + 72|0);
 $32 = HEAP32[$momx>>2]|0;
 _saveg_write32($32);
 $33 = $str$addr;
 $momy = ((($33)) + 76|0);
 $34 = HEAP32[$momy>>2]|0;
 _saveg_write32($34);
 $35 = $str$addr;
 $momz = ((($35)) + 80|0);
 $36 = HEAP32[$momz>>2]|0;
 _saveg_write32($36);
 $37 = $str$addr;
 $validcount = ((($37)) + 84|0);
 $38 = HEAP32[$validcount>>2]|0;
 _saveg_write32($38);
 $39 = $str$addr;
 $type = ((($39)) + 88|0);
 $40 = HEAP32[$type>>2]|0;
 _saveg_write32($40);
 $41 = $str$addr;
 $info = ((($41)) + 92|0);
 $42 = HEAP32[$info>>2]|0;
 _saveg_writep($42);
 $43 = $str$addr;
 $tics = ((($43)) + 96|0);
 $44 = HEAP32[$tics>>2]|0;
 _saveg_write32($44);
 $45 = $str$addr;
 $state = ((($45)) + 100|0);
 $46 = HEAP32[$state>>2]|0;
 $sub$ptr$lhs$cast = $46;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (3568))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
 _saveg_write32($sub$ptr$div);
 $47 = $str$addr;
 $flags = ((($47)) + 104|0);
 $48 = HEAP32[$flags>>2]|0;
 _saveg_write32($48);
 $49 = $str$addr;
 $health = ((($49)) + 108|0);
 $50 = HEAP32[$health>>2]|0;
 _saveg_write32($50);
 $51 = $str$addr;
 $movedir = ((($51)) + 112|0);
 $52 = HEAP32[$movedir>>2]|0;
 _saveg_write32($52);
 $53 = $str$addr;
 $movecount = ((($53)) + 116|0);
 $54 = HEAP32[$movecount>>2]|0;
 _saveg_write32($54);
 $55 = $str$addr;
 $target = ((($55)) + 120|0);
 $56 = HEAP32[$target>>2]|0;
 _saveg_writep($56);
 $57 = $str$addr;
 $reactiontime = ((($57)) + 124|0);
 $58 = HEAP32[$reactiontime>>2]|0;
 _saveg_write32($58);
 $59 = $str$addr;
 $threshold = ((($59)) + 128|0);
 $60 = HEAP32[$threshold>>2]|0;
 _saveg_write32($60);
 $61 = $str$addr;
 $player = ((($61)) + 132|0);
 $62 = HEAP32[$player>>2]|0;
 $tobool = ($62|0)!=(0|0);
 if ($tobool) {
  $63 = $str$addr;
  $player1 = ((($63)) + 132|0);
  $64 = HEAP32[$player1>>2]|0;
  $sub$ptr$lhs$cast2 = $64;
  $sub$ptr$sub3 = (($sub$ptr$lhs$cast2) - (183056))|0;
  $sub$ptr$div4 = (($sub$ptr$sub3|0) / 288)&-1;
  $add = (($sub$ptr$div4) + 1)|0;
  _saveg_write32($add);
  $65 = $str$addr;
  $lastlook = ((($65)) + 136|0);
  $66 = HEAP32[$lastlook>>2]|0;
  _saveg_write32($66);
  $67 = $str$addr;
  $spawnpoint = ((($67)) + 140|0);
  _saveg_write_mapthing_t($spawnpoint);
  $68 = $str$addr;
  $tracer = ((($68)) + 152|0);
  $69 = HEAP32[$tracer>>2]|0;
  _saveg_writep($69);
  STACKTOP = sp;return;
 } else {
  _saveg_write32(0);
  $65 = $str$addr;
  $lastlook = ((($65)) + 136|0);
  $66 = HEAP32[$lastlook>>2]|0;
  _saveg_write32($66);
  $67 = $str$addr;
  $spawnpoint = ((($67)) + 140|0);
  _saveg_write_mapthing_t($spawnpoint);
  $68 = $str$addr;
  $tracer = ((($68)) + 152|0);
  $69 = HEAP32[$tracer>>2]|0;
  _saveg_writep($69);
  STACKTOP = sp;return;
 }
}
function _saveg_write_thinker_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $function = 0, $next = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAP32[$0>>2]|0;
 _saveg_writep($1);
 $2 = $str$addr;
 $next = ((($2)) + 4|0);
 $3 = HEAP32[$next>>2]|0;
 _saveg_writep($3);
 $4 = $str$addr;
 $function = ((($4)) + 8|0);
 _saveg_write_actionf_t($function);
 STACKTOP = sp;return;
}
function _saveg_write_mapthing_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $options = 0, $str$addr = 0, $type = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
 _saveg_write16($1);
 $2 = $str$addr;
 $y = ((($2)) + 2|0);
 $3 = HEAPU8[$y>>0]|(HEAPU8[$y+1>>0]<<8);
 _saveg_write16($3);
 $4 = $str$addr;
 $angle = ((($4)) + 4|0);
 $5 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
 _saveg_write16($5);
 $6 = $str$addr;
 $type = ((($6)) + 6|0);
 $7 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
 _saveg_write16($7);
 $8 = $str$addr;
 $options = ((($8)) + 8|0);
 $9 = HEAPU8[$options>>0]|(HEAPU8[$options+1>>0]<<8);
 _saveg_write16($9);
 STACKTOP = sp;return;
}
function _saveg_write_actionf_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAP32[$0>>2]|0;
 _saveg_writep($1);
 STACKTOP = sp;return;
}
function _P_UnArchiveThinkers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call6 = 0, $ceilingheight = 0, $ceilingz = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $conv12 = 0, $currentthinker = 0, $floorz = 0;
 var $function = 0, $function9 = 0, $info = 0, $mobj = 0, $next = 0, $next1 = 0, $subsector = 0, $subsector7 = 0, $target = 0, $tclass = 0, $tracer = 0, $type = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = HEAP32[(399612)>>2]|0;
 $currentthinker = $0;
 while(1) {
  $1 = $currentthinker;
  $cmp = ($1|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $2 = $currentthinker;
  $next1 = ((($2)) + 4|0);
  $3 = HEAP32[$next1>>2]|0;
  $next = $3;
  $4 = $currentthinker;
  $function = ((($4)) + 8|0);
  $5 = HEAP32[$function>>2]|0;
  $cmp2 = ($5|0)==(136|0);
  $6 = $currentthinker;
  if ($cmp2) {
   _P_RemoveMobj($6);
  } else {
   _Z_Free($6);
  }
  $7 = $next;
  $currentthinker = $7;
 }
 _P_InitThinkers();
 L9: while(1) {
  $call = (_saveg_read8()|0);
  $tclass = $call;
  $8 = $tclass;
  $conv = $8&255;
  switch ($conv|0) {
  case 0:  {
   break L9;
   break;
  }
  case 1:  {
   _saveg_read_pad();
   $call6 = (_Z_Malloc(156,5,0)|0);
   $mobj = $call6;
   $9 = $mobj;
   _saveg_read_mobj_t($9);
   $10 = $mobj;
   $target = ((($10)) + 120|0);
   HEAP32[$target>>2] = 0;
   $11 = $mobj;
   $tracer = ((($11)) + 152|0);
   HEAP32[$tracer>>2] = 0;
   $12 = $mobj;
   _P_SetThingPosition($12);
   $13 = $mobj;
   $type = ((($13)) + 88|0);
   $14 = HEAP32[$type>>2]|0;
   $arrayidx = (30656 + (($14*92)|0)|0);
   $15 = $mobj;
   $info = ((($15)) + 92|0);
   HEAP32[$info>>2] = $arrayidx;
   $16 = $mobj;
   $subsector = ((($16)) + 52|0);
   $17 = HEAP32[$subsector>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = $mobj;
   $floorz = ((($20)) + 56|0);
   HEAP32[$floorz>>2] = $19;
   $21 = $mobj;
   $subsector7 = ((($21)) + 52|0);
   $22 = HEAP32[$subsector7>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $ceilingheight = ((($23)) + 4|0);
   $24 = HEAP32[$ceilingheight>>2]|0;
   $25 = $mobj;
   $ceilingz = ((($25)) + 60|0);
   HEAP32[$ceilingz>>2] = $24;
   $26 = $mobj;
   $function9 = ((($26)) + 8|0);
   HEAP32[$function9>>2] = 136;
   $27 = $mobj;
   _P_AddThinker($27);
   break;
  }
  default: {
   $28 = $tclass;
   $conv12 = $28&255;
   HEAP32[$vararg_buffer>>2] = $conv12;
   _I_Error(154780,$vararg_buffer);
  }
  }
 }
 STACKTOP = sp;return;
}
function _saveg_read_mobj_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $angle = 0, $arrayidx = 0, $arrayidx31 = 0, $bnext = 0, $bprev = 0, $call = 0, $call1 = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call19 = 0, $call2 = 0, $call20 = 0;
 var $call21 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $call25 = 0, $call26 = 0, $call27 = 0, $call28 = 0, $call29 = 0, $call3 = 0, $call30 = 0, $call34 = 0, $call35 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $ceilingz = 0;
 var $cmp = 0, $flags = 0, $floorz = 0, $frame = 0, $health = 0, $height = 0, $info = 0, $lastlook = 0, $momx = 0, $momy = 0, $momz = 0, $movecount = 0, $movedir = 0, $pl = 0, $player = 0, $player32 = 0, $player33 = 0, $radius = 0, $reactiontime = 0, $snext = 0;
 var $spawnpoint = 0, $sprev = 0, $sprite = 0, $state = 0, $str$addr = 0, $sub = 0, $subsector = 0, $target = 0, $threshold = 0, $tics = 0, $tracer = 0, $type = 0, $validcount = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $1 = $str$addr;
 $x = ((($1)) + 12|0);
 HEAP32[$x>>2] = $call;
 $call1 = (_saveg_read32()|0);
 $2 = $str$addr;
 $y = ((($2)) + 16|0);
 HEAP32[$y>>2] = $call1;
 $call2 = (_saveg_read32()|0);
 $3 = $str$addr;
 $z = ((($3)) + 20|0);
 HEAP32[$z>>2] = $call2;
 $call3 = (_saveg_readp()|0);
 $4 = $str$addr;
 $snext = ((($4)) + 24|0);
 HEAP32[$snext>>2] = $call3;
 $call4 = (_saveg_readp()|0);
 $5 = $str$addr;
 $sprev = ((($5)) + 28|0);
 HEAP32[$sprev>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $6 = $str$addr;
 $angle = ((($6)) + 32|0);
 HEAP32[$angle>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $7 = $str$addr;
 $sprite = ((($7)) + 36|0);
 HEAP32[$sprite>>2] = $call6;
 $call7 = (_saveg_read32()|0);
 $8 = $str$addr;
 $frame = ((($8)) + 40|0);
 HEAP32[$frame>>2] = $call7;
 $call8 = (_saveg_readp()|0);
 $9 = $str$addr;
 $bnext = ((($9)) + 44|0);
 HEAP32[$bnext>>2] = $call8;
 $call9 = (_saveg_readp()|0);
 $10 = $str$addr;
 $bprev = ((($10)) + 48|0);
 HEAP32[$bprev>>2] = $call9;
 $call10 = (_saveg_readp()|0);
 $11 = $str$addr;
 $subsector = ((($11)) + 52|0);
 HEAP32[$subsector>>2] = $call10;
 $call11 = (_saveg_read32()|0);
 $12 = $str$addr;
 $floorz = ((($12)) + 56|0);
 HEAP32[$floorz>>2] = $call11;
 $call12 = (_saveg_read32()|0);
 $13 = $str$addr;
 $ceilingz = ((($13)) + 60|0);
 HEAP32[$ceilingz>>2] = $call12;
 $call13 = (_saveg_read32()|0);
 $14 = $str$addr;
 $radius = ((($14)) + 64|0);
 HEAP32[$radius>>2] = $call13;
 $call14 = (_saveg_read32()|0);
 $15 = $str$addr;
 $height = ((($15)) + 68|0);
 HEAP32[$height>>2] = $call14;
 $call15 = (_saveg_read32()|0);
 $16 = $str$addr;
 $momx = ((($16)) + 72|0);
 HEAP32[$momx>>2] = $call15;
 $call16 = (_saveg_read32()|0);
 $17 = $str$addr;
 $momy = ((($17)) + 76|0);
 HEAP32[$momy>>2] = $call16;
 $call17 = (_saveg_read32()|0);
 $18 = $str$addr;
 $momz = ((($18)) + 80|0);
 HEAP32[$momz>>2] = $call17;
 $call18 = (_saveg_read32()|0);
 $19 = $str$addr;
 $validcount = ((($19)) + 84|0);
 HEAP32[$validcount>>2] = $call18;
 $call19 = (_saveg_read32()|0);
 $20 = $str$addr;
 $type = ((($20)) + 88|0);
 HEAP32[$type>>2] = $call19;
 $call20 = (_saveg_readp()|0);
 $21 = $str$addr;
 $info = ((($21)) + 92|0);
 HEAP32[$info>>2] = $call20;
 $call21 = (_saveg_read32()|0);
 $22 = $str$addr;
 $tics = ((($22)) + 96|0);
 HEAP32[$tics>>2] = $call21;
 $call22 = (_saveg_read32()|0);
 $arrayidx = (3568 + (($call22*28)|0)|0);
 $23 = $str$addr;
 $state = ((($23)) + 100|0);
 HEAP32[$state>>2] = $arrayidx;
 $call23 = (_saveg_read32()|0);
 $24 = $str$addr;
 $flags = ((($24)) + 104|0);
 HEAP32[$flags>>2] = $call23;
 $call24 = (_saveg_read32()|0);
 $25 = $str$addr;
 $health = ((($25)) + 108|0);
 HEAP32[$health>>2] = $call24;
 $call25 = (_saveg_read32()|0);
 $26 = $str$addr;
 $movedir = ((($26)) + 112|0);
 HEAP32[$movedir>>2] = $call25;
 $call26 = (_saveg_read32()|0);
 $27 = $str$addr;
 $movecount = ((($27)) + 116|0);
 HEAP32[$movecount>>2] = $call26;
 $call27 = (_saveg_readp()|0);
 $28 = $str$addr;
 $target = ((($28)) + 120|0);
 HEAP32[$target>>2] = $call27;
 $call28 = (_saveg_read32()|0);
 $29 = $str$addr;
 $reactiontime = ((($29)) + 124|0);
 HEAP32[$reactiontime>>2] = $call28;
 $call29 = (_saveg_read32()|0);
 $30 = $str$addr;
 $threshold = ((($30)) + 128|0);
 HEAP32[$threshold>>2] = $call29;
 $call30 = (_saveg_read32()|0);
 $pl = $call30;
 $31 = $pl;
 $cmp = ($31|0)>(0);
 if ($cmp) {
  $32 = $pl;
  $sub = (($32) - 1)|0;
  $arrayidx31 = (183056 + (($sub*288)|0)|0);
  $33 = $str$addr;
  $player = ((($33)) + 132|0);
  HEAP32[$player>>2] = $arrayidx31;
  $34 = $str$addr;
  $35 = $str$addr;
  $player32 = ((($35)) + 132|0);
  $36 = HEAP32[$player32>>2]|0;
  HEAP32[$36>>2] = $34;
  $call34 = (_saveg_read32()|0);
  $38 = $str$addr;
  $lastlook = ((($38)) + 136|0);
  HEAP32[$lastlook>>2] = $call34;
  $39 = $str$addr;
  $spawnpoint = ((($39)) + 140|0);
  _saveg_read_mapthing_t($spawnpoint);
  $call35 = (_saveg_readp()|0);
  $40 = $str$addr;
  $tracer = ((($40)) + 152|0);
  HEAP32[$tracer>>2] = $call35;
  STACKTOP = sp;return;
 } else {
  $37 = $str$addr;
  $player33 = ((($37)) + 132|0);
  HEAP32[$player33>>2] = 0;
  $call34 = (_saveg_read32()|0);
  $38 = $str$addr;
  $lastlook = ((($38)) + 136|0);
  HEAP32[$lastlook>>2] = $call34;
  $39 = $str$addr;
  $spawnpoint = ((($39)) + 140|0);
  _saveg_read_mapthing_t($spawnpoint);
  $call35 = (_saveg_readp()|0);
  $40 = $str$addr;
  $tracer = ((($40)) + 152|0);
  HEAP32[$tracer>>2] = $call35;
  STACKTOP = sp;return;
 }
}
function _saveg_read_thinker_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $function = 0, $next = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $call = (_saveg_readp()|0);
 $0 = $str$addr;
 HEAP32[$0>>2] = $call;
 $call1 = (_saveg_readp()|0);
 $1 = $str$addr;
 $next = ((($1)) + 4|0);
 HEAP32[$next>>2] = $call1;
 $2 = $str$addr;
 $function = ((($2)) + 8|0);
 _saveg_read_actionf_t($function);
 STACKTOP = sp;return;
}
function _saveg_read_mapthing_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $angle = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $options = 0, $str$addr = 0, $type = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $call = (_saveg_read16()|0);
 $0 = $str$addr;
 HEAP8[$0>>0]=$call&255;HEAP8[$0+1>>0]=$call>>8;
 $call1 = (_saveg_read16()|0);
 $1 = $str$addr;
 $y = ((($1)) + 2|0);
 HEAP8[$y>>0]=$call1&255;HEAP8[$y+1>>0]=$call1>>8;
 $call2 = (_saveg_read16()|0);
 $2 = $str$addr;
 $angle = ((($2)) + 4|0);
 HEAP8[$angle>>0]=$call2&255;HEAP8[$angle+1>>0]=$call2>>8;
 $call3 = (_saveg_read16()|0);
 $3 = $str$addr;
 $type = ((($3)) + 6|0);
 HEAP8[$type>>0]=$call3&255;HEAP8[$type+1>>0]=$call3>>8;
 $call4 = (_saveg_read16()|0);
 $4 = $str$addr;
 $options = ((($4)) + 8|0);
 HEAP8[$options>>0]=$call4&255;HEAP8[$options+1>>0]=$call4>>8;
 STACKTOP = sp;return;
}
function _saveg_read_actionf_t($str) {
 $str = $str|0;
 var $0 = 0, $call = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $call = (_saveg_readp()|0);
 $0 = $str$addr;
 HEAP32[$0>>2] = $call;
 STACKTOP = sp;return;
}
function _P_ArchiveSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp22 = 0;
 var $cmp27 = 0, $cmp3 = 0, $cmp32 = 0, $cmp37 = 0, $cmp42 = 0, $cmp5 = 0, $cmp7 = 0, $function = 0, $function11 = 0, $function15 = 0, $function20 = 0, $function25 = 0, $function30 = 0, $function35 = 0, $function40 = 0, $i = 0, $inc = 0, $next = 0, $th = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(399612)>>2]|0;
 $th = $0;
 while(1) {
  $1 = $th;
  $cmp = ($1|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $2 = $th;
  $function = ((($2)) + 8|0);
  $3 = HEAP32[$function>>2]|0;
  $cmp1 = ($3|0)==(0|0);
  do {
   if ($cmp1) {
    $i = 0;
    while(1) {
     $4 = $i;
     $cmp3 = ($4|0)<(30);
     if (!($cmp3)) {
      break;
     }
     $5 = $i;
     $arrayidx = (187392 + ($5<<2)|0);
     $6 = HEAP32[$arrayidx>>2]|0;
     $7 = $th;
     $cmp5 = ($6|0)==($7|0);
     if ($cmp5) {
      break;
     }
     $8 = $i;
     $inc = (($8) + 1)|0;
     $i = $inc;
    }
    $9 = $i;
    $cmp7 = ($9|0)<(30);
    if ($cmp7) {
     _saveg_write8(0);
     _saveg_write_pad();
     $10 = $th;
     _saveg_write_ceiling_t($10);
    }
   } else {
    $11 = $th;
    $function11 = ((($11)) + 8|0);
    $12 = HEAP32[$function11>>2]|0;
    $cmp12 = ($12|0)==(133|0);
    if ($cmp12) {
     _saveg_write8(0);
     _saveg_write_pad();
     $13 = $th;
     _saveg_write_ceiling_t($13);
     break;
    }
    $14 = $th;
    $function15 = ((($14)) + 8|0);
    $15 = HEAP32[$function15>>2]|0;
    $cmp17 = ($15|0)==(134|0);
    if ($cmp17) {
     _saveg_write8(1);
     _saveg_write_pad();
     $16 = $th;
     _saveg_write_vldoor_t($16);
     break;
    }
    $17 = $th;
    $function20 = ((($17)) + 8|0);
    $18 = HEAP32[$function20>>2]|0;
    $cmp22 = ($18|0)==(138|0);
    if ($cmp22) {
     _saveg_write8(2);
     _saveg_write_pad();
     $19 = $th;
     _saveg_write_floormove_t($19);
     break;
    }
    $20 = $th;
    $function25 = ((($20)) + 8|0);
    $21 = HEAP32[$function25>>2]|0;
    $cmp27 = ($21|0)==(135|0);
    if ($cmp27) {
     _saveg_write8(3);
     _saveg_write_pad();
     $22 = $th;
     _saveg_write_plat_t($22);
     break;
    }
    $23 = $th;
    $function30 = ((($23)) + 8|0);
    $24 = HEAP32[$function30>>2]|0;
    $cmp32 = ($24|0)==(140|0);
    if ($cmp32) {
     _saveg_write8(4);
     _saveg_write_pad();
     $25 = $th;
     _saveg_write_lightflash_t($25);
     break;
    }
    $26 = $th;
    $function35 = ((($26)) + 8|0);
    $27 = HEAP32[$function35>>2]|0;
    $cmp37 = ($27|0)==(141|0);
    if ($cmp37) {
     _saveg_write8(5);
     _saveg_write_pad();
     $28 = $th;
     _saveg_write_strobe_t($28);
     break;
    }
    $29 = $th;
    $function40 = ((($29)) + 8|0);
    $30 = HEAP32[$function40>>2]|0;
    $cmp42 = ($30|0)==(142|0);
    if ($cmp42) {
     _saveg_write8(6);
     _saveg_write_pad();
     $31 = $th;
     _saveg_write_glow_t($31);
    }
   }
  } while(0);
  $32 = $th;
  $next = ((($32)) + 4|0);
  $33 = HEAP32[$next>>2]|0;
  $th = $33;
 }
 _saveg_write8(7);
 STACKTOP = sp;return;
}
function _saveg_write_ceiling_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bottomheight = 0, $crush = 0, $direction = 0, $olddirection = 0, $sector = 0, $speed = 0, $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tag = 0, $topheight = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $type = ((($1)) + 12|0);
 $2 = HEAP32[$type>>2]|0;
 _saveg_write32($2);
 $3 = $str$addr;
 $sector = ((($3)) + 16|0);
 $4 = HEAP32[$sector>>2]|0;
 $5 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $4;
 $sub$ptr$rhs$cast = $5;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $6 = $str$addr;
 $bottomheight = ((($6)) + 20|0);
 $7 = HEAP32[$bottomheight>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $topheight = ((($8)) + 24|0);
 $9 = HEAP32[$topheight>>2]|0;
 _saveg_write32($9);
 $10 = $str$addr;
 $speed = ((($10)) + 28|0);
 $11 = HEAP32[$speed>>2]|0;
 _saveg_write32($11);
 $12 = $str$addr;
 $crush = ((($12)) + 32|0);
 $13 = HEAP32[$crush>>2]|0;
 _saveg_write32($13);
 $14 = $str$addr;
 $direction = ((($14)) + 36|0);
 $15 = HEAP32[$direction>>2]|0;
 _saveg_write32($15);
 $16 = $str$addr;
 $tag = ((($16)) + 40|0);
 $17 = HEAP32[$tag>>2]|0;
 _saveg_write32($17);
 $18 = $str$addr;
 $olddirection = ((($18)) + 44|0);
 $19 = HEAP32[$olddirection>>2]|0;
 _saveg_write32($19);
 STACKTOP = sp;return;
}
function _saveg_write_vldoor_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $direction = 0, $sector = 0, $speed = 0, $str$addr = 0;
 var $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $topcountdown = 0, $topheight = 0, $topwait = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $type = ((($1)) + 12|0);
 $2 = HEAP32[$type>>2]|0;
 _saveg_write32($2);
 $3 = $str$addr;
 $sector = ((($3)) + 16|0);
 $4 = HEAP32[$sector>>2]|0;
 $5 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $4;
 $sub$ptr$rhs$cast = $5;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $6 = $str$addr;
 $topheight = ((($6)) + 20|0);
 $7 = HEAP32[$topheight>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $speed = ((($8)) + 24|0);
 $9 = HEAP32[$speed>>2]|0;
 _saveg_write32($9);
 $10 = $str$addr;
 $direction = ((($10)) + 28|0);
 $11 = HEAP32[$direction>>2]|0;
 _saveg_write32($11);
 $12 = $str$addr;
 $topwait = ((($12)) + 32|0);
 $13 = HEAP32[$topwait>>2]|0;
 _saveg_write32($13);
 $14 = $str$addr;
 $topcountdown = ((($14)) + 36|0);
 $15 = HEAP32[$topcountdown>>2]|0;
 _saveg_write32($15);
 STACKTOP = sp;return;
}
function _saveg_write_floormove_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crush = 0, $direction = 0;
 var $floordestheight = 0, $newspecial = 0, $sector = 0, $speed = 0, $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $texture = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $type = ((($1)) + 12|0);
 $2 = HEAP32[$type>>2]|0;
 _saveg_write32($2);
 $3 = $str$addr;
 $crush = ((($3)) + 16|0);
 $4 = HEAP32[$crush>>2]|0;
 _saveg_write32($4);
 $5 = $str$addr;
 $sector = ((($5)) + 20|0);
 $6 = HEAP32[$sector>>2]|0;
 $7 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $6;
 $sub$ptr$rhs$cast = $7;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $8 = $str$addr;
 $direction = ((($8)) + 24|0);
 $9 = HEAP32[$direction>>2]|0;
 _saveg_write32($9);
 $10 = $str$addr;
 $newspecial = ((($10)) + 28|0);
 $11 = HEAP32[$newspecial>>2]|0;
 _saveg_write32($11);
 $12 = $str$addr;
 $texture = ((($12)) + 32|0);
 $13 = HEAP16[$texture>>1]|0;
 _saveg_write16($13);
 $14 = $str$addr;
 $floordestheight = ((($14)) + 36|0);
 $15 = HEAP32[$floordestheight>>2]|0;
 _saveg_write32($15);
 $16 = $str$addr;
 $speed = ((($16)) + 40|0);
 $17 = HEAP32[$speed>>2]|0;
 _saveg_write32($17);
 STACKTOP = sp;return;
}
function _saveg_write_plat_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $crush = 0, $high = 0, $low = 0, $oldstatus = 0, $sector = 0, $speed = 0, $status = 0, $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tag = 0, $type = 0, $wait = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $sector = ((($1)) + 12|0);
 $2 = HEAP32[$sector>>2]|0;
 $3 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $4 = $str$addr;
 $speed = ((($4)) + 16|0);
 $5 = HEAP32[$speed>>2]|0;
 _saveg_write32($5);
 $6 = $str$addr;
 $low = ((($6)) + 20|0);
 $7 = HEAP32[$low>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $high = ((($8)) + 24|0);
 $9 = HEAP32[$high>>2]|0;
 _saveg_write32($9);
 $10 = $str$addr;
 $wait = ((($10)) + 28|0);
 $11 = HEAP32[$wait>>2]|0;
 _saveg_write32($11);
 $12 = $str$addr;
 $count = ((($12)) + 32|0);
 $13 = HEAP32[$count>>2]|0;
 _saveg_write32($13);
 $14 = $str$addr;
 $status = ((($14)) + 36|0);
 $15 = HEAP32[$status>>2]|0;
 _saveg_write32($15);
 $16 = $str$addr;
 $oldstatus = ((($16)) + 40|0);
 $17 = HEAP32[$oldstatus>>2]|0;
 _saveg_write32($17);
 $18 = $str$addr;
 $crush = ((($18)) + 44|0);
 $19 = HEAP32[$crush>>2]|0;
 _saveg_write32($19);
 $20 = $str$addr;
 $tag = ((($20)) + 48|0);
 $21 = HEAP32[$tag>>2]|0;
 _saveg_write32($21);
 $22 = $str$addr;
 $type = ((($22)) + 52|0);
 $23 = HEAP32[$type>>2]|0;
 _saveg_write32($23);
 STACKTOP = sp;return;
}
function _saveg_write_lightflash_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $maxlight = 0, $maxtime = 0, $minlight = 0, $mintime = 0, $sector = 0;
 var $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $sector = ((($1)) + 12|0);
 $2 = HEAP32[$sector>>2]|0;
 $3 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $4 = $str$addr;
 $count = ((($4)) + 16|0);
 $5 = HEAP32[$count>>2]|0;
 _saveg_write32($5);
 $6 = $str$addr;
 $maxlight = ((($6)) + 20|0);
 $7 = HEAP32[$maxlight>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $minlight = ((($8)) + 24|0);
 $9 = HEAP32[$minlight>>2]|0;
 _saveg_write32($9);
 $10 = $str$addr;
 $maxtime = ((($10)) + 28|0);
 $11 = HEAP32[$maxtime>>2]|0;
 _saveg_write32($11);
 $12 = $str$addr;
 $mintime = ((($12)) + 32|0);
 $13 = HEAP32[$mintime>>2]|0;
 _saveg_write32($13);
 STACKTOP = sp;return;
}
function _saveg_write_strobe_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brighttime = 0, $count = 0, $darktime = 0, $maxlight = 0, $minlight = 0, $sector = 0;
 var $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $sector = ((($1)) + 12|0);
 $2 = HEAP32[$sector>>2]|0;
 $3 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $4 = $str$addr;
 $count = ((($4)) + 16|0);
 $5 = HEAP32[$count>>2]|0;
 _saveg_write32($5);
 $6 = $str$addr;
 $minlight = ((($6)) + 20|0);
 $7 = HEAP32[$minlight>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $maxlight = ((($8)) + 24|0);
 $9 = HEAP32[$maxlight>>2]|0;
 _saveg_write32($9);
 $10 = $str$addr;
 $darktime = ((($10)) + 28|0);
 $11 = HEAP32[$darktime>>2]|0;
 _saveg_write32($11);
 $12 = $str$addr;
 $brighttime = ((($12)) + 32|0);
 $13 = HEAP32[$brighttime>>2]|0;
 _saveg_write32($13);
 STACKTOP = sp;return;
}
function _saveg_write_glow_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $direction = 0, $maxlight = 0, $minlight = 0, $sector = 0, $str$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_write_thinker_t($0);
 $1 = $str$addr;
 $sector = ((($1)) + 12|0);
 $2 = HEAP32[$sector>>2]|0;
 $3 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 _saveg_write32($sub$ptr$div);
 $4 = $str$addr;
 $minlight = ((($4)) + 16|0);
 $5 = HEAP32[$minlight>>2]|0;
 _saveg_write32($5);
 $6 = $str$addr;
 $maxlight = ((($6)) + 20|0);
 $7 = HEAP32[$maxlight>>2]|0;
 _saveg_write32($7);
 $8 = $str$addr;
 $direction = ((($8)) + 24|0);
 $9 = HEAP32[$direction>>2]|0;
 _saveg_write32($9);
 STACKTOP = sp;return;
}
function _P_UnArchiveSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $call = 0, $call16 = 0, $call2 = 0, $call24 = 0, $call38 = 0, $call44 = 0, $call50 = 0, $call8 = 0, $ceiling = 0, $conv = 0, $conv55 = 0, $door = 0, $flash = 0, $floor = 0, $function = 0, $function12 = 0, $function20 = 0, $function28 = 0, $function33 = 0;
 var $function4 = 0, $function40 = 0, $function46 = 0, $function52 = 0, $glow = 0, $plat = 0, $sector = 0, $sector17 = 0, $sector25 = 0, $sector9 = 0, $specialdata = 0, $specialdata10 = 0, $specialdata18 = 0, $specialdata26 = 0, $strobe = 0, $tclass = 0, $tobool = 0, $tobool30 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 L1: while(1) {
  $call = (_saveg_read8()|0);
  $tclass = $call;
  $0 = $tclass;
  $conv = $0&255;
  switch ($conv|0) {
  case 7:  {
   break L1;
   break;
  }
  case 0:  {
   _saveg_read_pad();
   $call2 = (_Z_Malloc(48,5,0)|0);
   $ceiling = $call2;
   $1 = $ceiling;
   _saveg_read_ceiling_t($1);
   $2 = $ceiling;
   $3 = $ceiling;
   $sector = ((($3)) + 16|0);
   $4 = HEAP32[$sector>>2]|0;
   $specialdata = ((($4)) + 76|0);
   HEAP32[$specialdata>>2] = $2;
   $5 = $ceiling;
   $function = ((($5)) + 8|0);
   $6 = HEAP32[$function>>2]|0;
   $tobool = ($6|0)!=(0|0);
   if ($tobool) {
    $7 = $ceiling;
    $function4 = ((($7)) + 8|0);
    HEAP32[$function4>>2] = 133;
   }
   $8 = $ceiling;
   _P_AddThinker($8);
   $9 = $ceiling;
   _P_AddActiveCeiling($9);
   break;
  }
  case 1:  {
   _saveg_read_pad();
   $call8 = (_Z_Malloc(40,5,0)|0);
   $door = $call8;
   $10 = $door;
   _saveg_read_vldoor_t($10);
   $11 = $door;
   $12 = $door;
   $sector9 = ((($12)) + 16|0);
   $13 = HEAP32[$sector9>>2]|0;
   $specialdata10 = ((($13)) + 76|0);
   HEAP32[$specialdata10>>2] = $11;
   $14 = $door;
   $function12 = ((($14)) + 8|0);
   HEAP32[$function12>>2] = 134;
   $15 = $door;
   _P_AddThinker($15);
   break;
  }
  case 2:  {
   _saveg_read_pad();
   $call16 = (_Z_Malloc(44,5,0)|0);
   $floor = $call16;
   $16 = $floor;
   _saveg_read_floormove_t($16);
   $17 = $floor;
   $18 = $floor;
   $sector17 = ((($18)) + 20|0);
   $19 = HEAP32[$sector17>>2]|0;
   $specialdata18 = ((($19)) + 76|0);
   HEAP32[$specialdata18>>2] = $17;
   $20 = $floor;
   $function20 = ((($20)) + 8|0);
   HEAP32[$function20>>2] = 138;
   $21 = $floor;
   _P_AddThinker($21);
   break;
  }
  case 3:  {
   _saveg_read_pad();
   $call24 = (_Z_Malloc(56,5,0)|0);
   $plat = $call24;
   $22 = $plat;
   _saveg_read_plat_t($22);
   $23 = $plat;
   $24 = $plat;
   $sector25 = ((($24)) + 12|0);
   $25 = HEAP32[$sector25>>2]|0;
   $specialdata26 = ((($25)) + 76|0);
   HEAP32[$specialdata26>>2] = $23;
   $26 = $plat;
   $function28 = ((($26)) + 8|0);
   $27 = HEAP32[$function28>>2]|0;
   $tobool30 = ($27|0)!=(0|0);
   if ($tobool30) {
    $28 = $plat;
    $function33 = ((($28)) + 8|0);
    HEAP32[$function33>>2] = 135;
   }
   $29 = $plat;
   _P_AddThinker($29);
   $30 = $plat;
   _P_AddActivePlat($30);
   break;
  }
  case 4:  {
   _saveg_read_pad();
   $call38 = (_Z_Malloc(36,5,0)|0);
   $flash = $call38;
   $31 = $flash;
   _saveg_read_lightflash_t($31);
   $32 = $flash;
   $function40 = ((($32)) + 8|0);
   HEAP32[$function40>>2] = 140;
   $33 = $flash;
   _P_AddThinker($33);
   break;
  }
  case 5:  {
   _saveg_read_pad();
   $call44 = (_Z_Malloc(36,5,0)|0);
   $strobe = $call44;
   $34 = $strobe;
   _saveg_read_strobe_t($34);
   $35 = $strobe;
   $function46 = ((($35)) + 8|0);
   HEAP32[$function46>>2] = 141;
   $36 = $strobe;
   _P_AddThinker($36);
   break;
  }
  case 6:  {
   _saveg_read_pad();
   $call50 = (_Z_Malloc(28,5,0)|0);
   $glow = $call50;
   $37 = $glow;
   _saveg_read_glow_t($37);
   $38 = $glow;
   $function52 = ((($38)) + 8|0);
   HEAP32[$function52>>2] = 142;
   $39 = $glow;
   _P_AddThinker($39);
   break;
  }
  default: {
   $40 = $tclass;
   $conv55 = $40&255;
   HEAP32[$vararg_buffer>>2] = $conv55;
   _I_Error(154810,$vararg_buffer);
  }
  }
 }
 STACKTOP = sp;return;
}
function _saveg_read_ceiling_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bottomheight = 0, $call = 0, $call1 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0;
 var $call7 = 0, $call8 = 0, $call9 = 0, $crush = 0, $direction = 0, $olddirection = 0, $sector = 0, $sector2 = 0, $speed = 0, $str$addr = 0, $tag = 0, $topheight = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $1 = $str$addr;
 $type = ((($1)) + 12|0);
 HEAP32[$type>>2] = $call;
 $call1 = (_saveg_read32()|0);
 $sector = $call1;
 $2 = HEAP32[99850]|0;
 $3 = $sector;
 $arrayidx = (($2) + (($3*88)|0)|0);
 $4 = $str$addr;
 $sector2 = ((($4)) + 16|0);
 HEAP32[$sector2>>2] = $arrayidx;
 $call3 = (_saveg_read32()|0);
 $5 = $str$addr;
 $bottomheight = ((($5)) + 20|0);
 HEAP32[$bottomheight>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $topheight = ((($6)) + 24|0);
 HEAP32[$topheight>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $7 = $str$addr;
 $speed = ((($7)) + 28|0);
 HEAP32[$speed>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $8 = $str$addr;
 $crush = ((($8)) + 32|0);
 HEAP32[$crush>>2] = $call6;
 $call7 = (_saveg_read32()|0);
 $9 = $str$addr;
 $direction = ((($9)) + 36|0);
 HEAP32[$direction>>2] = $call7;
 $call8 = (_saveg_read32()|0);
 $10 = $str$addr;
 $tag = ((($10)) + 40|0);
 HEAP32[$tag>>2] = $call8;
 $call9 = (_saveg_read32()|0);
 $11 = $str$addr;
 $olddirection = ((($11)) + 44|0);
 HEAP32[$olddirection>>2] = $call9;
 STACKTOP = sp;return;
}
function _saveg_read_vldoor_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $direction = 0, $sector = 0;
 var $sector2 = 0, $speed = 0, $str$addr = 0, $topcountdown = 0, $topheight = 0, $topwait = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $1 = $str$addr;
 $type = ((($1)) + 12|0);
 HEAP32[$type>>2] = $call;
 $call1 = (_saveg_read32()|0);
 $sector = $call1;
 $2 = HEAP32[99850]|0;
 $3 = $sector;
 $arrayidx = (($2) + (($3*88)|0)|0);
 $4 = $str$addr;
 $sector2 = ((($4)) + 16|0);
 HEAP32[$sector2>>2] = $arrayidx;
 $call3 = (_saveg_read32()|0);
 $5 = $str$addr;
 $topheight = ((($5)) + 20|0);
 HEAP32[$topheight>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $speed = ((($6)) + 24|0);
 HEAP32[$speed>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $7 = $str$addr;
 $direction = ((($7)) + 28|0);
 HEAP32[$direction>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $8 = $str$addr;
 $topwait = ((($8)) + 32|0);
 HEAP32[$topwait>>2] = $call6;
 $call7 = (_saveg_read32()|0);
 $9 = $str$addr;
 $topcountdown = ((($9)) + 36|0);
 HEAP32[$topcountdown>>2] = $call7;
 STACKTOP = sp;return;
}
function _saveg_read_floormove_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0;
 var $crush = 0, $direction = 0, $floordestheight = 0, $newspecial = 0, $sector = 0, $sector3 = 0, $speed = 0, $str$addr = 0, $texture = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $1 = $str$addr;
 $type = ((($1)) + 12|0);
 HEAP32[$type>>2] = $call;
 $call1 = (_saveg_read32()|0);
 $2 = $str$addr;
 $crush = ((($2)) + 16|0);
 HEAP32[$crush>>2] = $call1;
 $call2 = (_saveg_read32()|0);
 $sector = $call2;
 $3 = HEAP32[99850]|0;
 $4 = $sector;
 $arrayidx = (($3) + (($4*88)|0)|0);
 $5 = $str$addr;
 $sector3 = ((($5)) + 20|0);
 HEAP32[$sector3>>2] = $arrayidx;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $direction = ((($6)) + 24|0);
 HEAP32[$direction>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $7 = $str$addr;
 $newspecial = ((($7)) + 28|0);
 HEAP32[$newspecial>>2] = $call5;
 $call6 = (_saveg_read16()|0);
 $8 = $str$addr;
 $texture = ((($8)) + 32|0);
 HEAP16[$texture>>1] = $call6;
 $call7 = (_saveg_read32()|0);
 $9 = $str$addr;
 $floordestheight = ((($9)) + 36|0);
 HEAP32[$floordestheight>>2] = $call7;
 $call8 = (_saveg_read32()|0);
 $10 = $str$addr;
 $speed = ((($10)) + 40|0);
 HEAP32[$speed>>2] = $call8;
 STACKTOP = sp;return;
}
function _saveg_read_plat_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call10 = 0, $call11 = 0, $call2 = 0, $call3 = 0;
 var $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $count = 0, $crush = 0, $high = 0, $low = 0, $oldstatus = 0, $sector = 0, $sector1 = 0, $speed = 0, $status = 0, $str$addr = 0, $tag = 0, $type = 0, $wait = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $sector = $call;
 $1 = HEAP32[99850]|0;
 $2 = $sector;
 $arrayidx = (($1) + (($2*88)|0)|0);
 $3 = $str$addr;
 $sector1 = ((($3)) + 12|0);
 HEAP32[$sector1>>2] = $arrayidx;
 $call2 = (_saveg_read32()|0);
 $4 = $str$addr;
 $speed = ((($4)) + 16|0);
 HEAP32[$speed>>2] = $call2;
 $call3 = (_saveg_read32()|0);
 $5 = $str$addr;
 $low = ((($5)) + 20|0);
 HEAP32[$low>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $high = ((($6)) + 24|0);
 HEAP32[$high>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $7 = $str$addr;
 $wait = ((($7)) + 28|0);
 HEAP32[$wait>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $8 = $str$addr;
 $count = ((($8)) + 32|0);
 HEAP32[$count>>2] = $call6;
 $call7 = (_saveg_read32()|0);
 $9 = $str$addr;
 $status = ((($9)) + 36|0);
 HEAP32[$status>>2] = $call7;
 $call8 = (_saveg_read32()|0);
 $10 = $str$addr;
 $oldstatus = ((($10)) + 40|0);
 HEAP32[$oldstatus>>2] = $call8;
 $call9 = (_saveg_read32()|0);
 $11 = $str$addr;
 $crush = ((($11)) + 44|0);
 HEAP32[$crush>>2] = $call9;
 $call10 = (_saveg_read32()|0);
 $12 = $str$addr;
 $tag = ((($12)) + 48|0);
 HEAP32[$tag>>2] = $call10;
 $call11 = (_saveg_read32()|0);
 $13 = $str$addr;
 $type = ((($13)) + 52|0);
 HEAP32[$type>>2] = $call11;
 STACKTOP = sp;return;
}
function _saveg_read_lightflash_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $count = 0, $maxlight = 0, $maxtime = 0, $minlight = 0;
 var $mintime = 0, $sector = 0, $sector1 = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $sector = $call;
 $1 = HEAP32[99850]|0;
 $2 = $sector;
 $arrayidx = (($1) + (($2*88)|0)|0);
 $3 = $str$addr;
 $sector1 = ((($3)) + 12|0);
 HEAP32[$sector1>>2] = $arrayidx;
 $call2 = (_saveg_read32()|0);
 $4 = $str$addr;
 $count = ((($4)) + 16|0);
 HEAP32[$count>>2] = $call2;
 $call3 = (_saveg_read32()|0);
 $5 = $str$addr;
 $maxlight = ((($5)) + 20|0);
 HEAP32[$maxlight>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $minlight = ((($6)) + 24|0);
 HEAP32[$minlight>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $7 = $str$addr;
 $maxtime = ((($7)) + 28|0);
 HEAP32[$maxtime>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $8 = $str$addr;
 $mintime = ((($8)) + 32|0);
 HEAP32[$mintime>>2] = $call6;
 STACKTOP = sp;return;
}
function _saveg_read_strobe_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $brighttime = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $count = 0, $darktime = 0, $maxlight = 0;
 var $minlight = 0, $sector = 0, $sector1 = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $sector = $call;
 $1 = HEAP32[99850]|0;
 $2 = $sector;
 $arrayidx = (($1) + (($2*88)|0)|0);
 $3 = $str$addr;
 $sector1 = ((($3)) + 12|0);
 HEAP32[$sector1>>2] = $arrayidx;
 $call2 = (_saveg_read32()|0);
 $4 = $str$addr;
 $count = ((($4)) + 16|0);
 HEAP32[$count>>2] = $call2;
 $call3 = (_saveg_read32()|0);
 $5 = $str$addr;
 $minlight = ((($5)) + 20|0);
 HEAP32[$minlight>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $maxlight = ((($6)) + 24|0);
 HEAP32[$maxlight>>2] = $call4;
 $call5 = (_saveg_read32()|0);
 $7 = $str$addr;
 $darktime = ((($7)) + 28|0);
 HEAP32[$darktime>>2] = $call5;
 $call6 = (_saveg_read32()|0);
 $8 = $str$addr;
 $brighttime = ((($8)) + 32|0);
 HEAP32[$brighttime>>2] = $call6;
 STACKTOP = sp;return;
}
function _saveg_read_glow_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $direction = 0, $maxlight = 0, $minlight = 0, $sector = 0, $sector1 = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 _saveg_read_thinker_t($0);
 $call = (_saveg_read32()|0);
 $sector = $call;
 $1 = HEAP32[99850]|0;
 $2 = $sector;
 $arrayidx = (($1) + (($2*88)|0)|0);
 $3 = $str$addr;
 $sector1 = ((($3)) + 12|0);
 HEAP32[$sector1>>2] = $arrayidx;
 $call2 = (_saveg_read32()|0);
 $4 = $str$addr;
 $minlight = ((($4)) + 16|0);
 HEAP32[$minlight>>2] = $call2;
 $call3 = (_saveg_read32()|0);
 $5 = $str$addr;
 $maxlight = ((($5)) + 20|0);
 HEAP32[$maxlight>>2] = $call3;
 $call4 = (_saveg_read32()|0);
 $6 = $str$addr;
 $direction = ((($6)) + 24|0);
 HEAP32[$direction>>2] = $call4;
 STACKTOP = sp;return;
}
function _P_LoadVertexes($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $cmp = 0, $conv = 0, $conv4 = 0, $data = 0, $div = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $li = 0, $lump$addr = 0, $ml = 0, $mul = 0, $shl = 0, $shl5 = 0, $y = 0, $y6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 4)&-1;
 HEAP32[99840] = $div;
 $1 = HEAP32[99840]|0;
 $mul = $1<<3;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99841] = $call1;
 $2 = $lump$addr;
 $call2 = (_W_CacheLumpNum($2,1)|0);
 $data = $call2;
 $3 = $data;
 $ml = $3;
 $4 = HEAP32[99841]|0;
 $li = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = HEAP32[99840]|0;
  $cmp = ($5|0)<($6|0);
  if (!($cmp)) {
   break;
  }
  $7 = $ml;
  $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
  $conv = $8 << 16 >> 16;
  $shl = $conv << 16;
  $9 = $li;
  HEAP32[$9>>2] = $shl;
  $10 = $ml;
  $y = ((($10)) + 2|0);
  $11 = HEAPU8[$y>>0]|(HEAPU8[$y+1>>0]<<8);
  $conv4 = $11 << 16 >> 16;
  $shl5 = $conv4 << 16;
  $12 = $li;
  $y6 = ((($12)) + 4|0);
  HEAP32[$y6>>2] = $shl5;
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
  $14 = $li;
  $incdec$ptr = ((($14)) + 8|0);
  $li = $incdec$ptr;
  $15 = $ml;
  $incdec$ptr7 = ((($15)) + 4|0);
  $ml = $incdec$ptr7;
 }
 $16 = $lump$addr;
 _W_ReleaseLumpNum($16);
 STACKTOP = sp;return;
}
function _GetSectorAtNullAddress() {
 var $0 = 0, $tobool = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[99863]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  return (399456|0);
 }
 dest=399456; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 (_I_GetMemoryValue(0,399456,4)|0);
 (_I_GetMemoryValue(4,(399460),4)|0);
 HEAP32[99863] = 1;
 return (399456|0);
}
function _P_LoadSegs($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $and = 0, $angle = 0, $angle8 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $arrayidx25 = 0, $arrayidx28 = 0, $arrayidx36 = 0, $arrayidx6 = 0, $backsector = 0, $backsector38 = 0, $backsector40 = 0, $call = 0, $call1 = 0, $call3 = 0, $call35 = 0, $cmp = 0;
 var $cmp30 = 0, $cmp32 = 0, $conv = 0, $conv13 = 0, $conv17 = 0, $conv26 = 0, $conv29 = 0, $conv9 = 0, $data = 0, $div = 0, $flags = 0, $frontsector = 0, $i = 0, $idxprom = 0, $idxprom20 = 0, $idxprom24 = 0, $idxprom5 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr42 = 0;
 var $ldef = 0, $li = 0, $linedef = 0, $linedef12 = 0, $linedef15 = 0, $lump$addr = 0, $ml = 0, $mul = 0, $mul2 = 0, $offset = 0, $offset11 = 0, $sector = 0, $sector37 = 0, $shl = 0, $shl10 = 0, $side = 0, $side16 = 0, $sidedef = 0, $sidenum = 0, $sidenum18 = 0;
 var $sidenum22 = 0, $sidenum27 = 0, $tobool = 0, $v2 = 0, $v27 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 12)&-1;
 HEAP32[99842] = $div;
 $1 = HEAP32[99842]|0;
 $mul = $1<<5;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99843] = $call1;
 $2 = HEAP32[99843]|0;
 $3 = HEAP32[99842]|0;
 $mul2 = $3<<5;
 _memset(($2|0),0,($mul2|0))|0;
 $4 = $lump$addr;
 $call3 = (_W_CacheLumpNum($4,1)|0);
 $data = $call3;
 $5 = $data;
 $ml = $5;
 $6 = HEAP32[99843]|0;
 $li = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[99842]|0;
  $cmp = ($7|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = HEAP32[99841]|0;
  $10 = $ml;
  $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8);
  $idxprom = $11 << 16 >> 16;
  $arrayidx = (($9) + ($idxprom<<3)|0);
  $12 = $li;
  HEAP32[$12>>2] = $arrayidx;
  $13 = HEAP32[99841]|0;
  $14 = $ml;
  $v2 = ((($14)) + 2|0);
  $15 = HEAPU8[$v2>>0]|(HEAPU8[$v2+1>>0]<<8);
  $idxprom5 = $15 << 16 >> 16;
  $arrayidx6 = (($13) + ($idxprom5<<3)|0);
  $16 = $li;
  $v27 = ((($16)) + 4|0);
  HEAP32[$v27>>2] = $arrayidx6;
  $17 = $ml;
  $angle = ((($17)) + 4|0);
  $18 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
  $conv = $18 << 16 >> 16;
  $shl = $conv << 16;
  $19 = $li;
  $angle8 = ((($19)) + 12|0);
  HEAP32[$angle8>>2] = $shl;
  $20 = $ml;
  $offset = ((($20)) + 10|0);
  $21 = HEAPU8[$offset>>0]|(HEAPU8[$offset+1>>0]<<8);
  $conv9 = $21 << 16 >> 16;
  $shl10 = $conv9 << 16;
  $22 = $li;
  $offset11 = ((($22)) + 8|0);
  HEAP32[$offset11>>2] = $shl10;
  $23 = $ml;
  $linedef12 = ((($23)) + 6|0);
  $24 = HEAPU8[$linedef12>>0]|(HEAPU8[$linedef12+1>>0]<<8);
  $conv13 = $24 << 16 >> 16;
  $linedef = $conv13;
  $25 = HEAP32[99844]|0;
  $26 = $linedef;
  $arrayidx14 = (($25) + ($26<<6)|0);
  $ldef = $arrayidx14;
  $27 = $ldef;
  $28 = $li;
  $linedef15 = ((($28)) + 20|0);
  HEAP32[$linedef15>>2] = $27;
  $29 = $ml;
  $side16 = ((($29)) + 8|0);
  $30 = HEAPU8[$side16>>0]|(HEAPU8[$side16+1>>0]<<8);
  $conv17 = $30 << 16 >> 16;
  $side = $conv17;
  $31 = HEAP32[99845]|0;
  $32 = $ldef;
  $sidenum18 = ((($32)) + 22|0);
  $33 = $side;
  $arrayidx19 = (($sidenum18) + ($33<<1)|0);
  $34 = HEAP16[$arrayidx19>>1]|0;
  $idxprom20 = $34 << 16 >> 16;
  $arrayidx21 = (($31) + (($idxprom20*20)|0)|0);
  $35 = $li;
  $sidedef = ((($35)) + 16|0);
  HEAP32[$sidedef>>2] = $arrayidx21;
  $36 = HEAP32[99845]|0;
  $37 = $ldef;
  $sidenum22 = ((($37)) + 22|0);
  $38 = $side;
  $arrayidx23 = (($sidenum22) + ($38<<1)|0);
  $39 = HEAP16[$arrayidx23>>1]|0;
  $idxprom24 = $39 << 16 >> 16;
  $arrayidx25 = (($36) + (($idxprom24*20)|0)|0);
  $sector = ((($arrayidx25)) + 16|0);
  $40 = HEAP32[$sector>>2]|0;
  $41 = $li;
  $frontsector = ((($41)) + 24|0);
  HEAP32[$frontsector>>2] = $40;
  $42 = $ldef;
  $flags = ((($42)) + 16|0);
  $43 = HEAP16[$flags>>1]|0;
  $conv26 = $43 << 16 >> 16;
  $and = $conv26 & 4;
  $tobool = ($and|0)!=(0);
  do {
   if ($tobool) {
    $44 = $ldef;
    $sidenum27 = ((($44)) + 22|0);
    $45 = $side;
    $xor = $45 ^ 1;
    $arrayidx28 = (($sidenum27) + ($xor<<1)|0);
    $46 = HEAP16[$arrayidx28>>1]|0;
    $conv29 = $46 << 16 >> 16;
    $sidenum = $conv29;
    $47 = $sidenum;
    $cmp30 = ($47|0)<(0);
    if (!($cmp30)) {
     $48 = $sidenum;
     $49 = HEAP32[99846]|0;
     $cmp32 = ($48|0)>=($49|0);
     if (!($cmp32)) {
      $51 = HEAP32[99845]|0;
      $52 = $sidenum;
      $arrayidx36 = (($51) + (($52*20)|0)|0);
      $sector37 = ((($arrayidx36)) + 16|0);
      $53 = HEAP32[$sector37>>2]|0;
      $54 = $li;
      $backsector38 = ((($54)) + 28|0);
      HEAP32[$backsector38>>2] = $53;
      break;
     }
    }
    $call35 = (_GetSectorAtNullAddress()|0);
    $50 = $li;
    $backsector = ((($50)) + 28|0);
    HEAP32[$backsector>>2] = $call35;
   } else {
    $55 = $li;
    $backsector40 = ((($55)) + 28|0);
    HEAP32[$backsector40>>2] = 0;
   }
  } while(0);
  $56 = $i;
  $inc = (($56) + 1)|0;
  $i = $inc;
  $57 = $li;
  $incdec$ptr = ((($57)) + 32|0);
  $li = $incdec$ptr;
  $58 = $ml;
  $incdec$ptr42 = ((($58)) + 12|0);
  $ml = $incdec$ptr42;
 }
 $59 = $lump$addr;
 _W_ReleaseLumpNum($59);
 STACKTOP = sp;return;
}
function _P_LoadSubsectors($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
 var $call1 = 0, $call2 = 0, $cmp = 0, $data = 0, $div = 0, $firstline = 0, $firstseg = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $lump$addr = 0, $ms = 0, $mul = 0, $mul3 = 0, $numlines = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 4)&-1;
 HEAP32[99847] = $div;
 $1 = HEAP32[99847]|0;
 $mul = $1<<3;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99848] = $call1;
 $2 = $lump$addr;
 $call2 = (_W_CacheLumpNum($2,1)|0);
 $data = $call2;
 $3 = $data;
 $ms = $3;
 $4 = HEAP32[99848]|0;
 $5 = HEAP32[99847]|0;
 $mul3 = $5<<3;
 _memset(($4|0),0,($mul3|0))|0;
 $6 = HEAP32[99848]|0;
 $ss = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[99847]|0;
  $cmp = ($7|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = $ms;
  $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  $11 = $ss;
  $numlines = ((($11)) + 4|0);
  HEAP16[$numlines>>1] = $10;
  $12 = $ms;
  $firstseg = ((($12)) + 2|0);
  $13 = HEAPU8[$firstseg>>0]|(HEAPU8[$firstseg+1>>0]<<8);
  $14 = $ss;
  $firstline = ((($14)) + 6|0);
  HEAP16[$firstline>>1] = $13;
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
  $16 = $ss;
  $incdec$ptr = ((($16)) + 8|0);
  $ss = $incdec$ptr;
  $17 = $ms;
  $incdec$ptr4 = ((($17)) + 4|0);
  $ms = $incdec$ptr4;
 }
 $18 = $lump$addr;
 _W_ReleaseLumpNum($18);
 STACKTOP = sp;return;
}
function _P_LoadSectors($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call12 = 0, $call3 = 0, $call8 = 0, $ceilingheight = 0, $ceilingheight7 = 0;
 var $ceilingpic = 0, $ceilingpic14 = 0, $cmp = 0, $conv = 0, $conv13 = 0, $conv5 = 0, $conv9 = 0, $data = 0, $div = 0, $floorpic = 0, $floorpic10 = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr18 = 0, $lightlevel = 0, $lightlevel15 = 0, $lump$addr = 0, $ms = 0, $mul = 0;
 var $mul2 = 0, $shl = 0, $shl6 = 0, $special = 0, $special16 = 0, $ss = 0, $tag = 0, $tag17 = 0, $thinglist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 26)&-1;
 HEAP32[99849] = $div;
 $1 = HEAP32[99849]|0;
 $mul = ($1*88)|0;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99850] = $call1;
 $2 = HEAP32[99850]|0;
 $3 = HEAP32[99849]|0;
 $mul2 = ($3*88)|0;
 _memset(($2|0),0,($mul2|0))|0;
 $4 = $lump$addr;
 $call3 = (_W_CacheLumpNum($4,1)|0);
 $data = $call3;
 $5 = $data;
 $ms = $5;
 $6 = HEAP32[99850]|0;
 $ss = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[99849]|0;
  $cmp = ($7|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = $ms;
  $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  $conv = $10 << 16 >> 16;
  $shl = $conv << 16;
  $11 = $ss;
  HEAP32[$11>>2] = $shl;
  $12 = $ms;
  $ceilingheight = ((($12)) + 2|0);
  $13 = HEAPU8[$ceilingheight>>0]|(HEAPU8[$ceilingheight+1>>0]<<8);
  $conv5 = $13 << 16 >> 16;
  $shl6 = $conv5 << 16;
  $14 = $ss;
  $ceilingheight7 = ((($14)) + 4|0);
  HEAP32[$ceilingheight7>>2] = $shl6;
  $15 = $ms;
  $floorpic = ((($15)) + 4|0);
  $call8 = (_R_FlatNumForName($floorpic)|0);
  $conv9 = $call8&65535;
  $16 = $ss;
  $floorpic10 = ((($16)) + 8|0);
  HEAP16[$floorpic10>>1] = $conv9;
  $17 = $ms;
  $ceilingpic = ((($17)) + 12|0);
  $call12 = (_R_FlatNumForName($ceilingpic)|0);
  $conv13 = $call12&65535;
  $18 = $ss;
  $ceilingpic14 = ((($18)) + 10|0);
  HEAP16[$ceilingpic14>>1] = $conv13;
  $19 = $ms;
  $lightlevel = ((($19)) + 20|0);
  $20 = HEAPU8[$lightlevel>>0]|(HEAPU8[$lightlevel+1>>0]<<8);
  $21 = $ss;
  $lightlevel15 = ((($21)) + 12|0);
  HEAP16[$lightlevel15>>1] = $20;
  $22 = $ms;
  $special = ((($22)) + 22|0);
  $23 = HEAPU8[$special>>0]|(HEAPU8[$special+1>>0]<<8);
  $24 = $ss;
  $special16 = ((($24)) + 14|0);
  HEAP16[$special16>>1] = $23;
  $25 = $ms;
  $tag = ((($25)) + 24|0);
  $26 = HEAPU8[$tag>>0]|(HEAPU8[$tag+1>>0]<<8);
  $27 = $ss;
  $tag17 = ((($27)) + 16|0);
  HEAP16[$tag17>>1] = $26;
  $28 = $ss;
  $thinglist = ((($28)) + 72|0);
  HEAP32[$thinglist>>2] = 0;
  $29 = $i;
  $inc = (($29) + 1)|0;
  $i = $inc;
  $30 = $ss;
  $incdec$ptr = ((($30)) + 88|0);
  $ss = $incdec$ptr;
  $31 = $ms;
  $incdec$ptr18 = ((($31)) + 26|0);
  $ms = $incdec$ptr18;
 }
 $32 = $lump$addr;
 _W_ReleaseLumpNum($32);
 STACKTOP = sp;return;
}
function _P_LoadNodes($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $arrayidx18 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx29 = 0, $bbox = 0, $bbox27 = 0, $call = 0, $call1 = 0, $call2 = 0, $children = 0, $children17 = 0, $cmp = 0, $cmp14 = 0, $cmp20 = 0, $conv = 0, $conv10 = 0, $conv25 = 0, $conv4 = 0, $conv7 = 0;
 var $data = 0, $div = 0, $dx = 0, $dx9 = 0, $dy = 0, $dy12 = 0, $i = 0, $inc = 0, $inc31 = 0, $inc34 = 0, $incdec$ptr = 0, $incdec$ptr35 = 0, $j = 0, $k = 0, $lump$addr = 0, $mn = 0, $mul = 0, $no = 0, $shl = 0, $shl11 = 0;
 var $shl26 = 0, $shl5 = 0, $shl8 = 0, $y = 0, $y6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 28)&-1;
 HEAP32[99851] = $div;
 $1 = HEAP32[99851]|0;
 $mul = ($1*52)|0;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99852] = $call1;
 $2 = $lump$addr;
 $call2 = (_W_CacheLumpNum($2,1)|0);
 $data = $call2;
 $3 = $data;
 $mn = $3;
 $4 = HEAP32[99852]|0;
 $no = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = HEAP32[99851]|0;
  $cmp = ($5|0)<($6|0);
  if (!($cmp)) {
   break;
  }
  $7 = $mn;
  $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
  $conv = $8 << 16 >> 16;
  $shl = $conv << 16;
  $9 = $no;
  HEAP32[$9>>2] = $shl;
  $10 = $mn;
  $y = ((($10)) + 2|0);
  $11 = HEAPU8[$y>>0]|(HEAPU8[$y+1>>0]<<8);
  $conv4 = $11 << 16 >> 16;
  $shl5 = $conv4 << 16;
  $12 = $no;
  $y6 = ((($12)) + 4|0);
  HEAP32[$y6>>2] = $shl5;
  $13 = $mn;
  $dx = ((($13)) + 4|0);
  $14 = HEAPU8[$dx>>0]|(HEAPU8[$dx+1>>0]<<8);
  $conv7 = $14 << 16 >> 16;
  $shl8 = $conv7 << 16;
  $15 = $no;
  $dx9 = ((($15)) + 8|0);
  HEAP32[$dx9>>2] = $shl8;
  $16 = $mn;
  $dy = ((($16)) + 6|0);
  $17 = HEAPU8[$dy>>0]|(HEAPU8[$dy+1>>0]<<8);
  $conv10 = $17 << 16 >> 16;
  $shl11 = $conv10 << 16;
  $18 = $no;
  $dy12 = ((($18)) + 12|0);
  HEAP32[$dy12>>2] = $shl11;
  $j = 0;
  while(1) {
   $19 = $j;
   $cmp14 = ($19|0)<(2);
   if (!($cmp14)) {
    break;
   }
   $20 = $mn;
   $children = ((($20)) + 24|0);
   $21 = $j;
   $arrayidx = (($children) + ($21<<1)|0);
   $22 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8);
   $23 = $no;
   $children17 = ((($23)) + 48|0);
   $24 = $j;
   $arrayidx18 = (($children17) + ($24<<1)|0);
   HEAP16[$arrayidx18>>1] = $22;
   $k = 0;
   while(1) {
    $25 = $k;
    $cmp20 = ($25|0)<(4);
    if (!($cmp20)) {
     break;
    }
    $26 = $mn;
    $bbox = ((($26)) + 8|0);
    $27 = $j;
    $arrayidx23 = (($bbox) + ($27<<3)|0);
    $28 = $k;
    $arrayidx24 = (($arrayidx23) + ($28<<1)|0);
    $29 = HEAPU8[$arrayidx24>>0]|(HEAPU8[$arrayidx24+1>>0]<<8);
    $conv25 = $29 << 16 >> 16;
    $shl26 = $conv25 << 16;
    $30 = $no;
    $bbox27 = ((($30)) + 16|0);
    $31 = $j;
    $arrayidx28 = (($bbox27) + ($31<<4)|0);
    $32 = $k;
    $arrayidx29 = (($arrayidx28) + ($32<<2)|0);
    HEAP32[$arrayidx29>>2] = $shl26;
    $33 = $k;
    $inc = (($33) + 1)|0;
    $k = $inc;
   }
   $34 = $j;
   $inc31 = (($34) + 1)|0;
   $j = $inc31;
  }
  $35 = $i;
  $inc34 = (($35) + 1)|0;
  $i = $inc34;
  $36 = $no;
  $incdec$ptr = ((($36)) + 52|0);
  $no = $incdec$ptr;
  $37 = $mn;
  $incdec$ptr35 = ((($37)) + 28|0);
  $mn = $incdec$ptr35;
 }
 $38 = $lump$addr;
 _W_ReleaseLumpNum($38);
 STACKTOP = sp;return;
}
function _P_LoadThings($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $angle = 0, $angle9 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $conv = 0, $data = 0, $div = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $lump$addr = 0, $mt = 0, $numthings = 0, $options = 0, $options12 = 0;
 var $spawn = 0, $spawnthing = 0, $type = 0, $type10 = 0, $type11 = 0, $y = 0, $y8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $spawnthing = sp + 24|0;
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_CacheLumpNum($0,1)|0);
 $data = $call;
 $1 = $lump$addr;
 $call1 = (_W_LumpLength($1)|0);
 $div = (($call1>>>0) / 10)&-1;
 $numthings = $div;
 $2 = $data;
 $mt = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $numthings;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   label = 8;
   break;
  }
  $spawn = 1;
  $5 = HEAP32[32168]|0;
  $cmp2 = ($5|0)!=(2);
  L4: do {
   if ($cmp2) {
    $6 = $mt;
    $type = ((($6)) + 6|0);
    $7 = HEAPU8[$type>>0]|(HEAPU8[$type+1>>0]<<8);
    $conv = $7 << 16 >> 16;
    switch ($conv|0) {
    case 84: case 66: case 65: case 71: case 67: case 69: case 89: case 88: case 64: case 68:  {
     break;
    }
    default: {
     break L4;
    }
    }
    $spawn = 0;
   }
  } while(0);
  $8 = $spawn;
  $cmp3 = ($8|0)==(0);
  if ($cmp3) {
   label = 8;
   break;
  }
  $9 = $mt;
  $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  HEAP8[$spawnthing>>0]=$10&255;HEAP8[$spawnthing+1>>0]=$10>>8;
  $11 = $mt;
  $y = ((($11)) + 2|0);
  $12 = HEAPU8[$y>>0]|(HEAPU8[$y+1>>0]<<8);
  $y8 = ((($spawnthing)) + 2|0);
  HEAP8[$y8>>0]=$12&255;HEAP8[$y8+1>>0]=$12>>8;
  $13 = $mt;
  $angle = ((($13)) + 4|0);
  $14 = HEAPU8[$angle>>0]|(HEAPU8[$angle+1>>0]<<8);
  $angle9 = ((($spawnthing)) + 4|0);
  HEAP8[$angle9>>0]=$14&255;HEAP8[$angle9+1>>0]=$14>>8;
  $15 = $mt;
  $type10 = ((($15)) + 6|0);
  $16 = HEAPU8[$type10>>0]|(HEAPU8[$type10+1>>0]<<8);
  $type11 = ((($spawnthing)) + 6|0);
  HEAP8[$type11>>0]=$16&255;HEAP8[$type11+1>>0]=$16>>8;
  $17 = $mt;
  $options = ((($17)) + 8|0);
  $18 = HEAPU8[$options>>0]|(HEAPU8[$options+1>>0]<<8);
  $options12 = ((($spawnthing)) + 8|0);
  HEAP8[$options12>>0]=$18&255;HEAP8[$options12+1>>0]=$18>>8;
  _P_SpawnMapThing($spawnthing);
  $19 = $i;
  $inc = (($19) + 1)|0;
  $i = $inc;
  $20 = $mt;
  $incdec$ptr = ((($20)) + 10|0);
  $mt = $incdec$ptr;
 }
 if ((label|0) == 8) {
  $21 = $lump$addr;
  _W_ReleaseLumpNum($21);
  STACKTOP = sp;return;
 }
}
function _P_LoadLineDefs($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx37 = 0, $arrayidx40 = 0, $arrayidx44 = 0, $arrayidx47 = 0, $arrayidx55 = 0, $arrayidx62 = 0, $arrayidx71 = 0, $arrayidx73 = 0, $arrayidx82 = 0, $arrayidx87 = 0, $arrayidx93 = 0, $arrayidx95 = 0, $backsector = 0, $backsector98 = 0, $bbox = 0;
 var $bbox39 = 0, $bbox43 = 0, $bbox46 = 0, $bbox54 = 0, $bbox57 = 0, $bbox61 = 0, $bbox64 = 0, $call = 0, $call1 = 0, $call24 = 0, $call3 = 0, $cmp = 0, $cmp25 = 0, $cmp34 = 0, $cmp51 = 0, $cmp76 = 0, $cmp89 = 0, $conv = 0, $conv88 = 0, $data = 0;
 var $div = 0, $dx = 0, $dx16 = 0, $dx23 = 0, $dy = 0, $dy17 = 0, $dy22 = 0, $flags = 0, $flags4 = 0, $frontsector = 0, $frontsector84 = 0, $i = 0, $idxprom = 0, $idxprom10 = 0, $idxprom81 = 0, $idxprom94 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr100 = 0, $ld = 0;
 var $lump$addr = 0, $mld = 0, $mul = 0, $mul2 = 0, $sector = 0, $sector96 = 0, $sidenum = 0, $sidenum68 = 0, $sidenum70 = 0, $sidenum72 = 0, $sidenum74 = 0, $sidenum79 = 0, $sidenum86 = 0, $sidenum92 = 0, $slopetype = 0, $slopetype20 = 0, $slopetype27 = 0, $special = 0, $special5 = 0, $sub = 0;
 var $sub15 = 0, $tag = 0, $tag6 = 0, $tobool = 0, $tobool18 = 0, $v1 = 0, $v2 = 0, $v212 = 0, $v29 = 0, $y = 0, $y14 = 0, $y49 = 0, $y50 = 0, $y53 = 0, $y56 = 0, $y60 = 0, $y63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 14)&-1;
 HEAP32[99853] = $div;
 $1 = HEAP32[99853]|0;
 $mul = $1<<6;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99844] = $call1;
 $2 = HEAP32[99844]|0;
 $3 = HEAP32[99853]|0;
 $mul2 = $3<<6;
 _memset(($2|0),0,($mul2|0))|0;
 $4 = $lump$addr;
 $call3 = (_W_CacheLumpNum($4,1)|0);
 $data = $call3;
 $5 = $data;
 $mld = $5;
 $6 = HEAP32[99844]|0;
 $ld = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[99853]|0;
  $cmp = ($7|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = $mld;
  $flags = ((($9)) + 4|0);
  $10 = HEAPU8[$flags>>0]|(HEAPU8[$flags+1>>0]<<8);
  $11 = $ld;
  $flags4 = ((($11)) + 16|0);
  HEAP16[$flags4>>1] = $10;
  $12 = $mld;
  $special = ((($12)) + 6|0);
  $13 = HEAPU8[$special>>0]|(HEAPU8[$special+1>>0]<<8);
  $14 = $ld;
  $special5 = ((($14)) + 18|0);
  HEAP16[$special5>>1] = $13;
  $15 = $mld;
  $tag = ((($15)) + 8|0);
  $16 = HEAPU8[$tag>>0]|(HEAPU8[$tag+1>>0]<<8);
  $17 = $ld;
  $tag6 = ((($17)) + 20|0);
  HEAP16[$tag6>>1] = $16;
  $18 = HEAP32[99841]|0;
  $19 = $mld;
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
  $idxprom = $20 << 16 >> 16;
  $arrayidx = (($18) + ($idxprom<<3)|0);
  $21 = $ld;
  HEAP32[$21>>2] = $arrayidx;
  $v1 = $arrayidx;
  $22 = HEAP32[99841]|0;
  $23 = $mld;
  $v29 = ((($23)) + 2|0);
  $24 = HEAPU8[$v29>>0]|(HEAPU8[$v29+1>>0]<<8);
  $idxprom10 = $24 << 16 >> 16;
  $arrayidx11 = (($22) + ($idxprom10<<3)|0);
  $25 = $ld;
  $v212 = ((($25)) + 4|0);
  HEAP32[$v212>>2] = $arrayidx11;
  $v2 = $arrayidx11;
  $26 = $v2;
  $27 = HEAP32[$26>>2]|0;
  $28 = $v1;
  $29 = HEAP32[$28>>2]|0;
  $sub = (($27) - ($29))|0;
  $30 = $ld;
  $dx = ((($30)) + 8|0);
  HEAP32[$dx>>2] = $sub;
  $31 = $v2;
  $y = ((($31)) + 4|0);
  $32 = HEAP32[$y>>2]|0;
  $33 = $v1;
  $y14 = ((($33)) + 4|0);
  $34 = HEAP32[$y14>>2]|0;
  $sub15 = (($32) - ($34))|0;
  $35 = $ld;
  $dy = ((($35)) + 12|0);
  HEAP32[$dy>>2] = $sub15;
  $36 = $ld;
  $dx16 = ((($36)) + 8|0);
  $37 = HEAP32[$dx16>>2]|0;
  $tobool = ($37|0)!=(0);
  $38 = $ld;
  do {
   if ($tobool) {
    $dy17 = ((($38)) + 12|0);
    $39 = HEAP32[$dy17>>2]|0;
    $tobool18 = ($39|0)!=(0);
    $40 = $ld;
    if (!($tobool18)) {
     $slopetype20 = ((($40)) + 44|0);
     HEAP32[$slopetype20>>2] = 0;
     break;
    }
    $dy22 = ((($40)) + 12|0);
    $41 = HEAP32[$dy22>>2]|0;
    $42 = $ld;
    $dx23 = ((($42)) + 8|0);
    $43 = HEAP32[$dx23>>2]|0;
    $call24 = (_FixedDiv($41,$43)|0);
    $cmp25 = ($call24|0)>(0);
    $44 = $ld;
    $slopetype27 = ((($44)) + 44|0);
    if ($cmp25) {
     HEAP32[$slopetype27>>2] = 2;
     break;
    } else {
     HEAP32[$slopetype27>>2] = 3;
     break;
    }
   } else {
    $slopetype = ((($38)) + 44|0);
    HEAP32[$slopetype>>2] = 1;
   }
  } while(0);
  $45 = $v1;
  $46 = HEAP32[$45>>2]|0;
  $47 = $v2;
  $48 = HEAP32[$47>>2]|0;
  $cmp34 = ($46|0)<($48|0);
  if ($cmp34) {
   $49 = $v1;
   $50 = HEAP32[$49>>2]|0;
   $51 = $ld;
   $bbox = ((($51)) + 28|0);
   $arrayidx37 = ((($bbox)) + 8|0);
   HEAP32[$arrayidx37>>2] = $50;
   $52 = $v2;
   $53 = HEAP32[$52>>2]|0;
   $54 = $ld;
   $bbox39 = ((($54)) + 28|0);
   $arrayidx40 = ((($bbox39)) + 12|0);
   HEAP32[$arrayidx40>>2] = $53;
  } else {
   $55 = $v2;
   $56 = HEAP32[$55>>2]|0;
   $57 = $ld;
   $bbox43 = ((($57)) + 28|0);
   $arrayidx44 = ((($bbox43)) + 8|0);
   HEAP32[$arrayidx44>>2] = $56;
   $58 = $v1;
   $59 = HEAP32[$58>>2]|0;
   $60 = $ld;
   $bbox46 = ((($60)) + 28|0);
   $arrayidx47 = ((($bbox46)) + 12|0);
   HEAP32[$arrayidx47>>2] = $59;
  }
  $61 = $v1;
  $y49 = ((($61)) + 4|0);
  $62 = HEAP32[$y49>>2]|0;
  $63 = $v2;
  $y50 = ((($63)) + 4|0);
  $64 = HEAP32[$y50>>2]|0;
  $cmp51 = ($62|0)<($64|0);
  if ($cmp51) {
   $65 = $v1;
   $y53 = ((($65)) + 4|0);
   $66 = HEAP32[$y53>>2]|0;
   $67 = $ld;
   $bbox54 = ((($67)) + 28|0);
   $arrayidx55 = ((($bbox54)) + 4|0);
   HEAP32[$arrayidx55>>2] = $66;
   $68 = $v2;
   $y56 = ((($68)) + 4|0);
   $69 = HEAP32[$y56>>2]|0;
   $70 = $ld;
   $bbox57 = ((($70)) + 28|0);
   HEAP32[$bbox57>>2] = $69;
  } else {
   $71 = $v2;
   $y60 = ((($71)) + 4|0);
   $72 = HEAP32[$y60>>2]|0;
   $73 = $ld;
   $bbox61 = ((($73)) + 28|0);
   $arrayidx62 = ((($bbox61)) + 4|0);
   HEAP32[$arrayidx62>>2] = $72;
   $74 = $v1;
   $y63 = ((($74)) + 4|0);
   $75 = HEAP32[$y63>>2]|0;
   $76 = $ld;
   $bbox64 = ((($76)) + 28|0);
   HEAP32[$bbox64>>2] = $75;
  }
  $77 = $mld;
  $sidenum = ((($77)) + 10|0);
  $78 = HEAPU8[$sidenum>>0]|(HEAPU8[$sidenum+1>>0]<<8);
  $79 = $ld;
  $sidenum68 = ((($79)) + 22|0);
  HEAP16[$sidenum68>>1] = $78;
  $80 = $mld;
  $sidenum70 = ((($80)) + 10|0);
  $arrayidx71 = ((($sidenum70)) + 2|0);
  $81 = HEAPU8[$arrayidx71>>0]|(HEAPU8[$arrayidx71+1>>0]<<8);
  $82 = $ld;
  $sidenum72 = ((($82)) + 22|0);
  $arrayidx73 = ((($sidenum72)) + 2|0);
  HEAP16[$arrayidx73>>1] = $81;
  $83 = $ld;
  $sidenum74 = ((($83)) + 22|0);
  $84 = HEAP16[$sidenum74>>1]|0;
  $conv = $84 << 16 >> 16;
  $cmp76 = ($conv|0)!=(-1);
  if ($cmp76) {
   $85 = HEAP32[99845]|0;
   $86 = $ld;
   $sidenum79 = ((($86)) + 22|0);
   $87 = HEAP16[$sidenum79>>1]|0;
   $idxprom81 = $87 << 16 >> 16;
   $arrayidx82 = (($85) + (($idxprom81*20)|0)|0);
   $sector = ((($arrayidx82)) + 16|0);
   $88 = HEAP32[$sector>>2]|0;
   $89 = $ld;
   $frontsector = ((($89)) + 48|0);
   HEAP32[$frontsector>>2] = $88;
  } else {
   $90 = $ld;
   $frontsector84 = ((($90)) + 48|0);
   HEAP32[$frontsector84>>2] = 0;
  }
  $91 = $ld;
  $sidenum86 = ((($91)) + 22|0);
  $arrayidx87 = ((($sidenum86)) + 2|0);
  $92 = HEAP16[$arrayidx87>>1]|0;
  $conv88 = $92 << 16 >> 16;
  $cmp89 = ($conv88|0)!=(-1);
  if ($cmp89) {
   $93 = HEAP32[99845]|0;
   $94 = $ld;
   $sidenum92 = ((($94)) + 22|0);
   $arrayidx93 = ((($sidenum92)) + 2|0);
   $95 = HEAP16[$arrayidx93>>1]|0;
   $idxprom94 = $95 << 16 >> 16;
   $arrayidx95 = (($93) + (($idxprom94*20)|0)|0);
   $sector96 = ((($arrayidx95)) + 16|0);
   $96 = HEAP32[$sector96>>2]|0;
   $97 = $ld;
   $backsector = ((($97)) + 52|0);
   HEAP32[$backsector>>2] = $96;
  } else {
   $98 = $ld;
   $backsector98 = ((($98)) + 52|0);
   HEAP32[$backsector98>>2] = 0;
  }
  $99 = $i;
  $inc = (($99) + 1)|0;
  $i = $inc;
  $100 = $mld;
  $incdec$ptr = ((($100)) + 14|0);
  $mld = $incdec$ptr;
  $101 = $ld;
  $incdec$ptr100 = ((($101)) + 64|0);
  $ld = $incdec$ptr100;
 }
 $102 = $lump$addr;
 _W_ReleaseLumpNum($102);
 STACKTOP = sp;return;
}
function _P_LoadSideDefs($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bottomtexture = 0, $bottomtexture14 = 0, $call = 0, $call1 = 0, $call12 = 0, $call16 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $conv = 0;
 var $conv13 = 0, $conv17 = 0, $conv5 = 0, $conv9 = 0, $data = 0, $div = 0, $i = 0, $idxprom = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $lump$addr = 0, $midtexture = 0, $midtexture18 = 0, $msd = 0, $mul = 0, $mul2 = 0, $rowoffset = 0, $rowoffset7 = 0, $sd = 0;
 var $sector = 0, $sector19 = 0, $shl = 0, $shl6 = 0, $toptexture = 0, $toptexture10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $div = (($call>>>0) / 30)&-1;
 HEAP32[99846] = $div;
 $1 = HEAP32[99846]|0;
 $mul = ($1*20)|0;
 $call1 = (_Z_Malloc($mul,5,0)|0);
 HEAP32[99845] = $call1;
 $2 = HEAP32[99845]|0;
 $3 = HEAP32[99846]|0;
 $mul2 = ($3*20)|0;
 _memset(($2|0),0,($mul2|0))|0;
 $4 = $lump$addr;
 $call3 = (_W_CacheLumpNum($4,1)|0);
 $data = $call3;
 $5 = $data;
 $msd = $5;
 $6 = HEAP32[99845]|0;
 $sd = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[99846]|0;
  $cmp = ($7|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = $msd;
  $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  $conv = $10 << 16 >> 16;
  $shl = $conv << 16;
  $11 = $sd;
  HEAP32[$11>>2] = $shl;
  $12 = $msd;
  $rowoffset = ((($12)) + 2|0);
  $13 = HEAPU8[$rowoffset>>0]|(HEAPU8[$rowoffset+1>>0]<<8);
  $conv5 = $13 << 16 >> 16;
  $shl6 = $conv5 << 16;
  $14 = $sd;
  $rowoffset7 = ((($14)) + 4|0);
  HEAP32[$rowoffset7>>2] = $shl6;
  $15 = $msd;
  $toptexture = ((($15)) + 4|0);
  $call8 = (_R_TextureNumForName($toptexture)|0);
  $conv9 = $call8&65535;
  $16 = $sd;
  $toptexture10 = ((($16)) + 8|0);
  HEAP16[$toptexture10>>1] = $conv9;
  $17 = $msd;
  $bottomtexture = ((($17)) + 12|0);
  $call12 = (_R_TextureNumForName($bottomtexture)|0);
  $conv13 = $call12&65535;
  $18 = $sd;
  $bottomtexture14 = ((($18)) + 10|0);
  HEAP16[$bottomtexture14>>1] = $conv13;
  $19 = $msd;
  $midtexture = ((($19)) + 20|0);
  $call16 = (_R_TextureNumForName($midtexture)|0);
  $conv17 = $call16&65535;
  $20 = $sd;
  $midtexture18 = ((($20)) + 12|0);
  HEAP16[$midtexture18>>1] = $conv17;
  $21 = HEAP32[99850]|0;
  $22 = $msd;
  $sector = ((($22)) + 28|0);
  $23 = HEAPU8[$sector>>0]|(HEAPU8[$sector+1>>0]<<8);
  $idxprom = $23 << 16 >> 16;
  $arrayidx = (($21) + (($idxprom*88)|0)|0);
  $24 = $sd;
  $sector19 = ((($24)) + 16|0);
  HEAP32[$sector19>>2] = $arrayidx;
  $25 = $i;
  $inc = (($25) + 1)|0;
  $i = $inc;
  $26 = $msd;
  $incdec$ptr = ((($26)) + 30|0);
  $msd = $incdec$ptr;
  $27 = $sd;
  $incdec$ptr20 = ((($27)) + 20|0);
  $sd = $incdec$ptr20;
 }
 $28 = $lump$addr;
 _W_ReleaseLumpNum($28);
 STACKTOP = sp;return;
}
function _P_LoadBlockMap($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $call = 0, $call1 = 0, $call12 = 0, $cmp = 0, $conv = 0, $conv10 = 0, $conv5 = 0, $conv8 = 0;
 var $count = 0, $div = 0, $i = 0, $inc = 0, $lump$addr = 0, $lumplen = 0, $mul = 0, $mul11 = 0, $shl = 0, $shl6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lump$addr = $lump;
 $0 = $lump$addr;
 $call = (_W_LumpLength($0)|0);
 $lumplen = $call;
 $1 = $lumplen;
 $div = (($1|0) / 2)&-1;
 $count = $div;
 $2 = $lumplen;
 $call1 = (_Z_Malloc($2,5,0)|0);
 HEAP32[99854] = $call1;
 $3 = $lump$addr;
 $4 = HEAP32[99854]|0;
 _W_ReadLump($3,$4);
 $5 = HEAP32[99854]|0;
 $add$ptr = ((($5)) + 8|0);
 HEAP32[99855] = $add$ptr;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $count;
  $cmp = ($6|0)<($7|0);
  $8 = HEAP32[99854]|0;
  if (!($cmp)) {
   break;
  }
  $9 = $i;
  $arrayidx = (($8) + ($9<<1)|0);
  $10 = HEAP16[$arrayidx>>1]|0;
  $11 = HEAP32[99854]|0;
  $12 = $i;
  $arrayidx2 = (($11) + ($12<<1)|0);
  HEAP16[$arrayidx2>>1] = $10;
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 $14 = HEAP16[$8>>1]|0;
 $conv = $14 << 16 >> 16;
 $shl = $conv << 16;
 HEAP32[99856] = $shl;
 $15 = HEAP32[99854]|0;
 $arrayidx4 = ((($15)) + 2|0);
 $16 = HEAP16[$arrayidx4>>1]|0;
 $conv5 = $16 << 16 >> 16;
 $shl6 = $conv5 << 16;
 HEAP32[99857] = $shl6;
 $17 = HEAP32[99854]|0;
 $arrayidx7 = ((($17)) + 4|0);
 $18 = HEAP16[$arrayidx7>>1]|0;
 $conv8 = $18 << 16 >> 16;
 HEAP32[99858] = $conv8;
 $19 = HEAP32[99854]|0;
 $arrayidx9 = ((($19)) + 6|0);
 $20 = HEAP16[$arrayidx9>>1]|0;
 $conv10 = $20 << 16 >> 16;
 HEAP32[99859] = $conv10;
 $21 = HEAP32[99858]|0;
 $mul = $21<<2;
 $22 = HEAP32[99859]|0;
 $mul11 = Math_imul($mul, $22)|0;
 $count = $mul11;
 $23 = $count;
 $call12 = (_Z_Malloc($23,5,0)|0);
 HEAP32[99860] = $call12;
 $24 = HEAP32[99860]|0;
 $25 = $count;
 _memset(($24|0),0,($25|0))|0;
 STACKTOP = sp;return;
}
function _P_GroupLines() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add106 = 0, $add84 = 0, $add89 = 0, $arrayidx = 0, $arrayidx103 = 0;
 var $arrayidx104 = 0, $arrayidx115 = 0, $arrayidx116 = 0, $arrayidx126 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx25 = 0, $arrayidx33 = 0, $arrayidx40 = 0, $arrayidx54 = 0, $arrayidx69 = 0, $arrayidx79 = 0, $arrayidx80 = 0, $arrayidx83 = 0, $arrayidx93 = 0, $backsector = 0, $backsector11 = 0, $backsector44 = 0, $backsector48 = 0, $backsector51 = 0;
 var $backsector8 = 0, $bbox = 0, $block = 0, $blockbox = 0, $blockbox102 = 0, $blockbox114 = 0, $blockbox125 = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp108 = 0, $cmp120 = 0, $cmp20 = 0, $cmp31 = 0, $cmp35 = 0, $cmp4 = 0, $cmp45 = 0, $cmp49 = 0, $cmp62 = 0, $cmp66 = 0;
 var $cmp90 = 0, $cmp97 = 0, $cond = 0, $cond101 = 0, $cond113 = 0, $cond124 = 0, $div = 0, $div85 = 0, $firstline = 0, $frontsector = 0, $frontsector34 = 0, $frontsector37 = 0, $frontsector47 = 0, $frontsector9 = 0, $i = 0, $idxprom = 0, $inc = 0, $inc128 = 0, $inc13 = 0, $inc14 = 0;
 var $inc16 = 0, $inc28 = 0, $inc42 = 0, $inc56 = 0, $inc59 = 0, $inc6 = 0, $inc7 = 0, $inc77 = 0, $incdec$ptr = 0, $incdec$ptr129 = 0, $incdec$ptr17 = 0, $j = 0, $li = 0, $linebuffer = 0, $linecount = 0, $linecount12 = 0, $linecount24 = 0, $linecount26 = 0, $linecount39 = 0, $linecount41 = 0;
 var $linecount53 = 0, $linecount55 = 0, $linecount65 = 0, $lines = 0, $lines38 = 0, $lines52 = 0, $lines68 = 0, $mul = 0, $sector = 0, $sector1 = 0, $seg = 0, $shr = 0, $shr107 = 0, $shr119 = 0, $shr96 = 0, $sidedef = 0, $soundorg = 0, $soundorg86 = 0, $ss = 0, $sub = 0;
 var $sub105 = 0, $sub110 = 0, $sub117 = 0, $sub118 = 0, $sub91 = 0, $sub94 = 0, $sub95 = 0, $tobool = 0, $v2 = 0, $v274 = 0, $x81 = 0, $y = 0, $y75 = 0, $y87 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $bbox = sp;
 $0 = HEAP32[99848]|0;
 $ss = $0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[99847]|0;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = HEAP32[99843]|0;
  $4 = $ss;
  $firstline = ((($4)) + 6|0);
  $5 = HEAP16[$firstline>>1]|0;
  $idxprom = $5 << 16 >> 16;
  $arrayidx = (($3) + ($idxprom<<5)|0);
  $seg = $arrayidx;
  $6 = $seg;
  $sidedef = ((($6)) + 16|0);
  $7 = HEAP32[$sidedef>>2]|0;
  $sector1 = ((($7)) + 16|0);
  $8 = HEAP32[$sector1>>2]|0;
  $9 = $ss;
  HEAP32[$9>>2] = $8;
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
  $11 = $ss;
  $incdec$ptr = ((($11)) + 8|0);
  $ss = $incdec$ptr;
 }
 $12 = HEAP32[99844]|0;
 $li = $12;
 HEAP32[99886] = 0;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = HEAP32[99853]|0;
  $cmp4 = ($13|0)<($14|0);
  $15 = HEAP32[99886]|0;
  if (!($cmp4)) {
   break;
  }
  $inc6 = (($15) + 1)|0;
  HEAP32[99886] = $inc6;
  $16 = $li;
  $frontsector = ((($16)) + 48|0);
  $17 = HEAP32[$frontsector>>2]|0;
  $linecount = ((($17)) + 80|0);
  $18 = HEAP32[$linecount>>2]|0;
  $inc7 = (($18) + 1)|0;
  HEAP32[$linecount>>2] = $inc7;
  $19 = $li;
  $backsector = ((($19)) + 52|0);
  $20 = HEAP32[$backsector>>2]|0;
  $tobool = ($20|0)!=(0|0);
  if ($tobool) {
   $21 = $li;
   $backsector8 = ((($21)) + 52|0);
   $22 = HEAP32[$backsector8>>2]|0;
   $23 = $li;
   $frontsector9 = ((($23)) + 48|0);
   $24 = HEAP32[$frontsector9>>2]|0;
   $cmp10 = ($22|0)!=($24|0);
   if ($cmp10) {
    $25 = $li;
    $backsector11 = ((($25)) + 52|0);
    $26 = HEAP32[$backsector11>>2]|0;
    $linecount12 = ((($26)) + 80|0);
    $27 = HEAP32[$linecount12>>2]|0;
    $inc13 = (($27) + 1)|0;
    HEAP32[$linecount12>>2] = $inc13;
    $28 = HEAP32[99886]|0;
    $inc14 = (($28) + 1)|0;
    HEAP32[99886] = $inc14;
   }
  }
  $29 = $i;
  $inc16 = (($29) + 1)|0;
  $i = $inc16;
  $30 = $li;
  $incdec$ptr17 = ((($30)) + 64|0);
  $li = $incdec$ptr17;
 }
 $mul = $15<<2;
 $call = (_Z_Malloc($mul,5,0)|0);
 $linebuffer = $call;
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = HEAP32[99849]|0;
  $cmp20 = ($31|0)<($32|0);
  if (!($cmp20)) {
   break;
  }
  $33 = $linebuffer;
  $34 = HEAP32[99850]|0;
  $35 = $i;
  $arrayidx22 = (($34) + (($35*88)|0)|0);
  $lines = ((($arrayidx22)) + 84|0);
  HEAP32[$lines>>2] = $33;
  $36 = HEAP32[99850]|0;
  $37 = $i;
  $arrayidx23 = (($36) + (($37*88)|0)|0);
  $linecount24 = ((($arrayidx23)) + 80|0);
  $38 = HEAP32[$linecount24>>2]|0;
  $39 = $linebuffer;
  $add$ptr = (($39) + ($38<<2)|0);
  $linebuffer = $add$ptr;
  $40 = HEAP32[99850]|0;
  $41 = $i;
  $arrayidx25 = (($40) + (($41*88)|0)|0);
  $linecount26 = ((($arrayidx25)) + 80|0);
  HEAP32[$linecount26>>2] = 0;
  $42 = $i;
  $inc28 = (($42) + 1)|0;
  $i = $inc28;
 }
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = HEAP32[99853]|0;
  $cmp31 = ($43|0)<($44|0);
  if (!($cmp31)) {
   break;
  }
  $45 = HEAP32[99844]|0;
  $46 = $i;
  $arrayidx33 = (($45) + ($46<<6)|0);
  $li = $arrayidx33;
  $47 = $li;
  $frontsector34 = ((($47)) + 48|0);
  $48 = HEAP32[$frontsector34>>2]|0;
  $cmp35 = ($48|0)!=(0|0);
  if ($cmp35) {
   $49 = $li;
   $frontsector37 = ((($49)) + 48|0);
   $50 = HEAP32[$frontsector37>>2]|0;
   $sector = $50;
   $51 = $li;
   $52 = $sector;
   $lines38 = ((($52)) + 84|0);
   $53 = HEAP32[$lines38>>2]|0;
   $54 = $sector;
   $linecount39 = ((($54)) + 80|0);
   $55 = HEAP32[$linecount39>>2]|0;
   $arrayidx40 = (($53) + ($55<<2)|0);
   HEAP32[$arrayidx40>>2] = $51;
   $56 = $sector;
   $linecount41 = ((($56)) + 80|0);
   $57 = HEAP32[$linecount41>>2]|0;
   $inc42 = (($57) + 1)|0;
   HEAP32[$linecount41>>2] = $inc42;
  }
  $58 = $li;
  $backsector44 = ((($58)) + 52|0);
  $59 = HEAP32[$backsector44>>2]|0;
  $cmp45 = ($59|0)!=(0|0);
  if ($cmp45) {
   $60 = $li;
   $frontsector47 = ((($60)) + 48|0);
   $61 = HEAP32[$frontsector47>>2]|0;
   $62 = $li;
   $backsector48 = ((($62)) + 52|0);
   $63 = HEAP32[$backsector48>>2]|0;
   $cmp49 = ($61|0)!=($63|0);
   if ($cmp49) {
    $64 = $li;
    $backsector51 = ((($64)) + 52|0);
    $65 = HEAP32[$backsector51>>2]|0;
    $sector = $65;
    $66 = $li;
    $67 = $sector;
    $lines52 = ((($67)) + 84|0);
    $68 = HEAP32[$lines52>>2]|0;
    $69 = $sector;
    $linecount53 = ((($69)) + 80|0);
    $70 = HEAP32[$linecount53>>2]|0;
    $arrayidx54 = (($68) + ($70<<2)|0);
    HEAP32[$arrayidx54>>2] = $66;
    $71 = $sector;
    $linecount55 = ((($71)) + 80|0);
    $72 = HEAP32[$linecount55>>2]|0;
    $inc56 = (($72) + 1)|0;
    HEAP32[$linecount55>>2] = $inc56;
   }
  }
  $73 = $i;
  $inc59 = (($73) + 1)|0;
  $i = $inc59;
 }
 $74 = HEAP32[99850]|0;
 $sector = $74;
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = HEAP32[99849]|0;
  $cmp62 = ($75|0)<($76|0);
  if (!($cmp62)) {
   break;
  }
  _M_ClearBox($bbox);
  $j = 0;
  while(1) {
   $77 = $j;
   $78 = $sector;
   $linecount65 = ((($78)) + 80|0);
   $79 = HEAP32[$linecount65>>2]|0;
   $cmp66 = ($77|0)<($79|0);
   if (!($cmp66)) {
    break;
   }
   $80 = $sector;
   $lines68 = ((($80)) + 84|0);
   $81 = HEAP32[$lines68>>2]|0;
   $82 = $j;
   $arrayidx69 = (($81) + ($82<<2)|0);
   $83 = HEAP32[$arrayidx69>>2]|0;
   $li = $83;
   $84 = $li;
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = $li;
   $88 = HEAP32[$87>>2]|0;
   $y = ((($88)) + 4|0);
   $89 = HEAP32[$y>>2]|0;
   _M_AddToBox($bbox,$86,$89);
   $90 = $li;
   $v2 = ((($90)) + 4|0);
   $91 = HEAP32[$v2>>2]|0;
   $92 = HEAP32[$91>>2]|0;
   $93 = $li;
   $v274 = ((($93)) + 4|0);
   $94 = HEAP32[$v274>>2]|0;
   $y75 = ((($94)) + 4|0);
   $95 = HEAP32[$y75>>2]|0;
   _M_AddToBox($bbox,$92,$95);
   $96 = $j;
   $inc77 = (($96) + 1)|0;
   $j = $inc77;
  }
  $arrayidx79 = ((($bbox)) + 12|0);
  $97 = HEAP32[$arrayidx79>>2]|0;
  $arrayidx80 = ((($bbox)) + 8|0);
  $98 = HEAP32[$arrayidx80>>2]|0;
  $add = (($97) + ($98))|0;
  $div = (($add|0) / 2)&-1;
  $99 = $sector;
  $soundorg = ((($99)) + 44|0);
  $x81 = ((($soundorg)) + 12|0);
  HEAP32[$x81>>2] = $div;
  $100 = HEAP32[$bbox>>2]|0;
  $arrayidx83 = ((($bbox)) + 4|0);
  $101 = HEAP32[$arrayidx83>>2]|0;
  $add84 = (($100) + ($101))|0;
  $div85 = (($add84|0) / 2)&-1;
  $102 = $sector;
  $soundorg86 = ((($102)) + 44|0);
  $y87 = ((($soundorg86)) + 16|0);
  HEAP32[$y87>>2] = $div85;
  $103 = HEAP32[$bbox>>2]|0;
  $104 = HEAP32[99857]|0;
  $sub = (($103) - ($104))|0;
  $add89 = (($sub) + 2097152)|0;
  $shr = $add89 >> 23;
  $block = $shr;
  $105 = $block;
  $106 = HEAP32[99859]|0;
  $cmp90 = ($105|0)>=($106|0);
  $107 = HEAP32[99859]|0;
  $sub91 = (($107) - 1)|0;
  $108 = $block;
  $cond = $cmp90 ? $sub91 : $108;
  $block = $cond;
  $109 = $block;
  $110 = $sector;
  $blockbox = ((($110)) + 28|0);
  HEAP32[$blockbox>>2] = $109;
  $arrayidx93 = ((($bbox)) + 4|0);
  $111 = HEAP32[$arrayidx93>>2]|0;
  $112 = HEAP32[99857]|0;
  $sub94 = (($111) - ($112))|0;
  $sub95 = (($sub94) - 2097152)|0;
  $shr96 = $sub95 >> 23;
  $block = $shr96;
  $113 = $block;
  $cmp97 = ($113|0)<(0);
  $114 = $block;
  $cond101 = $cmp97 ? 0 : $114;
  $block = $cond101;
  $115 = $block;
  $116 = $sector;
  $blockbox102 = ((($116)) + 28|0);
  $arrayidx103 = ((($blockbox102)) + 4|0);
  HEAP32[$arrayidx103>>2] = $115;
  $arrayidx104 = ((($bbox)) + 12|0);
  $117 = HEAP32[$arrayidx104>>2]|0;
  $118 = HEAP32[99856]|0;
  $sub105 = (($117) - ($118))|0;
  $add106 = (($sub105) + 2097152)|0;
  $shr107 = $add106 >> 23;
  $block = $shr107;
  $119 = $block;
  $120 = HEAP32[99858]|0;
  $cmp108 = ($119|0)>=($120|0);
  $121 = HEAP32[99858]|0;
  $sub110 = (($121) - 1)|0;
  $122 = $block;
  $cond113 = $cmp108 ? $sub110 : $122;
  $block = $cond113;
  $123 = $block;
  $124 = $sector;
  $blockbox114 = ((($124)) + 28|0);
  $arrayidx115 = ((($blockbox114)) + 12|0);
  HEAP32[$arrayidx115>>2] = $123;
  $arrayidx116 = ((($bbox)) + 8|0);
  $125 = HEAP32[$arrayidx116>>2]|0;
  $126 = HEAP32[99856]|0;
  $sub117 = (($125) - ($126))|0;
  $sub118 = (($sub117) - 2097152)|0;
  $shr119 = $sub118 >> 23;
  $block = $shr119;
  $127 = $block;
  $cmp120 = ($127|0)<(0);
  $128 = $block;
  $cond124 = $cmp120 ? 0 : $128;
  $block = $cond124;
  $129 = $block;
  $130 = $sector;
  $blockbox125 = ((($130)) + 28|0);
  $arrayidx126 = ((($blockbox125)) + 8|0);
  HEAP32[$arrayidx126>>2] = $129;
  $131 = $i;
  $inc128 = (($131) + 1)|0;
  $i = $inc128;
  $132 = $sector;
  $incdec$ptr129 = ((($132)) + 88|0);
  $sector = $incdec$ptr129;
 }
 STACKTOP = sp;return;
}
function _P_SetupLevel($episode,$map,$playermask,$skill) {
 $episode = $episode|0;
 $map = $map|0;
 $playermask = $playermask|0;
 $skill = $skill|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add13 = 0, $add20 = 0, $add21 = 0, $add22 = 0, $add23 = 0, $add24 = 0, $add25 = 0, $add26 = 0, $add27 = 0, $add28 = 0;
 var $add29 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $call19 = 0, $cmp = 0, $cmp32 = 0, $cmp4 = 0, $cmp5 = 0, $conv = 0, $conv14 = 0, $episode$addr = 0, $i = 0;
 var $inc = 0, $inc41 = 0, $itemcount = 0, $killcount = 0, $lumpname = 0, $lumpnum = 0, $map$addr = 0, $playermask$addr = 0, $secretcount = 0, $skill$addr = 0, $tobool = 0, $tobool36 = 0, $tobool44 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $viewz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lumpname = sp + 36|0;
 $episode$addr = $episode;
 $map$addr = $map;
 $playermask$addr = $playermask;
 $skill$addr = $skill;
 HEAP32[(397780)>>2] = 0;
 HEAP32[99490] = 0;
 HEAP32[99489] = 0;
 HEAP32[99488] = 0;
 HEAP32[(397784)>>2] = 180;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183056 + (($1*288)|0)|0);
  $itemcount = ((($arrayidx)) + 216|0);
  HEAP32[$itemcount>>2] = 0;
  $2 = $i;
  $arrayidx1 = (183056 + (($2*288)|0)|0);
  $secretcount = ((($arrayidx1)) + 220|0);
  HEAP32[$secretcount>>2] = 0;
  $3 = $i;
  $arrayidx2 = (183056 + (($3*288)|0)|0);
  $killcount = ((($arrayidx2)) + 212|0);
  HEAP32[$killcount>>2] = 0;
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 $5 = HEAP32[99415]|0;
 $arrayidx3 = (183056 + (($5*288)|0)|0);
 $viewz = ((($arrayidx3)) + 24|0);
 HEAP32[$viewz>>2] = 1;
 _S_Start();
 _Z_FreeTags(5,6);
 _P_InitThinkers();
 $6 = HEAP32[32168]|0;
 $cmp4 = ($6|0)==(2);
 do {
  if ($cmp4) {
   $7 = $map$addr;
   $cmp5 = ($7|0)<(10);
   $8 = $map$addr;
   if ($cmp5) {
    HEAP32[$vararg_buffer>>2] = $8;
    (_snprintf($lumpname,9,154860,$vararg_buffer)|0);
    break;
   } else {
    HEAP32[$vararg_buffer1>>2] = $8;
    (_snprintf($lumpname,9,154867,$vararg_buffer1)|0);
    break;
   }
  } else {
   HEAP8[$lumpname>>0] = 69;
   $9 = $episode$addr;
   $add = (48 + ($9))|0;
   $conv = $add&255;
   $arrayidx11 = ((($lumpname)) + 1|0);
   HEAP8[$arrayidx11>>0] = $conv;
   $arrayidx12 = ((($lumpname)) + 2|0);
   HEAP8[$arrayidx12>>0] = 77;
   $10 = $map$addr;
   $add13 = (48 + ($10))|0;
   $conv14 = $add13&255;
   $arrayidx15 = ((($lumpname)) + 3|0);
   HEAP8[$arrayidx15>>0] = $conv14;
   $arrayidx16 = ((($lumpname)) + 4|0);
   HEAP8[$arrayidx16>>0] = 0;
  }
 } while(0);
 $call19 = (_W_GetNumForName($lumpname)|0);
 $lumpnum = $call19;
 HEAP32[99905] = 0;
 $11 = $lumpnum;
 $add20 = (($11) + 10)|0;
 _P_LoadBlockMap($add20);
 $12 = $lumpnum;
 $add21 = (($12) + 4)|0;
 _P_LoadVertexes($add21);
 $13 = $lumpnum;
 $add22 = (($13) + 8)|0;
 _P_LoadSectors($add22);
 $14 = $lumpnum;
 $add23 = (($14) + 3)|0;
 _P_LoadSideDefs($add23);
 $15 = $lumpnum;
 $add24 = (($15) + 2)|0;
 _P_LoadLineDefs($add24);
 $16 = $lumpnum;
 $add25 = (($16) + 6)|0;
 _P_LoadSubsectors($add25);
 $17 = $lumpnum;
 $add26 = (($17) + 7)|0;
 _P_LoadNodes($add26);
 $18 = $lumpnum;
 $add27 = (($18) + 5)|0;
 _P_LoadSegs($add27);
 _P_GroupLines();
 $19 = $lumpnum;
 $add28 = (($19) + 9)|0;
 _P_LoadReject($add28);
 HEAP32[99436] = 0;
 HEAP32[99861] = 191936;
 $20 = $lumpnum;
 $add29 = (($20) + 1)|0;
 _P_LoadThings($add29);
 $21 = HEAP32[99430]|0;
 $tobool = ($21|0)!=(0);
 L12: do {
  if ($tobool) {
   $i = 0;
   while(1) {
    $22 = $i;
    $cmp32 = ($22|0)<(4);
    if (!($cmp32)) {
     break L12;
    }
    $23 = $i;
    $arrayidx35 = (183040 + ($23<<2)|0);
    $24 = HEAP32[$arrayidx35>>2]|0;
    $tobool36 = ($24|0)!=(0);
    if ($tobool36) {
     $25 = $i;
     $arrayidx38 = (183056 + (($25*288)|0)|0);
     HEAP32[$arrayidx38>>2] = 0;
     $26 = $i;
     _G_DeathMatchSpawnPlayer($26);
    }
    $27 = $i;
    $inc41 = (($27) + 1)|0;
    $i = $inc41;
   }
  }
 } while(0);
 HEAP32[99794] = 0;
 HEAP32[99793] = 0;
 _P_SpawnSpecials();
 $28 = HEAP32[32181]|0;
 $tobool44 = ($28|0)!=(0);
 if (!($tobool44)) {
  STACKTOP = sp;return;
 }
 _R_PrecacheLevel();
 STACKTOP = sp;return;
}
function _P_LoadReject($lumpnum) {
 $lumpnum = $lumpnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $div = 0;
 var $lumplen = 0, $lumpnum$addr = 0, $minlength = 0, $mul = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lumpnum$addr = $lumpnum;
 $0 = HEAP32[99849]|0;
 $1 = HEAP32[99849]|0;
 $mul = Math_imul($0, $1)|0;
 $add = (($mul) + 7)|0;
 $div = (($add|0) / 8)&-1;
 $minlength = $div;
 $2 = $lumpnum$addr;
 $call = (_W_LumpLength($2)|0);
 $lumplen = $call;
 $3 = $lumplen;
 $4 = $minlength;
 $cmp = ($3|0)>=($4|0);
 if ($cmp) {
  $5 = $lumpnum$addr;
  $call1 = (_W_CacheLumpNum($5,5)|0);
  HEAP32[99862] = $call1;
  STACKTOP = sp;return;
 } else {
  $6 = $minlength;
  $call2 = (_Z_Malloc($6,5,399448)|0);
  HEAP32[99862] = $call2;
  $7 = $lumpnum$addr;
  $8 = HEAP32[99862]|0;
  _W_ReadLump($7,$8);
  $9 = HEAP32[99862]|0;
  $10 = $lumplen;
  $add$ptr = (($9) + ($10)|0);
  $11 = $minlength;
  $12 = $lumplen;
  $sub = (($11) - ($12))|0;
  _PadRejectArray($add$ptr,$sub);
  STACKTOP = sp;return;
 }
}
function _PadRejectArray($array,$len) {
 $array = $array|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $add1 = 0, $and = 0, $and6 = 0, $array$addr = 0, $arrayidx = 0, $arrayinit$element = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $byte_num = 0, $call9 = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $conv = 0, $dest = 0, $div = 0, $i = 0, $inc = 0;
 var $incdec$ptr = 0, $len$addr = 0, $mul = 0, $mul5 = 0, $padvalue = 0, $rejectpad = 0, $rem = 0, $shr = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 16|0;
 $rejectpad = sp;
 $array$addr = $array;
 $len$addr = $len;
 $0 = HEAP32[99886]|0;
 $mul = $0<<2;
 $add = (($mul) + 3)|0;
 $and = $add & -4;
 $add1 = (($and) + 24)|0;
 HEAP32[$rejectpad>>2] = $add1;
 $arrayinit$element = ((($rejectpad)) + 4|0);
 HEAP32[$arrayinit$element>>2] = 0;
 $arrayinit$element2 = ((($arrayinit$element)) + 4|0);
 HEAP32[$arrayinit$element2>>2] = 50;
 $arrayinit$element3 = ((($arrayinit$element2)) + 4|0);
 HEAP32[$arrayinit$element3>>2] = 1919505;
 $1 = $array$addr;
 $dest = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $len$addr;
  $cmp = ($2>>>0)<($3>>>0);
  $4 = $i;
  $cmp4 = ($4>>>0)<(16);
  $5 = $cmp ? $cmp4 : 0;
  if (!($5)) {
   break;
  }
  $6 = $i;
  $rem = (($6>>>0) % 4)&-1;
  $byte_num = $rem;
  $7 = $i;
  $div = (($7>>>0) / 4)&-1;
  $arrayidx = (($rejectpad) + ($div<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $9 = $byte_num;
  $mul5 = $9<<3;
  $shr = $8 >>> $mul5;
  $and6 = $shr & 255;
  $conv = $and6&255;
  $10 = $dest;
  HEAP8[$10>>0] = $conv;
  $11 = $dest;
  $incdec$ptr = ((($11)) + 1|0);
  $dest = $incdec$ptr;
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $13 = $len$addr;
 $cmp7 = ($13>>>0)>(16);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[32479]|0;
 $15 = $len$addr;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 16;
 (_fprintf($14,154873,$vararg_buffer)|0);
 $call9 = (_M_CheckParm(154930)|0);
 $tobool = ($call9|0)!=(0);
 if ($tobool) {
  $padvalue = 255;
 } else {
  $padvalue = 3840;
 }
 $16 = $array$addr;
 $add$ptr = ((($16)) + 16|0);
 $17 = $padvalue;
 $18 = $17&255;
 $19 = $len$addr;
 $sub = (($19) - 16)|0;
 _memset(($add$ptr|0),($18|0),($sub|0))|0;
 STACKTOP = sp;return;
}
function _P_Init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _P_InitSwitchList();
 _P_InitPicAnims();
 _R_InitSprites(3008);
 return;
}
function _P_DivlineSide($x,$y,$node) {
 $x = $x|0;
 $y = $y|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp11 = 0, $cmp18 = 0, $cmp23 = 0, $cmp27 = 0;
 var $cmp31 = 0, $cmp43 = 0, $cmp47 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0, $conv12 = 0, $conv28 = 0, $conv32 = 0, $dx = 0, $dx1 = 0, $dx26 = 0, $dx40 = 0, $dy = 0, $dy14 = 0, $dy37 = 0, $dy7 = 0, $left = 0, $mul = 0, $mul42 = 0;
 var $node$addr = 0, $retval = 0, $right = 0, $shr = 0, $shr38 = 0, $shr39 = 0, $shr41 = 0, $sub = 0, $sub36 = 0, $tobool = 0, $tobool15 = 0, $x$addr = 0, $y$addr = 0, $y17 = 0, $y22 = 0, $y35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $node$addr = $node;
 $0 = $node$addr;
 $dx1 = ((($0)) + 8|0);
 $1 = HEAP32[$dx1>>2]|0;
 $tobool = ($1|0)!=(0);
 do {
  if ($tobool) {
   $10 = $node$addr;
   $dy14 = ((($10)) + 12|0);
   $11 = HEAP32[$dy14>>2]|0;
   $tobool15 = ($11|0)!=(0);
   $12 = $x$addr;
   $13 = $node$addr;
   if ($tobool15) {
    $20 = HEAP32[$13>>2]|0;
    $sub = (($12) - ($20))|0;
    $dx = $sub;
    $21 = $y$addr;
    $22 = $node$addr;
    $y35 = ((($22)) + 4|0);
    $23 = HEAP32[$y35>>2]|0;
    $sub36 = (($21) - ($23))|0;
    $dy = $sub36;
    $24 = $node$addr;
    $dy37 = ((($24)) + 12|0);
    $25 = HEAP32[$dy37>>2]|0;
    $shr = $25 >> 16;
    $26 = $dx;
    $shr38 = $26 >> 16;
    $mul = Math_imul($shr, $shr38)|0;
    $left = $mul;
    $27 = $dy;
    $shr39 = $27 >> 16;
    $28 = $node$addr;
    $dx40 = ((($28)) + 8|0);
    $29 = HEAP32[$dx40>>2]|0;
    $shr41 = $29 >> 16;
    $mul42 = Math_imul($shr39, $shr41)|0;
    $right = $mul42;
    $30 = $right;
    $31 = $left;
    $cmp43 = ($30|0)<($31|0);
    if ($cmp43) {
     $retval = 0;
     break;
    }
    $32 = $left;
    $33 = $right;
    $cmp47 = ($32|0)==($33|0);
    if ($cmp47) {
     $retval = 2;
     break;
    } else {
     $retval = 1;
     break;
    }
   } else {
    $y17 = ((($13)) + 4|0);
    $14 = HEAP32[$y17>>2]|0;
    $cmp18 = ($12|0)==($14|0);
    if ($cmp18) {
     $retval = 2;
     break;
    }
    $15 = $y$addr;
    $16 = $node$addr;
    $y22 = ((($16)) + 4|0);
    $17 = HEAP32[$y22>>2]|0;
    $cmp23 = ($15|0)<=($17|0);
    $18 = $node$addr;
    $dx26 = ((($18)) + 8|0);
    $19 = HEAP32[$dx26>>2]|0;
    if ($cmp23) {
     $cmp27 = ($19|0)<(0);
     $conv28 = $cmp27&1;
     $retval = $conv28;
     break;
    } else {
     $cmp31 = ($19|0)>(0);
     $conv32 = $cmp31&1;
     $retval = $conv32;
     break;
    }
   }
  } else {
   $2 = $x$addr;
   $3 = $node$addr;
   $4 = HEAP32[$3>>2]|0;
   $cmp = ($2|0)==($4|0);
   if ($cmp) {
    $retval = 2;
    break;
   }
   $5 = $x$addr;
   $6 = $node$addr;
   $7 = HEAP32[$6>>2]|0;
   $cmp5 = ($5|0)<=($7|0);
   $8 = $node$addr;
   $dy7 = ((($8)) + 12|0);
   $9 = HEAP32[$dy7>>2]|0;
   if ($cmp5) {
    $cmp8 = ($9|0)>(0);
    $conv = $cmp8&1;
    $retval = $conv;
    break;
   } else {
    $cmp11 = ($9|0)<(0);
    $conv12 = $cmp11&1;
    $retval = $conv12;
    break;
   }
  }
 } while(0);
 $34 = $retval;
 STACKTOP = sp;return ($34|0);
}
function _P_InterceptVector2($v2,$v1) {
 $v2 = $v2|0;
 $v1 = $v1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call14 = 0, $call15 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $den = 0, $dx = 0, $dx1 = 0, $dx13 = 0, $dy = 0, $dy3 = 0, $dy8 = 0, $frac = 0;
 var $num = 0, $retval = 0, $shr = 0, $shr12 = 0, $shr2 = 0, $shr7 = 0, $sub = 0, $sub11 = 0, $sub6 = 0, $v1$addr = 0, $v2$addr = 0, $y = 0, $y10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $v2$addr = $v2;
 $v1$addr = $v1;
 $0 = $v1$addr;
 $dy = ((($0)) + 12|0);
 $1 = HEAP32[$dy>>2]|0;
 $shr = $1 >> 8;
 $2 = $v2$addr;
 $dx = ((($2)) + 8|0);
 $3 = HEAP32[$dx>>2]|0;
 $call = (_FixedMul($shr,$3)|0);
 $4 = $v1$addr;
 $dx1 = ((($4)) + 8|0);
 $5 = HEAP32[$dx1>>2]|0;
 $shr2 = $5 >> 8;
 $6 = $v2$addr;
 $dy3 = ((($6)) + 12|0);
 $7 = HEAP32[$dy3>>2]|0;
 $call4 = (_FixedMul($shr2,$7)|0);
 $sub = (($call) - ($call4))|0;
 $den = $sub;
 $8 = $den;
 $cmp = ($8|0)==(0);
 if ($cmp) {
  $retval = 0;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 } else {
  $9 = $v1$addr;
  $10 = HEAP32[$9>>2]|0;
  $11 = $v2$addr;
  $12 = HEAP32[$11>>2]|0;
  $sub6 = (($10) - ($12))|0;
  $shr7 = $sub6 >> 8;
  $13 = $v1$addr;
  $dy8 = ((($13)) + 12|0);
  $14 = HEAP32[$dy8>>2]|0;
  $call9 = (_FixedMul($shr7,$14)|0);
  $15 = $v2$addr;
  $y = ((($15)) + 4|0);
  $16 = HEAP32[$y>>2]|0;
  $17 = $v1$addr;
  $y10 = ((($17)) + 4|0);
  $18 = HEAP32[$y10>>2]|0;
  $sub11 = (($16) - ($18))|0;
  $shr12 = $sub11 >> 8;
  $19 = $v1$addr;
  $dx13 = ((($19)) + 8|0);
  $20 = HEAP32[$dx13>>2]|0;
  $call14 = (_FixedMul($shr12,$20)|0);
  $add = (($call9) + ($call14))|0;
  $num = $add;
  $21 = $num;
  $22 = $den;
  $call15 = (_FixedDiv($21,$22)|0);
  $frac = $call15;
  $23 = $frac;
  $retval = $23;
  $24 = $retval;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _P_CrossSubsector($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and = 0, $arrayidx = 0, $arrayidx1 = 0, $back = 0, $backsector = 0, $backsector40 = 0, $call = 0, $call11 = 0, $call26 = 0, $call27 = 0;
 var $call70 = 0, $call77 = 0, $call89 = 0, $ceilingheight = 0, $ceilingheight44 = 0, $ceilingheight49 = 0, $ceilingheight50 = 0, $ceilingheight54 = 0, $ceilingheight55 = 0, $ceilingheight83 = 0, $ceilingheight84 = 0, $cmp = 0, $cmp12 = 0, $cmp2 = 0, $cmp28 = 0, $cmp32 = 0, $cmp42 = 0, $cmp45 = 0, $cmp51 = 0, $cmp59 = 0;
 var $cmp66 = 0, $cmp73 = 0, $cmp78 = 0, $cmp85 = 0, $cmp90 = 0, $cmp95 = 0, $conv = 0, $conv36 = 0, $count = 0, $dec = 0, $divl = 0, $dx = 0, $dy = 0, $firstline = 0, $flags = 0, $frac = 0, $front = 0, $frontsector = 0, $idxprom = 0, $incdec$ptr = 0;
 var $line = 0, $linedef = 0, $num$addr = 0, $numlines = 0, $openbottom = 0, $opentop = 0, $retval = 0, $s1 = 0, $s2 = 0, $seg = 0, $slope = 0, $sub = 0, $sub22 = 0, $sub25 = 0, $sub76 = 0, $sub88 = 0, $tobool = 0, $tobool37 = 0, $v1 = 0, $v2 = 0;
 var $v28 = 0, $validcount = 0, $validcount6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $y = 0, $y10 = 0, $y18 = 0, $y19 = 0, $y23 = 0, $y24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $divl = sp + 24|0;
 $num$addr = $num;
 $0 = $num$addr;
 $1 = HEAP32[99847]|0;
 $cmp = ($0|0)>=($1|0);
 if ($cmp) {
  $2 = $num$addr;
  $3 = HEAP32[99847]|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  _I_Error(154950,$vararg_buffer);
 }
 $4 = HEAP32[99848]|0;
 $5 = $num$addr;
 $arrayidx = (($4) + ($5<<3)|0);
 $sub = $arrayidx;
 $6 = $sub;
 $numlines = ((($6)) + 4|0);
 $7 = HEAP16[$numlines>>1]|0;
 $conv = $7 << 16 >> 16;
 $count = $conv;
 $8 = HEAP32[99843]|0;
 $9 = $sub;
 $firstline = ((($9)) + 6|0);
 $10 = HEAP16[$firstline>>1]|0;
 $idxprom = $10 << 16 >> 16;
 $arrayidx1 = (($8) + ($idxprom<<5)|0);
 $seg = $arrayidx1;
 L4: while(1) {
  $11 = $count;
  $tobool = ($11|0)!=(0);
  if (!($tobool)) {
   label = 31;
   break;
  }
  $12 = $seg;
  $linedef = ((($12)) + 20|0);
  $13 = HEAP32[$linedef>>2]|0;
  $line = $13;
  $14 = $line;
  $validcount = ((($14)) + 56|0);
  $15 = HEAP32[$validcount>>2]|0;
  $16 = HEAP32[32346]|0;
  $cmp2 = ($15|0)==($16|0);
  do {
   if (!($cmp2)) {
    $17 = HEAP32[32346]|0;
    $18 = $line;
    $validcount6 = ((($18)) + 56|0);
    HEAP32[$validcount6>>2] = $17;
    $19 = $line;
    $20 = HEAP32[$19>>2]|0;
    $v1 = $20;
    $21 = $line;
    $v28 = ((($21)) + 4|0);
    $22 = HEAP32[$v28>>2]|0;
    $v2 = $22;
    $23 = $v1;
    $24 = HEAP32[$23>>2]|0;
    $25 = $v1;
    $y = ((($25)) + 4|0);
    $26 = HEAP32[$y>>2]|0;
    $call = (_P_DivlineSide($24,$26,399548)|0);
    $s1 = $call;
    $27 = $v2;
    $28 = HEAP32[$27>>2]|0;
    $29 = $v2;
    $y10 = ((($29)) + 4|0);
    $30 = HEAP32[$y10>>2]|0;
    $call11 = (_P_DivlineSide($28,$30,399548)|0);
    $s2 = $call11;
    $31 = $s1;
    $32 = $s2;
    $cmp12 = ($31|0)==($32|0);
    if (!($cmp12)) {
     $33 = $v1;
     $34 = HEAP32[$33>>2]|0;
     HEAP32[$divl>>2] = $34;
     $35 = $v1;
     $y18 = ((($35)) + 4|0);
     $36 = HEAP32[$y18>>2]|0;
     $y19 = ((($divl)) + 4|0);
     HEAP32[$y19>>2] = $36;
     $37 = $v2;
     $38 = HEAP32[$37>>2]|0;
     $39 = $v1;
     $40 = HEAP32[$39>>2]|0;
     $sub22 = (($38) - ($40))|0;
     $dx = ((($divl)) + 8|0);
     HEAP32[$dx>>2] = $sub22;
     $41 = $v2;
     $y23 = ((($41)) + 4|0);
     $42 = HEAP32[$y23>>2]|0;
     $43 = $v1;
     $y24 = ((($43)) + 4|0);
     $44 = HEAP32[$y24>>2]|0;
     $sub25 = (($42) - ($44))|0;
     $dy = ((($divl)) + 12|0);
     HEAP32[$dy>>2] = $sub25;
     $45 = HEAP32[99887]|0;
     $46 = HEAP32[(399552)>>2]|0;
     $call26 = (_P_DivlineSide($45,$46,$divl)|0);
     $s1 = $call26;
     $47 = HEAP32[99891]|0;
     $48 = HEAP32[99892]|0;
     $call27 = (_P_DivlineSide($47,$48,$divl)|0);
     $s2 = $call27;
     $49 = $s1;
     $50 = $s2;
     $cmp28 = ($49|0)==($50|0);
     if (!($cmp28)) {
      $51 = $line;
      $backsector = ((($51)) + 52|0);
      $52 = HEAP32[$backsector>>2]|0;
      $cmp32 = ($52|0)==(0|0);
      if ($cmp32) {
       label = 9;
       break L4;
      }
      $53 = $line;
      $flags = ((($53)) + 16|0);
      $54 = HEAP16[$flags>>1]|0;
      $conv36 = $54 << 16 >> 16;
      $and = $conv36 & 4;
      $tobool37 = ($and|0)!=(0);
      if (!($tobool37)) {
       label = 11;
       break L4;
      }
      $55 = $seg;
      $frontsector = ((($55)) + 24|0);
      $56 = HEAP32[$frontsector>>2]|0;
      $front = $56;
      $57 = $seg;
      $backsector40 = ((($57)) + 28|0);
      $58 = HEAP32[$backsector40>>2]|0;
      $back = $58;
      $59 = $front;
      $60 = HEAP32[$59>>2]|0;
      $61 = $back;
      $62 = HEAP32[$61>>2]|0;
      $cmp42 = ($60|0)==($62|0);
      if ($cmp42) {
       $63 = $front;
       $ceilingheight = ((($63)) + 4|0);
       $64 = HEAP32[$ceilingheight>>2]|0;
       $65 = $back;
       $ceilingheight44 = ((($65)) + 4|0);
       $66 = HEAP32[$ceilingheight44>>2]|0;
       $cmp45 = ($64|0)==($66|0);
       if ($cmp45) {
        break;
       }
      }
      $67 = $front;
      $ceilingheight49 = ((($67)) + 4|0);
      $68 = HEAP32[$ceilingheight49>>2]|0;
      $69 = $back;
      $ceilingheight50 = ((($69)) + 4|0);
      $70 = HEAP32[$ceilingheight50>>2]|0;
      $cmp51 = ($68|0)<($70|0);
      if ($cmp51) {
       $71 = $front;
       $ceilingheight54 = ((($71)) + 4|0);
       $72 = HEAP32[$ceilingheight54>>2]|0;
       $opentop = $72;
      } else {
       $73 = $back;
       $ceilingheight55 = ((($73)) + 4|0);
       $74 = HEAP32[$ceilingheight55>>2]|0;
       $opentop = $74;
      }
      $75 = $front;
      $76 = HEAP32[$75>>2]|0;
      $77 = $back;
      $78 = HEAP32[$77>>2]|0;
      $cmp59 = ($76|0)>($78|0);
      if ($cmp59) {
       $79 = $front;
       $80 = HEAP32[$79>>2]|0;
       $openbottom = $80;
      } else {
       $81 = $back;
       $82 = HEAP32[$81>>2]|0;
       $openbottom = $82;
      }
      $83 = $openbottom;
      $84 = $opentop;
      $cmp66 = ($83|0)>=($84|0);
      if ($cmp66) {
       label = 21;
       break L4;
      }
      $call70 = (_P_InterceptVector2(399548,$divl)|0);
      $frac = $call70;
      $85 = $front;
      $86 = HEAP32[$85>>2]|0;
      $87 = $back;
      $88 = HEAP32[$87>>2]|0;
      $cmp73 = ($86|0)!=($88|0);
      if ($cmp73) {
       $89 = $openbottom;
       $90 = HEAP32[99893]|0;
       $sub76 = (($89) - ($90))|0;
       $91 = $frac;
       $call77 = (_FixedDiv($sub76,$91)|0);
       $slope = $call77;
       $92 = $slope;
       $93 = HEAP32[99894]|0;
       $cmp78 = ($92|0)>($93|0);
       if ($cmp78) {
        $94 = $slope;
        HEAP32[99894] = $94;
       }
      }
      $95 = $front;
      $ceilingheight83 = ((($95)) + 4|0);
      $96 = HEAP32[$ceilingheight83>>2]|0;
      $97 = $back;
      $ceilingheight84 = ((($97)) + 4|0);
      $98 = HEAP32[$ceilingheight84>>2]|0;
      $cmp85 = ($96|0)!=($98|0);
      if ($cmp85) {
       $99 = $opentop;
       $100 = HEAP32[99893]|0;
       $sub88 = (($99) - ($100))|0;
       $101 = $frac;
       $call89 = (_FixedDiv($sub88,$101)|0);
       $slope = $call89;
       $102 = $slope;
       $103 = HEAP32[99895]|0;
       $cmp90 = ($102|0)<($103|0);
       if ($cmp90) {
        $104 = $slope;
        HEAP32[99895] = $104;
       }
      }
      $105 = HEAP32[99895]|0;
      $106 = HEAP32[99894]|0;
      $cmp95 = ($105|0)<=($106|0);
      if ($cmp95) {
       label = 29;
       break L4;
      }
     }
    }
   }
  } while(0);
  $107 = $seg;
  $incdec$ptr = ((($107)) + 32|0);
  $seg = $incdec$ptr;
  $108 = $count;
  $dec = (($108) + -1)|0;
  $count = $dec;
 }
 if ((label|0) == 9) {
  $retval = 0;
  $109 = $retval;
  STACKTOP = sp;return ($109|0);
 }
 else if ((label|0) == 11) {
  $retval = 0;
  $109 = $retval;
  STACKTOP = sp;return ($109|0);
 }
 else if ((label|0) == 21) {
  $retval = 0;
  $109 = $retval;
  STACKTOP = sp;return ($109|0);
 }
 else if ((label|0) == 29) {
  $retval = 0;
  $109 = $retval;
  STACKTOP = sp;return ($109|0);
 }
 else if ((label|0) == 31) {
  $retval = 1;
  $109 = $retval;
  STACKTOP = sp;return ($109|0);
 }
 return (0)|0;
}
function _P_CrossBSPNode($bspnum) {
 $bspnum = $bspnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx8 = 0, $bsp = 0, $bspnum$addr = 0, $call = 0, $call13 = 0, $call21 = 0, $call3 = 0, $call4 = 0, $call9 = 0, $children = 0, $children18 = 0, $cmp = 0, $cmp14 = 0, $cmp5 = 0, $conv = 0, $conv20 = 0;
 var $retval = 0, $side = 0, $spec$store$select = 0, $tobool = 0, $tobool10 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $bspnum$addr = $bspnum;
 $0 = $bspnum$addr;
 $and = $0 & 32768;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $1 = $bspnum$addr;
  $cmp = ($1|0)==(-1);
  if ($cmp) {
   $call = (_P_CrossSubsector(0)|0);
   $retval = $call;
   $19 = $retval;
   STACKTOP = sp;return ($19|0);
  } else {
   $2 = $bspnum$addr;
   $and2 = $2 & -32769;
   $call3 = (_P_CrossSubsector($and2)|0);
   $retval = $call3;
   $19 = $retval;
   STACKTOP = sp;return ($19|0);
  }
 }
 $3 = HEAP32[99852]|0;
 $4 = $bspnum$addr;
 $arrayidx = (($3) + (($4*52)|0)|0);
 $bsp = $arrayidx;
 $5 = HEAP32[99887]|0;
 $6 = HEAP32[(399552)>>2]|0;
 $7 = $bsp;
 $call4 = (_P_DivlineSide($5,$6,$7)|0);
 $side = $call4;
 $8 = $side;
 $cmp5 = ($8|0)==(2);
 $spec$store$select = $cmp5 ? 0 : $call4;
 $side = $spec$store$select;
 $9 = $bsp;
 $children = ((($9)) + 48|0);
 $10 = $side;
 $arrayidx8 = (($children) + ($10<<1)|0);
 $11 = HEAP16[$arrayidx8>>1]|0;
 $conv = $11&65535;
 $call9 = (_P_CrossBSPNode($conv)|0);
 $tobool10 = ($call9|0)!=(0);
 if (!($tobool10)) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $side;
 $13 = HEAP32[99891]|0;
 $14 = HEAP32[99892]|0;
 $15 = $bsp;
 $call13 = (_P_DivlineSide($13,$14,$15)|0);
 $cmp14 = ($12|0)==($call13|0);
 if ($cmp14) {
  $retval = 1;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 } else {
  $16 = $bsp;
  $children18 = ((($16)) + 48|0);
  $17 = $side;
  $xor = $17 ^ 1;
  $arrayidx19 = (($children18) + ($xor<<1)|0);
  $18 = HEAP16[$arrayidx19>>1]|0;
  $conv20 = $18&65535;
  $call21 = (_P_CrossBSPNode($conv20)|0);
  $retval = $call21;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _P_CheckSight($t1,$t2) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add15 = 0, $and = 0, $and7 = 0, $arrayidx = 0, $bitnum = 0, $bytenum = 0;
 var $call = 0, $conv = 0, $height = 0, $height11 = 0, $height14 = 0, $inc = 0, $inc8 = 0, $inc9 = 0, $mul = 0, $pnum = 0, $retval = 0, $s1 = 0, $s2 = 0, $shl = 0, $shr = 0, $shr12 = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div6 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$lhs$cast3 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast4 = 0, $sub$ptr$sub = 0, $sub$ptr$sub5 = 0, $sub16 = 0, $sub18 = 0, $sub23 = 0, $sub26 = 0, $sub27 = 0, $subsector = 0, $subsector1 = 0, $t1$addr = 0, $t2$addr = 0, $tobool = 0, $x = 0, $x19 = 0, $x21 = 0, $x22 = 0, $y = 0;
 var $y20 = 0, $y24 = 0, $y25 = 0, $z = 0, $z13 = 0, $z17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $t1$addr = $t1;
 $t2$addr = $t2;
 $0 = $t1$addr;
 $subsector = ((($0)) + 52|0);
 $1 = HEAP32[$subsector>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
 $s1 = $sub$ptr$div;
 $4 = $t2$addr;
 $subsector1 = ((($4)) + 52|0);
 $5 = HEAP32[$subsector1>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[99850]|0;
 $sub$ptr$lhs$cast3 = $6;
 $sub$ptr$rhs$cast4 = $7;
 $sub$ptr$sub5 = (($sub$ptr$lhs$cast3) - ($sub$ptr$rhs$cast4))|0;
 $sub$ptr$div6 = (($sub$ptr$sub5|0) / 88)&-1;
 $s2 = $sub$ptr$div6;
 $8 = $s1;
 $9 = HEAP32[99849]|0;
 $mul = Math_imul($8, $9)|0;
 $10 = $s2;
 $add = (($mul) + ($10))|0;
 $pnum = $add;
 $11 = $pnum;
 $shr = $11 >> 3;
 $bytenum = $shr;
 $12 = $pnum;
 $and = $12 & 7;
 $shl = 1 << $and;
 $bitnum = $shl;
 $13 = HEAP32[99862]|0;
 $14 = $bytenum;
 $arrayidx = (($13) + ($14)|0);
 $15 = HEAP8[$arrayidx>>0]|0;
 $conv = $15&255;
 $16 = $bitnum;
 $and7 = $conv & $16;
 $tobool = ($and7|0)!=(0);
 if ($tobool) {
  $17 = HEAP32[100371]|0;
  $inc = (($17) + 1)|0;
  HEAP32[100371] = $inc;
  $retval = 0;
  $51 = $retval;
  STACKTOP = sp;return ($51|0);
 } else {
  $18 = HEAP32[100372]|0;
  $inc8 = (($18) + 1)|0;
  HEAP32[100372] = $inc8;
  $19 = HEAP32[32346]|0;
  $inc9 = (($19) + 1)|0;
  HEAP32[32346] = $inc9;
  $20 = $t1$addr;
  $z = ((($20)) + 20|0);
  $21 = HEAP32[$z>>2]|0;
  $22 = $t1$addr;
  $height = ((($22)) + 68|0);
  $23 = HEAP32[$height>>2]|0;
  $add10 = (($21) + ($23))|0;
  $24 = $t1$addr;
  $height11 = ((($24)) + 68|0);
  $25 = HEAP32[$height11>>2]|0;
  $shr12 = $25 >> 2;
  $sub = (($add10) - ($shr12))|0;
  HEAP32[99893] = $sub;
  $26 = $t2$addr;
  $z13 = ((($26)) + 20|0);
  $27 = HEAP32[$z13>>2]|0;
  $28 = $t2$addr;
  $height14 = ((($28)) + 68|0);
  $29 = HEAP32[$height14>>2]|0;
  $add15 = (($27) + ($29))|0;
  $30 = HEAP32[99893]|0;
  $sub16 = (($add15) - ($30))|0;
  HEAP32[99895] = $sub16;
  $31 = $t2$addr;
  $z17 = ((($31)) + 20|0);
  $32 = HEAP32[$z17>>2]|0;
  $33 = HEAP32[99893]|0;
  $sub18 = (($32) - ($33))|0;
  HEAP32[99894] = $sub18;
  $34 = $t1$addr;
  $x = ((($34)) + 12|0);
  $35 = HEAP32[$x>>2]|0;
  HEAP32[99887] = $35;
  $36 = $t1$addr;
  $y = ((($36)) + 16|0);
  $37 = HEAP32[$y>>2]|0;
  HEAP32[(399552)>>2] = $37;
  $38 = $t2$addr;
  $x19 = ((($38)) + 12|0);
  $39 = HEAP32[$x19>>2]|0;
  HEAP32[99891] = $39;
  $40 = $t2$addr;
  $y20 = ((($40)) + 16|0);
  $41 = HEAP32[$y20>>2]|0;
  HEAP32[99892] = $41;
  $42 = $t2$addr;
  $x21 = ((($42)) + 12|0);
  $43 = HEAP32[$x21>>2]|0;
  $44 = $t1$addr;
  $x22 = ((($44)) + 12|0);
  $45 = HEAP32[$x22>>2]|0;
  $sub23 = (($43) - ($45))|0;
  HEAP32[(399556)>>2] = $sub23;
  $46 = $t2$addr;
  $y24 = ((($46)) + 16|0);
  $47 = HEAP32[$y24>>2]|0;
  $48 = $t1$addr;
  $y25 = ((($48)) + 16|0);
  $49 = HEAP32[$y25>>2]|0;
  $sub26 = (($47) - ($49))|0;
  HEAP32[(399560)>>2] = $sub26;
  $50 = HEAP32[99851]|0;
  $sub27 = (($50) - 1)|0;
  $call = (_P_CrossBSPNode($sub27)|0);
  $retval = $call;
  $51 = $retval;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _P_InitPicAnims() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx21 = 0, $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx6 = 0, $basepic = 0;
 var $basepic19 = 0, $basepic25 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call16 = 0, $call18 = 0, $cmp = 0, $cmp13 = 0, $cmp27 = 0, $cmp8 = 0, $endname = 0, $endname4 = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $numpics = 0, $numpics26 = 0, $picnum = 0;
 var $picnum17 = 0, $picnum24 = 0, $speed = 0, $speed31 = 0, $startname = 0, $startname2 = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 HEAP32[99896] = 192096;
 $i = 0;
 while(1) {
  $0 = $i;
  $arrayidx = (49792 + (($0*28)|0)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $cmp = ($1|0)!=(-1);
  if (!($cmp)) {
   break;
  }
  $2 = $i;
  $arrayidx1 = (49792 + (($2*28)|0)|0);
  $startname2 = ((($arrayidx1)) + 13|0);
  $startname = $startname2;
  $3 = $i;
  $arrayidx3 = (49792 + (($3*28)|0)|0);
  $endname4 = ((($arrayidx3)) + 4|0);
  $endname = $endname4;
  $4 = $i;
  $arrayidx6 = (49792 + (($4*28)|0)|0);
  $5 = HEAP32[$arrayidx6>>2]|0;
  $tobool = ($5|0)!=(0);
  $6 = $startname;
  if ($tobool) {
   $call = (_R_CheckTextureNumForName($6)|0);
   $cmp8 = ($call|0)==(-1);
   if (!($cmp8)) {
    $7 = $endname;
    $call10 = (_R_TextureNumForName($7)|0);
    $8 = HEAP32[99896]|0;
    $picnum = ((($8)) + 4|0);
    HEAP32[$picnum>>2] = $call10;
    $9 = $startname;
    $call11 = (_R_TextureNumForName($9)|0);
    $10 = HEAP32[99896]|0;
    $basepic = ((($10)) + 8|0);
    HEAP32[$basepic>>2] = $call11;
    label = 8;
   }
  } else {
   $call12 = (_W_CheckNumForName($6)|0);
   $cmp13 = ($call12|0)==(-1);
   if (!($cmp13)) {
    $11 = $endname;
    $call16 = (_R_FlatNumForName($11)|0);
    $12 = HEAP32[99896]|0;
    $picnum17 = ((($12)) + 4|0);
    HEAP32[$picnum17>>2] = $call16;
    $13 = $startname;
    $call18 = (_R_FlatNumForName($13)|0);
    $14 = HEAP32[99896]|0;
    $basepic19 = ((($14)) + 8|0);
    HEAP32[$basepic19>>2] = $call18;
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $15 = $i;
   $arrayidx21 = (49792 + (($15*28)|0)|0);
   $16 = HEAP32[$arrayidx21>>2]|0;
   $17 = HEAP32[99896]|0;
   HEAP32[$17>>2] = $16;
   $18 = HEAP32[99896]|0;
   $picnum24 = ((($18)) + 4|0);
   $19 = HEAP32[$picnum24>>2]|0;
   $20 = HEAP32[99896]|0;
   $basepic25 = ((($20)) + 8|0);
   $21 = HEAP32[$basepic25>>2]|0;
   $sub = (($19) - ($21))|0;
   $add = (($sub) + 1)|0;
   $22 = HEAP32[99896]|0;
   $numpics = ((($22)) + 12|0);
   HEAP32[$numpics>>2] = $add;
   $23 = HEAP32[99896]|0;
   $numpics26 = ((($23)) + 12|0);
   $24 = HEAP32[$numpics26>>2]|0;
   $cmp27 = ($24|0)<(2);
   if ($cmp27) {
    $25 = $startname;
    $26 = $endname;
    HEAP32[$vararg_buffer>>2] = $25;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $26;
    _I_Error(154990,$vararg_buffer);
   }
   $27 = $i;
   $arrayidx30 = (49792 + (($27*28)|0)|0);
   $speed = ((($arrayidx30)) + 24|0);
   $28 = HEAP32[$speed>>2]|0;
   $29 = HEAP32[99896]|0;
   $speed31 = ((($29)) + 16|0);
   HEAP32[$speed31>>2] = $28;
   $30 = HEAP32[99896]|0;
   $incdec$ptr = ((($30)) + 20|0);
   HEAP32[99896] = $incdec$ptr;
  }
  $31 = $i;
  $inc = (($31) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _getSide($currentSector,$line,$side) {
 $currentSector = $currentSector|0;
 $line = $line|0;
 $side = $side|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $currentSector$addr = 0, $idxprom = 0, $line$addr = 0, $lines = 0, $side$addr = 0, $sidenum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $currentSector$addr = $currentSector;
 $line$addr = $line;
 $side$addr = $side;
 $0 = HEAP32[99845]|0;
 $1 = HEAP32[99850]|0;
 $2 = $currentSector$addr;
 $arrayidx = (($1) + (($2*88)|0)|0);
 $lines = ((($arrayidx)) + 84|0);
 $3 = HEAP32[$lines>>2]|0;
 $4 = $line$addr;
 $arrayidx1 = (($3) + ($4<<2)|0);
 $5 = HEAP32[$arrayidx1>>2]|0;
 $sidenum = ((($5)) + 22|0);
 $6 = $side$addr;
 $arrayidx2 = (($sidenum) + ($6<<1)|0);
 $7 = HEAP16[$arrayidx2>>1]|0;
 $idxprom = $7 << 16 >> 16;
 $arrayidx3 = (($0) + (($idxprom*20)|0)|0);
 STACKTOP = sp;return ($arrayidx3|0);
}
function _getSector($currentSector,$line,$side) {
 $currentSector = $currentSector|0;
 $line = $line|0;
 $side = $side|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $currentSector$addr = 0, $idxprom = 0, $line$addr = 0, $lines = 0, $sector = 0, $side$addr = 0, $sidenum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $currentSector$addr = $currentSector;
 $line$addr = $line;
 $side$addr = $side;
 $0 = HEAP32[99845]|0;
 $1 = HEAP32[99850]|0;
 $2 = $currentSector$addr;
 $arrayidx = (($1) + (($2*88)|0)|0);
 $lines = ((($arrayidx)) + 84|0);
 $3 = HEAP32[$lines>>2]|0;
 $4 = $line$addr;
 $arrayidx1 = (($3) + ($4<<2)|0);
 $5 = HEAP32[$arrayidx1>>2]|0;
 $sidenum = ((($5)) + 22|0);
 $6 = $side$addr;
 $arrayidx2 = (($sidenum) + ($6<<1)|0);
 $7 = HEAP16[$arrayidx2>>1]|0;
 $idxprom = $7 << 16 >> 16;
 $arrayidx3 = (($0) + (($idxprom*20)|0)|0);
 $sector = ((($arrayidx3)) + 16|0);
 $8 = HEAP32[$sector>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _twoSided($sector,$line) {
 $sector = $sector|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $arrayidx = 0, $arrayidx1 = 0, $conv = 0, $flags = 0, $line$addr = 0, $lines = 0, $sector$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sector$addr = $sector;
 $line$addr = $line;
 $0 = HEAP32[99850]|0;
 $1 = $sector$addr;
 $arrayidx = (($0) + (($1*88)|0)|0);
 $lines = ((($arrayidx)) + 84|0);
 $2 = HEAP32[$lines>>2]|0;
 $3 = $line$addr;
 $arrayidx1 = (($2) + ($3<<2)|0);
 $4 = HEAP32[$arrayidx1>>2]|0;
 $flags = ((($4)) + 16|0);
 $5 = HEAP16[$flags>>1]|0;
 $conv = $5 << 16 >> 16;
 $and = $conv & 4;
 STACKTOP = sp;return ($and|0);
}
function _getNextSector($line,$sec) {
 $line = $line|0;
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $backsector = 0, $cmp = 0, $conv = 0, $flags = 0, $frontsector = 0, $frontsector4 = 0, $line$addr = 0, $retval = 0, $sec$addr = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $line$addr = $line;
 $sec$addr = $sec;
 $0 = $line$addr;
 $flags = ((($0)) + 16|0);
 $1 = HEAP16[$flags>>1]|0;
 $conv = $1 << 16 >> 16;
 $and = $conv & 4;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 $2 = $line$addr;
 $frontsector = ((($2)) + 48|0);
 $3 = HEAP32[$frontsector>>2]|0;
 $4 = $sec$addr;
 $cmp = ($3|0)==($4|0);
 $5 = $line$addr;
 if ($cmp) {
  $backsector = ((($5)) + 52|0);
  $6 = HEAP32[$backsector>>2]|0;
  $retval = $6;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 } else {
  $frontsector4 = ((($5)) + 48|0);
  $7 = HEAP32[$frontsector4>>2]|0;
  $retval = $7;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _P_FindLowestFloorSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $call = 0, $check = 0, $cmp = 0, $cmp2 = 0, $floor = 0, $i = 0, $inc = 0, $linecount = 0, $lines = 0, $other = 0, $sec$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $sec$addr = $sec;
 $0 = $sec$addr;
 $1 = HEAP32[$0>>2]|0;
 $floor = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $sec$addr;
  $linecount = ((($3)) + 80|0);
  $4 = HEAP32[$linecount>>2]|0;
  $cmp = ($2|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $sec$addr;
  $lines = ((($5)) + 84|0);
  $6 = HEAP32[$lines>>2]|0;
  $7 = $i;
  $arrayidx = (($6) + ($7<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $check = $8;
  $9 = $check;
  $10 = $sec$addr;
  $call = (_getNextSector($9,$10)|0);
  $other = $call;
  $11 = $other;
  $tobool = ($11|0)!=(0|0);
  if ($tobool) {
   $12 = $other;
   $13 = HEAP32[$12>>2]|0;
   $14 = $floor;
   $cmp2 = ($13|0)<($14|0);
   if ($cmp2) {
    $15 = $other;
    $16 = HEAP32[$15>>2]|0;
    $floor = $16;
   }
  }
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 $18 = $floor;
 STACKTOP = sp;return ($18|0);
}
function _P_FindHighestFloorSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $check = 0;
 var $cmp = 0, $cmp1 = 0, $floor = 0, $i = 0, $inc = 0, $linecount = 0, $lines = 0, $other = 0, $sec$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $sec$addr = $sec;
 $floor = -32768000;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $sec$addr;
  $linecount = ((($1)) + 80|0);
  $2 = HEAP32[$linecount>>2]|0;
  $cmp = ($0|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sec$addr;
  $lines = ((($3)) + 84|0);
  $4 = HEAP32[$lines>>2]|0;
  $5 = $i;
  $arrayidx = (($4) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $check = $6;
  $7 = $check;
  $8 = $sec$addr;
  $call = (_getNextSector($7,$8)|0);
  $other = $call;
  $9 = $other;
  $tobool = ($9|0)!=(0|0);
  if ($tobool) {
   $10 = $other;
   $11 = HEAP32[$10>>2]|0;
   $12 = $floor;
   $cmp1 = ($11|0)>($12|0);
   if ($cmp1) {
    $13 = $other;
    $14 = HEAP32[$13>>2]|0;
    $floor = $14;
   }
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 $16 = $floor;
 STACKTOP = sp;return ($16|0);
}
function _P_FindNextHighestFloor($sec,$currentheight) {
 $sec = $sec|0;
 $currentheight = $currentheight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx21 = 0, $arrayidx24 = 0, $call = 0;
 var $check = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $cmp22 = 0, $cmp3 = 0, $cmp6 = 0, $currentheight$addr = 0, $h = 0, $height = 0, $heightlist = 0, $i = 0, $inc = 0, $inc13 = 0, $inc27 = 0, $linecount = 0, $lines = 0, $min = 0, $other = 0, $retval = 0;
 var $sec$addr = 0, $tobool = 0, $tobool14 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer = sp + 88|0;
 $heightlist = sp;
 $sec$addr = $sec;
 $currentheight$addr = $currentheight;
 $0 = $currentheight$addr;
 $height = $0;
 $i = 0;
 $h = 0;
 while(1) {
  $1 = $i;
  $2 = $sec$addr;
  $linecount = ((($2)) + 80|0);
  $3 = HEAP32[$linecount>>2]|0;
  $cmp = ($1|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $sec$addr;
  $lines = ((($4)) + 84|0);
  $5 = HEAP32[$lines>>2]|0;
  $6 = $i;
  $arrayidx = (($5) + ($6<<2)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $check = $7;
  $8 = $check;
  $9 = $sec$addr;
  $call = (_getNextSector($8,$9)|0);
  $other = $call;
  $10 = $other;
  $tobool = ($10|0)!=(0|0);
  if ($tobool) {
   $11 = $other;
   $12 = HEAP32[$11>>2]|0;
   $13 = $height;
   $cmp1 = ($12|0)>($13|0);
   if ($cmp1) {
    $14 = $h;
    $cmp3 = ($14|0)==(21);
    if ($cmp3) {
     $15 = $other;
     $16 = HEAP32[$15>>2]|0;
     $height = $16;
    } else {
     $17 = $h;
     $cmp6 = ($17|0)==(22);
     if ($cmp6) {
      _I_Error(155030,$vararg_buffer);
     }
    }
    $18 = $other;
    $19 = HEAP32[$18>>2]|0;
    $20 = $h;
    $inc = (($20) + 1)|0;
    $h = $inc;
    $arrayidx11 = (($heightlist) + ($20<<2)|0);
    HEAP32[$arrayidx11>>2] = $19;
   }
  }
  $21 = $i;
  $inc13 = (($21) + 1)|0;
  $i = $inc13;
 }
 $22 = $h;
 $tobool14 = ($22|0)!=(0);
 if (!($tobool14)) {
  $23 = $currentheight$addr;
  $retval = $23;
  $34 = $retval;
  STACKTOP = sp;return ($34|0);
 }
 $24 = HEAP32[$heightlist>>2]|0;
 $min = $24;
 $i = 1;
 while(1) {
  $25 = $i;
  $26 = $h;
  $cmp19 = ($25|0)<($26|0);
  if (!($cmp19)) {
   break;
  }
  $27 = $i;
  $arrayidx21 = (($heightlist) + ($27<<2)|0);
  $28 = HEAP32[$arrayidx21>>2]|0;
  $29 = $min;
  $cmp22 = ($28|0)<($29|0);
  if ($cmp22) {
   $30 = $i;
   $arrayidx24 = (($heightlist) + ($30<<2)|0);
   $31 = HEAP32[$arrayidx24>>2]|0;
   $min = $31;
  }
  $32 = $i;
  $inc27 = (($32) + 1)|0;
  $i = $inc27;
 }
 $33 = $min;
 $retval = $33;
 $34 = $retval;
 STACKTOP = sp;return ($34|0);
}
function _P_FindLowestCeilingSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $ceilingheight = 0;
 var $ceilingheight3 = 0, $check = 0, $cmp = 0, $cmp1 = 0, $height = 0, $i = 0, $inc = 0, $linecount = 0, $lines = 0, $other = 0, $sec$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $sec$addr = $sec;
 $height = 2147483647;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $sec$addr;
  $linecount = ((($1)) + 80|0);
  $2 = HEAP32[$linecount>>2]|0;
  $cmp = ($0|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sec$addr;
  $lines = ((($3)) + 84|0);
  $4 = HEAP32[$lines>>2]|0;
  $5 = $i;
  $arrayidx = (($4) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $check = $6;
  $7 = $check;
  $8 = $sec$addr;
  $call = (_getNextSector($7,$8)|0);
  $other = $call;
  $9 = $other;
  $tobool = ($9|0)!=(0|0);
  if ($tobool) {
   $10 = $other;
   $ceilingheight = ((($10)) + 4|0);
   $11 = HEAP32[$ceilingheight>>2]|0;
   $12 = $height;
   $cmp1 = ($11|0)<($12|0);
   if ($cmp1) {
    $13 = $other;
    $ceilingheight3 = ((($13)) + 4|0);
    $14 = HEAP32[$ceilingheight3>>2]|0;
    $height = $14;
   }
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 $16 = $height;
 STACKTOP = sp;return ($16|0);
}
function _P_FindHighestCeilingSurrounding($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $ceilingheight = 0;
 var $ceilingheight3 = 0, $check = 0, $cmp = 0, $cmp1 = 0, $height = 0, $i = 0, $inc = 0, $linecount = 0, $lines = 0, $other = 0, $sec$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $sec$addr = $sec;
 $height = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $sec$addr;
  $linecount = ((($1)) + 80|0);
  $2 = HEAP32[$linecount>>2]|0;
  $cmp = ($0|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sec$addr;
  $lines = ((($3)) + 84|0);
  $4 = HEAP32[$lines>>2]|0;
  $5 = $i;
  $arrayidx = (($4) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $check = $6;
  $7 = $check;
  $8 = $sec$addr;
  $call = (_getNextSector($7,$8)|0);
  $other = $call;
  $9 = $other;
  $tobool = ($9|0)!=(0|0);
  if ($tobool) {
   $10 = $other;
   $ceilingheight = ((($10)) + 4|0);
   $11 = HEAP32[$ceilingheight>>2]|0;
   $12 = $height;
   $cmp1 = ($11|0)>($12|0);
   if ($cmp1) {
    $13 = $other;
    $ceilingheight3 = ((($13)) + 4|0);
    $14 = HEAP32[$ceilingheight3>>2]|0;
    $height = $14;
   }
  }
  $15 = $i;
  $inc = (($15) + 1)|0;
  $i = $inc;
 }
 $16 = $height;
 STACKTOP = sp;return ($16|0);
}
function _P_FindSectorFromLineTag($line,$start) {
 $line = $line|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $cmp = 0, $cmp3 = 0, $conv = 0, $conv2 = 0, $i = 0, $inc = 0, $line$addr = 0, $retval = 0;
 var $start$addr = 0, $tag = 0, $tag1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $line$addr = $line;
 $start$addr = $start;
 $0 = $start$addr;
 $add = (($0) + 1)|0;
 $i = $add;
 while(1) {
  $1 = $i;
  $2 = HEAP32[99849]|0;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = HEAP32[99850]|0;
  $4 = $i;
  $arrayidx = (($3) + (($4*88)|0)|0);
  $tag = ((($arrayidx)) + 16|0);
  $5 = HEAP16[$tag>>1]|0;
  $conv = $5 << 16 >> 16;
  $6 = $line$addr;
  $tag1 = ((($6)) + 20|0);
  $7 = HEAP16[$tag1>>1]|0;
  $conv2 = $7 << 16 >> 16;
  $cmp3 = ($conv|0)==($conv2|0);
  $8 = $i;
  if ($cmp3) {
   label = 4;
   break;
  }
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $retval = $8;
  $9 = $retval;
  STACKTOP = sp;return ($9|0);
 }
 else if ((label|0) == 6) {
  $retval = -1;
  $9 = $retval;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _P_FindMinSurroundingLight($sector,$max) {
 $sector = $sector|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0;
 var $check = 0, $cmp = 0, $cmp1 = 0, $conv = 0, $conv5 = 0, $i = 0, $inc = 0, $lightlevel = 0, $lightlevel4 = 0, $line = 0, $linecount = 0, $lines = 0, $max$addr = 0, $min = 0, $sector$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $sector$addr = $sector;
 $max$addr = $max;
 $0 = $max$addr;
 $min = $0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $sector$addr;
  $linecount = ((($2)) + 80|0);
  $3 = HEAP32[$linecount>>2]|0;
  $cmp = ($1|0)<($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $sector$addr;
  $lines = ((($4)) + 84|0);
  $5 = HEAP32[$lines>>2]|0;
  $6 = $i;
  $arrayidx = (($5) + ($6<<2)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $line = $7;
  $8 = $line;
  $9 = $sector$addr;
  $call = (_getNextSector($8,$9)|0);
  $check = $call;
  $10 = $check;
  $tobool = ($10|0)!=(0|0);
  if ($tobool) {
   $11 = $check;
   $lightlevel = ((($11)) + 12|0);
   $12 = HEAP16[$lightlevel>>1]|0;
   $conv = $12 << 16 >> 16;
   $13 = $min;
   $cmp1 = ($conv|0)<($13|0);
   if ($cmp1) {
    $14 = $check;
    $lightlevel4 = ((($14)) + 12|0);
    $15 = HEAP16[$lightlevel4>>1]|0;
    $conv5 = $15 << 16 >> 16;
    $min = $conv5;
   }
  }
  $16 = $i;
  $inc = (($16) + 1)|0;
  $i = $inc;
 }
 $17 = $min;
 STACKTOP = sp;return ($17|0);
}
function _P_CrossSpecialLine($linenum,$side,$thing) {
 $linenum = $linenum|0;
 $side = $side|0;
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx = 0, $conv = 0, $conv7 = 0, $line = 0, $linenum$addr = 0, $ok = 0, $player = 0, $player110 = 0;
 var $player177 = 0, $side$addr = 0, $special = 0, $special101 = 0, $special104 = 0, $special107 = 0, $special114 = 0, $special118 = 0, $special12 = 0, $special121 = 0, $special15 = 0, $special18 = 0, $special21 = 0, $special24 = 0, $special27 = 0, $special29 = 0, $special31 = 0, $special34 = 0, $special36 = 0, $special39 = 0;
 var $special42 = 0, $special45 = 0, $special48 = 0, $special50 = 0, $special53 = 0, $special56 = 0, $special59 = 0, $special6 = 0, $special62 = 0, $special66 = 0, $special69 = 0, $special73 = 0, $special75 = 0, $special78 = 0, $special81 = 0, $special84 = 0, $special87 = 0, $special89 = 0, $special9 = 0, $special92 = 0;
 var $special95 = 0, $special98 = 0, $thing$addr = 0, $tobool = 0, $tobool111 = 0, $tobool178 = 0, $tobool3 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $linenum$addr = $linenum;
 $side$addr = $side;
 $thing$addr = $thing;
 $0 = HEAP32[99844]|0;
 $1 = $linenum$addr;
 $arrayidx = (($0) + ($1<<6)|0);
 $line = $arrayidx;
 $2 = $thing$addr;
 $player = ((($2)) + 132|0);
 $3 = HEAP32[$player>>2]|0;
 $tobool = ($3|0)!=(0|0);
 L1: do {
  if ($tobool) {
   label = 6;
  } else {
   $4 = $thing$addr;
   $type = ((($4)) + 88|0);
   $5 = HEAP32[$type>>2]|0;
   switch ($5|0) {
   case 16: case 32: case 31: case 35: case 34: case 33:  {
    break L1;
    break;
   }
   default: {
   }
   }
   $ok = 0;
   $6 = $line;
   $special = ((($6)) + 18|0);
   $7 = HEAP16[$special>>1]|0;
   $conv = $7 << 16 >> 16;
   switch ($conv|0) {
   case 88: case 10: case 4: case 126: case 125: case 97: case 39:  {
    $ok = 1;
    break;
   }
   default: {
   }
   }
   $8 = $ok;
   $tobool3 = ($8|0)!=(0);
   if ($tobool3) {
    label = 6;
   }
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   $9 = $line;
   $special6 = ((($9)) + 18|0);
   $10 = HEAP16[$special6>>1]|0;
   $conv7 = $10 << 16 >> 16;
   do {
    switch ($conv7|0) {
    case 2:  {
     $11 = $line;
     (_EV_DoDoor($11,3)|0);
     $12 = $line;
     $special9 = ((($12)) + 18|0);
     HEAP16[$special9>>1] = 0;
     break L7;
     break;
    }
    case 3:  {
     $13 = $line;
     (_EV_DoDoor($13,2)|0);
     $14 = $line;
     $special12 = ((($14)) + 18|0);
     HEAP16[$special12>>1] = 0;
     break L7;
     break;
    }
    case 4:  {
     $15 = $line;
     (_EV_DoDoor($15,0)|0);
     $16 = $line;
     $special15 = ((($16)) + 18|0);
     HEAP16[$special15>>1] = 0;
     break L7;
     break;
    }
    case 5:  {
     $17 = $line;
     (_EV_DoFloor($17,3)|0);
     $18 = $line;
     $special18 = ((($18)) + 18|0);
     HEAP16[$special18>>1] = 0;
     break L7;
     break;
    }
    case 6:  {
     $19 = $line;
     (_EV_DoCeiling($19,4)|0);
     $20 = $line;
     $special21 = ((($20)) + 18|0);
     HEAP16[$special21>>1] = 0;
     break L7;
     break;
    }
    case 8:  {
     $21 = $line;
     (_EV_BuildStairs($21,0)|0);
     $22 = $line;
     $special24 = ((($22)) + 18|0);
     HEAP16[$special24>>1] = 0;
     break L7;
     break;
    }
    case 10:  {
     $23 = $line;
     (_EV_DoPlat($23,1,0)|0);
     $24 = $line;
     $special27 = ((($24)) + 18|0);
     HEAP16[$special27>>1] = 0;
     break L7;
     break;
    }
    case 12:  {
     $25 = $line;
     _EV_LightTurnOn($25,0);
     $26 = $line;
     $special29 = ((($26)) + 18|0);
     HEAP16[$special29>>1] = 0;
     break L7;
     break;
    }
    case 13:  {
     $27 = $line;
     _EV_LightTurnOn($27,255);
     $28 = $line;
     $special31 = ((($28)) + 18|0);
     HEAP16[$special31>>1] = 0;
     break L7;
     break;
    }
    case 16:  {
     $29 = $line;
     (_EV_DoDoor($29,1)|0);
     $30 = $line;
     $special34 = ((($30)) + 18|0);
     HEAP16[$special34>>1] = 0;
     break L7;
     break;
    }
    case 17:  {
     $31 = $line;
     _EV_StartLightStrobing($31);
     $32 = $line;
     $special36 = ((($32)) + 18|0);
     HEAP16[$special36>>1] = 0;
     break L7;
     break;
    }
    case 19:  {
     $33 = $line;
     (_EV_DoFloor($33,0)|0);
     $34 = $line;
     $special39 = ((($34)) + 18|0);
     HEAP16[$special39>>1] = 0;
     break L7;
     break;
    }
    case 22:  {
     $35 = $line;
     (_EV_DoPlat($35,3,0)|0);
     $36 = $line;
     $special42 = ((($36)) + 18|0);
     HEAP16[$special42>>1] = 0;
     break L7;
     break;
    }
    case 25:  {
     $37 = $line;
     (_EV_DoCeiling($37,3)|0);
     $38 = $line;
     $special45 = ((($38)) + 18|0);
     HEAP16[$special45>>1] = 0;
     break L7;
     break;
    }
    case 30:  {
     $39 = $line;
     (_EV_DoFloor($39,5)|0);
     $40 = $line;
     $special48 = ((($40)) + 18|0);
     HEAP16[$special48>>1] = 0;
     break L7;
     break;
    }
    case 35:  {
     $41 = $line;
     _EV_LightTurnOn($41,35);
     $42 = $line;
     $special50 = ((($42)) + 18|0);
     HEAP16[$special50>>1] = 0;
     break L7;
     break;
    }
    case 36:  {
     $43 = $line;
     (_EV_DoFloor($43,2)|0);
     $44 = $line;
     $special53 = ((($44)) + 18|0);
     HEAP16[$special53>>1] = 0;
     break L7;
     break;
    }
    case 37:  {
     $45 = $line;
     (_EV_DoFloor($45,6)|0);
     $46 = $line;
     $special56 = ((($46)) + 18|0);
     HEAP16[$special56>>1] = 0;
     break L7;
     break;
    }
    case 38:  {
     $47 = $line;
     (_EV_DoFloor($47,1)|0);
     $48 = $line;
     $special59 = ((($48)) + 18|0);
     HEAP16[$special59>>1] = 0;
     break L7;
     break;
    }
    case 39:  {
     $49 = $line;
     $50 = $side$addr;
     $51 = $thing$addr;
     (_EV_Teleport($49,$50,$51)|0);
     $52 = $line;
     $special62 = ((($52)) + 18|0);
     HEAP16[$special62>>1] = 0;
     break L7;
     break;
    }
    case 40:  {
     $53 = $line;
     (_EV_DoCeiling($53,1)|0);
     $54 = $line;
     (_EV_DoFloor($54,1)|0);
     $55 = $line;
     $special66 = ((($55)) + 18|0);
     HEAP16[$special66>>1] = 0;
     break L7;
     break;
    }
    case 44:  {
     $56 = $line;
     (_EV_DoCeiling($56,2)|0);
     $57 = $line;
     $special69 = ((($57)) + 18|0);
     HEAP16[$special69>>1] = 0;
     break L7;
     break;
    }
    case 52:  {
     _G_ExitLevel();
     break L7;
     break;
    }
    case 53:  {
     $58 = $line;
     (_EV_DoPlat($58,0,0)|0);
     $59 = $line;
     $special73 = ((($59)) + 18|0);
     HEAP16[$special73>>1] = 0;
     break L7;
     break;
    }
    case 54:  {
     $60 = $line;
     _EV_StopPlat($60);
     $61 = $line;
     $special75 = ((($61)) + 18|0);
     HEAP16[$special75>>1] = 0;
     break L7;
     break;
    }
    case 56:  {
     $62 = $line;
     (_EV_DoFloor($62,9)|0);
     $63 = $line;
     $special78 = ((($63)) + 18|0);
     HEAP16[$special78>>1] = 0;
     break L7;
     break;
    }
    case 57:  {
     $64 = $line;
     (_EV_CeilingCrushStop($64)|0);
     $65 = $line;
     $special81 = ((($65)) + 18|0);
     HEAP16[$special81>>1] = 0;
     break L7;
     break;
    }
    case 58:  {
     $66 = $line;
     (_EV_DoFloor($66,7)|0);
     $67 = $line;
     $special84 = ((($67)) + 18|0);
     HEAP16[$special84>>1] = 0;
     break L7;
     break;
    }
    case 59:  {
     $68 = $line;
     (_EV_DoFloor($68,8)|0);
     $69 = $line;
     $special87 = ((($69)) + 18|0);
     HEAP16[$special87>>1] = 0;
     break L7;
     break;
    }
    case 104:  {
     $70 = $line;
     _EV_TurnTagLightsOff($70);
     $71 = $line;
     $special89 = ((($71)) + 18|0);
     HEAP16[$special89>>1] = 0;
     break L7;
     break;
    }
    case 108:  {
     $72 = $line;
     (_EV_DoDoor($72,5)|0);
     $73 = $line;
     $special92 = ((($73)) + 18|0);
     HEAP16[$special92>>1] = 0;
     break L7;
     break;
    }
    case 109:  {
     $74 = $line;
     (_EV_DoDoor($74,6)|0);
     $75 = $line;
     $special95 = ((($75)) + 18|0);
     HEAP16[$special95>>1] = 0;
     break L7;
     break;
    }
    case 100:  {
     $76 = $line;
     (_EV_BuildStairs($76,1)|0);
     $77 = $line;
     $special98 = ((($77)) + 18|0);
     HEAP16[$special98>>1] = 0;
     break L7;
     break;
    }
    case 110:  {
     $78 = $line;
     (_EV_DoDoor($78,7)|0);
     $79 = $line;
     $special101 = ((($79)) + 18|0);
     HEAP16[$special101>>1] = 0;
     break L7;
     break;
    }
    case 119:  {
     $80 = $line;
     (_EV_DoFloor($80,4)|0);
     $81 = $line;
     $special104 = ((($81)) + 18|0);
     HEAP16[$special104>>1] = 0;
     break L7;
     break;
    }
    case 121:  {
     $82 = $line;
     (_EV_DoPlat($82,4,0)|0);
     $83 = $line;
     $special107 = ((($83)) + 18|0);
     HEAP16[$special107>>1] = 0;
     break L7;
     break;
    }
    case 124:  {
     _G_SecretExitLevel();
     break L7;
     break;
    }
    case 125:  {
     $84 = $thing$addr;
     $player110 = ((($84)) + 132|0);
     $85 = HEAP32[$player110>>2]|0;
     $tobool111 = ($85|0)!=(0|0);
     if ($tobool111) {
      break L7;
     }
     $86 = $line;
     $87 = $side$addr;
     $88 = $thing$addr;
     (_EV_Teleport($86,$87,$88)|0);
     $89 = $line;
     $special114 = ((($89)) + 18|0);
     HEAP16[$special114>>1] = 0;
     break L7;
     break;
    }
    case 130:  {
     $90 = $line;
     (_EV_DoFloor($90,10)|0);
     $91 = $line;
     $special118 = ((($91)) + 18|0);
     HEAP16[$special118>>1] = 0;
     break L7;
     break;
    }
    case 141:  {
     $92 = $line;
     (_EV_DoCeiling($92,5)|0);
     $93 = $line;
     $special121 = ((($93)) + 18|0);
     HEAP16[$special121>>1] = 0;
     break L7;
     break;
    }
    case 72:  {
     $94 = $line;
     (_EV_DoCeiling($94,2)|0);
     break L7;
     break;
    }
    case 73:  {
     $95 = $line;
     (_EV_DoCeiling($95,3)|0);
     break L7;
     break;
    }
    case 74:  {
     $96 = $line;
     (_EV_CeilingCrushStop($96)|0);
     break L7;
     break;
    }
    case 75:  {
     $97 = $line;
     (_EV_DoDoor($97,2)|0);
     break L7;
     break;
    }
    case 76:  {
     $98 = $line;
     (_EV_DoDoor($98,1)|0);
     break L7;
     break;
    }
    case 77:  {
     $99 = $line;
     (_EV_DoCeiling($99,4)|0);
     break L7;
     break;
    }
    case 79:  {
     $100 = $line;
     _EV_LightTurnOn($100,35);
     break L7;
     break;
    }
    case 80:  {
     $101 = $line;
     _EV_LightTurnOn($101,0);
     break L7;
     break;
    }
    case 81:  {
     $102 = $line;
     _EV_LightTurnOn($102,255);
     break L7;
     break;
    }
    case 82:  {
     $103 = $line;
     (_EV_DoFloor($103,1)|0);
     break L7;
     break;
    }
    case 83:  {
     $104 = $line;
     (_EV_DoFloor($104,0)|0);
     break L7;
     break;
    }
    case 84:  {
     $105 = $line;
     (_EV_DoFloor($105,6)|0);
     break L7;
     break;
    }
    case 86:  {
     $106 = $line;
     (_EV_DoDoor($106,3)|0);
     break L7;
     break;
    }
    case 87:  {
     $107 = $line;
     (_EV_DoPlat($107,0,0)|0);
     break L7;
     break;
    }
    case 88:  {
     $108 = $line;
     (_EV_DoPlat($108,1,0)|0);
     break L7;
     break;
    }
    case 89:  {
     $109 = $line;
     _EV_StopPlat($109);
     break L7;
     break;
    }
    case 90:  {
     $110 = $line;
     (_EV_DoDoor($110,0)|0);
     break L7;
     break;
    }
    case 91:  {
     $111 = $line;
     (_EV_DoFloor($111,3)|0);
     break L7;
     break;
    }
    case 92:  {
     $112 = $line;
     (_EV_DoFloor($112,7)|0);
     break L7;
     break;
    }
    case 93:  {
     $113 = $line;
     (_EV_DoFloor($113,8)|0);
     break L7;
     break;
    }
    case 94:  {
     $114 = $line;
     (_EV_DoFloor($114,9)|0);
     break L7;
     break;
    }
    case 95:  {
     $115 = $line;
     (_EV_DoPlat($115,3,0)|0);
     break L7;
     break;
    }
    case 96:  {
     $116 = $line;
     (_EV_DoFloor($116,5)|0);
     break L7;
     break;
    }
    case 97:  {
     $117 = $line;
     $118 = $side$addr;
     $119 = $thing$addr;
     (_EV_Teleport($117,$118,$119)|0);
     break L7;
     break;
    }
    case 98:  {
     $120 = $line;
     (_EV_DoFloor($120,2)|0);
     break L7;
     break;
    }
    case 105:  {
     $121 = $line;
     (_EV_DoDoor($121,5)|0);
     break L7;
     break;
    }
    case 106:  {
     $122 = $line;
     (_EV_DoDoor($122,6)|0);
     break L7;
     break;
    }
    case 107:  {
     $123 = $line;
     (_EV_DoDoor($123,7)|0);
     break L7;
     break;
    }
    case 120:  {
     $124 = $line;
     (_EV_DoPlat($124,4,0)|0);
     break L7;
     break;
    }
    case 126:  {
     $125 = $thing$addr;
     $player177 = ((($125)) + 132|0);
     $126 = HEAP32[$player177>>2]|0;
     $tobool178 = ($126|0)!=(0|0);
     if ($tobool178) {
      break L7;
     }
     $127 = $line;
     $128 = $side$addr;
     $129 = $thing$addr;
     (_EV_Teleport($127,$128,$129)|0);
     break L7;
     break;
    }
    case 128:  {
     $130 = $line;
     (_EV_DoFloor($130,4)|0);
     break L7;
     break;
    }
    case 129:  {
     $131 = $line;
     (_EV_DoFloor($131,10)|0);
     break L7;
     break;
    }
    default: {
     break L7;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _P_ShootSpecialLine($thing,$line) {
 $thing = $thing|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $conv = 0, $conv5 = 0, $line$addr = 0, $ok = 0, $player = 0, $spec$store$select = 0;
 var $special = 0, $special4 = 0, $thing$addr = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $line$addr = $line;
 $0 = $thing$addr;
 $player = ((($0)) + 132|0);
 $1 = HEAP32[$player>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  $ok = 0;
  $2 = $line$addr;
  $special = ((($2)) + 18|0);
  $3 = HEAP16[$special>>1]|0;
  $conv = $3 << 16 >> 16;
  $cond = ($conv|0)==(46);
  $spec$store$select = $cond ? 1 : 0;
  $ok = $spec$store$select;
  $4 = $ok;
  $tobool1 = ($4|0)!=(0);
  if (!($tobool1)) {
   STACKTOP = sp;return;
  }
 }
 $5 = $line$addr;
 $special4 = ((($5)) + 18|0);
 $6 = HEAP16[$special4>>1]|0;
 $conv5 = $6 << 16 >> 16;
 switch ($conv5|0) {
 case 24:  {
  $7 = $line$addr;
  (_EV_DoFloor($7,3)|0);
  $8 = $line$addr;
  _P_ChangeSwitchTexture($8,0);
  STACKTOP = sp;return;
  break;
 }
 case 46:  {
  $9 = $line$addr;
  (_EV_DoDoor($9,3)|0);
  $10 = $line$addr;
  _P_ChangeSwitchTexture($10,1);
  STACKTOP = sp;return;
  break;
 }
 case 47:  {
  $11 = $line$addr;
  (_EV_DoPlat($11,3,0)|0);
  $12 = $line$addr;
  _P_ChangeSwitchTexture($12,0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _P_PlayerInSpecialSector($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and14 = 0;
 var $and27 = 0, $and36 = 0, $and37 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx22 = 0, $call = 0, $cheats = 0, $cmp = 0, $cmp24 = 0, $cmp42 = 0, $conv = 0, $conv47 = 0, $health = 0, $inc = 0, $player$addr = 0, $powers = 0, $powers10 = 0, $powers21 = 0, $secretcount = 0;
 var $sector = 0, $special = 0, $special34 = 0, $special46 = 0, $subsector = 0, $tobool = 0, $tobool12 = 0, $tobool15 = 0, $tobool23 = 0, $tobool28 = 0, $tobool38 = 0, $tobool4 = 0, $vararg_buffer = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $player$addr = $player;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 $subsector = ((($1)) + 52|0);
 $2 = HEAP32[$subsector>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $sector = $3;
 $4 = $player$addr;
 $5 = HEAP32[$4>>2]|0;
 $z = ((($5)) + 20|0);
 $6 = HEAP32[$z>>2]|0;
 $7 = $sector;
 $8 = HEAP32[$7>>2]|0;
 $cmp = ($6|0)!=($8|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $9 = $sector;
 $special = ((($9)) + 14|0);
 $10 = HEAP16[$special>>1]|0;
 $conv = $10 << 16 >> 16;
 switch ($conv|0) {
 case 5:  {
  $11 = $player$addr;
  $powers = ((($11)) + 52|0);
  $arrayidx = ((($powers)) + 12|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($12|0)!=(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  $13 = HEAP32[99905]|0;
  $and = $13 & 31;
  $tobool4 = ($and|0)!=(0);
  if ($tobool4) {
   STACKTOP = sp;return;
  }
  $14 = $player$addr;
  $15 = HEAP32[$14>>2]|0;
  _P_DamageMobj($15,0,0,10);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $16 = $player$addr;
  $powers10 = ((($16)) + 52|0);
  $arrayidx11 = ((($powers10)) + 12|0);
  $17 = HEAP32[$arrayidx11>>2]|0;
  $tobool12 = ($17|0)!=(0);
  if ($tobool12) {
   STACKTOP = sp;return;
  }
  $18 = HEAP32[99905]|0;
  $and14 = $18 & 31;
  $tobool15 = ($and14|0)!=(0);
  if ($tobool15) {
   STACKTOP = sp;return;
  }
  $19 = $player$addr;
  $20 = HEAP32[$19>>2]|0;
  _P_DamageMobj($20,0,0,5);
  STACKTOP = sp;return;
  break;
 }
 case 4: case 16:  {
  $21 = $player$addr;
  $powers21 = ((($21)) + 52|0);
  $arrayidx22 = ((($powers21)) + 12|0);
  $22 = HEAP32[$arrayidx22>>2]|0;
  $tobool23 = ($22|0)!=(0);
  if ($tobool23) {
   $call = (_P_Random()|0);
   $cmp24 = ($call|0)<(5);
   if (!($cmp24)) {
    STACKTOP = sp;return;
   }
  }
  $23 = HEAP32[99905]|0;
  $and27 = $23 & 31;
  $tobool28 = ($and27|0)!=(0);
  if ($tobool28) {
   STACKTOP = sp;return;
  }
  $24 = $player$addr;
  $25 = HEAP32[$24>>2]|0;
  _P_DamageMobj($25,0,0,20);
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $26 = $player$addr;
  $secretcount = ((($26)) + 220|0);
  $27 = HEAP32[$secretcount>>2]|0;
  $inc = (($27) + 1)|0;
  HEAP32[$secretcount>>2] = $inc;
  $28 = $sector;
  $special34 = ((($28)) + 14|0);
  HEAP16[$special34>>1] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 11:  {
  $29 = $player$addr;
  $cheats = ((($29)) + 204|0);
  $30 = HEAP32[$cheats>>2]|0;
  $and36 = $30 & -3;
  HEAP32[$cheats>>2] = $and36;
  $31 = HEAP32[99905]|0;
  $and37 = $31 & 31;
  $tobool38 = ($and37|0)!=(0);
  if (!($tobool38)) {
   $32 = $player$addr;
   $33 = HEAP32[$32>>2]|0;
   _P_DamageMobj($33,0,0,20);
  }
  $34 = $player$addr;
  $health = ((($34)) + 40|0);
  $35 = HEAP32[$health>>2]|0;
  $cmp42 = ($35|0)<=(10);
  if (!($cmp42)) {
   STACKTOP = sp;return;
  }
  _G_ExitLevel();
  STACKTOP = sp;return;
  break;
 }
 default: {
  $36 = $sector;
  $special46 = ((($36)) + 14|0);
  $37 = HEAP16[$special46>>1]|0;
  $conv47 = $37 << 16 >> 16;
  HEAP32[$vararg_buffer>>2] = $conv47;
  _I_Error(155098,$vararg_buffer);
  STACKTOP = sp;return;
 }
 }
}
function _P_UpdateSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add11 = 0, $add26 = 0, $add9 = 0, $anim = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx22 = 0, $arrayidx25 = 0, $arrayidx34 = 0, $arrayidx37 = 0;
 var $arrayidx40 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx48 = 0, $arrayidx53 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx63 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx75 = 0, $arrayidx76 = 0, $basepic = 0, $basepic5 = 0, $basepic8 = 0, $bottomtexture = 0, $btexture = 0, $btexture56 = 0, $btexture66 = 0;
 var $btimer = 0, $btimer38 = 0, $btimer41 = 0, $cmp = 0, $cmp19 = 0, $cmp3 = 0, $cmp31 = 0, $cmp6 = 0, $cond = 0, $conv = 0, $conv23 = 0, $conv47 = 0, $conv57 = 0, $conv67 = 0, $dec = 0, $dec39 = 0, $div = 0, $i = 0, $idxprom = 0, $idxprom52 = 0;
 var $idxprom62 = 0, $idxprom72 = 0, $inc = 0, $inc28 = 0, $inc80 = 0, $incdec$ptr = 0, $line = 0, $midtexture = 0, $numpics = 0, $numpics10 = 0, $pic = 0, $rem = 0, $sidenum = 0, $sidenum50 = 0, $sidenum60 = 0, $sidenum70 = 0, $soundorg = 0, $special = 0, $speed = 0, $tobool = 0;
 var $tobool12 = 0, $tobool35 = 0, $tobool42 = 0, $toptexture = 0, $where = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99897]|0;
 $cmp = ($0|0)==(1);
 if ($cmp) {
  $1 = HEAP32[99898]|0;
  $dec = (($1) + -1)|0;
  HEAP32[99898] = $dec;
  $2 = HEAP32[99898]|0;
  $tobool = ($2|0)!=(0);
  if (!($tobool)) {
   _G_ExitLevel();
  }
 }
 $anim = 192096;
 while(1) {
  $3 = $anim;
  $4 = HEAP32[99896]|0;
  $cmp3 = ($3>>>0)<($4>>>0);
  if (!($cmp3)) {
   break;
  }
  $5 = $anim;
  $basepic = ((($5)) + 8|0);
  $6 = HEAP32[$basepic>>2]|0;
  $i = $6;
  while(1) {
   $7 = $i;
   $8 = $anim;
   $basepic5 = ((($8)) + 8|0);
   $9 = HEAP32[$basepic5>>2]|0;
   $10 = $anim;
   $numpics = ((($10)) + 12|0);
   $11 = HEAP32[$numpics>>2]|0;
   $add = (($9) + ($11))|0;
   $cmp6 = ($7|0)<($add|0);
   $12 = $anim;
   if (!($cmp6)) {
    break;
   }
   $basepic8 = ((($12)) + 8|0);
   $13 = HEAP32[$basepic8>>2]|0;
   $14 = HEAP32[99905]|0;
   $15 = $anim;
   $speed = ((($15)) + 16|0);
   $16 = HEAP32[$speed>>2]|0;
   $div = (($14|0) / ($16|0))&-1;
   $17 = $i;
   $add9 = (($div) + ($17))|0;
   $18 = $anim;
   $numpics10 = ((($18)) + 12|0);
   $19 = HEAP32[$numpics10>>2]|0;
   $rem = (($add9|0) % ($19|0))&-1;
   $add11 = (($13) + ($rem))|0;
   $pic = $add11;
   $20 = $anim;
   $21 = HEAP32[$20>>2]|0;
   $tobool12 = ($21|0)!=(0);
   $22 = $pic;
   if ($tobool12) {
    $23 = HEAP32[99922]|0;
    $24 = $i;
    $arrayidx = (($23) + ($24<<2)|0);
    HEAP32[$arrayidx>>2] = $22;
   } else {
    $25 = HEAP32[99926]|0;
    $26 = $i;
    $arrayidx14 = (($25) + ($26<<2)|0);
    HEAP32[$arrayidx14>>2] = $22;
   }
   $27 = $i;
   $inc = (($27) + 1)|0;
   $i = $inc;
  }
  $incdec$ptr = ((($12)) + 20|0);
  $anim = $incdec$ptr;
 }
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = HEAP16[200752]|0;
  $conv = $29 << 16 >> 16;
  $cmp19 = ($28|0)<($conv|0);
  if (!($cmp19)) {
   break;
  }
  $30 = $i;
  $arrayidx22 = (192736 + ($30<<2)|0);
  $31 = HEAP32[$arrayidx22>>2]|0;
  $line = $31;
  $32 = $line;
  $special = ((($32)) + 18|0);
  $33 = HEAP16[$special>>1]|0;
  $conv23 = $33 << 16 >> 16;
  $cond = ($conv23|0)==(48);
  if ($cond) {
   $34 = HEAP32[99845]|0;
   $35 = $line;
   $sidenum = ((($35)) + 22|0);
   $36 = HEAP16[$sidenum>>1]|0;
   $idxprom = $36 << 16 >> 16;
   $arrayidx25 = (($34) + (($idxprom*20)|0)|0);
   $37 = HEAP32[$arrayidx25>>2]|0;
   $add26 = (($37) + 65536)|0;
   HEAP32[$arrayidx25>>2] = $add26;
  }
  $38 = $i;
  $inc28 = (($38) + 1)|0;
  $i = $inc28;
 }
 $i = 0;
 while(1) {
  $39 = $i;
  $cmp31 = ($39|0)<(16);
  if (!($cmp31)) {
   break;
  }
  $40 = $i;
  $arrayidx34 = (193392 + (($40*20)|0)|0);
  $btimer = ((($arrayidx34)) + 12|0);
  $41 = HEAP32[$btimer>>2]|0;
  $tobool35 = ($41|0)!=(0);
  if ($tobool35) {
   $42 = $i;
   $arrayidx37 = (193392 + (($42*20)|0)|0);
   $btimer38 = ((($arrayidx37)) + 12|0);
   $43 = HEAP32[$btimer38>>2]|0;
   $dec39 = (($43) + -1)|0;
   HEAP32[$btimer38>>2] = $dec39;
   $44 = $i;
   $arrayidx40 = (193392 + (($44*20)|0)|0);
   $btimer41 = ((($arrayidx40)) + 12|0);
   $45 = HEAP32[$btimer41>>2]|0;
   $tobool42 = ($45|0)!=(0);
   if (!($tobool42)) {
    $46 = $i;
    $arrayidx44 = (193392 + (($46*20)|0)|0);
    $where = ((($arrayidx44)) + 4|0);
    $47 = HEAP32[$where>>2]|0;
    switch ($47|0) {
    case 0:  {
     $48 = $i;
     $arrayidx46 = (193392 + (($48*20)|0)|0);
     $btexture = ((($arrayidx46)) + 8|0);
     $49 = HEAP32[$btexture>>2]|0;
     $conv47 = $49&65535;
     $50 = HEAP32[99845]|0;
     $51 = $i;
     $arrayidx48 = (193392 + (($51*20)|0)|0);
     $52 = HEAP32[$arrayidx48>>2]|0;
     $sidenum50 = ((($52)) + 22|0);
     $53 = HEAP16[$sidenum50>>1]|0;
     $idxprom52 = $53 << 16 >> 16;
     $arrayidx53 = (($50) + (($idxprom52*20)|0)|0);
     $toptexture = ((($arrayidx53)) + 8|0);
     HEAP16[$toptexture>>1] = $conv47;
     break;
    }
    case 1:  {
     $54 = $i;
     $arrayidx55 = (193392 + (($54*20)|0)|0);
     $btexture56 = ((($arrayidx55)) + 8|0);
     $55 = HEAP32[$btexture56>>2]|0;
     $conv57 = $55&65535;
     $56 = HEAP32[99845]|0;
     $57 = $i;
     $arrayidx58 = (193392 + (($57*20)|0)|0);
     $58 = HEAP32[$arrayidx58>>2]|0;
     $sidenum60 = ((($58)) + 22|0);
     $59 = HEAP16[$sidenum60>>1]|0;
     $idxprom62 = $59 << 16 >> 16;
     $arrayidx63 = (($56) + (($idxprom62*20)|0)|0);
     $midtexture = ((($arrayidx63)) + 12|0);
     HEAP16[$midtexture>>1] = $conv57;
     break;
    }
    case 2:  {
     $60 = $i;
     $arrayidx65 = (193392 + (($60*20)|0)|0);
     $btexture66 = ((($arrayidx65)) + 8|0);
     $61 = HEAP32[$btexture66>>2]|0;
     $conv67 = $61&65535;
     $62 = HEAP32[99845]|0;
     $63 = $i;
     $arrayidx68 = (193392 + (($63*20)|0)|0);
     $64 = HEAP32[$arrayidx68>>2]|0;
     $sidenum70 = ((($64)) + 22|0);
     $65 = HEAP16[$sidenum70>>1]|0;
     $idxprom72 = $65 << 16 >> 16;
     $arrayidx73 = (($62) + (($idxprom72*20)|0)|0);
     $bottomtexture = ((($arrayidx73)) + 10|0);
     HEAP16[$bottomtexture>>1] = $conv67;
     break;
    }
    default: {
    }
    }
    $66 = $i;
    $arrayidx75 = (193392 + (($66*20)|0)|0);
    $soundorg = ((($arrayidx75)) + 16|0);
    _S_StartSound($soundorg,23);
    $67 = $i;
    $arrayidx76 = (193392 + (($67*20)|0)|0);
    ;HEAP32[$arrayidx76>>2]=0|0;HEAP32[$arrayidx76+4>>2]=0|0;HEAP32[$arrayidx76+8>>2]=0|0;HEAP32[$arrayidx76+12>>2]=0|0;HEAP32[$arrayidx76+16>>2]=0|0;
   }
  }
  $68 = $i;
  $inc80 = (($68) + 1)|0;
  $i = $inc80;
 }
 STACKTOP = sp;return;
}
function _EV_DoDonut($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $arrayidx9 = 0, $backsector = 0, $call = 0, $call17 = 0, $call2 = 0, $call20 = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp3 = 0, $cmp7 = 0, $crush = 0, $crush27 = 0, $direction = 0, $direction28 = 0, $floor = 0, $floordestheight = 0, $floordestheight31 = 0, $floorpic = 0, $function = 0;
 var $function24 = 0, $i = 0, $inc = 0, $line$addr = 0, $linecount = 0, $lines = 0, $lines8 = 0, $newspecial = 0, $rtn = 0, $s1 = 0, $s2 = 0, $s3 = 0, $s3_floorheight = 0, $s3_floorpic = 0, $secnum = 0, $sector = 0, $sector29 = 0, $specialdata = 0, $specialdata18 = 0, $specialdata22 = 0;
 var $speed = 0, $speed30 = 0, $texture = 0, $tobool = 0, $type = 0, $type26 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s3_floorheight = sp + 12|0;
 $s3_floorpic = sp + 48|0;
 $line$addr = $line;
 $secnum = -1;
 $rtn = 0;
 while(1) {
  $0 = $line$addr;
  $1 = $secnum;
  $call = (_P_FindSectorFromLineTag($0,$1)|0);
  $secnum = $call;
  $cmp = ($call|0)>=(0);
  if (!($cmp)) {
   label = 16;
   break;
  }
  $2 = HEAP32[99850]|0;
  $3 = $secnum;
  $arrayidx = (($2) + (($3*88)|0)|0);
  $s1 = $arrayidx;
  $4 = $s1;
  $specialdata = ((($4)) + 76|0);
  $5 = HEAP32[$specialdata>>2]|0;
  $tobool = ($5|0)!=(0|0);
  if ($tobool) {
   continue;
  }
  $rtn = 1;
  $6 = $s1;
  $lines = ((($6)) + 84|0);
  $7 = HEAP32[$lines>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $s1;
  $call2 = (_getNextSector($8,$9)|0);
  $s2 = $call2;
  $10 = $s2;
  $cmp3 = ($10|0)==(0|0);
  if ($cmp3) {
   break;
  }
  $i = 0;
  while(1) {
   $12 = $i;
   $13 = $s2;
   $linecount = ((($13)) + 80|0);
   $14 = HEAP32[$linecount>>2]|0;
   $cmp7 = ($12|0)<($14|0);
   if (!($cmp7)) {
    break;
   }
   $15 = $s2;
   $lines8 = ((($15)) + 84|0);
   $16 = HEAP32[$lines8>>2]|0;
   $17 = $i;
   $arrayidx9 = (($16) + ($17<<2)|0);
   $18 = HEAP32[$arrayidx9>>2]|0;
   $backsector = ((($18)) + 52|0);
   $19 = HEAP32[$backsector>>2]|0;
   $s3 = $19;
   $20 = $s3;
   $21 = $s1;
   $cmp10 = ($20|0)==($21|0);
   if (!($cmp10)) {
    label = 10;
    break;
   }
   $57 = $i;
   $inc = (($57) + 1)|0;
   $i = $inc;
  }
  if ((label|0) == 10) {
   label = 0;
   $22 = $s3;
   $cmp13 = ($22|0)==(0|0);
   if ($cmp13) {
    $23 = HEAP32[32479]|0;
    (_fprintf($23,155234,$vararg_buffer1)|0);
    $24 = $line$addr;
    $25 = $s1;
    _DonutOverrun($s3_floorheight,$s3_floorpic,$24,$25);
   } else {
    $26 = $s3;
    $27 = HEAP32[$26>>2]|0;
    HEAP32[$s3_floorheight>>2] = $27;
    $28 = $s3;
    $floorpic = ((($28)) + 8|0);
    $29 = HEAP16[$floorpic>>1]|0;
    HEAP16[$s3_floorpic>>1] = $29;
   }
   $call17 = (_Z_Malloc(44,6,0)|0);
   $floor = $call17;
   $30 = $floor;
   _P_AddThinker($30);
   $31 = $floor;
   $32 = $s2;
   $specialdata18 = ((($32)) + 76|0);
   HEAP32[$specialdata18>>2] = $31;
   $33 = $floor;
   $function = ((($33)) + 8|0);
   HEAP32[$function>>2] = 138;
   $34 = $floor;
   $type = ((($34)) + 12|0);
   HEAP32[$type>>2] = 11;
   $35 = $floor;
   $crush = ((($35)) + 16|0);
   HEAP32[$crush>>2] = 0;
   $36 = $floor;
   $direction = ((($36)) + 24|0);
   HEAP32[$direction>>2] = 1;
   $37 = $s2;
   $38 = $floor;
   $sector = ((($38)) + 20|0);
   HEAP32[$sector>>2] = $37;
   $39 = $floor;
   $speed = ((($39)) + 40|0);
   HEAP32[$speed>>2] = 32768;
   $40 = HEAP16[$s3_floorpic>>1]|0;
   $41 = $floor;
   $texture = ((($41)) + 32|0);
   HEAP16[$texture>>1] = $40;
   $42 = $floor;
   $newspecial = ((($42)) + 28|0);
   HEAP32[$newspecial>>2] = 0;
   $43 = HEAP32[$s3_floorheight>>2]|0;
   $44 = $floor;
   $floordestheight = ((($44)) + 36|0);
   HEAP32[$floordestheight>>2] = $43;
   $call20 = (_Z_Malloc(44,6,0)|0);
   $floor = $call20;
   $45 = $floor;
   _P_AddThinker($45);
   $46 = $floor;
   $47 = $s1;
   $specialdata22 = ((($47)) + 76|0);
   HEAP32[$specialdata22>>2] = $46;
   $48 = $floor;
   $function24 = ((($48)) + 8|0);
   HEAP32[$function24>>2] = 138;
   $49 = $floor;
   $type26 = ((($49)) + 12|0);
   HEAP32[$type26>>2] = 0;
   $50 = $floor;
   $crush27 = ((($50)) + 16|0);
   HEAP32[$crush27>>2] = 0;
   $51 = $floor;
   $direction28 = ((($51)) + 24|0);
   HEAP32[$direction28>>2] = -1;
   $52 = $s1;
   $53 = $floor;
   $sector29 = ((($53)) + 20|0);
   HEAP32[$sector29>>2] = $52;
   $54 = $floor;
   $speed30 = ((($54)) + 40|0);
   HEAP32[$speed30>>2] = 32768;
   $55 = HEAP32[$s3_floorheight>>2]|0;
   $56 = $floor;
   $floordestheight31 = ((($56)) + 36|0);
   HEAP32[$floordestheight31>>2] = $55;
  }
 }
 if ((label|0) == 16) {
  $58 = $rtn;
  STACKTOP = sp;return ($58|0);
 }
 $11 = HEAP32[32479]|0;
 (_fprintf($11,155142,$vararg_buffer)|0);
 $58 = $rtn;
 STACKTOP = sp;return ($58|0);
}
function _DonutOverrun($s3_floorheight,$s3_floorpic,$line,$pillar_sector) {
 $s3_floorheight = $s3_floorheight|0;
 $s3_floorpic = $s3_floorpic|0;
 $line = $line|0;
 $pillar_sector = $pillar_sector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add3 = 0, $arrayidx = 0, $arrayidx4 = 0;
 var $call = 0, $cmp = 0, $cmp6 = 0, $conv = 0, $line$addr = 0, $p = 0, $pillar_sector$addr = 0, $s3_floorheight$addr = 0, $s3_floorpic$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $s3_floorheight$addr = $s3_floorheight;
 $s3_floorpic$addr = $s3_floorpic;
 $line$addr = $line;
 $pillar_sector$addr = $pillar_sector;
 $0 = HEAP32[32345]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  HEAP32[32345] = 0;
  HEAP32[99899] = 0;
  HEAP32[99900] = 22;
  $call = (_M_CheckParmWithArgs(155353,2)|0);
  $p = $call;
  $1 = $p;
  $cmp = ($1|0)>(0);
  if ($cmp) {
   $2 = HEAP32[99714]|0;
   $3 = $p;
   $add = (($3) + 1)|0;
   $arrayidx = (($2) + ($add<<2)|0);
   $4 = HEAP32[$arrayidx>>2]|0;
   (_M_StrToInt($4,399596)|0);
   $5 = HEAP32[99714]|0;
   $6 = $p;
   $add3 = (($6) + 2)|0;
   $arrayidx4 = (($5) + ($add3<<2)|0);
   $7 = HEAP32[$arrayidx4>>2]|0;
   (_M_StrToInt($7,399600)|0);
   $8 = HEAP32[99900]|0;
   $9 = HEAP32[99925]|0;
   $cmp6 = ($8|0)>=($9|0);
   if ($cmp6) {
    $10 = HEAP32[32479]|0;
    $11 = HEAP32[99925]|0;
    HEAP32[$vararg_buffer>>2] = $11;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 22;
    (_fprintf($10,155360,$vararg_buffer)|0);
    HEAP32[99900] = 22;
   }
  }
 }
 $12 = HEAP32[99899]|0;
 $13 = $s3_floorheight$addr;
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[99900]|0;
 $conv = $14&65535;
 $15 = $s3_floorpic$addr;
 HEAP16[$15>>1] = $conv;
 STACKTOP = sp;return;
}
function _P_SpawnSpecials() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx31 = 0, $arrayidx32 = 0, $arrayidx42 = 0, $arrayidx50 = 0, $arrayidx58 = 0, $cmp = 0, $cmp2 = 0, $cmp20 = 0, $cmp27 = 0, $cmp39 = 0, $cmp47 = 0, $cmp55 = 0, $cond = 0, $conv = 0;
 var $conv24 = 0, $conv26 = 0, $i = 0, $idxprom = 0, $inc = 0, $inc18 = 0, $inc33 = 0, $inc36 = 0, $inc44 = 0, $inc52 = 0, $inc60 = 0, $incdec$ptr = 0, $mul = 0, $mul1 = 0, $or$cond = 0, $sector = 0, $special = 0, $special10 = 0, $special23 = 0, $special6 = 0;
 var $tobool = 0, $tobool3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99506]|0;
 $cmp = ($0|0)>(0);
 $1 = HEAP32[99430]|0;
 $tobool = ($1|0)!=(0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[99897] = 1;
  $2 = HEAP32[99506]|0;
  $mul = ($2*60)|0;
  $mul1 = ($mul*35)|0;
  HEAP32[99898] = $mul1;
 } else {
  HEAP32[99897] = 0;
 }
 $3 = HEAP32[99850]|0;
 $sector = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = HEAP32[99849]|0;
  $cmp2 = ($4|0)<($5|0);
  if (!($cmp2)) {
   break;
  }
  $6 = $sector;
  $special = ((($6)) + 14|0);
  $7 = HEAP16[$special>>1]|0;
  $tobool3 = ($7<<16>>16)!=(0);
  L8: do {
   if ($tobool3) {
    $8 = $sector;
    $special6 = ((($8)) + 14|0);
    $9 = HEAP16[$special6>>1]|0;
    $conv = $9 << 16 >> 16;
    do {
     switch ($conv|0) {
     case 1:  {
      $10 = $sector;
      _P_SpawnLightFlash($10);
      break L8;
      break;
     }
     case 2:  {
      $11 = $sector;
      _P_SpawnStrobeFlash($11,15,0);
      break L8;
      break;
     }
     case 3:  {
      $12 = $sector;
      _P_SpawnStrobeFlash($12,35,0);
      break L8;
      break;
     }
     case 4:  {
      $13 = $sector;
      _P_SpawnStrobeFlash($13,15,0);
      $14 = $sector;
      $special10 = ((($14)) + 14|0);
      HEAP16[$special10>>1] = 4;
      break L8;
      break;
     }
     case 8:  {
      $15 = $sector;
      _P_SpawnGlowingLight($15);
      break L8;
      break;
     }
     case 9:  {
      $16 = HEAP32[99490]|0;
      $inc = (($16) + 1)|0;
      HEAP32[99490] = $inc;
      break L8;
      break;
     }
     case 10:  {
      $17 = $sector;
      _P_SpawnDoorCloseIn30($17);
      break L8;
      break;
     }
     case 12:  {
      $18 = $sector;
      _P_SpawnStrobeFlash($18,35,1);
      break L8;
      break;
     }
     case 13:  {
      $19 = $sector;
      _P_SpawnStrobeFlash($19,15,1);
      break L8;
      break;
     }
     case 14:  {
      $20 = $sector;
      $21 = $i;
      _P_SpawnDoorRaiseIn5Mins($20,$21);
      break L8;
      break;
     }
     case 17:  {
      $22 = $sector;
      _P_SpawnFireFlicker($22);
      break L8;
      break;
     }
     default: {
      break L8;
     }
     }
    } while(0);
   }
  } while(0);
  $23 = $i;
  $inc18 = (($23) + 1)|0;
  $i = $inc18;
  $24 = $sector;
  $incdec$ptr = ((($24)) + 88|0);
  $sector = $incdec$ptr;
 }
 HEAP16[200752] = 0;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = HEAP32[99853]|0;
  $cmp20 = ($25|0)<($26|0);
  if (!($cmp20)) {
   break;
  }
  $27 = HEAP32[99844]|0;
  $28 = $i;
  $arrayidx = (($27) + ($28<<6)|0);
  $special23 = ((($arrayidx)) + 18|0);
  $29 = HEAP16[$special23>>1]|0;
  $conv24 = $29 << 16 >> 16;
  $cond = ($conv24|0)==(48);
  if ($cond) {
   $30 = HEAP16[200752]|0;
   $conv26 = $30 << 16 >> 16;
   $cmp27 = ($conv26|0)>=(64);
   if ($cmp27) {
    _I_Error(155512,$vararg_buffer);
   }
   $31 = HEAP32[99844]|0;
   $32 = $i;
   $arrayidx31 = (($31) + ($32<<6)|0);
   $33 = HEAP16[200752]|0;
   $idxprom = $33 << 16 >> 16;
   $arrayidx32 = (192736 + ($idxprom<<2)|0);
   HEAP32[$arrayidx32>>2] = $arrayidx31;
   $34 = HEAP16[200752]|0;
   $inc33 = (($34) + 1)<<16>>16;
   HEAP16[200752] = $inc33;
  }
  $35 = $i;
  $inc36 = (($35) + 1)|0;
  $i = $inc36;
 }
 $i = 0;
 while(1) {
  $36 = $i;
  $cmp39 = ($36|0)<(30);
  if (!($cmp39)) {
   break;
  }
  $37 = $i;
  $arrayidx42 = (187392 + ($37<<2)|0);
  HEAP32[$arrayidx42>>2] = 0;
  $38 = $i;
  $inc44 = (($38) + 1)|0;
  $i = $inc44;
 }
 $i = 0;
 while(1) {
  $39 = $i;
  $cmp47 = ($39|0)<(30);
  if (!($cmp47)) {
   break;
  }
  $40 = $i;
  $arrayidx50 = (191808 + ($40<<2)|0);
  HEAP32[$arrayidx50>>2] = 0;
  $41 = $i;
  $inc52 = (($41) + 1)|0;
  $i = $inc52;
 }
 $i = 0;
 while(1) {
  $42 = $i;
  $cmp55 = ($42|0)<(16);
  if (!($cmp55)) {
   break;
  }
  $43 = $i;
  $arrayidx58 = (193392 + (($43*20)|0)|0);
  ;HEAP32[$arrayidx58>>2]=0|0;HEAP32[$arrayidx58+4>>2]=0|0;HEAP32[$arrayidx58+8>>2]=0|0;HEAP32[$arrayidx58+12>>2]=0|0;HEAP32[$arrayidx58+16>>2]=0|0;
  $44 = $i;
  $inc60 = (($44) + 1)|0;
  $i = $inc60;
 }
 STACKTOP = sp;return;
}
function _P_InitSwitchList() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx15 = 0, $arrayidx16 = 0;
 var $arrayidx17 = 0, $arrayidx21 = 0, $arrayidx8 = 0, $call = 0, $call19 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $div = 0, $episode = 0, $episode11 = 0, $episode6 = 0, $i = 0, $inc = 0, $inc20 = 0, $inc23 = 0, $index = 0;
 var $name2 = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $episode = 1;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(1);
 $1 = HEAP32[32168]|0;
 $cmp1 = ($1|0)==(3);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $episode = 2;
 } else {
  $2 = HEAP32[32168]|0;
  $cmp2 = ($2|0)==(2);
  if ($cmp2) {
   $episode = 3;
  }
 }
 $index = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $cmp5 = ($3|0)<(50);
  if (!($cmp5)) {
   label = 12;
   break;
  }
  $4 = $i;
  $arrayidx = (50448 + (($4*20)|0)|0);
  $episode6 = ((($arrayidx)) + 18|0);
  $5 = HEAP16[$episode6>>1]|0;
  $tobool = ($5<<16>>16)!=(0);
  if (!($tobool)) {
   break;
  }
  $8 = $i;
  $arrayidx10 = (50448 + (($8*20)|0)|0);
  $episode11 = ((($arrayidx10)) + 18|0);
  $9 = HEAP16[$episode11>>1]|0;
  $conv = $9 << 16 >> 16;
  $10 = $episode;
  $cmp12 = ($conv|0)<=($10|0);
  if ($cmp12) {
   $11 = $i;
   $arrayidx15 = (50448 + (($11*20)|0)|0);
   $call = (_R_TextureNumForName($arrayidx15)|0);
   $12 = $index;
   $inc = (($12) + 1)|0;
   $index = $inc;
   $arrayidx16 = (192992 + ($12<<2)|0);
   HEAP32[$arrayidx16>>2] = $call;
   $13 = $i;
   $arrayidx17 = (50448 + (($13*20)|0)|0);
   $name2 = ((($arrayidx17)) + 9|0);
   $call19 = (_R_TextureNumForName($name2)|0);
   $14 = $index;
   $inc20 = (($14) + 1)|0;
   $index = $inc20;
   $arrayidx21 = (192992 + ($14<<2)|0);
   HEAP32[$arrayidx21>>2] = $call19;
  }
  $15 = $i;
  $inc23 = (($15) + 1)|0;
  $i = $inc23;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 $6 = $index;
 $div = (($6|0) / 2)&-1;
 HEAP32[99901] = $div;
 $7 = $index;
 $arrayidx8 = (192992 + ($7<<2)|0);
 HEAP32[$arrayidx8>>2] = -1;
 STACKTOP = sp;return;
}
function _P_StartButton($line,$w,$texture,$time) {
 $line = $line|0;
 $w = $w|0;
 $texture = $texture|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx7 = 0, $btexture = 0, $btimer = 0, $btimer16 = 0, $btimer8 = 0, $cmp = 0, $cmp3 = 0, $cmp5 = 0, $frontsector = 0, $i = 0, $inc = 0;
 var $inc21 = 0, $line$addr = 0, $soundorg = 0, $soundorg18 = 0, $texture$addr = 0, $time$addr = 0, $tobool = 0, $tobool9 = 0, $vararg_buffer = 0, $w$addr = 0, $where = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $line$addr = $line;
 $w$addr = $w;
 $texture$addr = $texture;
 $time$addr = $time;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(16);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (193392 + (($1*20)|0)|0);
  $btimer = ((($arrayidx)) + 12|0);
  $2 = HEAP32[$btimer>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   $3 = $i;
   $arrayidx1 = (193392 + (($3*20)|0)|0);
   $4 = HEAP32[$arrayidx1>>2]|0;
   $5 = $line$addr;
   $cmp3 = ($4|0)==($5|0);
   if ($cmp3) {
    label = 12;
    break;
   }
  }
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $cmp5 = ($7|0)<(16);
  if (!($cmp5)) {
   label = 11;
   break;
  }
  $8 = $i;
  $arrayidx7 = (193392 + (($8*20)|0)|0);
  $btimer8 = ((($arrayidx7)) + 12|0);
  $9 = HEAP32[$btimer8>>2]|0;
  $tobool9 = ($9|0)!=(0);
  if (!($tobool9)) {
   label = 9;
   break;
  }
  $21 = $i;
  $inc21 = (($21) + 1)|0;
  $i = $inc21;
 }
 if ((label|0) == 9) {
  $10 = $line$addr;
  $11 = $i;
  $arrayidx11 = (193392 + (($11*20)|0)|0);
  HEAP32[$arrayidx11>>2] = $10;
  $12 = $w$addr;
  $13 = $i;
  $arrayidx13 = (193392 + (($13*20)|0)|0);
  $where = ((($arrayidx13)) + 4|0);
  HEAP32[$where>>2] = $12;
  $14 = $texture$addr;
  $15 = $i;
  $arrayidx14 = (193392 + (($15*20)|0)|0);
  $btexture = ((($arrayidx14)) + 8|0);
  HEAP32[$btexture>>2] = $14;
  $16 = $time$addr;
  $17 = $i;
  $arrayidx15 = (193392 + (($17*20)|0)|0);
  $btimer16 = ((($arrayidx15)) + 12|0);
  HEAP32[$btimer16>>2] = $16;
  $18 = $line$addr;
  $frontsector = ((($18)) + 48|0);
  $19 = HEAP32[$frontsector>>2]|0;
  $soundorg = ((($19)) + 44|0);
  $20 = $i;
  $arrayidx17 = (193392 + (($20*20)|0)|0);
  $soundorg18 = ((($arrayidx17)) + 16|0);
  HEAP32[$soundorg18>>2] = $soundorg;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  _I_Error(155568,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _P_ChangeSwitchTexture($line,$useAgain) {
 $line = $line|0;
 $useAgain = $useAgain|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx19 = 0, $arrayidx23 = 0, $arrayidx28 = 0, $arrayidx32 = 0, $arrayidx34 = 0, $arrayidx39 = 0, $arrayidx44 = 0, $arrayidx48 = 0, $arrayidx5 = 0, $arrayidx51 = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $bottomtexture = 0, $bottomtexture62 = 0, $cmp = 0, $cmp17 = 0;
 var $cmp20 = 0, $cmp35 = 0, $cmp52 = 0, $conv = 0, $conv11 = 0, $conv13 = 0, $conv24 = 0, $conv40 = 0, $conv57 = 0, $conv6 = 0, $i = 0, $idxprom = 0, $idxprom27 = 0, $idxprom4 = 0, $idxprom43 = 0, $idxprom60 = 0, $idxprom9 = 0, $inc = 0, $line$addr = 0, $midtexture = 0;
 var $midtexture45 = 0, $mul = 0, $sidenum = 0, $sidenum2 = 0, $sidenum25 = 0, $sidenum41 = 0, $sidenum58 = 0, $sidenum7 = 0, $sound = 0, $spec$store$select = 0, $special = 0, $special12 = 0, $texBot = 0, $texMid = 0, $texTop = 0, $tobool = 0, $tobool30 = 0, $tobool46 = 0, $tobool63 = 0, $toptexture = 0;
 var $toptexture29 = 0, $useAgain$addr = 0, $xor = 0, $xor38 = 0, $xor55 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $useAgain$addr = $useAgain;
 $0 = $useAgain$addr;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  $1 = $line$addr;
  $special = ((($1)) + 18|0);
  HEAP16[$special>>1] = 0;
 }
 $2 = HEAP32[99845]|0;
 $3 = $line$addr;
 $sidenum = ((($3)) + 22|0);
 $4 = HEAP16[$sidenum>>1]|0;
 $idxprom = $4 << 16 >> 16;
 $arrayidx1 = (($2) + (($idxprom*20)|0)|0);
 $toptexture = ((($arrayidx1)) + 8|0);
 $5 = HEAP16[$toptexture>>1]|0;
 $conv = $5 << 16 >> 16;
 $texTop = $conv;
 $6 = HEAP32[99845]|0;
 $7 = $line$addr;
 $sidenum2 = ((($7)) + 22|0);
 $8 = HEAP16[$sidenum2>>1]|0;
 $idxprom4 = $8 << 16 >> 16;
 $arrayidx5 = (($6) + (($idxprom4*20)|0)|0);
 $midtexture = ((($arrayidx5)) + 12|0);
 $9 = HEAP16[$midtexture>>1]|0;
 $conv6 = $9 << 16 >> 16;
 $texMid = $conv6;
 $10 = HEAP32[99845]|0;
 $11 = $line$addr;
 $sidenum7 = ((($11)) + 22|0);
 $12 = HEAP16[$sidenum7>>1]|0;
 $idxprom9 = $12 << 16 >> 16;
 $arrayidx10 = (($10) + (($idxprom9*20)|0)|0);
 $bottomtexture = ((($arrayidx10)) + 10|0);
 $13 = HEAP16[$bottomtexture>>1]|0;
 $conv11 = $13 << 16 >> 16;
 $texBot = $conv11;
 $sound = 23;
 $14 = $line$addr;
 $special12 = ((($14)) + 18|0);
 $15 = HEAP16[$special12>>1]|0;
 $conv13 = $15 << 16 >> 16;
 $cmp = ($conv13|0)==(11);
 $spec$store$select = $cmp ? 24 : 23;
 $sound = $spec$store$select;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = HEAP32[99901]|0;
  $mul = $17<<1;
  $cmp17 = ($16|0)<($mul|0);
  if (!($cmp17)) {
   label = 15;
   break;
  }
  $18 = $i;
  $arrayidx19 = (192992 + ($18<<2)|0);
  $19 = HEAP32[$arrayidx19>>2]|0;
  $20 = $texTop;
  $cmp20 = ($19|0)==($20|0);
  if ($cmp20) {
   label = 6;
   break;
  }
  $32 = $i;
  $arrayidx34 = (192992 + ($32<<2)|0);
  $33 = HEAP32[$arrayidx34>>2]|0;
  $34 = $texMid;
  $cmp35 = ($33|0)==($34|0);
  if ($cmp35) {
   label = 9;
   break;
  }
  $46 = $i;
  $arrayidx51 = (192992 + ($46<<2)|0);
  $47 = HEAP32[$arrayidx51>>2]|0;
  $48 = $texBot;
  $cmp52 = ($47|0)==($48|0);
  if ($cmp52) {
   label = 12;
   break;
  }
  $60 = $i;
  $inc = (($60) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[(193408)>>2]|0;
  $22 = $sound;
  _S_StartSound($21,$22);
  $23 = $i;
  $xor = $23 ^ 1;
  $arrayidx23 = (192992 + ($xor<<2)|0);
  $24 = HEAP32[$arrayidx23>>2]|0;
  $conv24 = $24&65535;
  $25 = HEAP32[99845]|0;
  $26 = $line$addr;
  $sidenum25 = ((($26)) + 22|0);
  $27 = HEAP16[$sidenum25>>1]|0;
  $idxprom27 = $27 << 16 >> 16;
  $arrayidx28 = (($25) + (($idxprom27*20)|0)|0);
  $toptexture29 = ((($arrayidx28)) + 8|0);
  HEAP16[$toptexture29>>1] = $conv24;
  $28 = $useAgain$addr;
  $tobool30 = ($28|0)!=(0);
  if (!($tobool30)) {
   STACKTOP = sp;return;
  }
  $29 = $line$addr;
  $30 = $i;
  $arrayidx32 = (192992 + ($30<<2)|0);
  $31 = HEAP32[$arrayidx32>>2]|0;
  _P_StartButton($29,0,$31,35);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $35 = HEAP32[(193408)>>2]|0;
  $36 = $sound;
  _S_StartSound($35,$36);
  $37 = $i;
  $xor38 = $37 ^ 1;
  $arrayidx39 = (192992 + ($xor38<<2)|0);
  $38 = HEAP32[$arrayidx39>>2]|0;
  $conv40 = $38&65535;
  $39 = HEAP32[99845]|0;
  $40 = $line$addr;
  $sidenum41 = ((($40)) + 22|0);
  $41 = HEAP16[$sidenum41>>1]|0;
  $idxprom43 = $41 << 16 >> 16;
  $arrayidx44 = (($39) + (($idxprom43*20)|0)|0);
  $midtexture45 = ((($arrayidx44)) + 12|0);
  HEAP16[$midtexture45>>1] = $conv40;
  $42 = $useAgain$addr;
  $tobool46 = ($42|0)!=(0);
  if (!($tobool46)) {
   STACKTOP = sp;return;
  }
  $43 = $line$addr;
  $44 = $i;
  $arrayidx48 = (192992 + ($44<<2)|0);
  $45 = HEAP32[$arrayidx48>>2]|0;
  _P_StartButton($43,1,$45,35);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $49 = HEAP32[(193408)>>2]|0;
  $50 = $sound;
  _S_StartSound($49,$50);
  $51 = $i;
  $xor55 = $51 ^ 1;
  $arrayidx56 = (192992 + ($xor55<<2)|0);
  $52 = HEAP32[$arrayidx56>>2]|0;
  $conv57 = $52&65535;
  $53 = HEAP32[99845]|0;
  $54 = $line$addr;
  $sidenum58 = ((($54)) + 22|0);
  $55 = HEAP16[$sidenum58>>1]|0;
  $idxprom60 = $55 << 16 >> 16;
  $arrayidx61 = (($53) + (($idxprom60*20)|0)|0);
  $bottomtexture62 = ((($arrayidx61)) + 10|0);
  HEAP16[$bottomtexture62>>1] = $conv57;
  $56 = $useAgain$addr;
  $tobool63 = ($56|0)!=(0);
  if (!($tobool63)) {
   STACKTOP = sp;return;
  }
  $57 = $line$addr;
  $58 = $i;
  $arrayidx65 = (192992 + ($58<<2)|0);
  $59 = HEAP32[$arrayidx65>>2]|0;
  _P_StartButton($57,2,$59,35);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function _P_UseSpecialLine($thing,$line,$side) {
 $thing = $thing|0;
 $line = $line|0;
 $side = $side|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and = 0, $call = 0, $call103 = 0, $call108 = 0, $call113 = 0, $call118 = 0, $call123 = 0, $call128 = 0;
 var $call133 = 0, $call138 = 0, $call143 = 0, $call148 = 0, $call153 = 0, $call158 = 0, $call163 = 0, $call168 = 0, $call173 = 0, $call178 = 0, $call183 = 0, $call188 = 0, $call193 = 0, $call198 = 0, $call203 = 0, $call208 = 0, $call21 = 0, $call213 = 0, $call218 = 0, $call223 = 0;
 var $call228 = 0, $call233 = 0, $call238 = 0, $call27 = 0, $call32 = 0, $call37 = 0, $call42 = 0, $call47 = 0, $call52 = 0, $call57 = 0, $call62 = 0, $call67 = 0, $call72 = 0, $call77 = 0, $call83 = 0, $call88 = 0, $call93 = 0, $call98 = 0, $cond = 0, $conv = 0;
 var $conv14 = 0, $conv3 = 0, $conv8 = 0, $flags = 0, $line$addr = 0, $player = 0, $retval = 0, $side$addr = 0, $special = 0, $special13 = 0, $special7 = 0, $thing$addr = 0, $tobool = 0, $tobool1 = 0, $tobool104 = 0, $tobool109 = 0, $tobool114 = 0, $tobool119 = 0, $tobool124 = 0, $tobool129 = 0;
 var $tobool134 = 0, $tobool139 = 0, $tobool144 = 0, $tobool149 = 0, $tobool154 = 0, $tobool159 = 0, $tobool164 = 0, $tobool169 = 0, $tobool17 = 0, $tobool174 = 0, $tobool179 = 0, $tobool184 = 0, $tobool189 = 0, $tobool194 = 0, $tobool199 = 0, $tobool204 = 0, $tobool209 = 0, $tobool214 = 0, $tobool219 = 0, $tobool22 = 0;
 var $tobool224 = 0, $tobool229 = 0, $tobool234 = 0, $tobool239 = 0, $tobool28 = 0, $tobool33 = 0, $tobool38 = 0, $tobool4 = 0, $tobool43 = 0, $tobool48 = 0, $tobool53 = 0, $tobool58 = 0, $tobool63 = 0, $tobool68 = 0, $tobool73 = 0, $tobool78 = 0, $tobool84 = 0, $tobool89 = 0, $tobool94 = 0, $tobool99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thing$addr = $thing;
 $line$addr = $line;
 $side$addr = $side;
 $0 = $side$addr;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = $line$addr;
  $special = ((($1)) + 18|0);
  $2 = HEAP16[$special>>1]|0;
  $conv = $2 << 16 >> 16;
  $cond = ($conv|0)==(124);
  if (!($cond)) {
   $retval = 0;
   $111 = $retval;
   STACKTOP = sp;return ($111|0);
  }
 }
 $3 = $thing$addr;
 $player = ((($3)) + 132|0);
 $4 = HEAP32[$player>>2]|0;
 $tobool1 = ($4|0)!=(0|0);
 L6: do {
  if (!($tobool1)) {
   $5 = $line$addr;
   $flags = ((($5)) + 16|0);
   $6 = HEAP16[$flags>>1]|0;
   $conv3 = $6 << 16 >> 16;
   $and = $conv3 & 32;
   $tobool4 = ($and|0)!=(0);
   if ($tobool4) {
    $retval = 0;
    $111 = $retval;
    STACKTOP = sp;return ($111|0);
   }
   $7 = $line$addr;
   $special7 = ((($7)) + 18|0);
   $8 = HEAP16[$special7>>1]|0;
   $conv8 = $8 << 16 >> 16;
   switch ($conv8|0) {
   case 34: case 33: case 32: case 1:  {
    break L6;
    break;
   }
   default: {
   }
   }
   $retval = 0;
   $111 = $retval;
   STACKTOP = sp;return ($111|0);
  }
 } while(0);
 $9 = $line$addr;
 $special13 = ((($9)) + 18|0);
 $10 = HEAP16[$special13>>1]|0;
 $conv14 = $10 << 16 >> 16;
 do {
  switch ($conv14|0) {
  case 118: case 117: case 34: case 33: case 32: case 31: case 28: case 27: case 26: case 1:  {
   $11 = $line$addr;
   $12 = $thing$addr;
   _EV_VerticalDoor($11,$12);
   break;
  }
  case 7:  {
   $13 = $line$addr;
   $call = (_EV_BuildStairs($13,0)|0);
   $tobool17 = ($call|0)!=(0);
   if ($tobool17) {
    $14 = $line$addr;
    _P_ChangeSwitchTexture($14,0);
   }
   break;
  }
  case 9:  {
   $15 = $line$addr;
   $call21 = (_EV_DoDonut($15)|0);
   $tobool22 = ($call21|0)!=(0);
   if ($tobool22) {
    $16 = $line$addr;
    _P_ChangeSwitchTexture($16,0);
   }
   break;
  }
  case 11:  {
   $17 = $line$addr;
   _P_ChangeSwitchTexture($17,0);
   _G_ExitLevel();
   break;
  }
  case 14:  {
   $18 = $line$addr;
   $call27 = (_EV_DoPlat($18,2,32)|0);
   $tobool28 = ($call27|0)!=(0);
   if ($tobool28) {
    $19 = $line$addr;
    _P_ChangeSwitchTexture($19,0);
   }
   break;
  }
  case 15:  {
   $20 = $line$addr;
   $call32 = (_EV_DoPlat($20,2,24)|0);
   $tobool33 = ($call32|0)!=(0);
   if ($tobool33) {
    $21 = $line$addr;
    _P_ChangeSwitchTexture($21,0);
   }
   break;
  }
  case 18:  {
   $22 = $line$addr;
   $call37 = (_EV_DoFloor($22,4)|0);
   $tobool38 = ($call37|0)!=(0);
   if ($tobool38) {
    $23 = $line$addr;
    _P_ChangeSwitchTexture($23,0);
   }
   break;
  }
  case 20:  {
   $24 = $line$addr;
   $call42 = (_EV_DoPlat($24,3,0)|0);
   $tobool43 = ($call42|0)!=(0);
   if ($tobool43) {
    $25 = $line$addr;
    _P_ChangeSwitchTexture($25,0);
   }
   break;
  }
  case 21:  {
   $26 = $line$addr;
   $call47 = (_EV_DoPlat($26,1,0)|0);
   $tobool48 = ($call47|0)!=(0);
   if ($tobool48) {
    $27 = $line$addr;
    _P_ChangeSwitchTexture($27,0);
   }
   break;
  }
  case 23:  {
   $28 = $line$addr;
   $call52 = (_EV_DoFloor($28,1)|0);
   $tobool53 = ($call52|0)!=(0);
   if ($tobool53) {
    $29 = $line$addr;
    _P_ChangeSwitchTexture($29,0);
   }
   break;
  }
  case 29:  {
   $30 = $line$addr;
   $call57 = (_EV_DoDoor($30,0)|0);
   $tobool58 = ($call57|0)!=(0);
   if ($tobool58) {
    $31 = $line$addr;
    _P_ChangeSwitchTexture($31,0);
   }
   break;
  }
  case 41:  {
   $32 = $line$addr;
   $call62 = (_EV_DoCeiling($32,0)|0);
   $tobool63 = ($call62|0)!=(0);
   if ($tobool63) {
    $33 = $line$addr;
    _P_ChangeSwitchTexture($33,0);
   }
   break;
  }
  case 71:  {
   $34 = $line$addr;
   $call67 = (_EV_DoFloor($34,2)|0);
   $tobool68 = ($call67|0)!=(0);
   if ($tobool68) {
    $35 = $line$addr;
    _P_ChangeSwitchTexture($35,0);
   }
   break;
  }
  case 49:  {
   $36 = $line$addr;
   $call72 = (_EV_DoCeiling($36,3)|0);
   $tobool73 = ($call72|0)!=(0);
   if ($tobool73) {
    $37 = $line$addr;
    _P_ChangeSwitchTexture($37,0);
   }
   break;
  }
  case 50:  {
   $38 = $line$addr;
   $call77 = (_EV_DoDoor($38,2)|0);
   $tobool78 = ($call77|0)!=(0);
   if ($tobool78) {
    $39 = $line$addr;
    _P_ChangeSwitchTexture($39,0);
   }
   break;
  }
  case 51:  {
   $40 = $line$addr;
   _P_ChangeSwitchTexture($40,0);
   _G_SecretExitLevel();
   break;
  }
  case 55:  {
   $41 = $line$addr;
   $call83 = (_EV_DoFloor($41,9)|0);
   $tobool84 = ($call83|0)!=(0);
   if ($tobool84) {
    $42 = $line$addr;
    _P_ChangeSwitchTexture($42,0);
   }
   break;
  }
  case 101:  {
   $43 = $line$addr;
   $call88 = (_EV_DoFloor($43,3)|0);
   $tobool89 = ($call88|0)!=(0);
   if ($tobool89) {
    $44 = $line$addr;
    _P_ChangeSwitchTexture($44,0);
   }
   break;
  }
  case 102:  {
   $45 = $line$addr;
   $call93 = (_EV_DoFloor($45,0)|0);
   $tobool94 = ($call93|0)!=(0);
   if ($tobool94) {
    $46 = $line$addr;
    _P_ChangeSwitchTexture($46,0);
   }
   break;
  }
  case 103:  {
   $47 = $line$addr;
   $call98 = (_EV_DoDoor($47,3)|0);
   $tobool99 = ($call98|0)!=(0);
   if ($tobool99) {
    $48 = $line$addr;
    _P_ChangeSwitchTexture($48,0);
   }
   break;
  }
  case 111:  {
   $49 = $line$addr;
   $call103 = (_EV_DoDoor($49,5)|0);
   $tobool104 = ($call103|0)!=(0);
   if ($tobool104) {
    $50 = $line$addr;
    _P_ChangeSwitchTexture($50,0);
   }
   break;
  }
  case 112:  {
   $51 = $line$addr;
   $call108 = (_EV_DoDoor($51,6)|0);
   $tobool109 = ($call108|0)!=(0);
   if ($tobool109) {
    $52 = $line$addr;
    _P_ChangeSwitchTexture($52,0);
   }
   break;
  }
  case 113:  {
   $53 = $line$addr;
   $call113 = (_EV_DoDoor($53,7)|0);
   $tobool114 = ($call113|0)!=(0);
   if ($tobool114) {
    $54 = $line$addr;
    _P_ChangeSwitchTexture($54,0);
   }
   break;
  }
  case 122:  {
   $55 = $line$addr;
   $call118 = (_EV_DoPlat($55,4,0)|0);
   $tobool119 = ($call118|0)!=(0);
   if ($tobool119) {
    $56 = $line$addr;
    _P_ChangeSwitchTexture($56,0);
   }
   break;
  }
  case 127:  {
   $57 = $line$addr;
   $call123 = (_EV_BuildStairs($57,1)|0);
   $tobool124 = ($call123|0)!=(0);
   if ($tobool124) {
    $58 = $line$addr;
    _P_ChangeSwitchTexture($58,0);
   }
   break;
  }
  case 131:  {
   $59 = $line$addr;
   $call128 = (_EV_DoFloor($59,10)|0);
   $tobool129 = ($call128|0)!=(0);
   if ($tobool129) {
    $60 = $line$addr;
    _P_ChangeSwitchTexture($60,0);
   }
   break;
  }
  case 137: case 135: case 133:  {
   $61 = $line$addr;
   $62 = $thing$addr;
   $call133 = (_EV_DoLockedDoor($61,6,$62)|0);
   $tobool134 = ($call133|0)!=(0);
   if ($tobool134) {
    $63 = $line$addr;
    _P_ChangeSwitchTexture($63,0);
   }
   break;
  }
  case 140:  {
   $64 = $line$addr;
   $call138 = (_EV_DoFloor($64,12)|0);
   $tobool139 = ($call138|0)!=(0);
   if ($tobool139) {
    $65 = $line$addr;
    _P_ChangeSwitchTexture($65,0);
   }
   break;
  }
  case 42:  {
   $66 = $line$addr;
   $call143 = (_EV_DoDoor($66,2)|0);
   $tobool144 = ($call143|0)!=(0);
   if ($tobool144) {
    $67 = $line$addr;
    _P_ChangeSwitchTexture($67,1);
   }
   break;
  }
  case 43:  {
   $68 = $line$addr;
   $call148 = (_EV_DoCeiling($68,0)|0);
   $tobool149 = ($call148|0)!=(0);
   if ($tobool149) {
    $69 = $line$addr;
    _P_ChangeSwitchTexture($69,1);
   }
   break;
  }
  case 45:  {
   $70 = $line$addr;
   $call153 = (_EV_DoFloor($70,0)|0);
   $tobool154 = ($call153|0)!=(0);
   if ($tobool154) {
    $71 = $line$addr;
    _P_ChangeSwitchTexture($71,1);
   }
   break;
  }
  case 60:  {
   $72 = $line$addr;
   $call158 = (_EV_DoFloor($72,1)|0);
   $tobool159 = ($call158|0)!=(0);
   if ($tobool159) {
    $73 = $line$addr;
    _P_ChangeSwitchTexture($73,1);
   }
   break;
  }
  case 61:  {
   $74 = $line$addr;
   $call163 = (_EV_DoDoor($74,3)|0);
   $tobool164 = ($call163|0)!=(0);
   if ($tobool164) {
    $75 = $line$addr;
    _P_ChangeSwitchTexture($75,1);
   }
   break;
  }
  case 62:  {
   $76 = $line$addr;
   $call168 = (_EV_DoPlat($76,1,1)|0);
   $tobool169 = ($call168|0)!=(0);
   if ($tobool169) {
    $77 = $line$addr;
    _P_ChangeSwitchTexture($77,1);
   }
   break;
  }
  case 63:  {
   $78 = $line$addr;
   $call173 = (_EV_DoDoor($78,0)|0);
   $tobool174 = ($call173|0)!=(0);
   if ($tobool174) {
    $79 = $line$addr;
    _P_ChangeSwitchTexture($79,1);
   }
   break;
  }
  case 64:  {
   $80 = $line$addr;
   $call178 = (_EV_DoFloor($80,3)|0);
   $tobool179 = ($call178|0)!=(0);
   if ($tobool179) {
    $81 = $line$addr;
    _P_ChangeSwitchTexture($81,1);
   }
   break;
  }
  case 66:  {
   $82 = $line$addr;
   $call183 = (_EV_DoPlat($82,2,24)|0);
   $tobool184 = ($call183|0)!=(0);
   if ($tobool184) {
    $83 = $line$addr;
    _P_ChangeSwitchTexture($83,1);
   }
   break;
  }
  case 67:  {
   $84 = $line$addr;
   $call188 = (_EV_DoPlat($84,2,32)|0);
   $tobool189 = ($call188|0)!=(0);
   if ($tobool189) {
    $85 = $line$addr;
    _P_ChangeSwitchTexture($85,1);
   }
   break;
  }
  case 65:  {
   $86 = $line$addr;
   $call193 = (_EV_DoFloor($86,9)|0);
   $tobool194 = ($call193|0)!=(0);
   if ($tobool194) {
    $87 = $line$addr;
    _P_ChangeSwitchTexture($87,1);
   }
   break;
  }
  case 68:  {
   $88 = $line$addr;
   $call198 = (_EV_DoPlat($88,3,0)|0);
   $tobool199 = ($call198|0)!=(0);
   if ($tobool199) {
    $89 = $line$addr;
    _P_ChangeSwitchTexture($89,1);
   }
   break;
  }
  case 69:  {
   $90 = $line$addr;
   $call203 = (_EV_DoFloor($90,4)|0);
   $tobool204 = ($call203|0)!=(0);
   if ($tobool204) {
    $91 = $line$addr;
    _P_ChangeSwitchTexture($91,1);
   }
   break;
  }
  case 70:  {
   $92 = $line$addr;
   $call208 = (_EV_DoFloor($92,2)|0);
   $tobool209 = ($call208|0)!=(0);
   if ($tobool209) {
    $93 = $line$addr;
    _P_ChangeSwitchTexture($93,1);
   }
   break;
  }
  case 114:  {
   $94 = $line$addr;
   $call213 = (_EV_DoDoor($94,5)|0);
   $tobool214 = ($call213|0)!=(0);
   if ($tobool214) {
    $95 = $line$addr;
    _P_ChangeSwitchTexture($95,1);
   }
   break;
  }
  case 115:  {
   $96 = $line$addr;
   $call218 = (_EV_DoDoor($96,6)|0);
   $tobool219 = ($call218|0)!=(0);
   if ($tobool219) {
    $97 = $line$addr;
    _P_ChangeSwitchTexture($97,1);
   }
   break;
  }
  case 116:  {
   $98 = $line$addr;
   $call223 = (_EV_DoDoor($98,7)|0);
   $tobool224 = ($call223|0)!=(0);
   if ($tobool224) {
    $99 = $line$addr;
    _P_ChangeSwitchTexture($99,1);
   }
   break;
  }
  case 123:  {
   $100 = $line$addr;
   $call228 = (_EV_DoPlat($100,4,0)|0);
   $tobool229 = ($call228|0)!=(0);
   if ($tobool229) {
    $101 = $line$addr;
    _P_ChangeSwitchTexture($101,1);
   }
   break;
  }
  case 132:  {
   $102 = $line$addr;
   $call233 = (_EV_DoFloor($102,10)|0);
   $tobool234 = ($call233|0)!=(0);
   if ($tobool234) {
    $103 = $line$addr;
    _P_ChangeSwitchTexture($103,1);
   }
   break;
  }
  case 136: case 134: case 99:  {
   $104 = $line$addr;
   $105 = $thing$addr;
   $call238 = (_EV_DoLockedDoor($104,6,$105)|0);
   $tobool239 = ($call238|0)!=(0);
   if ($tobool239) {
    $106 = $line$addr;
    _P_ChangeSwitchTexture($106,1);
   }
   break;
  }
  case 138:  {
   $107 = $line$addr;
   _EV_LightTurnOn($107,255);
   $108 = $line$addr;
   _P_ChangeSwitchTexture($108,1);
   break;
  }
  case 139:  {
   $109 = $line$addr;
   _EV_LightTurnOn($109,35);
   $110 = $line$addr;
   _P_ChangeSwitchTexture($110,1);
   break;
  }
  default: {
  }
  }
 } while(0);
 $retval = 1;
 $111 = $retval;
 STACKTOP = sp;return ($111|0);
}
function _EV_Teleport($line,$side,$thing) {
 $line = $line|0;
 $side = $side|0;
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add47 = 0, $add51 = 0, $an = 0, $and = 0, $angle = 0, $angle58 = 0, $angle59 = 0, $arrayidx = 0, $arrayidx46 = 0, $arrayidx49 = 0, $call = 0, $call44 = 0, $call53 = 0, $cmp = 0, $cmp12 = 0, $cmp15 = 0, $cmp19 = 0, $cmp24 = 0, $cmp33 = 0, $cmp4 = 0;
 var $cmp8 = 0, $conv = 0, $conv7 = 0, $flags = 0, $floorz = 0, $fog = 0, $function = 0, $i = 0, $inc = 0, $line$addr = 0, $m = 0, $momx = 0, $momy = 0, $momz = 0, $mul = 0, $mul50 = 0, $next = 0, $oldx = 0, $oldy = 0, $oldz = 0;
 var $player = 0, $player41 = 0, $player42 = 0, $player54 = 0, $reactiontime = 0, $retval = 0, $sector = 0, $shr = 0, $side$addr = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $subsector = 0, $tag = 0, $tag3 = 0, $tag6 = 0, $thing$addr = 0, $thinker = 0, $tobool = 0;
 var $tobool30 = 0, $tobool38 = 0, $tobool55 = 0, $type = 0, $viewheight = 0, $viewz = 0, $x = 0, $x28 = 0, $x45 = 0, $y = 0, $y29 = 0, $y48 = 0, $z = 0, $z36 = 0, $z40 = 0, $z52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $line$addr = $line;
 $side$addr = $side;
 $thing$addr = $thing;
 $0 = $thing$addr;
 $flags = ((($0)) + 104|0);
 $1 = HEAP32[$flags>>2]|0;
 $and = $1 & 65536;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $retval = 0;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
 }
 $2 = $side$addr;
 $cmp = ($2|0)==(1);
 if ($cmp) {
  $retval = 0;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
 }
 $3 = $line$addr;
 $tag3 = ((($3)) + 20|0);
 $4 = HEAP16[$tag3>>1]|0;
 $conv = $4 << 16 >> 16;
 $tag = $conv;
 $i = 0;
 L9: while(1) {
  $5 = $i;
  $6 = HEAP32[99849]|0;
  $cmp4 = ($5|0)<($6|0);
  if (!($cmp4)) {
   label = 24;
   break;
  }
  $7 = HEAP32[99850]|0;
  $8 = $i;
  $arrayidx = (($7) + (($8*88)|0)|0);
  $tag6 = ((($arrayidx)) + 16|0);
  $9 = HEAP16[$tag6>>1]|0;
  $conv7 = $9 << 16 >> 16;
  $10 = $tag;
  $cmp8 = ($conv7|0)==($10|0);
  L12: do {
   if ($cmp8) {
    $11 = HEAP32[(399612)>>2]|0;
    $thinker = $11;
    $12 = HEAP32[(399612)>>2]|0;
    $thinker = $12;
    while(1) {
     $13 = $thinker;
     $cmp12 = ($13|0)!=(399608|0);
     if (!($cmp12)) {
      break L12;
     }
     $14 = $thinker;
     $function = ((($14)) + 8|0);
     $15 = HEAP32[$function>>2]|0;
     $cmp15 = ($15|0)!=(136|0);
     if (!($cmp15)) {
      $16 = $thinker;
      $m = $16;
      $17 = $m;
      $type = ((($17)) + 88|0);
      $18 = HEAP32[$type>>2]|0;
      $cmp19 = ($18|0)!=(41);
      if (!($cmp19)) {
       $19 = $m;
       $subsector = ((($19)) + 52|0);
       $20 = HEAP32[$subsector>>2]|0;
       $21 = HEAP32[$20>>2]|0;
       $sector = $21;
       $22 = $sector;
       $23 = HEAP32[99850]|0;
       $sub$ptr$lhs$cast = $22;
       $sub$ptr$rhs$cast = $23;
       $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
       $sub$ptr$div = (($sub$ptr$sub|0) / 88)&-1;
       $24 = $i;
       $cmp24 = ($sub$ptr$div|0)!=($24|0);
       if (!($cmp24)) {
        break L9;
       }
      }
     }
     $75 = $thinker;
     $next = ((($75)) + 4|0);
     $76 = HEAP32[$next>>2]|0;
     $thinker = $76;
    }
   }
  } while(0);
  $77 = $i;
  $inc = (($77) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 24) {
  $retval = 0;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
 }
 $25 = $thing$addr;
 $x = ((($25)) + 12|0);
 $26 = HEAP32[$x>>2]|0;
 $oldx = $26;
 $27 = $thing$addr;
 $y = ((($27)) + 16|0);
 $28 = HEAP32[$y>>2]|0;
 $oldy = $28;
 $29 = $thing$addr;
 $z = ((($29)) + 20|0);
 $30 = HEAP32[$z>>2]|0;
 $oldz = $30;
 $31 = $thing$addr;
 $32 = $m;
 $x28 = ((($32)) + 12|0);
 $33 = HEAP32[$x28>>2]|0;
 $34 = $m;
 $y29 = ((($34)) + 16|0);
 $35 = HEAP32[$y29>>2]|0;
 $call = (_P_TeleportMove($31,$33,$35)|0);
 $tobool30 = ($call|0)!=(0);
 if (!($tobool30)) {
  $retval = 0;
  $78 = $retval;
  STACKTOP = sp;return ($78|0);
 }
 $36 = HEAP32[32169]|0;
 $cmp33 = ($36|0)!=(7);
 if ($cmp33) {
  $37 = $thing$addr;
  $floorz = ((($37)) + 56|0);
  $38 = HEAP32[$floorz>>2]|0;
  $39 = $thing$addr;
  $z36 = ((($39)) + 20|0);
  HEAP32[$z36>>2] = $38;
 }
 $40 = $thing$addr;
 $player = ((($40)) + 132|0);
 $41 = HEAP32[$player>>2]|0;
 $tobool38 = ($41|0)!=(0|0);
 if ($tobool38) {
  $42 = $thing$addr;
  $z40 = ((($42)) + 20|0);
  $43 = HEAP32[$z40>>2]|0;
  $44 = $thing$addr;
  $player41 = ((($44)) + 132|0);
  $45 = HEAP32[$player41>>2]|0;
  $viewheight = ((($45)) + 28|0);
  $46 = HEAP32[$viewheight>>2]|0;
  $add = (($43) + ($46))|0;
  $47 = $thing$addr;
  $player42 = ((($47)) + 132|0);
  $48 = HEAP32[$player42>>2]|0;
  $viewz = ((($48)) + 24|0);
  HEAP32[$viewz>>2] = $add;
 }
 $49 = $oldx;
 $50 = $oldy;
 $51 = $oldz;
 $call44 = (_P_SpawnMobj($49,$50,$51,39)|0);
 $fog = $call44;
 $52 = $fog;
 _S_StartSound($52,35);
 $53 = $m;
 $angle = ((($53)) + 32|0);
 $54 = HEAP32[$angle>>2]|0;
 $shr = $54 >>> 19;
 $an = $shr;
 $55 = $m;
 $x45 = ((($55)) + 12|0);
 $56 = HEAP32[$x45>>2]|0;
 $57 = $an;
 $arrayidx46 = ((82992) + ($57<<2)|0);
 $58 = HEAP32[$arrayidx46>>2]|0;
 $mul = ($58*20)|0;
 $add47 = (($56) + ($mul))|0;
 $59 = $m;
 $y48 = ((($59)) + 16|0);
 $60 = HEAP32[$y48>>2]|0;
 $61 = $an;
 $arrayidx49 = (74800 + ($61<<2)|0);
 $62 = HEAP32[$arrayidx49>>2]|0;
 $mul50 = ($62*20)|0;
 $add51 = (($60) + ($mul50))|0;
 $63 = $thing$addr;
 $z52 = ((($63)) + 20|0);
 $64 = HEAP32[$z52>>2]|0;
 $call53 = (_P_SpawnMobj($add47,$add51,$64,39)|0);
 $fog = $call53;
 $65 = $fog;
 _S_StartSound($65,35);
 $66 = $thing$addr;
 $player54 = ((($66)) + 132|0);
 $67 = HEAP32[$player54>>2]|0;
 $tobool55 = ($67|0)!=(0|0);
 if ($tobool55) {
  $68 = $thing$addr;
  $reactiontime = ((($68)) + 124|0);
  HEAP32[$reactiontime>>2] = 18;
 }
 $69 = $m;
 $angle58 = ((($69)) + 32|0);
 $70 = HEAP32[$angle58>>2]|0;
 $71 = $thing$addr;
 $angle59 = ((($71)) + 32|0);
 HEAP32[$angle59>>2] = $70;
 $72 = $thing$addr;
 $momz = ((($72)) + 80|0);
 HEAP32[$momz>>2] = 0;
 $73 = $thing$addr;
 $momy = ((($73)) + 76|0);
 HEAP32[$momy>>2] = 0;
 $74 = $thing$addr;
 $momx = ((($74)) + 72|0);
 HEAP32[$momx>>2] = 0;
 $retval = 1;
 $78 = $retval;
 STACKTOP = sp;return ($78|0);
}
function _P_InitThinkers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(399612)>>2] = 399608;
 HEAP32[99902] = 399608;
 return;
}
function _P_AddThinker($thinker) {
 $thinker = $thinker|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $next = 0, $next1 = 0, $thinker$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thinker$addr = $thinker;
 $0 = $thinker$addr;
 $1 = HEAP32[99902]|0;
 $next = ((($1)) + 4|0);
 HEAP32[$next>>2] = $0;
 $2 = $thinker$addr;
 $next1 = ((($2)) + 4|0);
 HEAP32[$next1>>2] = 399608;
 $3 = HEAP32[99902]|0;
 $4 = $thinker$addr;
 HEAP32[$4>>2] = $3;
 $5 = $thinker$addr;
 HEAP32[99902] = $5;
 STACKTOP = sp;return;
}
function _P_RemoveThinker($thinker) {
 $thinker = $thinker|0;
 var $0 = 0, $function = 0, $thinker$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $thinker$addr = $thinker;
 $0 = $thinker$addr;
 $function = ((($0)) + 8|0);
 HEAP32[$function>>2] = (-1);
 STACKTOP = sp;return;
}
function _P_RunThinkers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0;
 var $cmp1 = 0, $currentthinker = 0, $function = 0, $function6 = 0, $function8 = 0, $next = 0, $next11 = 0, $next3 = 0, $next5 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(399612)>>2]|0;
 $currentthinker = $0;
 while(1) {
  $1 = $currentthinker;
  $cmp = ($1|0)!=(399608|0);
  if (!($cmp)) {
   break;
  }
  $2 = $currentthinker;
  $function = ((($2)) + 8|0);
  $3 = HEAP32[$function>>2]|0;
  $cmp1 = ($3|0)==((-1)|0);
  $4 = $currentthinker;
  if ($cmp1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = $currentthinker;
   $next = ((($6)) + 4|0);
   $7 = HEAP32[$next>>2]|0;
   HEAP32[$7>>2] = $5;
   $8 = $currentthinker;
   $next3 = ((($8)) + 4|0);
   $9 = HEAP32[$next3>>2]|0;
   $10 = $currentthinker;
   $11 = HEAP32[$10>>2]|0;
   $next5 = ((($11)) + 4|0);
   HEAP32[$next5>>2] = $9;
   $12 = $currentthinker;
   _Z_Free($12);
  } else {
   $function6 = ((($4)) + 8|0);
   $13 = HEAP32[$function6>>2]|0;
   $tobool = ($13|0)!=(0|0);
   if ($tobool) {
    $14 = $currentthinker;
    $function8 = ((($14)) + 8|0);
    $15 = HEAP32[$function8>>2]|0;
    $16 = $currentthinker;
    FUNCTION_TABLE_vi[$15 & 255]($16);
   }
  }
  $17 = $currentthinker;
  $next11 = ((($17)) + 4|0);
  $18 = HEAP32[$next11>>2]|0;
  $currentthinker = $18;
 }
 STACKTOP = sp;return;
}
function _P_Ticker() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx9 = 0, $cmp = 0, $cmp8 = 0, $i = 0, $inc = 0, $inc14 = 0;
 var $or$cond = 0, $or$cond$not = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool2 = 0, $tobool4 = 0, $viewz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99428]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99433]|0;
 $tobool1 = ($1|0)==(0);
 $2 = HEAP32[99724]|0;
 $tobool2 = ($2|0)!=(0);
 $or$cond = $tobool1 & $tobool2;
 $or$cond$not = $or$cond ^ 1;
 $3 = HEAP32[99431]|0;
 $tobool4 = ($3|0)!=(0);
 $or$cond1 = $or$cond$not | $tobool4;
 if (!($or$cond1)) {
  $4 = HEAP32[99415]|0;
  $arrayidx = (183056 + (($4*288)|0)|0);
  $viewz = ((($arrayidx)) + 24|0);
  $5 = HEAP32[$viewz>>2]|0;
  $cmp = ($5|0)!=(1);
  if ($cmp) {
   STACKTOP = sp;return;
  }
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $cmp8 = ($6|0)<(4);
  if (!($cmp8)) {
   break;
  }
  $7 = $i;
  $arrayidx9 = (183040 + ($7<<2)|0);
  $8 = HEAP32[$arrayidx9>>2]|0;
  $tobool10 = ($8|0)!=(0);
  if ($tobool10) {
   $9 = $i;
   $arrayidx12 = (183056 + (($9*288)|0)|0);
   _P_PlayerThink($arrayidx12);
  }
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 _P_RunThinkers();
 _P_UpdateSpecials();
 _P_RespawnSpecials();
 $11 = HEAP32[99905]|0;
 $inc14 = (($11) + 1)|0;
 HEAP32[99905] = $inc14;
 STACKTOP = sp;return;
}
function _P_Thrust($player,$angle,$move) {
 $player = $player|0;
 $angle = $angle|0;
 $move = $move|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add4 = 0, $angle$addr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $call2 = 0;
 var $momx = 0, $momy = 0, $move$addr = 0, $player$addr = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $angle$addr = $angle;
 $move$addr = $move;
 $0 = $angle$addr;
 $shr = $0 >>> 19;
 $angle$addr = $shr;
 $1 = $move$addr;
 $2 = $angle$addr;
 $arrayidx = ((82992) + ($2<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $call = (_FixedMul($1,$3)|0);
 $4 = $player$addr;
 $5 = HEAP32[$4>>2]|0;
 $momx = ((($5)) + 72|0);
 $6 = HEAP32[$momx>>2]|0;
 $add = (($6) + ($call))|0;
 HEAP32[$momx>>2] = $add;
 $7 = $move$addr;
 $8 = $angle$addr;
 $arrayidx1 = (74800 + ($8<<2)|0);
 $9 = HEAP32[$arrayidx1>>2]|0;
 $call2 = (_FixedMul($7,$9)|0);
 $10 = $player$addr;
 $11 = HEAP32[$10>>2]|0;
 $momy = ((($11)) + 76|0);
 $12 = HEAP32[$momy>>2]|0;
 $add4 = (($12) + ($call2))|0;
 HEAP32[$momy>>2] = $add4;
 STACKTOP = sp;return;
}
function _P_CalcHeight($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $add = 0, $add14 = 0, $add26 = 0, $add35 = 0, $add56 = 0, $add67 = 0, $add68 = 0, $and = 0, $and29 = 0, $angle = 0, $arrayidx = 0, $bob = 0, $bob10 = 0, $bob30 = 0, $bob7 = 0, $bob8 = 0;
 var $bob9 = 0, $call = 0, $call31 = 0, $call6 = 0, $ceilingz = 0, $ceilingz20 = 0, $ceilingz72 = 0, $ceilingz77 = 0, $cheats = 0, $cmp = 0, $cmp17 = 0, $cmp32 = 0, $cmp37 = 0, $cmp43 = 0, $cmp47 = 0, $cmp74 = 0, $deltaviewheight = 0, $deltaviewheight40 = 0, $deltaviewheight46 = 0, $deltaviewheight49 = 0;
 var $deltaviewheight52 = 0, $deltaviewheight55 = 0, $deltaviewheight57 = 0, $deltaviewheight60 = 0, $div = 0, $momx = 0, $momx2 = 0, $momy = 0, $momy5 = 0, $mul = 0, $or$cond = 0, $player$addr = 0, $playerstate = 0, $shr = 0, $sub = 0, $sub21 = 0, $sub73 = 0, $sub78 = 0, $tobool = 0, $tobool11 = 0;
 var $tobool53 = 0, $tobool58 = 0, $viewheight = 0, $viewheight34 = 0, $viewheight36 = 0, $viewheight39 = 0, $viewheight42 = 0, $viewheight45 = 0, $viewheight66 = 0, $viewz = 0, $viewz15 = 0, $viewz22 = 0, $viewz27 = 0, $viewz69 = 0, $viewz70 = 0, $viewz79 = 0, $z = 0, $z25 = 0, $z65 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $1 = HEAP32[$0>>2]|0;
 $momx = ((($1)) + 72|0);
 $2 = HEAP32[$momx>>2]|0;
 $3 = $player$addr;
 $4 = HEAP32[$3>>2]|0;
 $momx2 = ((($4)) + 72|0);
 $5 = HEAP32[$momx2>>2]|0;
 $call = (_FixedMul($2,$5)|0);
 $6 = $player$addr;
 $7 = HEAP32[$6>>2]|0;
 $momy = ((($7)) + 76|0);
 $8 = HEAP32[$momy>>2]|0;
 $9 = $player$addr;
 $10 = HEAP32[$9>>2]|0;
 $momy5 = ((($10)) + 76|0);
 $11 = HEAP32[$momy5>>2]|0;
 $call6 = (_FixedMul($8,$11)|0);
 $add = (($call) + ($call6))|0;
 $12 = $player$addr;
 $bob7 = ((($12)) + 36|0);
 HEAP32[$bob7>>2] = $add;
 $13 = $player$addr;
 $bob8 = ((($13)) + 36|0);
 $14 = HEAP32[$bob8>>2]|0;
 $shr = $14 >> 2;
 HEAP32[$bob8>>2] = $shr;
 $15 = $player$addr;
 $bob9 = ((($15)) + 36|0);
 $16 = HEAP32[$bob9>>2]|0;
 $cmp = ($16|0)>(1048576);
 if ($cmp) {
  $17 = $player$addr;
  $bob10 = ((($17)) + 36|0);
  HEAP32[$bob10>>2] = 1048576;
 }
 $18 = $player$addr;
 $cheats = ((($18)) + 204|0);
 $19 = HEAP32[$cheats>>2]|0;
 $and = $19 & 4;
 $tobool = ($and|0)==(0);
 $20 = HEAP32[99906]|0;
 $tobool11 = ($20|0)!=(0);
 $or$cond = $tobool & $tobool11;
 if (!($or$cond)) {
  $21 = $player$addr;
  $22 = HEAP32[$21>>2]|0;
  $z = ((($22)) + 20|0);
  $23 = HEAP32[$z>>2]|0;
  $add14 = (($23) + 2686976)|0;
  $24 = $player$addr;
  $viewz = ((($24)) + 24|0);
  HEAP32[$viewz>>2] = $add14;
  $25 = $player$addr;
  $viewz15 = ((($25)) + 24|0);
  $26 = HEAP32[$viewz15>>2]|0;
  $27 = $player$addr;
  $28 = HEAP32[$27>>2]|0;
  $ceilingz = ((($28)) + 60|0);
  $29 = HEAP32[$ceilingz>>2]|0;
  $sub = (($29) - 262144)|0;
  $cmp17 = ($26|0)>($sub|0);
  if ($cmp17) {
   $30 = $player$addr;
   $31 = HEAP32[$30>>2]|0;
   $ceilingz20 = ((($31)) + 60|0);
   $32 = HEAP32[$ceilingz20>>2]|0;
   $sub21 = (($32) - 262144)|0;
   $33 = $player$addr;
   $viewz22 = ((($33)) + 24|0);
   HEAP32[$viewz22>>2] = $sub21;
  }
  $34 = $player$addr;
  $35 = HEAP32[$34>>2]|0;
  $z25 = ((($35)) + 20|0);
  $36 = HEAP32[$z25>>2]|0;
  $37 = $player$addr;
  $viewheight = ((($37)) + 28|0);
  $38 = HEAP32[$viewheight>>2]|0;
  $add26 = (($36) + ($38))|0;
  $39 = $player$addr;
  $viewz27 = ((($39)) + 24|0);
  HEAP32[$viewz27>>2] = $add26;
  STACKTOP = sp;return;
 }
 $40 = HEAP32[99905]|0;
 $mul = ($40*409)|0;
 $and29 = $mul & 8191;
 $angle = $and29;
 $41 = $player$addr;
 $bob30 = ((($41)) + 36|0);
 $42 = HEAP32[$bob30>>2]|0;
 $div = (($42|0) / 2)&-1;
 $43 = $angle;
 $arrayidx = (74800 + ($43<<2)|0);
 $44 = HEAP32[$arrayidx>>2]|0;
 $call31 = (_FixedMul($div,$44)|0);
 $bob = $call31;
 $45 = $player$addr;
 $playerstate = ((($45)) + 4|0);
 $46 = HEAP32[$playerstate>>2]|0;
 $cmp32 = ($46|0)==(0);
 if ($cmp32) {
  $47 = $player$addr;
  $deltaviewheight = ((($47)) + 32|0);
  $48 = HEAP32[$deltaviewheight>>2]|0;
  $49 = $player$addr;
  $viewheight34 = ((($49)) + 28|0);
  $50 = HEAP32[$viewheight34>>2]|0;
  $add35 = (($50) + ($48))|0;
  HEAP32[$viewheight34>>2] = $add35;
  $51 = $player$addr;
  $viewheight36 = ((($51)) + 28|0);
  $52 = HEAP32[$viewheight36>>2]|0;
  $cmp37 = ($52|0)>(2686976);
  if ($cmp37) {
   $53 = $player$addr;
   $viewheight39 = ((($53)) + 28|0);
   HEAP32[$viewheight39>>2] = 2686976;
   $54 = $player$addr;
   $deltaviewheight40 = ((($54)) + 32|0);
   HEAP32[$deltaviewheight40>>2] = 0;
  }
  $55 = $player$addr;
  $viewheight42 = ((($55)) + 28|0);
  $56 = HEAP32[$viewheight42>>2]|0;
  $cmp43 = ($56|0)<(1343488);
  if ($cmp43) {
   $57 = $player$addr;
   $viewheight45 = ((($57)) + 28|0);
   HEAP32[$viewheight45>>2] = 1343488;
   $58 = $player$addr;
   $deltaviewheight46 = ((($58)) + 32|0);
   $59 = HEAP32[$deltaviewheight46>>2]|0;
   $cmp47 = ($59|0)<=(0);
   if ($cmp47) {
    $60 = $player$addr;
    $deltaviewheight49 = ((($60)) + 32|0);
    HEAP32[$deltaviewheight49>>2] = 1;
   }
  }
  $61 = $player$addr;
  $deltaviewheight52 = ((($61)) + 32|0);
  $62 = HEAP32[$deltaviewheight52>>2]|0;
  $tobool53 = ($62|0)!=(0);
  if ($tobool53) {
   $63 = $player$addr;
   $deltaviewheight55 = ((($63)) + 32|0);
   $64 = HEAP32[$deltaviewheight55>>2]|0;
   $add56 = (($64) + 16384)|0;
   HEAP32[$deltaviewheight55>>2] = $add56;
   $65 = $player$addr;
   $deltaviewheight57 = ((($65)) + 32|0);
   $66 = HEAP32[$deltaviewheight57>>2]|0;
   $tobool58 = ($66|0)!=(0);
   if (!($tobool58)) {
    $67 = $player$addr;
    $deltaviewheight60 = ((($67)) + 32|0);
    HEAP32[$deltaviewheight60>>2] = 1;
   }
  }
 }
 $68 = $player$addr;
 $69 = HEAP32[$68>>2]|0;
 $z65 = ((($69)) + 20|0);
 $70 = HEAP32[$z65>>2]|0;
 $71 = $player$addr;
 $viewheight66 = ((($71)) + 28|0);
 $72 = HEAP32[$viewheight66>>2]|0;
 $add67 = (($70) + ($72))|0;
 $73 = $bob;
 $add68 = (($add67) + ($73))|0;
 $74 = $player$addr;
 $viewz69 = ((($74)) + 24|0);
 HEAP32[$viewz69>>2] = $add68;
 $75 = $player$addr;
 $viewz70 = ((($75)) + 24|0);
 $76 = HEAP32[$viewz70>>2]|0;
 $77 = $player$addr;
 $78 = HEAP32[$77>>2]|0;
 $ceilingz72 = ((($78)) + 60|0);
 $79 = HEAP32[$ceilingz72>>2]|0;
 $sub73 = (($79) - 262144)|0;
 $cmp74 = ($76|0)>($sub73|0);
 if (!($cmp74)) {
  STACKTOP = sp;return;
 }
 $80 = $player$addr;
 $81 = HEAP32[$80>>2]|0;
 $ceilingz77 = ((($81)) + 60|0);
 $82 = HEAP32[$ceilingz77>>2]|0;
 $sub78 = (($82) - 262144)|0;
 $83 = $player$addr;
 $viewz79 = ((($83)) + 24|0);
 HEAP32[$viewz79>>2] = $sub78;
 STACKTOP = sp;return;
}
function _P_MovePlayer($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $angle = 0, $angle17 = 0, $angle8 = 0, $angleturn = 0, $cmd = 0, $cmd1 = 0, $cmp = 0, $cmp30 = 0, $conv = 0, $conv10 = 0, $conv11 = 0, $conv19 = 0, $conv23 = 0, $conv26 = 0, $conv4 = 0, $conv5 = 0, $floorz = 0, $mul = 0, $mul20 = 0, $or$cond = 0;
 var $or$cond1 = 0, $player$addr = 0, $shl = 0, $sidemove = 0, $sidemove18 = 0, $sidemove25 = 0, $state = 0, $sub = 0, $tobool = 0, $tobool12 = 0, $tobool14 = 0, $tobool24 = 0, $tobool27 = 0, $tobool6 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $cmd1 = ((($0)) + 8|0);
 $cmd = $cmd1;
 $1 = $cmd;
 $angleturn = ((($1)) + 2|0);
 $2 = HEAP16[$angleturn>>1]|0;
 $conv = $2 << 16 >> 16;
 $shl = $conv << 16;
 $3 = $player$addr;
 $4 = HEAP32[$3>>2]|0;
 $angle = ((($4)) + 32|0);
 $5 = HEAP32[$angle>>2]|0;
 $add = (($5) + ($shl))|0;
 HEAP32[$angle>>2] = $add;
 $6 = $player$addr;
 $7 = HEAP32[$6>>2]|0;
 $z = ((($7)) + 20|0);
 $8 = HEAP32[$z>>2]|0;
 $9 = $player$addr;
 $10 = HEAP32[$9>>2]|0;
 $floorz = ((($10)) + 56|0);
 $11 = HEAP32[$floorz>>2]|0;
 $cmp = ($8|0)<=($11|0);
 $conv4 = $cmp&1;
 HEAP32[99906] = $conv4;
 $12 = $cmd;
 $13 = HEAP8[$12>>0]|0;
 $conv5 = $13 << 24 >> 24;
 $tobool = ($conv5|0)!=(0);
 $14 = HEAP32[99906]|0;
 $tobool6 = ($14|0)!=(0);
 $or$cond = $tobool & $tobool6;
 if ($or$cond) {
  $15 = $player$addr;
  $16 = $player$addr;
  $17 = HEAP32[$16>>2]|0;
  $angle8 = ((($17)) + 32|0);
  $18 = HEAP32[$angle8>>2]|0;
  $19 = $cmd;
  $20 = HEAP8[$19>>0]|0;
  $conv10 = $20 << 24 >> 24;
  $mul = $conv10<<11;
  _P_Thrust($15,$18,$mul);
 }
 $21 = $cmd;
 $sidemove = ((($21)) + 1|0);
 $22 = HEAP8[$sidemove>>0]|0;
 $conv11 = $22 << 24 >> 24;
 $tobool12 = ($conv11|0)!=(0);
 $23 = HEAP32[99906]|0;
 $tobool14 = ($23|0)!=(0);
 $or$cond1 = $tobool12 & $tobool14;
 if ($or$cond1) {
  $24 = $player$addr;
  $25 = $player$addr;
  $26 = HEAP32[$25>>2]|0;
  $angle17 = ((($26)) + 32|0);
  $27 = HEAP32[$angle17>>2]|0;
  $sub = (($27) - 1073741824)|0;
  $28 = $cmd;
  $sidemove18 = ((($28)) + 1|0);
  $29 = HEAP8[$sidemove18>>0]|0;
  $conv19 = $29 << 24 >> 24;
  $mul20 = $conv19<<11;
  _P_Thrust($24,$sub,$mul20);
 }
 $30 = $cmd;
 $31 = HEAP8[$30>>0]|0;
 $conv23 = $31 << 24 >> 24;
 $tobool24 = ($conv23|0)!=(0);
 if (!($tobool24)) {
  $32 = $cmd;
  $sidemove25 = ((($32)) + 1|0);
  $33 = HEAP8[$sidemove25>>0]|0;
  $conv26 = $33 << 24 >> 24;
  $tobool27 = ($conv26|0)!=(0);
  if (!($tobool27)) {
   STACKTOP = sp;return;
  }
 }
 $34 = $player$addr;
 $35 = HEAP32[$34>>2]|0;
 $state = ((($35)) + 100|0);
 $36 = HEAP32[$state>>2]|0;
 $cmp30 = ($36|0)==((7740)|0);
 if (!($cmp30)) {
  STACKTOP = sp;return;
 }
 $37 = $player$addr;
 $38 = HEAP32[$37>>2]|0;
 (_P_SetMobjState($38,150)|0);
 STACKTOP = sp;return;
}
function _P_DeathThink($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0;
 var $angle = 0, $angle21 = 0, $angle29 = 0, $angle38 = 0, $attacker = 0, $attacker16 = 0, $attacker18 = 0, $attacker9 = 0, $buttons = 0, $call = 0, $cmd = 0, $cmp = 0, $cmp11 = 0, $cmp23 = 0, $cmp25 = 0, $cmp3 = 0, $cmp34 = 0, $cmp8 = 0, $conv = 0, $conv53 = 0;
 var $damagecount = 0, $damagecount32 = 0, $damagecount46 = 0, $damagecount49 = 0, $dec = 0, $dec50 = 0, $delta = 0, $deltaviewheight = 0, $floorz = 0, $or$cond = 0, $player$addr = 0, $playerstate = 0, $sub = 0, $sub22 = 0, $sub42 = 0, $tobool = 0, $tobool30 = 0, $tobool47 = 0, $tobool54 = 0, $viewheight = 0;
 var $viewheight1 = 0, $viewheight2 = 0, $viewheight5 = 0, $x = 0, $x17 = 0, $y = 0, $y19 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 _P_MovePsprites($0);
 $1 = $player$addr;
 $viewheight = ((($1)) + 28|0);
 $2 = HEAP32[$viewheight>>2]|0;
 $cmp = ($2|0)>(393216);
 if ($cmp) {
  $3 = $player$addr;
  $viewheight1 = ((($3)) + 28|0);
  $4 = HEAP32[$viewheight1>>2]|0;
  $sub = (($4) - 65536)|0;
  HEAP32[$viewheight1>>2] = $sub;
 }
 $5 = $player$addr;
 $viewheight2 = ((($5)) + 28|0);
 $6 = HEAP32[$viewheight2>>2]|0;
 $cmp3 = ($6|0)<(393216);
 if ($cmp3) {
  $7 = $player$addr;
  $viewheight5 = ((($7)) + 28|0);
  HEAP32[$viewheight5>>2] = 393216;
 }
 $8 = $player$addr;
 $deltaviewheight = ((($8)) + 32|0);
 HEAP32[$deltaviewheight>>2] = 0;
 $9 = $player$addr;
 $10 = HEAP32[$9>>2]|0;
 $z = ((($10)) + 20|0);
 $11 = HEAP32[$z>>2]|0;
 $12 = $player$addr;
 $13 = HEAP32[$12>>2]|0;
 $floorz = ((($13)) + 56|0);
 $14 = HEAP32[$floorz>>2]|0;
 $cmp8 = ($11|0)<=($14|0);
 $conv = $cmp8&1;
 HEAP32[99906] = $conv;
 $15 = $player$addr;
 _P_CalcHeight($15);
 $16 = $player$addr;
 $attacker = ((($16)) + 236|0);
 $17 = HEAP32[$attacker>>2]|0;
 $tobool = ($17|0)!=(0|0);
 do {
  if ($tobool) {
   $18 = $player$addr;
   $attacker9 = ((($18)) + 236|0);
   $19 = HEAP32[$attacker9>>2]|0;
   $20 = $player$addr;
   $21 = HEAP32[$20>>2]|0;
   $cmp11 = ($19|0)!=($21|0);
   if ($cmp11) {
    $22 = $player$addr;
    $23 = HEAP32[$22>>2]|0;
    $x = ((($23)) + 12|0);
    $24 = HEAP32[$x>>2]|0;
    $25 = $player$addr;
    $26 = HEAP32[$25>>2]|0;
    $y = ((($26)) + 16|0);
    $27 = HEAP32[$y>>2]|0;
    $28 = $player$addr;
    $attacker16 = ((($28)) + 236|0);
    $29 = HEAP32[$attacker16>>2]|0;
    $x17 = ((($29)) + 12|0);
    $30 = HEAP32[$x17>>2]|0;
    $31 = $player$addr;
    $attacker18 = ((($31)) + 236|0);
    $32 = HEAP32[$attacker18>>2]|0;
    $y19 = ((($32)) + 16|0);
    $33 = HEAP32[$y19>>2]|0;
    $call = (_R_PointToAngle2($24,$27,$30,$33)|0);
    $angle = $call;
    $34 = $angle;
    $35 = $player$addr;
    $36 = HEAP32[$35>>2]|0;
    $angle21 = ((($36)) + 32|0);
    $37 = HEAP32[$angle21>>2]|0;
    $sub22 = (($34) - ($37))|0;
    $delta = $sub22;
    $38 = $delta;
    $cmp23 = ($38>>>0)<(59652323);
    $39 = $delta;
    $cmp25 = ($39>>>0)>(4235314973);
    $or$cond = $cmp23 | $cmp25;
    if ($or$cond) {
     $40 = $angle;
     $41 = $player$addr;
     $42 = HEAP32[$41>>2]|0;
     $angle29 = ((($42)) + 32|0);
     HEAP32[$angle29>>2] = $40;
     $43 = $player$addr;
     $damagecount = ((($43)) + 228|0);
     $44 = HEAP32[$damagecount>>2]|0;
     $tobool30 = ($44|0)!=(0);
     if (!($tobool30)) {
      break;
     }
     $45 = $player$addr;
     $damagecount32 = ((($45)) + 228|0);
     $46 = HEAP32[$damagecount32>>2]|0;
     $dec = (($46) + -1)|0;
     HEAP32[$damagecount32>>2] = $dec;
     break;
    }
    $47 = $delta;
    $cmp34 = ($47>>>0)<(2147483648);
    $48 = $player$addr;
    $49 = HEAP32[$48>>2]|0;
    $angle38 = ((($49)) + 32|0);
    $50 = HEAP32[$angle38>>2]|0;
    if ($cmp34) {
     $add = (($50) + 59652323)|0;
     HEAP32[$angle38>>2] = $add;
     break;
    } else {
     $sub42 = (($50) - 59652323)|0;
     HEAP32[$angle38>>2] = $sub42;
     break;
    }
   } else {
    label = 13;
   }
  } else {
   label = 13;
  }
 } while(0);
 if ((label|0) == 13) {
  $51 = $player$addr;
  $damagecount46 = ((($51)) + 228|0);
  $52 = HEAP32[$damagecount46>>2]|0;
  $tobool47 = ($52|0)!=(0);
  if ($tobool47) {
   $53 = $player$addr;
   $damagecount49 = ((($53)) + 228|0);
   $54 = HEAP32[$damagecount49>>2]|0;
   $dec50 = (($54) + -1)|0;
   HEAP32[$damagecount49>>2] = $dec50;
  }
 }
 $55 = $player$addr;
 $cmd = ((($55)) + 8|0);
 $buttons = ((($cmd)) + 5|0);
 $56 = HEAP8[$buttons>>0]|0;
 $conv53 = $56&255;
 $and = $conv53 & 2;
 $tobool54 = ($and|0)!=(0);
 if (!($tobool54)) {
  STACKTOP = sp;return;
 }
 $57 = $player$addr;
 $playerstate = ((($57)) + 4|0);
 HEAP32[$playerstate>>2] = 2;
 STACKTOP = sp;return;
}
function _P_PlayerThink($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and = 0, $and12 = 0, $and123 = 0, $and163 = 0, $and181 = 0, $and27 = 0;
 var $and3 = 0, $and34 = 0, $and39 = 0, $and7 = 0, $and87 = 0, $angleturn = 0, $arrayidx = 0, $arrayidx102 = 0, $arrayidx113 = 0, $arrayidx117 = 0, $arrayidx127 = 0, $arrayidx131 = 0, $arrayidx135 = 0, $arrayidx139 = 0, $arrayidx171 = 0, $arrayidx175 = 0, $arrayidx180 = 0, $arrayidx47 = 0, $arrayidx58 = 0, $arrayidx67 = 0;
 var $arrayidx98 = 0, $bonuscount = 0, $bonuscount149 = 0, $buttons = 0, $buttons30 = 0, $buttons32 = 0, $buttons37 = 0, $buttons85 = 0, $cheats = 0, $cmd = 0, $cmd4 = 0, $cmp = 0, $cmp158 = 0, $cmp176 = 0, $cmp40 = 0, $cmp44 = 0, $cmp51 = 0, $cmp54 = 0, $cmp62 = 0, $cmp71 = 0;
 var $cmp74 = 0, $cmp77 = 0, $cmp79 = 0, $conv = 0, $conv33 = 0, $conv38 = 0, $conv86 = 0, $damagecount = 0, $damagecount144 = 0, $dec = 0, $dec110 = 0, $dec118 = 0, $dec132 = 0, $dec140 = 0, $dec145 = 0, $dec150 = 0, $fixedcolormap = 0, $fixedcolormap167 = 0, $fixedcolormap184 = 0, $fixedcolormap186 = 0;
 var $fixedcolormap189 = 0, $flags = 0, $flags11 = 0, $flags122 = 0, $flags6 = 0, $inc = 0, $newweapon = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $pendingweapon = 0, $player$addr = 0, $playerstate = 0, $powers = 0, $powers101 = 0, $powers104 = 0, $powers108 = 0, $powers112 = 0, $powers116 = 0;
 var $powers126 = 0, $powers130 = 0, $powers134 = 0, $powers138 = 0, $powers152 = 0, $powers156 = 0, $powers161 = 0, $powers174 = 0, $powers179 = 0, $powers97 = 0, $reactiontime = 0, $reactiontime20 = 0, $readyweapon = 0, $readyweapon61 = 0, $readyweapon70 = 0, $shr = 0, $sidemove = 0, $special = 0, $subsector = 0, $tobool = 0;
 var $tobool106 = 0, $tobool114 = 0, $tobool119 = 0, $tobool128 = 0, $tobool136 = 0, $tobool142 = 0, $tobool147 = 0, $tobool154 = 0, $tobool164 = 0, $tobool17 = 0, $tobool172 = 0, $tobool182 = 0, $tobool24 = 0, $tobool28 = 0, $tobool35 = 0, $tobool42 = 0, $tobool48 = 0, $tobool59 = 0, $tobool68 = 0, $tobool8 = 0;
 var $tobool88 = 0, $tobool90 = 0, $tobool99 = 0, $usedown = 0, $usedown92 = 0, $weaponowned = 0, $weaponowned57 = 0, $weaponowned66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 $cheats = ((($0)) + 204|0);
 $1 = HEAP32[$cheats>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 $2 = $player$addr;
 $3 = HEAP32[$2>>2]|0;
 $flags = ((($3)) + 104|0);
 $4 = HEAP32[$flags>>2]|0;
 if ($tobool) {
  $or = $4 | 4096;
  HEAP32[$flags>>2] = $or;
 } else {
  $and3 = $4 & -4097;
  HEAP32[$flags>>2] = $and3;
 }
 $5 = $player$addr;
 $cmd4 = ((($5)) + 8|0);
 $cmd = $cmd4;
 $6 = $player$addr;
 $7 = HEAP32[$6>>2]|0;
 $flags6 = ((($7)) + 104|0);
 $8 = HEAP32[$flags6>>2]|0;
 $and7 = $8 & 128;
 $tobool8 = ($and7|0)!=(0);
 if ($tobool8) {
  $9 = $cmd;
  $angleturn = ((($9)) + 2|0);
  HEAP16[$angleturn>>1] = 0;
  $10 = $cmd;
  HEAP8[$10>>0] = 100;
  $11 = $cmd;
  $sidemove = ((($11)) + 1|0);
  HEAP8[$sidemove>>0] = 0;
  $12 = $player$addr;
  $13 = HEAP32[$12>>2]|0;
  $flags11 = ((($13)) + 104|0);
  $14 = HEAP32[$flags11>>2]|0;
  $and12 = $14 & -129;
  HEAP32[$flags11>>2] = $and12;
 }
 $15 = $player$addr;
 $playerstate = ((($15)) + 4|0);
 $16 = HEAP32[$playerstate>>2]|0;
 $cmp = ($16|0)==(1);
 $17 = $player$addr;
 if ($cmp) {
  _P_DeathThink($17);
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$17>>2]|0;
 $reactiontime = ((($18)) + 124|0);
 $19 = HEAP32[$reactiontime>>2]|0;
 $tobool17 = ($19|0)!=(0);
 $20 = $player$addr;
 if ($tobool17) {
  $21 = HEAP32[$20>>2]|0;
  $reactiontime20 = ((($21)) + 124|0);
  $22 = HEAP32[$reactiontime20>>2]|0;
  $dec = (($22) + -1)|0;
  HEAP32[$reactiontime20>>2] = $dec;
 } else {
  _P_MovePlayer($20);
 }
 $23 = $player$addr;
 _P_CalcHeight($23);
 $24 = $player$addr;
 $25 = HEAP32[$24>>2]|0;
 $subsector = ((($25)) + 52|0);
 $26 = HEAP32[$subsector>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $special = ((($27)) + 14|0);
 $28 = HEAP16[$special>>1]|0;
 $tobool24 = ($28<<16>>16)!=(0);
 if ($tobool24) {
  $29 = $player$addr;
  _P_PlayerInSpecialSector($29);
 }
 $30 = $cmd;
 $buttons = ((($30)) + 5|0);
 $31 = HEAP8[$buttons>>0]|0;
 $conv = $31&255;
 $and27 = $conv & 128;
 $tobool28 = ($and27|0)!=(0);
 if ($tobool28) {
  $32 = $cmd;
  $buttons30 = ((($32)) + 5|0);
  HEAP8[$buttons30>>0] = 0;
 }
 $33 = $cmd;
 $buttons32 = ((($33)) + 5|0);
 $34 = HEAP8[$buttons32>>0]|0;
 $conv33 = $34&255;
 $and34 = $conv33 & 4;
 $tobool35 = ($and34|0)!=(0);
 if ($tobool35) {
  $35 = $cmd;
  $buttons37 = ((($35)) + 5|0);
  $36 = HEAP8[$buttons37>>0]|0;
  $conv38 = $36&255;
  $and39 = $conv38 & 56;
  $shr = $and39 >> 3;
  $newweapon = $shr;
  $37 = $newweapon;
  $cmp40 = ($37|0)==(0);
  do {
   if ($cmp40) {
    $38 = $player$addr;
    $weaponowned = ((($38)) + 128|0);
    $arrayidx = ((($weaponowned)) + 28|0);
    $39 = HEAP32[$arrayidx>>2]|0;
    $tobool42 = ($39|0)!=(0);
    if ($tobool42) {
     $40 = $player$addr;
     $readyweapon = ((($40)) + 120|0);
     $41 = HEAP32[$readyweapon>>2]|0;
     $cmp44 = ($41|0)==(7);
     if ($cmp44) {
      $42 = $player$addr;
      $powers = ((($42)) + 52|0);
      $arrayidx47 = ((($powers)) + 4|0);
      $43 = HEAP32[$arrayidx47>>2]|0;
      $tobool48 = ($43|0)!=(0);
      if ($tobool48) {
       break;
      }
     }
     $newweapon = 7;
    }
   }
  } while(0);
  $44 = HEAP32[32168]|0;
  $cmp51 = ($44|0)==(2);
  $45 = $newweapon;
  $cmp54 = ($45|0)==(2);
  $or$cond = $cmp51 & $cmp54;
  if ($or$cond) {
   $46 = $player$addr;
   $weaponowned57 = ((($46)) + 128|0);
   $arrayidx58 = ((($weaponowned57)) + 32|0);
   $47 = HEAP32[$arrayidx58>>2]|0;
   $tobool59 = ($47|0)!=(0);
   if ($tobool59) {
    $48 = $player$addr;
    $readyweapon61 = ((($48)) + 120|0);
    $49 = HEAP32[$readyweapon61>>2]|0;
    $cmp62 = ($49|0)!=(8);
    if ($cmp62) {
     $newweapon = 8;
    }
   }
  }
  $50 = $player$addr;
  $weaponowned66 = ((($50)) + 128|0);
  $51 = $newweapon;
  $arrayidx67 = (($weaponowned66) + ($51<<2)|0);
  $52 = HEAP32[$arrayidx67>>2]|0;
  $tobool68 = ($52|0)!=(0);
  if ($tobool68) {
   $53 = $newweapon;
   $54 = $player$addr;
   $readyweapon70 = ((($54)) + 120|0);
   $55 = HEAP32[$readyweapon70>>2]|0;
   $cmp71 = ($53|0)!=($55|0);
   if ($cmp71) {
    $56 = $newweapon;
    $cmp74 = ($56|0)!=(5);
    $57 = $newweapon;
    $cmp77 = ($57|0)!=(6);
    $or$cond1 = $cmp74 & $cmp77;
    $58 = HEAP32[32168]|0;
    $cmp79 = ($58|0)!=(0);
    $or$cond2 = $or$cond1 | $cmp79;
    if ($or$cond2) {
     $59 = $newweapon;
     $60 = $player$addr;
     $pendingweapon = ((($60)) + 124|0);
     HEAP32[$pendingweapon>>2] = $59;
    }
   }
  }
 }
 $61 = $cmd;
 $buttons85 = ((($61)) + 5|0);
 $62 = HEAP8[$buttons85>>0]|0;
 $conv86 = $62&255;
 $and87 = $conv86 & 2;
 $tobool88 = ($and87|0)!=(0);
 $63 = $player$addr;
 $usedown = ((($63)) + 200|0);
 if ($tobool88) {
  $64 = HEAP32[$usedown>>2]|0;
  $tobool90 = ($64|0)!=(0);
  if (!($tobool90)) {
   $65 = $player$addr;
   _P_UseLines($65);
   $66 = $player$addr;
   $usedown92 = ((($66)) + 200|0);
   HEAP32[$usedown92>>2] = 1;
  }
 } else {
  HEAP32[$usedown>>2] = 0;
 }
 $67 = $player$addr;
 _P_MovePsprites($67);
 $68 = $player$addr;
 $powers97 = ((($68)) + 52|0);
 $arrayidx98 = ((($powers97)) + 4|0);
 $69 = HEAP32[$arrayidx98>>2]|0;
 $tobool99 = ($69|0)!=(0);
 if ($tobool99) {
  $70 = $player$addr;
  $powers101 = ((($70)) + 52|0);
  $arrayidx102 = ((($powers101)) + 4|0);
  $71 = HEAP32[$arrayidx102>>2]|0;
  $inc = (($71) + 1)|0;
  HEAP32[$arrayidx102>>2] = $inc;
 }
 $72 = $player$addr;
 $powers104 = ((($72)) + 52|0);
 $73 = HEAP32[$powers104>>2]|0;
 $tobool106 = ($73|0)!=(0);
 if ($tobool106) {
  $74 = $player$addr;
  $powers108 = ((($74)) + 52|0);
  $75 = HEAP32[$powers108>>2]|0;
  $dec110 = (($75) + -1)|0;
  HEAP32[$powers108>>2] = $dec110;
 }
 $76 = $player$addr;
 $powers112 = ((($76)) + 52|0);
 $arrayidx113 = ((($powers112)) + 8|0);
 $77 = HEAP32[$arrayidx113>>2]|0;
 $tobool114 = ($77|0)!=(0);
 if ($tobool114) {
  $78 = $player$addr;
  $powers116 = ((($78)) + 52|0);
  $arrayidx117 = ((($powers116)) + 8|0);
  $79 = HEAP32[$arrayidx117>>2]|0;
  $dec118 = (($79) + -1)|0;
  HEAP32[$arrayidx117>>2] = $dec118;
  $tobool119 = ($dec118|0)!=(0);
  if (!($tobool119)) {
   $80 = $player$addr;
   $81 = HEAP32[$80>>2]|0;
   $flags122 = ((($81)) + 104|0);
   $82 = HEAP32[$flags122>>2]|0;
   $and123 = $82 & -262145;
   HEAP32[$flags122>>2] = $and123;
  }
 }
 $83 = $player$addr;
 $powers126 = ((($83)) + 52|0);
 $arrayidx127 = ((($powers126)) + 20|0);
 $84 = HEAP32[$arrayidx127>>2]|0;
 $tobool128 = ($84|0)!=(0);
 if ($tobool128) {
  $85 = $player$addr;
  $powers130 = ((($85)) + 52|0);
  $arrayidx131 = ((($powers130)) + 20|0);
  $86 = HEAP32[$arrayidx131>>2]|0;
  $dec132 = (($86) + -1)|0;
  HEAP32[$arrayidx131>>2] = $dec132;
 }
 $87 = $player$addr;
 $powers134 = ((($87)) + 52|0);
 $arrayidx135 = ((($powers134)) + 12|0);
 $88 = HEAP32[$arrayidx135>>2]|0;
 $tobool136 = ($88|0)!=(0);
 if ($tobool136) {
  $89 = $player$addr;
  $powers138 = ((($89)) + 52|0);
  $arrayidx139 = ((($powers138)) + 12|0);
  $90 = HEAP32[$arrayidx139>>2]|0;
  $dec140 = (($90) + -1)|0;
  HEAP32[$arrayidx139>>2] = $dec140;
 }
 $91 = $player$addr;
 $damagecount = ((($91)) + 228|0);
 $92 = HEAP32[$damagecount>>2]|0;
 $tobool142 = ($92|0)!=(0);
 if ($tobool142) {
  $93 = $player$addr;
  $damagecount144 = ((($93)) + 228|0);
  $94 = HEAP32[$damagecount144>>2]|0;
  $dec145 = (($94) + -1)|0;
  HEAP32[$damagecount144>>2] = $dec145;
 }
 $95 = $player$addr;
 $bonuscount = ((($95)) + 232|0);
 $96 = HEAP32[$bonuscount>>2]|0;
 $tobool147 = ($96|0)!=(0);
 if ($tobool147) {
  $97 = $player$addr;
  $bonuscount149 = ((($97)) + 232|0);
  $98 = HEAP32[$bonuscount149>>2]|0;
  $dec150 = (($98) + -1)|0;
  HEAP32[$bonuscount149>>2] = $dec150;
 }
 $99 = $player$addr;
 $powers152 = ((($99)) + 52|0);
 $100 = HEAP32[$powers152>>2]|0;
 $tobool154 = ($100|0)!=(0);
 $101 = $player$addr;
 $powers156 = ((($101)) + 52|0);
 if ($tobool154) {
  $102 = HEAP32[$powers156>>2]|0;
  $cmp158 = ($102|0)>(128);
  if (!($cmp158)) {
   $103 = $player$addr;
   $powers161 = ((($103)) + 52|0);
   $104 = HEAP32[$powers161>>2]|0;
   $and163 = $104 & 8;
   $tobool164 = ($and163|0)!=(0);
   if (!($tobool164)) {
    $106 = $player$addr;
    $fixedcolormap167 = ((($106)) + 244|0);
    HEAP32[$fixedcolormap167>>2] = 0;
    STACKTOP = sp;return;
   }
  }
  $105 = $player$addr;
  $fixedcolormap = ((($105)) + 244|0);
  HEAP32[$fixedcolormap>>2] = 32;
  STACKTOP = sp;return;
 }
 $arrayidx171 = ((($powers156)) + 20|0);
 $107 = HEAP32[$arrayidx171>>2]|0;
 $tobool172 = ($107|0)!=(0);
 $108 = $player$addr;
 if (!($tobool172)) {
  $fixedcolormap189 = ((($108)) + 244|0);
  HEAP32[$fixedcolormap189>>2] = 0;
  STACKTOP = sp;return;
 }
 $powers174 = ((($108)) + 52|0);
 $arrayidx175 = ((($powers174)) + 20|0);
 $109 = HEAP32[$arrayidx175>>2]|0;
 $cmp176 = ($109|0)>(128);
 if (!($cmp176)) {
  $110 = $player$addr;
  $powers179 = ((($110)) + 52|0);
  $arrayidx180 = ((($powers179)) + 20|0);
  $111 = HEAP32[$arrayidx180>>2]|0;
  $and181 = $111 & 8;
  $tobool182 = ($and181|0)!=(0);
  if (!($tobool182)) {
   $113 = $player$addr;
   $fixedcolormap186 = ((($113)) + 244|0);
   HEAP32[$fixedcolormap186>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $112 = $player$addr;
 $fixedcolormap184 = ((($112)) + 244|0);
 HEAP32[$fixedcolormap184>>2] = 1;
 STACKTOP = sp;return;
}
function _R_ClearDrawSegs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[99907] = 193712;
 return;
}
function _R_ClipSolidWallSegment($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr25 = 0, $add$ptr31 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp21 = 0, $cmp28 = 0, $cmp3 = 0, $cmp36 = 0, $cmp45 = 0, $cmp50 = 0, $cmp6 = 0, $first$addr = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $incdec$ptr34 = 0, $incdec$ptr49 = 0, $incdec$ptr52 = 0, $incdec$ptr8 = 0, $last$addr = 0, $last1 = 0, $last15 = 0, $last20 = 0, $last30 = 0, $last35 = 0;
 var $last38 = 0, $last39 = 0, $last44 = 0, $next = 0, $start = 0, $sub = 0, $sub17 = 0, $sub27 = 0, $sub33 = 0, $sub5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $first$addr = $first;
 $last$addr = $last;
 $start = 206000;
 while(1) {
  $0 = $start;
  $last1 = ((($0)) + 4|0);
  $1 = HEAP32[$last1>>2]|0;
  $2 = $first$addr;
  $sub = (($2) - 1)|0;
  $cmp = ($1|0)<($sub|0);
  if (!($cmp)) {
   break;
  }
  $3 = $start;
  $incdec$ptr = ((($3)) + 8|0);
  $start = $incdec$ptr;
 }
 $4 = $first$addr;
 $5 = $start;
 $6 = HEAP32[$5>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 do {
  if ($cmp3) {
   $7 = $last$addr;
   $8 = $start;
   $9 = HEAP32[$8>>2]|0;
   $sub5 = (($9) - 1)|0;
   $cmp6 = ($7|0)<($sub5|0);
   $10 = $first$addr;
   if (!($cmp6)) {
    $23 = $start;
    $24 = HEAP32[$23>>2]|0;
    $sub17 = (($24) - 1)|0;
    _R_StoreWallRange($10,$sub17);
    $25 = $first$addr;
    $26 = $start;
    HEAP32[$26>>2] = $25;
    break;
   }
   $11 = $last$addr;
   _R_StoreWallRange($10,$11);
   $12 = HEAP32[99908]|0;
   $next = $12;
   $13 = HEAP32[99908]|0;
   $incdec$ptr8 = ((($13)) + 8|0);
   HEAP32[99908] = $incdec$ptr8;
   while(1) {
    $14 = $next;
    $15 = $start;
    $cmp10 = ($14|0)!=($15|0);
    if (!($cmp10)) {
     break;
    }
    $16 = $next;
    $17 = $next;
    $add$ptr = ((($17)) + -8|0);
    ;HEAP32[$16>>2]=HEAP32[$add$ptr>>2]|0;HEAP32[$16+4>>2]=HEAP32[$add$ptr+4>>2]|0;
    $18 = $next;
    $incdec$ptr12 = ((($18)) + -8|0);
    $next = $incdec$ptr12;
   }
   $19 = $first$addr;
   $20 = $next;
   HEAP32[$20>>2] = $19;
   $21 = $last$addr;
   $22 = $next;
   $last15 = ((($22)) + 4|0);
   HEAP32[$last15>>2] = $21;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = $last$addr;
 $28 = $start;
 $last20 = ((($28)) + 4|0);
 $29 = HEAP32[$last20>>2]|0;
 $cmp21 = ($27|0)<=($29|0);
 if ($cmp21) {
  STACKTOP = sp;return;
 }
 $30 = $start;
 $next = $30;
 while(1) {
  $31 = $last$addr;
  $32 = $next;
  $add$ptr25 = ((($32)) + 8|0);
  $33 = HEAP32[$add$ptr25>>2]|0;
  $sub27 = (($33) - 1)|0;
  $cmp28 = ($31|0)>=($sub27|0);
  $34 = $next;
  $last30 = ((($34)) + 4|0);
  $35 = HEAP32[$last30>>2]|0;
  $add = (($35) + 1)|0;
  if (!($cmp28)) {
   label = 17;
   break;
  }
  $36 = $next;
  $add$ptr31 = ((($36)) + 8|0);
  $37 = HEAP32[$add$ptr31>>2]|0;
  $sub33 = (($37) - 1)|0;
  _R_StoreWallRange($add,$sub33);
  $38 = $next;
  $incdec$ptr34 = ((($38)) + 8|0);
  $next = $incdec$ptr34;
  $39 = $last$addr;
  $40 = $next;
  $last35 = ((($40)) + 4|0);
  $41 = HEAP32[$last35>>2]|0;
  $cmp36 = ($39|0)<=($41|0);
  if ($cmp36) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  $42 = $next;
  $last38 = ((($42)) + 4|0);
  $43 = HEAP32[$last38>>2]|0;
  $44 = $start;
  $last39 = ((($44)) + 4|0);
  HEAP32[$last39>>2] = $43;
 }
 else if ((label|0) == 17) {
  $45 = $last$addr;
  _R_StoreWallRange($add,$45);
  $46 = $last$addr;
  $47 = $start;
  $last44 = ((($47)) + 4|0);
  HEAP32[$last44>>2] = $46;
 }
 $48 = $next;
 $49 = $start;
 $cmp45 = ($48|0)==($49|0);
 if ($cmp45) {
  STACKTOP = sp;return;
 }
 while(1) {
  $50 = $next;
  $incdec$ptr49 = ((($50)) + 8|0);
  $next = $incdec$ptr49;
  $51 = HEAP32[99908]|0;
  $cmp50 = ($50|0)!=($51|0);
  $52 = $start;
  $incdec$ptr52 = ((($52)) + 8|0);
  if (!($cmp50)) {
   break;
  }
  $start = $incdec$ptr52;
  $53 = $next;
  ;HEAP32[$incdec$ptr52>>2]=HEAP32[$53>>2]|0;HEAP32[$incdec$ptr52+4>>2]=HEAP32[$53+4>>2]|0;
 }
 HEAP32[99908] = $incdec$ptr52;
 STACKTOP = sp;return;
}
function _R_ClipPassWallSegment($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr21 = 0, $cmp = 0, $cmp12 = 0, $cmp18 = 0, $cmp26 = 0, $cmp3 = 0, $cmp6 = 0, $first$addr = 0, $incdec$ptr = 0;
 var $incdec$ptr24 = 0, $last$addr = 0, $last1 = 0, $last11 = 0, $last20 = 0, $last25 = 0, $start = 0, $sub = 0, $sub17 = 0, $sub23 = 0, $sub5 = 0, $sub9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $first$addr = $first;
 $last$addr = $last;
 $start = 206000;
 while(1) {
  $0 = $start;
  $last1 = ((($0)) + 4|0);
  $1 = HEAP32[$last1>>2]|0;
  $2 = $first$addr;
  $sub = (($2) - 1)|0;
  $cmp = ($1|0)<($sub|0);
  if (!($cmp)) {
   break;
  }
  $3 = $start;
  $incdec$ptr = ((($3)) + 8|0);
  $start = $incdec$ptr;
 }
 $4 = $first$addr;
 $5 = $start;
 $6 = HEAP32[$5>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 do {
  if ($cmp3) {
   $7 = $last$addr;
   $8 = $start;
   $9 = HEAP32[$8>>2]|0;
   $sub5 = (($9) - 1)|0;
   $cmp6 = ($7|0)<($sub5|0);
   $10 = $first$addr;
   if (!($cmp6)) {
    $12 = $start;
    $13 = HEAP32[$12>>2]|0;
    $sub9 = (($13) - 1)|0;
    _R_StoreWallRange($10,$sub9);
    break;
   }
   $11 = $last$addr;
   _R_StoreWallRange($10,$11);
   STACKTOP = sp;return;
  }
 } while(0);
 $14 = $last$addr;
 $15 = $start;
 $last11 = ((($15)) + 4|0);
 $16 = HEAP32[$last11>>2]|0;
 $cmp12 = ($14|0)<=($16|0);
 if ($cmp12) {
  STACKTOP = sp;return;
 }
 while(1) {
  $17 = $last$addr;
  $18 = $start;
  $add$ptr = ((($18)) + 8|0);
  $19 = HEAP32[$add$ptr>>2]|0;
  $sub17 = (($19) - 1)|0;
  $cmp18 = ($17|0)>=($sub17|0);
  $20 = $start;
  $last20 = ((($20)) + 4|0);
  $21 = HEAP32[$last20>>2]|0;
  $add = (($21) + 1)|0;
  if (!($cmp18)) {
   break;
  }
  $22 = $start;
  $add$ptr21 = ((($22)) + 8|0);
  $23 = HEAP32[$add$ptr21>>2]|0;
  $sub23 = (($23) - 1)|0;
  _R_StoreWallRange($add,$sub23);
  $24 = $start;
  $incdec$ptr24 = ((($24)) + 8|0);
  $start = $incdec$ptr24;
  $25 = $last$addr;
  $26 = $start;
  $last25 = ((($26)) + 4|0);
  $27 = HEAP32[$last25>>2]|0;
  $cmp26 = ($25|0)<=($27|0);
  if ($cmp26) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
 $28 = $last$addr;
 _R_StoreWallRange($add,$28);
 STACKTOP = sp;return;
}
function _R_ClearClipSegs() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[51500] = -2147483647;
 HEAP32[(206004)>>2] = -1;
 $0 = HEAP32[99961]|0;
 HEAP32[(206008)>>2] = $0;
 HEAP32[(206012)>>2] = 2147483647;
 HEAP32[99908] = (206016);
 return;
}
function _R_AddLine($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $add = 0, $add28 = 0, $add29 = 0, $angle1 = 0, $angle2 = 0, $arrayidx = 0, $arrayidx31 = 0, $backsector = 0, $call = 0, $call6 = 0, $ceilingheight = 0, $ceilingheight39 = 0, $ceilingheight43 = 0, $ceilingheight44 = 0, $ceilingpic = 0;
 var $ceilingpic52 = 0, $cmp = 0, $cmp13 = 0, $cmp19 = 0, $cmp23 = 0, $cmp32 = 0, $cmp37 = 0, $cmp40 = 0, $cmp45 = 0, $cmp49 = 0, $cmp54 = 0, $cmp59 = 0, $cmp65 = 0, $cmp69 = 0, $cmp9 = 0, $conv = 0, $conv53 = 0, $conv56 = 0, $conv58 = 0, $conv62 = 0;
 var $conv64 = 0, $conv68 = 0, $floorpic = 0, $floorpic57 = 0, $lightlevel = 0, $lightlevel63 = 0, $line$addr = 0, $midtexture = 0, $mul = 0, $mul11 = 0, $mul18 = 0, $mul21 = 0, $shr = 0, $shr30 = 0, $sidedef = 0, $span = 0, $sub = 0, $sub12 = 0, $sub17 = 0, $sub22 = 0;
 var $sub26 = 0, $sub7 = 0, $sub73 = 0, $sub74 = 0, $sub8 = 0, $tobool = 0, $tspan = 0, $v2 = 0, $v24 = 0, $x1 = 0, $x2 = 0, $y = 0, $y5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $line$addr = $line;
 $0 = $line$addr;
 HEAP32[99909] = $0;
 $1 = $line$addr;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $line$addr;
 $5 = HEAP32[$4>>2]|0;
 $y = ((($5)) + 4|0);
 $6 = HEAP32[$y>>2]|0;
 $call = (_R_PointToAngle($3,$6)|0);
 $angle1 = $call;
 $7 = $line$addr;
 $v2 = ((($7)) + 4|0);
 $8 = HEAP32[$v2>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $line$addr;
 $v24 = ((($10)) + 4|0);
 $11 = HEAP32[$v24>>2]|0;
 $y5 = ((($11)) + 4|0);
 $12 = HEAP32[$y5>>2]|0;
 $call6 = (_R_PointToAngle($9,$12)|0);
 $angle2 = $call6;
 $13 = $angle1;
 $14 = $angle2;
 $sub = (($13) - ($14))|0;
 $span = $sub;
 $15 = $span;
 $cmp = ($15>>>0)>=(2147483648);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $16 = $angle1;
 HEAP32[100026] = $16;
 $17 = HEAP32[99965]|0;
 $18 = $angle1;
 $sub7 = (($18) - ($17))|0;
 $angle1 = $sub7;
 $19 = HEAP32[99965]|0;
 $20 = $angle2;
 $sub8 = (($20) - ($19))|0;
 $angle2 = $sub8;
 $21 = $angle1;
 $22 = HEAP32[99970]|0;
 $add = (($21) + ($22))|0;
 $tspan = $add;
 $23 = $tspan;
 $24 = HEAP32[99970]|0;
 $mul = $24<<1;
 $cmp9 = ($23>>>0)>($mul>>>0);
 do {
  if ($cmp9) {
   $25 = HEAP32[99970]|0;
   $mul11 = $25<<1;
   $26 = $tspan;
   $sub12 = (($26) - ($mul11))|0;
   $tspan = $sub12;
   $27 = $tspan;
   $28 = $span;
   $cmp13 = ($27>>>0)>=($28>>>0);
   if ($cmp13) {
    STACKTOP = sp;return;
   } else {
    $29 = HEAP32[99970]|0;
    $angle1 = $29;
    break;
   }
  }
 } while(0);
 $30 = HEAP32[99970]|0;
 $31 = $angle2;
 $sub17 = (($30) - ($31))|0;
 $tspan = $sub17;
 $32 = $tspan;
 $33 = HEAP32[99970]|0;
 $mul18 = $33<<1;
 $cmp19 = ($32>>>0)>($mul18>>>0);
 do {
  if ($cmp19) {
   $34 = HEAP32[99970]|0;
   $mul21 = $34<<1;
   $35 = $tspan;
   $sub22 = (($35) - ($mul21))|0;
   $tspan = $sub22;
   $36 = $tspan;
   $37 = $span;
   $cmp23 = ($36>>>0)>=($37>>>0);
   if ($cmp23) {
    STACKTOP = sp;return;
   } else {
    $38 = HEAP32[99970]|0;
    $sub26 = (0 - ($38))|0;
    $angle2 = $sub26;
    break;
   }
  }
 } while(0);
 $39 = $angle1;
 $add28 = (($39) + 1073741824)|0;
 $shr = $add28 >>> 19;
 $angle1 = $shr;
 $40 = $angle2;
 $add29 = (($40) + 1073741824)|0;
 $shr30 = $add29 >>> 19;
 $angle2 = $shr30;
 $41 = $angle1;
 $arrayidx = (214064 + ($41<<2)|0);
 $42 = HEAP32[$arrayidx>>2]|0;
 $x1 = $42;
 $43 = $angle2;
 $arrayidx31 = (214064 + ($43<<2)|0);
 $44 = HEAP32[$arrayidx31>>2]|0;
 $x2 = $44;
 $45 = $x1;
 $46 = $x2;
 $cmp32 = ($45|0)==($46|0);
 if ($cmp32) {
  STACKTOP = sp;return;
 }
 $47 = $line$addr;
 $backsector = ((($47)) + 28|0);
 $48 = HEAP32[$backsector>>2]|0;
 HEAP32[99910] = $48;
 $49 = HEAP32[99910]|0;
 $tobool = ($49|0)!=(0|0);
 if ($tobool) {
  $50 = HEAP32[99910]|0;
  $ceilingheight = ((($50)) + 4|0);
  $51 = HEAP32[$ceilingheight>>2]|0;
  $52 = HEAP32[99911]|0;
  $53 = HEAP32[$52>>2]|0;
  $cmp37 = ($51|0)<=($53|0);
  if (!($cmp37)) {
   $54 = HEAP32[99910]|0;
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[99911]|0;
   $ceilingheight39 = ((($56)) + 4|0);
   $57 = HEAP32[$ceilingheight39>>2]|0;
   $cmp40 = ($55|0)>=($57|0);
   if (!($cmp40)) {
    $58 = HEAP32[99910]|0;
    $ceilingheight43 = ((($58)) + 4|0);
    $59 = HEAP32[$ceilingheight43>>2]|0;
    $60 = HEAP32[99911]|0;
    $ceilingheight44 = ((($60)) + 4|0);
    $61 = HEAP32[$ceilingheight44>>2]|0;
    $cmp45 = ($59|0)!=($61|0);
    if (!($cmp45)) {
     $62 = HEAP32[99910]|0;
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[99911]|0;
     $65 = HEAP32[$64>>2]|0;
     $cmp49 = ($63|0)!=($65|0);
     if (!($cmp49)) {
      $66 = HEAP32[99910]|0;
      $ceilingpic = ((($66)) + 10|0);
      $67 = HEAP16[$ceilingpic>>1]|0;
      $conv = $67 << 16 >> 16;
      $68 = HEAP32[99911]|0;
      $ceilingpic52 = ((($68)) + 10|0);
      $69 = HEAP16[$ceilingpic52>>1]|0;
      $conv53 = $69 << 16 >> 16;
      $cmp54 = ($conv|0)==($conv53|0);
      if ($cmp54) {
       $70 = HEAP32[99910]|0;
       $floorpic = ((($70)) + 8|0);
       $71 = HEAP16[$floorpic>>1]|0;
       $conv56 = $71 << 16 >> 16;
       $72 = HEAP32[99911]|0;
       $floorpic57 = ((($72)) + 8|0);
       $73 = HEAP16[$floorpic57>>1]|0;
       $conv58 = $73 << 16 >> 16;
       $cmp59 = ($conv56|0)==($conv58|0);
       if ($cmp59) {
        $74 = HEAP32[99910]|0;
        $lightlevel = ((($74)) + 12|0);
        $75 = HEAP16[$lightlevel>>1]|0;
        $conv62 = $75 << 16 >> 16;
        $76 = HEAP32[99911]|0;
        $lightlevel63 = ((($76)) + 12|0);
        $77 = HEAP16[$lightlevel63>>1]|0;
        $conv64 = $77 << 16 >> 16;
        $cmp65 = ($conv62|0)==($conv64|0);
        if ($cmp65) {
         $78 = HEAP32[99909]|0;
         $sidedef = ((($78)) + 16|0);
         $79 = HEAP32[$sidedef>>2]|0;
         $midtexture = ((($79)) + 12|0);
         $80 = HEAP16[$midtexture>>1]|0;
         $conv68 = $80 << 16 >> 16;
         $cmp69 = ($conv68|0)==(0);
         if ($cmp69) {
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
    $81 = $x1;
    $82 = $x2;
    $sub73 = (($82) - 1)|0;
    _R_ClipPassWallSegment($81,$sub73);
    STACKTOP = sp;return;
   }
  }
 }
 $83 = $x1;
 $84 = $x2;
 $sub74 = (($84) - 1)|0;
 _R_ClipSolidWallSegment($83,$sub74);
 STACKTOP = sp;return;
}
function _R_CheckBBox($bspcoord) {
 $bspcoord = $bspcoord|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $add = 0, $add37 = 0;
 var $add57 = 0, $add58 = 0, $angle1 = 0, $angle2 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx26 = 0, $arrayidx27 = 0, $arrayidx28 = 0, $arrayidx29 = 0, $arrayidx30 = 0, $arrayidx60 = 0, $arrayidx61 = 0;
 var $boxpos = 0, $boxx = 0, $boxy = 0, $bspcoord$addr = 0, $call = 0, $call31 = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp2 = 0, $cmp34 = 0, $cmp38 = 0, $cmp42 = 0, $cmp48 = 0, $cmp52 = 0, $cmp62 = 0, $cmp65 = 0, $cmp66 = 0, $cmp68 = 0, $cmp7 = 0;
 var $dec = 0, $incdec$ptr = 0, $last = 0, $last67 = 0, $mul = 0, $mul40 = 0, $mul47 = 0, $mul50 = 0, $retval = 0, $shl = 0, $shr = 0, $shr59 = 0, $span = 0, $start = 0, $sub = 0, $sub32 = 0, $sub33 = 0, $sub41 = 0, $sub46 = 0, $sub51 = 0;
 var $sub55 = 0, $sx1 = 0, $sx2 = 0, $tspan = 0, $x1 = 0, $x2 = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $bspcoord$addr = $bspcoord;
 $0 = HEAP32[99963]|0;
 $1 = $bspcoord$addr;
 $arrayidx = ((($1)) + 8|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($0|0)<=($2|0);
 do {
  if ($cmp) {
   $boxx = 0;
  } else {
   $3 = HEAP32[99963]|0;
   $4 = $bspcoord$addr;
   $arrayidx1 = ((($4)) + 12|0);
   $5 = HEAP32[$arrayidx1>>2]|0;
   $cmp2 = ($3|0)<($5|0);
   if ($cmp2) {
    $boxx = 1;
    break;
   } else {
    $boxx = 2;
    break;
   }
  }
 } while(0);
 $6 = HEAP32[99964]|0;
 $7 = $bspcoord$addr;
 $8 = HEAP32[$7>>2]|0;
 $cmp7 = ($6|0)>=($8|0);
 do {
  if ($cmp7) {
   $boxy = 0;
  } else {
   $9 = HEAP32[99964]|0;
   $10 = $bspcoord$addr;
   $arrayidx10 = ((($10)) + 4|0);
   $11 = HEAP32[$arrayidx10>>2]|0;
   $cmp11 = ($9|0)>($11|0);
   if ($cmp11) {
    $boxy = 1;
    break;
   } else {
    $boxy = 2;
    break;
   }
  }
 } while(0);
 $12 = $boxy;
 $shl = $12 << 2;
 $13 = $boxx;
 $add = (($shl) + ($13))|0;
 $boxpos = $add;
 $14 = $boxpos;
 $cmp16 = ($14|0)==(5);
 if ($cmp16) {
  $retval = 1;
  $77 = $retval;
  STACKTOP = sp;return ($77|0);
 }
 $15 = $bspcoord$addr;
 $16 = $boxpos;
 $arrayidx19 = (51280 + ($16<<4)|0);
 $17 = HEAP32[$arrayidx19>>2]|0;
 $arrayidx21 = (($15) + ($17<<2)|0);
 $18 = HEAP32[$arrayidx21>>2]|0;
 $x1 = $18;
 $19 = $bspcoord$addr;
 $20 = $boxpos;
 $arrayidx22 = (51280 + ($20<<4)|0);
 $arrayidx23 = ((($arrayidx22)) + 4|0);
 $21 = HEAP32[$arrayidx23>>2]|0;
 $arrayidx24 = (($19) + ($21<<2)|0);
 $22 = HEAP32[$arrayidx24>>2]|0;
 $y1 = $22;
 $23 = $bspcoord$addr;
 $24 = $boxpos;
 $arrayidx25 = (51280 + ($24<<4)|0);
 $arrayidx26 = ((($arrayidx25)) + 8|0);
 $25 = HEAP32[$arrayidx26>>2]|0;
 $arrayidx27 = (($23) + ($25<<2)|0);
 $26 = HEAP32[$arrayidx27>>2]|0;
 $x2 = $26;
 $27 = $bspcoord$addr;
 $28 = $boxpos;
 $arrayidx28 = (51280 + ($28<<4)|0);
 $arrayidx29 = ((($arrayidx28)) + 12|0);
 $29 = HEAP32[$arrayidx29>>2]|0;
 $arrayidx30 = (($27) + ($29<<2)|0);
 $30 = HEAP32[$arrayidx30>>2]|0;
 $y2 = $30;
 $31 = $x1;
 $32 = $y1;
 $call = (_R_PointToAngle($31,$32)|0);
 $33 = HEAP32[99965]|0;
 $sub = (($call) - ($33))|0;
 $angle1 = $sub;
 $34 = $x2;
 $35 = $y2;
 $call31 = (_R_PointToAngle($34,$35)|0);
 $36 = HEAP32[99965]|0;
 $sub32 = (($call31) - ($36))|0;
 $angle2 = $sub32;
 $37 = $angle1;
 $38 = $angle2;
 $sub33 = (($37) - ($38))|0;
 $span = $sub33;
 $39 = $span;
 $cmp34 = ($39>>>0)>=(2147483648);
 if ($cmp34) {
  $retval = 1;
  $77 = $retval;
  STACKTOP = sp;return ($77|0);
 }
 $40 = $angle1;
 $41 = HEAP32[99970]|0;
 $add37 = (($40) + ($41))|0;
 $tspan = $add37;
 $42 = $tspan;
 $43 = HEAP32[99970]|0;
 $mul = $43<<1;
 $cmp38 = ($42>>>0)>($mul>>>0);
 do {
  if ($cmp38) {
   $44 = HEAP32[99970]|0;
   $mul40 = $44<<1;
   $45 = $tspan;
   $sub41 = (($45) - ($mul40))|0;
   $tspan = $sub41;
   $46 = $tspan;
   $47 = $span;
   $cmp42 = ($46>>>0)>=($47>>>0);
   if (!($cmp42)) {
    $48 = HEAP32[99970]|0;
    $angle1 = $48;
    break;
   }
   $retval = 0;
   $77 = $retval;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $49 = HEAP32[99970]|0;
 $50 = $angle2;
 $sub46 = (($49) - ($50))|0;
 $tspan = $sub46;
 $51 = $tspan;
 $52 = HEAP32[99970]|0;
 $mul47 = $52<<1;
 $cmp48 = ($51>>>0)>($mul47>>>0);
 do {
  if ($cmp48) {
   $53 = HEAP32[99970]|0;
   $mul50 = $53<<1;
   $54 = $tspan;
   $sub51 = (($54) - ($mul50))|0;
   $tspan = $sub51;
   $55 = $tspan;
   $56 = $span;
   $cmp52 = ($55>>>0)>=($56>>>0);
   if (!($cmp52)) {
    $57 = HEAP32[99970]|0;
    $sub55 = (0 - ($57))|0;
    $angle2 = $sub55;
    break;
   }
   $retval = 0;
   $77 = $retval;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $58 = $angle1;
 $add57 = (($58) + 1073741824)|0;
 $shr = $add57 >>> 19;
 $angle1 = $shr;
 $59 = $angle2;
 $add58 = (($59) + 1073741824)|0;
 $shr59 = $add58 >>> 19;
 $angle2 = $shr59;
 $60 = $angle1;
 $arrayidx60 = (214064 + ($60<<2)|0);
 $61 = HEAP32[$arrayidx60>>2]|0;
 $sx1 = $61;
 $62 = $angle2;
 $arrayidx61 = (214064 + ($62<<2)|0);
 $63 = HEAP32[$arrayidx61>>2]|0;
 $sx2 = $63;
 $64 = $sx1;
 $65 = $sx2;
 $cmp62 = ($64|0)==($65|0);
 if ($cmp62) {
  $retval = 0;
  $77 = $retval;
  STACKTOP = sp;return ($77|0);
 }
 $66 = $sx2;
 $dec = (($66) + -1)|0;
 $sx2 = $dec;
 $start = 206000;
 while(1) {
  $67 = $start;
  $last = ((($67)) + 4|0);
  $68 = HEAP32[$last>>2]|0;
  $69 = $sx2;
  $cmp65 = ($68|0)<($69|0);
  if (!($cmp65)) {
   break;
  }
  $70 = $start;
  $incdec$ptr = ((($70)) + 8|0);
  $start = $incdec$ptr;
 }
 $71 = $sx1;
 $72 = $start;
 $73 = HEAP32[$72>>2]|0;
 $cmp66 = ($71|0)>=($73|0);
 if ($cmp66) {
  $74 = $sx2;
  $75 = $start;
  $last67 = ((($75)) + 4|0);
  $76 = HEAP32[$last67>>2]|0;
  $cmp68 = ($74|0)<=($76|0);
  if ($cmp68) {
   $retval = 0;
   $77 = $retval;
   STACKTOP = sp;return ($77|0);
  }
 }
 $retval = 1;
 $77 = $retval;
 STACKTOP = sp;return ($77|0);
}
function _R_Subsector($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $call = 0, $call20 = 0, $ceilingheight = 0, $ceilingheight15 = 0, $ceilingpic = 0, $ceilingpic16 = 0, $cmp = 0, $cmp12 = 0, $cmp2 = 0, $cmp9 = 0, $conv = 0, $conv11 = 0, $conv17 = 0, $conv19 = 0, $conv6 = 0, $conv7 = 0, $count = 0, $dec = 0, $firstline = 0;
 var $floorpic = 0, $idxprom = 0, $inc = 0, $incdec$ptr = 0, $lightlevel = 0, $lightlevel18 = 0, $line = 0, $num$addr = 0, $numlines = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $num$addr = $num;
 $0 = $num$addr;
 $1 = HEAP32[99847]|0;
 $cmp = ($0|0)>=($1|0);
 if ($cmp) {
  $2 = $num$addr;
  $3 = HEAP32[99847]|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  _I_Error(155605,$vararg_buffer);
 }
 $4 = HEAP32[99988]|0;
 $inc = (($4) + 1)|0;
 HEAP32[99988] = $inc;
 $5 = HEAP32[99848]|0;
 $6 = $num$addr;
 $arrayidx = (($5) + ($6<<3)|0);
 $sub = $arrayidx;
 $7 = $sub;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[99911] = $8;
 $9 = $sub;
 $numlines = ((($9)) + 4|0);
 $10 = HEAP16[$numlines>>1]|0;
 $conv = $10 << 16 >> 16;
 $count = $conv;
 $11 = HEAP32[99843]|0;
 $12 = $sub;
 $firstline = ((($12)) + 6|0);
 $13 = HEAP16[$firstline>>1]|0;
 $idxprom = $13 << 16 >> 16;
 $arrayidx1 = (($11) + ($idxprom<<5)|0);
 $line = $arrayidx1;
 $14 = HEAP32[99911]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[99985]|0;
 $cmp2 = ($15|0)<($16|0);
 if ($cmp2) {
  $17 = HEAP32[99911]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[99911]|0;
  $floorpic = ((($19)) + 8|0);
  $20 = HEAP16[$floorpic>>1]|0;
  $conv6 = $20 << 16 >> 16;
  $21 = HEAP32[99911]|0;
  $lightlevel = ((($21)) + 12|0);
  $22 = HEAP16[$lightlevel>>1]|0;
  $conv7 = $22 << 16 >> 16;
  $call = (_R_FindPlane($18,$conv6,$conv7)|0);
  HEAP32[99996] = $call;
 } else {
  HEAP32[99996] = 0;
 }
 $23 = HEAP32[99911]|0;
 $ceilingheight = ((($23)) + 4|0);
 $24 = HEAP32[$ceilingheight>>2]|0;
 $25 = HEAP32[99985]|0;
 $cmp9 = ($24|0)>($25|0);
 if ($cmp9) {
  label = 8;
 } else {
  $26 = HEAP32[99911]|0;
  $ceilingpic = ((($26)) + 10|0);
  $27 = HEAP16[$ceilingpic>>1]|0;
  $conv11 = $27 << 16 >> 16;
  $28 = HEAP32[100032]|0;
  $cmp12 = ($conv11|0)==($28|0);
  if ($cmp12) {
   label = 8;
  } else {
   HEAP32[99997] = 0;
  }
 }
 if ((label|0) == 8) {
  $29 = HEAP32[99911]|0;
  $ceilingheight15 = ((($29)) + 4|0);
  $30 = HEAP32[$ceilingheight15>>2]|0;
  $31 = HEAP32[99911]|0;
  $ceilingpic16 = ((($31)) + 10|0);
  $32 = HEAP16[$ceilingpic16>>1]|0;
  $conv17 = $32 << 16 >> 16;
  $33 = HEAP32[99911]|0;
  $lightlevel18 = ((($33)) + 12|0);
  $34 = HEAP16[$lightlevel18>>1]|0;
  $conv19 = $34 << 16 >> 16;
  $call20 = (_R_FindPlane($30,$conv17,$conv19)|0);
  HEAP32[99997] = $call20;
 }
 $35 = HEAP32[99911]|0;
 _R_AddSprites($35);
 while(1) {
  $36 = $count;
  $dec = (($36) + -1)|0;
  $count = $dec;
  $tobool = ($36|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $37 = $line;
  _R_AddLine($37);
  $38 = $line;
  $incdec$ptr = ((($38)) + 32|0);
  $line = $incdec$ptr;
 }
 STACKTOP = sp;return;
}
function _R_RenderBSPNode($bspnum) {
 $bspnum = $bspnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx11 = 0;
 var $arrayidx4 = 0, $arrayidx5 = 0, $bbox = 0, $bsp = 0, $bspnum$addr = 0, $call = 0, $call6 = 0, $children = 0, $children9 = 0, $cmp = 0, $conv = 0, $conv12 = 0, $side = 0, $tobool = 0, $tobool7 = 0, $xor = 0, $xor10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $bspnum$addr = $bspnum;
 $0 = $bspnum$addr;
 $and = $0 & 32768;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $3 = HEAP32[99852]|0;
  $4 = $bspnum$addr;
  $arrayidx = (($3) + (($4*52)|0)|0);
  $bsp = $arrayidx;
  $5 = HEAP32[99963]|0;
  $6 = HEAP32[99964]|0;
  $7 = $bsp;
  $call = (_R_PointOnSide($5,$6,$7)|0);
  $side = $call;
  $8 = $bsp;
  $children = ((($8)) + 48|0);
  $9 = $side;
  $arrayidx4 = (($children) + ($9<<1)|0);
  $10 = HEAP16[$arrayidx4>>1]|0;
  $conv = $10&65535;
  _R_RenderBSPNode($conv);
  $11 = $bsp;
  $bbox = ((($11)) + 16|0);
  $12 = $side;
  $xor = $12 ^ 1;
  $arrayidx5 = (($bbox) + ($xor<<4)|0);
  $call6 = (_R_CheckBBox($arrayidx5)|0);
  $tobool7 = ($call6|0)!=(0);
  if (!($tobool7)) {
   STACKTOP = sp;return;
  }
  $13 = $bsp;
  $children9 = ((($13)) + 48|0);
  $14 = $side;
  $xor10 = $14 ^ 1;
  $arrayidx11 = (($children9) + ($xor10<<1)|0);
  $15 = HEAP16[$arrayidx11>>1]|0;
  $conv12 = $15&65535;
  _R_RenderBSPNode($conv12);
  STACKTOP = sp;return;
 }
 $1 = $bspnum$addr;
 $cmp = ($1|0)==(-1);
 if ($cmp) {
  _R_Subsector(0);
  STACKTOP = sp;return;
 } else {
  $2 = $bspnum$addr;
  $and2 = $2 & -32769;
  _R_Subsector($and2);
  STACKTOP = sp;return;
 }
}
function _R_DrawColumnInCache($patch,$cache,$originy,$cacheheight) {
 $patch = $patch|0;
 $cache = $cache|0;
 $originy = $originy|0;
 $cacheheight = $cacheheight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr20 = 0, $add$ptr21 = 0, $add7 = 0, $add8 = 0, $cache$addr = 0, $cacheheight$addr = 0, $cmp = 0, $cmp13 = 0, $cmp5 = 0, $cmp9 = 0, $conv = 0, $conv19 = 0, $conv2 = 0;
 var $conv4 = 0, $count = 0, $length = 0, $length18 = 0, $originy$addr = 0, $patch$addr = 0, $position = 0, $source = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $patch$addr = $patch;
 $cache$addr = $cache;
 $originy$addr = $originy;
 $cacheheight$addr = $cacheheight;
 while(1) {
  $0 = $patch$addr;
  $1 = HEAP8[$0>>0]|0;
  $conv = $1&255;
  $cmp = ($conv|0)!=(255);
  if (!($cmp)) {
   break;
  }
  $2 = $patch$addr;
  $add$ptr = ((($2)) + 3|0);
  $source = $add$ptr;
  $3 = $patch$addr;
  $length = ((($3)) + 1|0);
  $4 = HEAP8[$length>>0]|0;
  $conv2 = $4&255;
  $count = $conv2;
  $5 = $originy$addr;
  $6 = $patch$addr;
  $7 = HEAP8[$6>>0]|0;
  $conv4 = $7&255;
  $add = (($5) + ($conv4))|0;
  $position = $add;
  $8 = $position;
  $cmp5 = ($8|0)<(0);
  if ($cmp5) {
   $9 = $position;
   $10 = $count;
   $add7 = (($10) + ($9))|0;
   $count = $add7;
   $position = 0;
  }
  $11 = $position;
  $12 = $count;
  $add8 = (($11) + ($12))|0;
  $13 = $cacheheight$addr;
  $cmp9 = ($add8|0)>($13|0);
  if ($cmp9) {
   $14 = $cacheheight$addr;
   $15 = $position;
   $sub = (($14) - ($15))|0;
   $count = $sub;
  }
  $16 = $count;
  $cmp13 = ($16|0)>(0);
  if ($cmp13) {
   $17 = $cache$addr;
   $18 = $position;
   $add$ptr16 = (($17) + ($18)|0);
   $19 = $source;
   $20 = $count;
   _memcpy(($add$ptr16|0),($19|0),($20|0))|0;
  }
  $21 = $patch$addr;
  $22 = $patch$addr;
  $length18 = ((($22)) + 1|0);
  $23 = HEAP8[$length18>>0]|0;
  $conv19 = $23&255;
  $add$ptr20 = (($21) + ($conv19)|0);
  $add$ptr21 = ((($add$ptr20)) + 4|0);
  $patch$addr = $add$ptr21;
 }
 STACKTOP = sp;return;
}
function _R_GenerateComposite($texnum) {
 $texnum = $texnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr35 = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx26 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx33 = 0, $arrayidx4 = 0, $block = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp12 = 0, $cmp16 = 0, $cmp23 = 0, $cmp28 = 0, $collump = 0, $colofs = 0, $columnofs = 0, $conv = 0, $conv10 = 0;
 var $conv11 = 0, $conv15 = 0, $conv20 = 0, $conv27 = 0, $conv34 = 0, $conv36 = 0, $conv37 = 0, $height = 0, $i = 0, $inc = 0, $inc39 = 0, $incdec$ptr = 0, $originy = 0, $patch = 0, $patch8 = 0, $patchcol = 0, $patchcount = 0, $patches = 0, $patches5 = 0, $realpatch = 0;
 var $sub = 0, $texnum$addr = 0, $texture = 0, $width14 = 0, $width19 = 0, $x = 0, $x1 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $texnum$addr = $texnum;
 $0 = HEAP32[99914]|0;
 $1 = $texnum$addr;
 $arrayidx = (($0) + ($1<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $texture = $2;
 $3 = HEAP32[99915]|0;
 $4 = $texnum$addr;
 $arrayidx1 = (($3) + ($4<<2)|0);
 $5 = HEAP32[$arrayidx1>>2]|0;
 $6 = HEAP32[99916]|0;
 $7 = $texnum$addr;
 $arrayidx2 = (($6) + ($7<<2)|0);
 $call = (_Z_Malloc($5,1,$arrayidx2)|0);
 $block = $call;
 $8 = HEAP32[99917]|0;
 $9 = $texnum$addr;
 $arrayidx3 = (($8) + ($9<<2)|0);
 $10 = HEAP32[$arrayidx3>>2]|0;
 $collump = $10;
 $11 = HEAP32[99918]|0;
 $12 = $texnum$addr;
 $arrayidx4 = (($11) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx4>>2]|0;
 $colofs = $13;
 $14 = $texture;
 $patches = ((($14)) + 24|0);
 $patch = $patches;
 $i = 0;
 $15 = $texture;
 $patches5 = ((($15)) + 24|0);
 $patch = $patches5;
 while(1) {
  $16 = $i;
  $17 = $texture;
  $patchcount = ((($17)) + 20|0);
  $18 = HEAP16[$patchcount>>1]|0;
  $conv = $18 << 16 >> 16;
  $cmp = ($16|0)<($conv|0);
  if (!($cmp)) {
   break;
  }
  $19 = $patch;
  $patch8 = ((($19)) + 4|0);
  $20 = HEAP32[$patch8>>2]|0;
  $call9 = (_W_CacheLumpNum($20,8)|0);
  $realpatch = $call9;
  $21 = $patch;
  $22 = HEAP16[$21>>1]|0;
  $conv10 = $22 << 16 >> 16;
  $x1 = $conv10;
  $23 = $x1;
  $24 = $realpatch;
  $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8);
  $conv11 = $25 << 16 >> 16;
  $add = (($23) + ($conv11))|0;
  $x2 = $add;
  $26 = $x1;
  $cmp12 = ($26|0)<(0);
  if ($cmp12) {
   $x = 0;
  } else {
   $27 = $x1;
   $x = $27;
  }
  $28 = $x2;
  $29 = $texture;
  $width14 = ((($29)) + 8|0);
  $30 = HEAP16[$width14>>1]|0;
  $conv15 = $30 << 16 >> 16;
  $cmp16 = ($28|0)>($conv15|0);
  if ($cmp16) {
   $31 = $texture;
   $width19 = ((($31)) + 8|0);
   $32 = HEAP16[$width19>>1]|0;
   $conv20 = $32 << 16 >> 16;
   $x2 = $conv20;
  }
  while(1) {
   $33 = $x;
   $34 = $x2;
   $cmp23 = ($33|0)<($34|0);
   if (!($cmp23)) {
    break;
   }
   $35 = $collump;
   $36 = $x;
   $arrayidx26 = (($35) + ($36<<1)|0);
   $37 = HEAP16[$arrayidx26>>1]|0;
   $conv27 = $37 << 16 >> 16;
   $cmp28 = ($conv27|0)>=(0);
   if (!($cmp28)) {
    $38 = $realpatch;
    $39 = $realpatch;
    $columnofs = ((($39)) + 8|0);
    $40 = $x;
    $41 = $x1;
    $sub = (($40) - ($41))|0;
    $arrayidx32 = (($columnofs) + ($sub<<2)|0);
    $42 = HEAPU8[$arrayidx32>>0]|(HEAPU8[$arrayidx32+1>>0]<<8)|(HEAPU8[$arrayidx32+2>>0]<<16)|(HEAPU8[$arrayidx32+3>>0]<<24);
    $add$ptr = (($38) + ($42)|0);
    $patchcol = $add$ptr;
    $43 = $patchcol;
    $44 = $block;
    $45 = $colofs;
    $46 = $x;
    $arrayidx33 = (($45) + ($46<<1)|0);
    $47 = HEAP16[$arrayidx33>>1]|0;
    $conv34 = $47&65535;
    $add$ptr35 = (($44) + ($conv34)|0);
    $48 = $patch;
    $originy = ((($48)) + 2|0);
    $49 = HEAP16[$originy>>1]|0;
    $conv36 = $49 << 16 >> 16;
    $50 = $texture;
    $height = ((($50)) + 10|0);
    $51 = HEAP16[$height>>1]|0;
    $conv37 = $51 << 16 >> 16;
    _R_DrawColumnInCache($43,$add$ptr35,$conv36,$conv37);
   }
   $52 = $x;
   $inc = (($52) + 1)|0;
   $x = $inc;
  }
  $53 = $i;
  $inc39 = (($53) + 1)|0;
  $i = $inc39;
  $54 = $patch;
  $incdec$ptr = ((($54)) + 8|0);
  $patch = $incdec$ptr;
 }
 $55 = $block;
 _Z_ChangeTag2($55,8,155640,286);
 STACKTOP = sp;return;
}
function _R_GenerateLookup($texnum) {
 $texnum = $texnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $add = 0, $add36 = 0, $add73 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx31 = 0, $arrayidx34 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx49 = 0, $arrayidx54 = 0, $arrayidx59 = 0, $arrayidx60 = 0;
 var $arrayidx62 = 0, $arrayidx63 = 0, $arrayidx72 = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp17 = 0, $cmp21 = 0, $cmp28 = 0, $cmp46 = 0, $cmp56 = 0, $cmp66 = 0, $collump = 0, $colofs = 0, $columnofs = 0, $conv = 0, $conv10 = 0, $conv14 = 0, $conv16 = 0, $conv20 = 0;
 var $conv25 = 0, $conv33 = 0, $conv37 = 0, $conv45 = 0, $conv55 = 0, $conv6 = 0, $conv61 = 0, $conv64 = 0, $conv71 = 0, $height = 0, $height70 = 0, $i = 0, $inc = 0, $inc39 = 0, $inc41 = 0, $inc76 = 0, $incdec$ptr = 0, $patch = 0, $patch12 = 0, $patch32 = 0;
 var $patchcount = 0, $patchcount9 = 0, $patches = 0, $patches7 = 0, $realpatch = 0, $sub = 0, $sub65 = 0, $texnum$addr = 0, $texture = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $width = 0, $width19 = 0, $width24 = 0, $width44 = 0, $width5 = 0, $x = 0, $x1 = 0, $x2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $patchcount = sp + 44|0;
 $texnum$addr = $texnum;
 $0 = HEAP32[99914]|0;
 $1 = $texnum$addr;
 $arrayidx = (($0) + ($1<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $texture = $2;
 $3 = HEAP32[99916]|0;
 $4 = $texnum$addr;
 $arrayidx1 = (($3) + ($4<<2)|0);
 HEAP32[$arrayidx1>>2] = 0;
 $5 = HEAP32[99915]|0;
 $6 = $texnum$addr;
 $arrayidx2 = (($5) + ($6<<2)|0);
 HEAP32[$arrayidx2>>2] = 0;
 $7 = HEAP32[99917]|0;
 $8 = $texnum$addr;
 $arrayidx3 = (($7) + ($8<<2)|0);
 $9 = HEAP32[$arrayidx3>>2]|0;
 $collump = $9;
 $10 = HEAP32[99918]|0;
 $11 = $texnum$addr;
 $arrayidx4 = (($10) + ($11<<2)|0);
 $12 = HEAP32[$arrayidx4>>2]|0;
 $colofs = $12;
 $13 = $texture;
 $width = ((($13)) + 8|0);
 $14 = HEAP16[$width>>1]|0;
 $conv = $14 << 16 >> 16;
 $call = (_Z_Malloc($conv,1,$patchcount)|0);
 HEAP32[$patchcount>>2] = $call;
 $15 = HEAP32[$patchcount>>2]|0;
 $16 = $texture;
 $width5 = ((($16)) + 8|0);
 $17 = HEAP16[$width5>>1]|0;
 $conv6 = $17 << 16 >> 16;
 _memset(($15|0),0,($conv6|0))|0;
 $18 = $texture;
 $patches = ((($18)) + 24|0);
 $patch = $patches;
 $i = 0;
 $19 = $texture;
 $patches7 = ((($19)) + 24|0);
 $patch = $patches7;
 while(1) {
  $20 = $i;
  $21 = $texture;
  $patchcount9 = ((($21)) + 20|0);
  $22 = HEAP16[$patchcount9>>1]|0;
  $conv10 = $22 << 16 >> 16;
  $cmp = ($20|0)<($conv10|0);
  if (!($cmp)) {
   break;
  }
  $23 = $patch;
  $patch12 = ((($23)) + 4|0);
  $24 = HEAP32[$patch12>>2]|0;
  $call13 = (_W_CacheLumpNum($24,8)|0);
  $realpatch = $call13;
  $25 = $patch;
  $26 = HEAP16[$25>>1]|0;
  $conv14 = $26 << 16 >> 16;
  $x1 = $conv14;
  $27 = $x1;
  $28 = $realpatch;
  $29 = HEAPU8[$28>>0]|(HEAPU8[$28+1>>0]<<8);
  $conv16 = $29 << 16 >> 16;
  $add = (($27) + ($conv16))|0;
  $x2 = $add;
  $30 = $x1;
  $cmp17 = ($30|0)<(0);
  if ($cmp17) {
   $x = 0;
  } else {
   $31 = $x1;
   $x = $31;
  }
  $32 = $x2;
  $33 = $texture;
  $width19 = ((($33)) + 8|0);
  $34 = HEAP16[$width19>>1]|0;
  $conv20 = $34 << 16 >> 16;
  $cmp21 = ($32|0)>($conv20|0);
  if ($cmp21) {
   $35 = $texture;
   $width24 = ((($35)) + 8|0);
   $36 = HEAP16[$width24>>1]|0;
   $conv25 = $36 << 16 >> 16;
   $x2 = $conv25;
  }
  while(1) {
   $37 = $x;
   $38 = $x2;
   $cmp28 = ($37|0)<($38|0);
   if (!($cmp28)) {
    break;
   }
   $39 = HEAP32[$patchcount>>2]|0;
   $40 = $x;
   $arrayidx31 = (($39) + ($40)|0);
   $41 = HEAP8[$arrayidx31>>0]|0;
   $inc = (($41) + 1)<<24>>24;
   HEAP8[$arrayidx31>>0] = $inc;
   $42 = $patch;
   $patch32 = ((($42)) + 4|0);
   $43 = HEAP32[$patch32>>2]|0;
   $conv33 = $43&65535;
   $44 = $collump;
   $45 = $x;
   $arrayidx34 = (($44) + ($45<<1)|0);
   HEAP16[$arrayidx34>>1] = $conv33;
   $46 = $realpatch;
   $columnofs = ((($46)) + 8|0);
   $47 = $x;
   $48 = $x1;
   $sub = (($47) - ($48))|0;
   $arrayidx35 = (($columnofs) + ($sub<<2)|0);
   $49 = HEAPU8[$arrayidx35>>0]|(HEAPU8[$arrayidx35+1>>0]<<8)|(HEAPU8[$arrayidx35+2>>0]<<16)|(HEAPU8[$arrayidx35+3>>0]<<24);
   $add36 = (($49) + 3)|0;
   $conv37 = $add36&65535;
   $50 = $colofs;
   $51 = $x;
   $arrayidx38 = (($50) + ($51<<1)|0);
   HEAP16[$arrayidx38>>1] = $conv37;
   $52 = $x;
   $inc39 = (($52) + 1)|0;
   $x = $inc39;
  }
  $53 = $i;
  $inc41 = (($53) + 1)|0;
  $i = $inc41;
  $54 = $patch;
  $incdec$ptr = ((($54)) + 8|0);
  $patch = $incdec$ptr;
 }
 $x = 0;
 while(1) {
  $55 = $x;
  $56 = $texture;
  $width44 = ((($56)) + 8|0);
  $57 = HEAP16[$width44>>1]|0;
  $conv45 = $57 << 16 >> 16;
  $cmp46 = ($55|0)<($conv45|0);
  $58 = HEAP32[$patchcount>>2]|0;
  if (!($cmp46)) {
   label = 21;
   break;
  }
  $59 = $x;
  $arrayidx49 = (($58) + ($59)|0);
  $60 = HEAP8[$arrayidx49>>0]|0;
  $tobool = ($60<<24>>24)!=(0);
  if (!($tobool)) {
   label = 15;
   break;
  }
  $62 = HEAP32[$patchcount>>2]|0;
  $63 = $x;
  $arrayidx54 = (($62) + ($63)|0);
  $64 = HEAP8[$arrayidx54>>0]|0;
  $conv55 = $64&255;
  $cmp56 = ($conv55|0)>(1);
  if ($cmp56) {
   $65 = $collump;
   $66 = $x;
   $arrayidx59 = (($65) + ($66<<1)|0);
   HEAP16[$arrayidx59>>1] = -1;
   $67 = HEAP32[99915]|0;
   $68 = $texnum$addr;
   $arrayidx60 = (($67) + ($68<<2)|0);
   $69 = HEAP32[$arrayidx60>>2]|0;
   $conv61 = $69&65535;
   $70 = $colofs;
   $71 = $x;
   $arrayidx62 = (($70) + ($71<<1)|0);
   HEAP16[$arrayidx62>>1] = $conv61;
   $72 = HEAP32[99915]|0;
   $73 = $texnum$addr;
   $arrayidx63 = (($72) + ($73<<2)|0);
   $74 = HEAP32[$arrayidx63>>2]|0;
   $75 = $texture;
   $height = ((($75)) + 10|0);
   $76 = HEAP16[$height>>1]|0;
   $conv64 = $76 << 16 >> 16;
   $sub65 = (65536 - ($conv64))|0;
   $cmp66 = ($74|0)>($sub65|0);
   if ($cmp66) {
    $77 = $texnum$addr;
    HEAP32[$vararg_buffer1>>2] = $77;
    _I_Error(155696,$vararg_buffer1);
   }
   $78 = $texture;
   $height70 = ((($78)) + 10|0);
   $79 = HEAP16[$height70>>1]|0;
   $conv71 = $79 << 16 >> 16;
   $80 = HEAP32[99915]|0;
   $81 = $texnum$addr;
   $arrayidx72 = (($80) + ($81<<2)|0);
   $82 = HEAP32[$arrayidx72>>2]|0;
   $add73 = (($82) + ($conv71))|0;
   HEAP32[$arrayidx72>>2] = $add73;
  }
  $83 = $x;
  $inc76 = (($83) + 1)|0;
  $x = $inc76;
 }
 if ((label|0) == 15) {
  $61 = $texture;
  HEAP32[$vararg_buffer>>2] = $61;
  (_printf(155649,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 21) {
  _Z_Free($58);
  STACKTOP = sp;return;
 }
}
function _R_GetColumn($tex,$col) {
 $tex = $tex|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr11 = 0, $and = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $call = 0, $cmp = 0, $col$addr = 0, $conv = 0;
 var $conv5 = 0, $lump = 0, $ofs = 0, $retval = 0, $tex$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tex$addr = $tex;
 $col$addr = $col;
 $0 = HEAP32[99919]|0;
 $1 = $tex$addr;
 $arrayidx = (($0) + ($1<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $3 = $col$addr;
 $and = $3 & $2;
 $col$addr = $and;
 $4 = HEAP32[99917]|0;
 $5 = $tex$addr;
 $arrayidx1 = (($4) + ($5<<2)|0);
 $6 = HEAP32[$arrayidx1>>2]|0;
 $7 = $col$addr;
 $arrayidx2 = (($6) + ($7<<1)|0);
 $8 = HEAP16[$arrayidx2>>1]|0;
 $conv = $8 << 16 >> 16;
 $lump = $conv;
 $9 = HEAP32[99918]|0;
 $10 = $tex$addr;
 $arrayidx3 = (($9) + ($10<<2)|0);
 $11 = HEAP32[$arrayidx3>>2]|0;
 $12 = $col$addr;
 $arrayidx4 = (($11) + ($12<<1)|0);
 $13 = HEAP16[$arrayidx4>>1]|0;
 $conv5 = $13&65535;
 $ofs = $conv5;
 $14 = $lump;
 $cmp = ($14|0)>(0);
 if ($cmp) {
  $15 = $lump;
  $call = (_W_CacheLumpNum($15,8)|0);
  $16 = $ofs;
  $add$ptr = (($call) + ($16)|0);
  $retval = $add$ptr;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 $17 = HEAP32[99916]|0;
 $18 = $tex$addr;
 $arrayidx7 = (($17) + ($18<<2)|0);
 $19 = HEAP32[$arrayidx7>>2]|0;
 $tobool = ($19|0)!=(0|0);
 if (!($tobool)) {
  $20 = $tex$addr;
  _R_GenerateComposite($20);
 }
 $21 = HEAP32[99916]|0;
 $22 = $tex$addr;
 $arrayidx10 = (($21) + ($22<<2)|0);
 $23 = HEAP32[$arrayidx10>>2]|0;
 $24 = $ofs;
 $add$ptr11 = (($23) + ($24)|0);
 $retval = $add$ptr11;
 $25 = $retval;
 STACKTOP = sp;return ($25|0);
}
function _R_InitTextures() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $add = 0, $add$ptr = 0, $add$ptr11 = 0, $add$ptr3 = 0, $add$ptr68 = 0, $add$ptr73 = 0, $add135 = 0, $add150 = 0, $add34 = 0, $add35 = 0, $add37 = 0, $add42 = 0, $add51 = 0, $add76 = 0, $and = 0, $arrayidx = 0, $arrayidx116 = 0, $arrayidx121 = 0, $arrayidx128 = 0;
 var $arrayidx132 = 0, $arrayidx157 = 0, $arrayidx7 = 0, $arrayidx78 = 0, $arrayidx99 = 0, $call = 0, $call1 = 0, $call10 = 0, $call115 = 0, $call12 = 0, $call120 = 0, $call14 = 0, $call15 = 0, $call152 = 0, $call16 = 0, $call18 = 0, $call20 = 0, $call22 = 0, $call24 = 0, $call26 = 0;
 var $call28 = 0, $call30 = 0, $call31 = 0, $call32 = 0, $call38 = 0, $call6 = 0, $call77 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp102 = 0, $cmp125 = 0, $cmp13 = 0, $cmp144 = 0, $cmp154 = 0, $cmp43 = 0, $cmp52 = 0, $cmp60 = 0, $cmp66 = 0, $cmp70 = 0;
 var $cmp93 = 0, $conv = 0, $conv113 = 0, $conv118 = 0, $conv124 = 0, $conv130 = 0, $conv134 = 0, $conv92 = 0, $directory = 0, $div = 0, $div36 = 0, $height = 0, $height129 = 0, $height80 = 0, $i = 0, $idxprom = 0, $inc = 0, $inc109 = 0, $inc137 = 0, $inc148 = 0;
 var $inc159 = 0, $inc47 = 0, $inc56 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr138 = 0, $j = 0, $maptex = 0, $maptex1 = 0, $maptex2 = 0, $maxoff = 0, $maxoff2 = 0, $mpatch = 0, $mtexture = 0, $mul = 0, $mul114 = 0, $mul119 = 0, $mul122 = 0, $mul151 = 0, $mul17 = 0;
 var $mul19 = 0, $mul2 = 0, $mul21 = 0, $mul23 = 0, $mul25 = 0, $mul27 = 0, $mul29 = 0, $mul75 = 0, $name = 0, $name_p = 0, $names = 0, $nummappatches = 0, $numtextures1 = 0, $numtextures2 = 0, $offset = 0, $originy = 0, $originy97 = 0, $patch = 0, $patch100 = 0, $patch101 = 0;
 var $patch98 = 0, $patchcount = 0, $patchcount81 = 0, $patchcount82 = 0, $patchcount91 = 0, $patches = 0, $patches88 = 0, $patchlookup = 0, $shl = 0, $shl131 = 0, $sub = 0, $sub127 = 0, $sub33 = 0, $sub74 = 0, $temp1 = 0, $temp2 = 0, $temp3 = 0, $texture = 0, $tobool = 0, $tobool140 = 0;
 var $tobool62 = 0, $totalwidth = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $width = 0, $width112 = 0, $width117 = 0, $width123 = 0, $width133 = 0, $width79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 144|0;
 $arrayidx = ((($name)) + 8|0);
 HEAP8[$arrayidx>>0] = 0;
 $call = (_W_CacheLumpName(155733,1)|0);
 $names = $call;
 $0 = $names;
 $1 = HEAP32[$0>>2]|0;
 $nummappatches = $1;
 $2 = $names;
 $add$ptr = ((($2)) + 4|0);
 $name_p = $add$ptr;
 $3 = $nummappatches;
 $mul = $3<<2;
 $call1 = (_Z_Malloc($mul,1,0)|0);
 $patchlookup = $call1;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $nummappatches;
  $cmp = ($4|0)<($5|0);
  if (!($cmp)) {
   break;
  }
  $6 = $name_p;
  $7 = $i;
  $mul2 = $7<<3;
  $add$ptr3 = (($6) + ($mul2)|0);
  (_M_StringCopy($name,$add$ptr3,9)|0);
  $call6 = (_W_CheckNumForName($name)|0);
  $8 = $patchlookup;
  $9 = $i;
  $arrayidx7 = (($8) + ($9<<2)|0);
  HEAP32[$arrayidx7>>2] = $call6;
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 _W_ReleaseLumpName(155733);
 $call8 = (_W_CacheLumpName(155740,1)|0);
 $maptex1 = $call8;
 $maptex = $call8;
 $11 = $maptex;
 $12 = HEAP32[$11>>2]|0;
 $numtextures1 = $12;
 $call9 = (_W_GetNumForName(155740)|0);
 $call10 = (_W_LumpLength($call9)|0);
 $maxoff = $call10;
 $13 = $maptex;
 $add$ptr11 = ((($13)) + 4|0);
 $directory = $add$ptr11;
 $call12 = (_W_CheckNumForName(155749)|0);
 $cmp13 = ($call12|0)!=(-1);
 if ($cmp13) {
  $call14 = (_W_CacheLumpName(155749,1)|0);
  $maptex2 = $call14;
  $14 = $maptex2;
  $15 = HEAP32[$14>>2]|0;
  $numtextures2 = $15;
  $call15 = (_W_GetNumForName(155749)|0);
  $call16 = (_W_LumpLength($call15)|0);
  $maxoff2 = $call16;
 } else {
  $maptex2 = 0;
  $numtextures2 = 0;
  $maxoff2 = 0;
 }
 $16 = $numtextures1;
 $17 = $numtextures2;
 $add = (($16) + ($17))|0;
 HEAP32[99920] = $add;
 $18 = HEAP32[99920]|0;
 $mul17 = $18<<2;
 $call18 = (_Z_Malloc($mul17,1,0)|0);
 HEAP32[99914] = $call18;
 $19 = HEAP32[99920]|0;
 $mul19 = $19<<2;
 $call20 = (_Z_Malloc($mul19,1,0)|0);
 HEAP32[99917] = $call20;
 $20 = HEAP32[99920]|0;
 $mul21 = $20<<2;
 $call22 = (_Z_Malloc($mul21,1,0)|0);
 HEAP32[99918] = $call22;
 $21 = HEAP32[99920]|0;
 $mul23 = $21<<2;
 $call24 = (_Z_Malloc($mul23,1,0)|0);
 HEAP32[99916] = $call24;
 $22 = HEAP32[99920]|0;
 $mul25 = $22<<2;
 $call26 = (_Z_Malloc($mul25,1,0)|0);
 HEAP32[99915] = $call26;
 $23 = HEAP32[99920]|0;
 $mul27 = $23<<2;
 $call28 = (_Z_Malloc($mul27,1,0)|0);
 HEAP32[99919] = $call28;
 $24 = HEAP32[99920]|0;
 $mul29 = $24<<2;
 $call30 = (_Z_Malloc($mul29,1,0)|0);
 HEAP32[99921] = $call30;
 $totalwidth = 0;
 $call31 = (_W_GetNumForName(155758)|0);
 $temp1 = $call31;
 $call32 = (_W_GetNumForName(155766)|0);
 $sub = (($call32) - 1)|0;
 $temp2 = $sub;
 $25 = $temp2;
 $26 = $temp1;
 $sub33 = (($25) - ($26))|0;
 $add34 = (($sub33) + 63)|0;
 $div = (($add34|0) / 64)&-1;
 $27 = HEAP32[99920]|0;
 $add35 = (($27) + 63)|0;
 $div36 = (($add35|0) / 64)&-1;
 $add37 = (($div) + ($div36))|0;
 $temp3 = $add37;
 $call38 = (_I_ConsoleStdout()|0);
 $tobool = ($call38|0)!=(0);
 L9: do {
  if ($tobool) {
   (_printf(155772,$vararg_buffer)|0);
   $i = 0;
   while(1) {
    $28 = $i;
    $29 = $temp3;
    $add42 = (($29) + 9)|0;
    $cmp43 = ($28|0)<($add42|0);
    if (!($cmp43)) {
     break;
    }
    (_printf(155774,$vararg_buffer1)|0);
    $30 = $i;
    $inc47 = (($30) + 1)|0;
    $i = $inc47;
   }
   (_printf(155776,$vararg_buffer3)|0);
   $i = 0;
   while(1) {
    $31 = $i;
    $32 = $temp3;
    $add51 = (($32) + 10)|0;
    $cmp52 = ($31|0)<($add51|0);
    if (!($cmp52)) {
     break L9;
    }
    (_printf(155778,$vararg_buffer5)|0);
    $33 = $i;
    $inc56 = (($33) + 1)|0;
    $i = $inc56;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = HEAP32[99920]|0;
  $cmp60 = ($34|0)<($35|0);
  if (!($cmp60)) {
   break;
  }
  $36 = $i;
  $and = $36 & 63;
  $tobool62 = ($and|0)!=(0);
  if (!($tobool62)) {
   (_printf(159941,$vararg_buffer7)|0);
  }
  $37 = $i;
  $38 = $numtextures1;
  $cmp66 = ($37|0)==($38|0);
  if ($cmp66) {
   $39 = $maptex2;
   $maptex = $39;
   $40 = $maxoff2;
   $maxoff = $40;
   $41 = $maptex;
   $add$ptr68 = ((($41)) + 4|0);
   $directory = $add$ptr68;
  }
  $42 = $directory;
  $43 = HEAP32[$42>>2]|0;
  $offset = $43;
  $44 = $offset;
  $45 = $maxoff;
  $cmp70 = ($44|0)>($45|0);
  if ($cmp70) {
   _I_Error(155780,$vararg_buffer9);
  }
  $46 = $maptex;
  $47 = $offset;
  $add$ptr73 = (($46) + ($47)|0);
  $mtexture = $add$ptr73;
  $48 = $mtexture;
  $patchcount = ((($48)) + 20|0);
  $49 = HEAPU8[$patchcount>>0]|(HEAPU8[$patchcount+1>>0]<<8);
  $conv = $49 << 16 >> 16;
  $sub74 = (($conv) - 1)|0;
  $mul75 = $sub74<<3;
  $add76 = (32 + ($mul75))|0;
  $call77 = (_Z_Malloc($add76,1,0)|0);
  $50 = HEAP32[99914]|0;
  $51 = $i;
  $arrayidx78 = (($50) + ($51<<2)|0);
  HEAP32[$arrayidx78>>2] = $call77;
  $texture = $call77;
  $52 = $mtexture;
  $width = ((($52)) + 12|0);
  $53 = HEAPU8[$width>>0]|(HEAPU8[$width+1>>0]<<8);
  $54 = $texture;
  $width79 = ((($54)) + 8|0);
  HEAP16[$width79>>1] = $53;
  $55 = $mtexture;
  $height = ((($55)) + 14|0);
  $56 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $57 = $texture;
  $height80 = ((($57)) + 10|0);
  HEAP16[$height80>>1] = $56;
  $58 = $mtexture;
  $patchcount81 = ((($58)) + 20|0);
  $59 = HEAPU8[$patchcount81>>0]|(HEAPU8[$patchcount81+1>>0]<<8);
  $60 = $texture;
  $patchcount82 = ((($60)) + 20|0);
  HEAP16[$patchcount82>>1] = $59;
  $61 = $texture;
  $62 = $mtexture;
  ;HEAP8[$61>>0]=HEAP8[$62>>0]|0;HEAP8[$61+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$62+3>>0]|0;HEAP8[$61+4>>0]=HEAP8[$62+4>>0]|0;HEAP8[$61+5>>0]=HEAP8[$62+5>>0]|0;HEAP8[$61+6>>0]=HEAP8[$62+6>>0]|0;HEAP8[$61+7>>0]=HEAP8[$62+7>>0]|0;
  $63 = $mtexture;
  $patches = ((($63)) + 22|0);
  $mpatch = $patches;
  $64 = $texture;
  $patches88 = ((($64)) + 24|0);
  $patch = $patches88;
  $j = 0;
  while(1) {
   $65 = $j;
   $66 = $texture;
   $patchcount91 = ((($66)) + 20|0);
   $67 = HEAP16[$patchcount91>>1]|0;
   $conv92 = $67 << 16 >> 16;
   $cmp93 = ($65|0)<($conv92|0);
   if (!($cmp93)) {
    break;
   }
   $68 = $mpatch;
   $69 = HEAPU8[$68>>0]|(HEAPU8[$68+1>>0]<<8);
   $70 = $patch;
   HEAP16[$70>>1] = $69;
   $71 = $mpatch;
   $originy = ((($71)) + 2|0);
   $72 = HEAPU8[$originy>>0]|(HEAPU8[$originy+1>>0]<<8);
   $73 = $patch;
   $originy97 = ((($73)) + 2|0);
   HEAP16[$originy97>>1] = $72;
   $74 = $patchlookup;
   $75 = $mpatch;
   $patch98 = ((($75)) + 4|0);
   $76 = HEAPU8[$patch98>>0]|(HEAPU8[$patch98+1>>0]<<8);
   $idxprom = $76 << 16 >> 16;
   $arrayidx99 = (($74) + ($idxprom<<2)|0);
   $77 = HEAP32[$arrayidx99>>2]|0;
   $78 = $patch;
   $patch100 = ((($78)) + 4|0);
   HEAP32[$patch100>>2] = $77;
   $79 = $patch;
   $patch101 = ((($79)) + 4|0);
   $80 = HEAP32[$patch101>>2]|0;
   $cmp102 = ($80|0)==(-1);
   if ($cmp102) {
    $81 = $texture;
    HEAP32[$vararg_buffer11>>2] = $81;
    _I_Error(155818,$vararg_buffer11);
   }
   $82 = $j;
   $inc109 = (($82) + 1)|0;
   $j = $inc109;
   $83 = $mpatch;
   $incdec$ptr = ((($83)) + 10|0);
   $mpatch = $incdec$ptr;
   $84 = $patch;
   $incdec$ptr110 = ((($84)) + 8|0);
   $patch = $incdec$ptr110;
  }
  $85 = $texture;
  $width112 = ((($85)) + 8|0);
  $86 = HEAP16[$width112>>1]|0;
  $conv113 = $86 << 16 >> 16;
  $mul114 = $conv113<<1;
  $call115 = (_Z_Malloc($mul114,1,0)|0);
  $87 = HEAP32[99917]|0;
  $88 = $i;
  $arrayidx116 = (($87) + ($88<<2)|0);
  HEAP32[$arrayidx116>>2] = $call115;
  $89 = $texture;
  $width117 = ((($89)) + 8|0);
  $90 = HEAP16[$width117>>1]|0;
  $conv118 = $90 << 16 >> 16;
  $mul119 = $conv118<<1;
  $call120 = (_Z_Malloc($mul119,1,0)|0);
  $91 = HEAP32[99918]|0;
  $92 = $i;
  $arrayidx121 = (($91) + ($92<<2)|0);
  HEAP32[$arrayidx121>>2] = $call120;
  $j = 1;
  while(1) {
   $93 = $j;
   $mul122 = $93<<1;
   $94 = $texture;
   $width123 = ((($94)) + 8|0);
   $95 = HEAP16[$width123>>1]|0;
   $conv124 = $95 << 16 >> 16;
   $cmp125 = ($mul122|0)<=($conv124|0);
   $96 = $j;
   if (!($cmp125)) {
    break;
   }
   $shl = $96 << 1;
   $j = $shl;
  }
  $sub127 = (($96) - 1)|0;
  $97 = HEAP32[99919]|0;
  $98 = $i;
  $arrayidx128 = (($97) + ($98<<2)|0);
  HEAP32[$arrayidx128>>2] = $sub127;
  $99 = $texture;
  $height129 = ((($99)) + 10|0);
  $100 = HEAP16[$height129>>1]|0;
  $conv130 = $100 << 16 >> 16;
  $shl131 = $conv130 << 16;
  $101 = HEAP32[99921]|0;
  $102 = $i;
  $arrayidx132 = (($101) + ($102<<2)|0);
  HEAP32[$arrayidx132>>2] = $shl131;
  $103 = $texture;
  $width133 = ((($103)) + 8|0);
  $104 = HEAP16[$width133>>1]|0;
  $conv134 = $104 << 16 >> 16;
  $105 = $totalwidth;
  $add135 = (($105) + ($conv134))|0;
  $totalwidth = $add135;
  $106 = $i;
  $inc137 = (($106) + 1)|0;
  $i = $inc137;
  $107 = $directory;
  $incdec$ptr138 = ((($107)) + 4|0);
  $directory = $incdec$ptr138;
 }
 $108 = $patchlookup;
 _Z_Free($108);
 _W_ReleaseLumpName(155740);
 $109 = $maptex2;
 $tobool140 = ($109|0)!=(0|0);
 if ($tobool140) {
  _W_ReleaseLumpName(155749);
 }
 $i = 0;
 while(1) {
  $110 = $i;
  $111 = HEAP32[99920]|0;
  $cmp144 = ($110|0)<($111|0);
  if (!($cmp144)) {
   break;
  }
  $112 = $i;
  _R_GenerateLookup($112);
  $113 = $i;
  $inc148 = (($113) + 1)|0;
  $i = $inc148;
 }
 $114 = HEAP32[99920]|0;
 $add150 = (($114) + 1)|0;
 $mul151 = $add150<<2;
 $call152 = (_Z_Malloc($mul151,1,0)|0);
 HEAP32[99922] = $call152;
 $i = 0;
 while(1) {
  $115 = $i;
  $116 = HEAP32[99920]|0;
  $cmp154 = ($115|0)<($116|0);
  if (!($cmp154)) {
   break;
  }
  $117 = $i;
  $118 = HEAP32[99922]|0;
  $119 = $i;
  $arrayidx157 = (($118) + ($119<<2)|0);
  HEAP32[$arrayidx157>>2] = $117;
  $120 = $i;
  $inc159 = (($120) + 1)|0;
  $i = $inc159;
 }
 _GenerateTextureHashTable();
 STACKTOP = sp;return;
}
function _GenerateTextureHashTable() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $arrayidx8 = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp5 = 0, $i = 0, $inc = 0, $index = 0, $key = 0;
 var $mul = 0, $mul1 = 0, $next = 0, $next7 = 0, $rem = 0, $rover = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99920]|0;
 $mul = $0<<2;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99934] = $call;
 $1 = HEAP32[99934]|0;
 $2 = HEAP32[99920]|0;
 $mul1 = $2<<2;
 _memset(($1|0),0,($mul1|0))|0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[99920]|0;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $i;
  $6 = HEAP32[99914]|0;
  $7 = $i;
  $arrayidx = (($6) + ($7<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $index = ((($8)) + 12|0);
  HEAP32[$index>>2] = $5;
  $9 = HEAP32[99914]|0;
  $10 = $i;
  $arrayidx2 = (($9) + ($10<<2)|0);
  $11 = HEAP32[$arrayidx2>>2]|0;
  $call3 = (_W_LumpNameHash($11)|0);
  $12 = HEAP32[99920]|0;
  $rem = (($call3>>>0) % ($12>>>0))&-1;
  $key = $rem;
  $13 = HEAP32[99934]|0;
  $14 = $key;
  $arrayidx4 = (($13) + ($14<<2)|0);
  $rover = $arrayidx4;
  while(1) {
   $15 = $rover;
   $16 = HEAP32[$15>>2]|0;
   $cmp5 = ($16|0)!=(0|0);
   if (!($cmp5)) {
    break;
   }
   $17 = $rover;
   $18 = HEAP32[$17>>2]|0;
   $next = ((($18)) + 16|0);
   $rover = $next;
  }
  $19 = HEAP32[99914]|0;
  $20 = $i;
  $arrayidx6 = (($19) + ($20<<2)|0);
  $21 = HEAP32[$arrayidx6>>2]|0;
  $next7 = ((($21)) + 16|0);
  HEAP32[$next7>>2] = 0;
  $22 = HEAP32[99914]|0;
  $23 = $i;
  $arrayidx8 = (($22) + ($23<<2)|0);
  $24 = HEAP32[$arrayidx8>>2]|0;
  $25 = $rover;
  HEAP32[$25>>2] = $24;
  $26 = $i;
  $inc = (($26) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _R_InitFlats() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add3 = 0, $add4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0, $i = 0, $inc = 0, $mul = 0;
 var $sub = 0, $sub2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_W_GetNumForName(155862)|0);
 $add = (($call) + 1)|0;
 HEAP32[99923] = $add;
 $call1 = (_W_GetNumForName(155870)|0);
 $sub = (($call1) - 1)|0;
 HEAP32[99924] = $sub;
 $0 = HEAP32[99924]|0;
 $1 = HEAP32[99923]|0;
 $sub2 = (($0) - ($1))|0;
 $add3 = (($sub2) + 1)|0;
 HEAP32[99925] = $add3;
 $2 = HEAP32[99925]|0;
 $add4 = (($2) + 1)|0;
 $mul = $add4<<2;
 $call5 = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99926] = $call5;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[99925]|0;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $i;
  $6 = HEAP32[99926]|0;
  $7 = $i;
  $arrayidx = (($6) + ($7<<2)|0);
  HEAP32[$arrayidx>>2] = $5;
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _R_InitSpriteLumps() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add3 = 0, $and = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx17 = 0, $call = 0, $call1 = 0, $call11 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $conv = 0, $conv12 = 0, $conv15 = 0;
 var $i = 0, $inc = 0, $leftoffset = 0, $mul = 0, $mul5 = 0, $mul7 = 0, $patch = 0, $shl = 0, $shl13 = 0, $shl16 = 0, $sub = 0, $sub2 = 0, $tobool = 0, $topoffset = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_W_GetNumForName(155758)|0);
 $add = (($call) + 1)|0;
 HEAP32[99927] = $add;
 $call1 = (_W_GetNumForName(155766)|0);
 $sub = (($call1) - 1)|0;
 HEAP32[99928] = $sub;
 $0 = HEAP32[99928]|0;
 $1 = HEAP32[99927]|0;
 $sub2 = (($0) - ($1))|0;
 $add3 = (($sub2) + 1)|0;
 HEAP32[99929] = $add3;
 $2 = HEAP32[99929]|0;
 $mul = $2<<2;
 $call4 = (_Z_Malloc($mul,1,0)|0);
 HEAP32[99930] = $call4;
 $3 = HEAP32[99929]|0;
 $mul5 = $3<<2;
 $call6 = (_Z_Malloc($mul5,1,0)|0);
 HEAP32[99931] = $call6;
 $4 = HEAP32[99929]|0;
 $mul7 = $4<<2;
 $call8 = (_Z_Malloc($mul7,1,0)|0);
 HEAP32[99932] = $call8;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = HEAP32[99929]|0;
  $cmp = ($5|0)<($6|0);
  if (!($cmp)) {
   break;
  }
  $7 = $i;
  $and = $7 & 63;
  $tobool = ($and|0)!=(0);
  if (!($tobool)) {
   (_printf(159941,$vararg_buffer)|0);
  }
  $8 = HEAP32[99927]|0;
  $9 = $i;
  $add10 = (($8) + ($9))|0;
  $call11 = (_W_CacheLumpNum($add10,8)|0);
  $patch = $call11;
  $10 = $patch;
  $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8);
  $conv = $11 << 16 >> 16;
  $shl = $conv << 16;
  $12 = HEAP32[99930]|0;
  $13 = $i;
  $arrayidx = (($12) + ($13<<2)|0);
  HEAP32[$arrayidx>>2] = $shl;
  $14 = $patch;
  $leftoffset = ((($14)) + 4|0);
  $15 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
  $conv12 = $15 << 16 >> 16;
  $shl13 = $conv12 << 16;
  $16 = HEAP32[99931]|0;
  $17 = $i;
  $arrayidx14 = (($16) + ($17<<2)|0);
  HEAP32[$arrayidx14>>2] = $shl13;
  $18 = $patch;
  $topoffset = ((($18)) + 6|0);
  $19 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
  $conv15 = $19 << 16 >> 16;
  $shl16 = $conv15 << 16;
  $20 = HEAP32[99932]|0;
  $21 = $i;
  $arrayidx17 = (($20) + ($21<<2)|0);
  HEAP32[$arrayidx17>>2] = $shl16;
  $22 = $i;
  $inc = (($22) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _R_InitColormaps() {
 var $0 = 0, $call = 0, $call1 = 0, $lump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_W_GetNumForName(155876)|0);
 $lump = $call;
 $0 = $lump;
 $call1 = (_W_CacheLumpNum($0,1)|0);
 HEAP32[99933] = $call1;
 STACKTOP = sp;return;
}
function _R_InitData() {
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _R_InitTextures();
 (_printf(159941,$vararg_buffer)|0);
 _R_InitFlats();
 (_printf(159941,$vararg_buffer1)|0);
 _R_InitSpriteLumps();
 (_printf(159941,$vararg_buffer3)|0);
 _R_InitColormaps();
 STACKTOP = sp;return;
}
function _R_FlatNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $i = 0, $name$addr = 0, $namet = 0, $sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $namet = sp + 12|0;
 $name$addr = $name;
 $0 = $name$addr;
 $call = (_W_CheckNumForName($0)|0);
 $i = $call;
 $1 = $i;
 $cmp = ($1|0)==(-1);
 if (!($cmp)) {
  $3 = $i;
  $4 = HEAP32[99923]|0;
  $sub = (($3) - ($4))|0;
  STACKTOP = sp;return ($sub|0);
 }
 $arrayidx = ((($namet)) + 8|0);
 HEAP8[$arrayidx>>0] = 0;
 $2 = $name$addr;
 ;HEAP8[$namet>>0]=HEAP8[$2>>0]|0;HEAP8[$namet+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$namet+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$namet+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$namet+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$namet+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$namet+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$namet+7>>0]=HEAP8[$2+7>>0]|0;
 HEAP32[$vararg_buffer>>2] = $namet;
 _I_Error(155885,$vararg_buffer);
 $3 = $i;
 $4 = HEAP32[99923]|0;
 $sub = (($3) - ($4))|0;
 STACKTOP = sp;return ($sub|0);
}
function _R_CheckTextureNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx2 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp3 = 0, $conv = 0;
 var $index = 0, $key = 0, $name$addr = 0, $next = 0, $rem = 0, $retval = 0, $texture = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $0 = $name$addr;
 $1 = HEAP8[$0>>0]|0;
 $conv = $1 << 24 >> 24;
 $cmp = ($conv|0)==(45);
 if ($cmp) {
  $retval = 0;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 $2 = $name$addr;
 $call = (_W_LumpNameHash($2)|0);
 $3 = HEAP32[99920]|0;
 $rem = (($call>>>0) % ($3>>>0))&-1;
 $key = $rem;
 $4 = HEAP32[99934]|0;
 $5 = $key;
 $arrayidx2 = (($4) + ($5<<2)|0);
 $6 = HEAP32[$arrayidx2>>2]|0;
 $texture = $6;
 while(1) {
  $7 = $texture;
  $cmp3 = ($7|0)!=(0|0);
  if (!($cmp3)) {
   label = 8;
   break;
  }
  $8 = $texture;
  $9 = $name$addr;
  $call6 = (_strncasecmp($8,$9,8)|0);
  $tobool = ($call6|0)!=(0);
  $10 = $texture;
  if (!($tobool)) {
   label = 6;
   break;
  }
  $next = ((($10)) + 16|0);
  $12 = HEAP32[$next>>2]|0;
  $texture = $12;
 }
 if ((label|0) == 6) {
  $index = ((($10)) + 12|0);
  $11 = HEAP32[$index>>2]|0;
  $retval = $11;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 8) {
  $retval = -1;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _R_TextureNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $i = 0, $name$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $name$addr = $name;
 $0 = $name$addr;
 $call = (_R_CheckTextureNumForName($0)|0);
 $i = $call;
 $1 = $i;
 $cmp = ($1|0)==(-1);
 if (!($cmp)) {
  $3 = $i;
  STACKTOP = sp;return ($3|0);
 }
 $2 = $name$addr;
 HEAP32[$vararg_buffer>>2] = $2;
 _I_Error(155916,$vararg_buffer);
 $3 = $i;
 STACKTOP = sp;return ($3|0);
}
function _R_PrecacheLevel() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add12 = 0, $add50 = 0, $add92 = 0, $add95 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx2 = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx27 = 0, $arrayidx28 = 0;
 var $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx42 = 0, $arrayidx47 = 0, $arrayidx48 = 0, $arrayidx66 = 0, $arrayidx74 = 0, $arrayidx79 = 0, $arrayidx8 = 0, $arrayidx83 = 0, $arrayidx84 = 0, $arrayidx90 = 0, $arrayidx93 = 0, $bottomtexture = 0, $call = 0, $call18 = 0, $call58 = 0, $ceilingpic = 0;
 var $cmp = 0, $cmp20 = 0, $cmp36 = 0, $cmp44 = 0, $cmp6 = 0, $cmp60 = 0, $cmp63 = 0, $cmp71 = 0, $cmp80 = 0, $cmp86 = 0, $conv = 0, $conv91 = 0, $flatpresent = 0, $floorpic = 0, $function = 0, $i = 0, $idxprom = 0, $idxprom23 = 0, $idxprom26 = 0, $idxprom29 = 0;
 var $idxprom3 = 0, $inc = 0, $inc101 = 0, $inc104 = 0, $inc16 = 0, $inc32 = 0, $inc53 = 0, $inc56 = 0, $inc98 = 0, $j = 0, $k = 0, $lump = 0, $lump89 = 0, $midtexture = 0, $next = 0, $patch = 0, $patchcount = 0, $patches = 0, $sf = 0, $size = 0;
 var $size49 = 0, $size94 = 0, $sprite = 0, $spriteframes = 0, $spritepresent = 0, $texture = 0, $texturepresent = 0, $th = 0, $tobool = 0, $tobool39 = 0, $tobool75 = 0, $tobool9 = 0, $toptexture = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = HEAP32[99431]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99925]|0;
 $call = (_Z_Malloc($1,1,0)|0);
 $flatpresent = $call;
 $2 = $flatpresent;
 $3 = HEAP32[99925]|0;
 _memset(($2|0),0,($3|0))|0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = HEAP32[99849]|0;
  $cmp = ($4|0)<($5|0);
  if (!($cmp)) {
   break;
  }
  $6 = $flatpresent;
  $7 = HEAP32[99850]|0;
  $8 = $i;
  $arrayidx = (($7) + (($8*88)|0)|0);
  $floorpic = ((($arrayidx)) + 8|0);
  $9 = HEAP16[$floorpic>>1]|0;
  $idxprom = $9 << 16 >> 16;
  $arrayidx1 = (($6) + ($idxprom)|0);
  HEAP8[$arrayidx1>>0] = 1;
  $10 = $flatpresent;
  $11 = HEAP32[99850]|0;
  $12 = $i;
  $arrayidx2 = (($11) + (($12*88)|0)|0);
  $ceilingpic = ((($arrayidx2)) + 10|0);
  $13 = HEAP16[$ceilingpic>>1]|0;
  $idxprom3 = $13 << 16 >> 16;
  $arrayidx4 = (($10) + ($idxprom3)|0);
  HEAP8[$arrayidx4>>0] = 1;
  $14 = $i;
  $inc = (($14) + 1)|0;
  $i = $inc;
 }
 HEAP32[99935] = 0;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = HEAP32[99925]|0;
  $cmp6 = ($15|0)<($16|0);
  $17 = $flatpresent;
  if (!($cmp6)) {
   break;
  }
  $18 = $i;
  $arrayidx8 = (($17) + ($18)|0);
  $19 = HEAP8[$arrayidx8>>0]|0;
  $tobool9 = ($19<<24>>24)!=(0);
  if ($tobool9) {
   $20 = HEAP32[99923]|0;
   $21 = $i;
   $add = (($20) + ($21))|0;
   $lump = $add;
   $22 = HEAP32[100199]|0;
   $23 = $lump;
   $arrayidx11 = (($22) + (($23*28)|0)|0);
   $size = ((($arrayidx11)) + 16|0);
   $24 = HEAP32[$size>>2]|0;
   $25 = HEAP32[99935]|0;
   $add12 = (($25) + ($24))|0;
   HEAP32[99935] = $add12;
   $26 = $lump;
   (_W_CacheLumpNum($26,8)|0);
  }
  $27 = $i;
  $inc16 = (($27) + 1)|0;
  $i = $inc16;
 }
 _Z_Free($17);
 $28 = HEAP32[99920]|0;
 $call18 = (_Z_Malloc($28,1,0)|0);
 $texturepresent = $call18;
 $29 = $texturepresent;
 $30 = HEAP32[99920]|0;
 _memset(($29|0),0,($30|0))|0;
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = HEAP32[99846]|0;
  $cmp20 = ($31|0)<($32|0);
  $33 = $texturepresent;
  if (!($cmp20)) {
   break;
  }
  $34 = HEAP32[99845]|0;
  $35 = $i;
  $arrayidx22 = (($34) + (($35*20)|0)|0);
  $toptexture = ((($arrayidx22)) + 8|0);
  $36 = HEAP16[$toptexture>>1]|0;
  $idxprom23 = $36 << 16 >> 16;
  $arrayidx24 = (($33) + ($idxprom23)|0);
  HEAP8[$arrayidx24>>0] = 1;
  $37 = $texturepresent;
  $38 = HEAP32[99845]|0;
  $39 = $i;
  $arrayidx25 = (($38) + (($39*20)|0)|0);
  $midtexture = ((($arrayidx25)) + 12|0);
  $40 = HEAP16[$midtexture>>1]|0;
  $idxprom26 = $40 << 16 >> 16;
  $arrayidx27 = (($37) + ($idxprom26)|0);
  HEAP8[$arrayidx27>>0] = 1;
  $41 = $texturepresent;
  $42 = HEAP32[99845]|0;
  $43 = $i;
  $arrayidx28 = (($42) + (($43*20)|0)|0);
  $bottomtexture = ((($arrayidx28)) + 10|0);
  $44 = HEAP16[$bottomtexture>>1]|0;
  $idxprom29 = $44 << 16 >> 16;
  $arrayidx30 = (($41) + ($idxprom29)|0);
  HEAP8[$arrayidx30>>0] = 1;
  $45 = $i;
  $inc32 = (($45) + 1)|0;
  $i = $inc32;
 }
 $46 = HEAP32[100033]|0;
 $arrayidx34 = (($33) + ($46)|0);
 HEAP8[$arrayidx34>>0] = 1;
 HEAP32[99936] = 0;
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = HEAP32[99920]|0;
  $cmp36 = ($47|0)<($48|0);
  $49 = $texturepresent;
  if (!($cmp36)) {
   break;
  }
  $50 = $i;
  $arrayidx38 = (($49) + ($50)|0);
  $51 = HEAP8[$arrayidx38>>0]|0;
  $tobool39 = ($51<<24>>24)!=(0);
  L22: do {
   if ($tobool39) {
    $52 = HEAP32[99914]|0;
    $53 = $i;
    $arrayidx42 = (($52) + ($53<<2)|0);
    $54 = HEAP32[$arrayidx42>>2]|0;
    $texture = $54;
    $j = 0;
    while(1) {
     $55 = $j;
     $56 = $texture;
     $patchcount = ((($56)) + 20|0);
     $57 = HEAP16[$patchcount>>1]|0;
     $conv = $57 << 16 >> 16;
     $cmp44 = ($55|0)<($conv|0);
     if (!($cmp44)) {
      break L22;
     }
     $58 = $texture;
     $patches = ((($58)) + 24|0);
     $59 = $j;
     $arrayidx47 = (($patches) + ($59<<3)|0);
     $patch = ((($arrayidx47)) + 4|0);
     $60 = HEAP32[$patch>>2]|0;
     $lump = $60;
     $61 = HEAP32[100199]|0;
     $62 = $lump;
     $arrayidx48 = (($61) + (($62*28)|0)|0);
     $size49 = ((($arrayidx48)) + 16|0);
     $63 = HEAP32[$size49>>2]|0;
     $64 = HEAP32[99936]|0;
     $add50 = (($64) + ($63))|0;
     HEAP32[99936] = $add50;
     $65 = $lump;
     (_W_CacheLumpNum($65,8)|0);
     $66 = $j;
     $inc53 = (($66) + 1)|0;
     $j = $inc53;
    }
   }
  } while(0);
  $67 = $i;
  $inc56 = (($67) + 1)|0;
  $i = $inc56;
 }
 _Z_Free($49);
 $68 = HEAP32[100036]|0;
 $call58 = (_Z_Malloc($68,1,0)|0);
 $spritepresent = $call58;
 $69 = $spritepresent;
 $70 = HEAP32[100036]|0;
 _memset(($69|0),0,($70|0))|0;
 $71 = HEAP32[(399612)>>2]|0;
 $th = $71;
 while(1) {
  $72 = $th;
  $cmp60 = ($72|0)!=(399608|0);
  if (!($cmp60)) {
   break;
  }
  $73 = $th;
  $function = ((($73)) + 8|0);
  $74 = HEAP32[$function>>2]|0;
  $cmp63 = ($74|0)==(136|0);
  if ($cmp63) {
   $75 = $spritepresent;
   $76 = $th;
   $sprite = ((($76)) + 36|0);
   $77 = HEAP32[$sprite>>2]|0;
   $arrayidx66 = (($75) + ($77)|0);
   HEAP8[$arrayidx66>>0] = 1;
  }
  $78 = $th;
  $next = ((($78)) + 4|0);
  $79 = HEAP32[$next>>2]|0;
  $th = $79;
 }
 HEAP32[99937] = 0;
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = HEAP32[100036]|0;
  $cmp71 = ($80|0)<($81|0);
  $82 = $spritepresent;
  if (!($cmp71)) {
   break;
  }
  $83 = $i;
  $arrayidx74 = (($82) + ($83)|0);
  $84 = HEAP8[$arrayidx74>>0]|0;
  $tobool75 = ($84<<24>>24)!=(0);
  L39: do {
   if ($tobool75) {
    $j = 0;
    while(1) {
     $85 = $j;
     $86 = HEAP32[100037]|0;
     $87 = $i;
     $arrayidx79 = (($86) + ($87<<3)|0);
     $88 = HEAP32[$arrayidx79>>2]|0;
     $cmp80 = ($85|0)<($88|0);
     if (!($cmp80)) {
      break L39;
     }
     $89 = HEAP32[100037]|0;
     $90 = $i;
     $arrayidx83 = (($89) + ($90<<3)|0);
     $spriteframes = ((($arrayidx83)) + 4|0);
     $91 = HEAP32[$spriteframes>>2]|0;
     $92 = $j;
     $arrayidx84 = (($91) + (($92*28)|0)|0);
     $sf = $arrayidx84;
     $k = 0;
     while(1) {
      $93 = $k;
      $cmp86 = ($93|0)<(8);
      if (!($cmp86)) {
       break;
      }
      $94 = HEAP32[99927]|0;
      $95 = $sf;
      $lump89 = ((($95)) + 4|0);
      $96 = $k;
      $arrayidx90 = (($lump89) + ($96<<1)|0);
      $97 = HEAP16[$arrayidx90>>1]|0;
      $conv91 = $97 << 16 >> 16;
      $add92 = (($94) + ($conv91))|0;
      $lump = $add92;
      $98 = HEAP32[100199]|0;
      $99 = $lump;
      $arrayidx93 = (($98) + (($99*28)|0)|0);
      $size94 = ((($arrayidx93)) + 16|0);
      $100 = HEAP32[$size94>>2]|0;
      $101 = HEAP32[99937]|0;
      $add95 = (($101) + ($100))|0;
      HEAP32[99937] = $add95;
      $102 = $lump;
      (_W_CacheLumpNum($102,8)|0);
      $103 = $k;
      $inc98 = (($103) + 1)|0;
      $k = $inc98;
     }
     $104 = $j;
     $inc101 = (($104) + 1)|0;
     $j = $inc101;
    }
   }
  } while(0);
  $105 = $i;
  $inc104 = (($105) + 1)|0;
  $i = $inc104;
 }
 _Z_Free($82);
 STACKTOP = sp;return;
}
function _R_DrawColumn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr11 = 0, $add12 = 0, $and = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0;
 var $cmp4 = 0, $count = 0, $dec = 0, $dest = 0, $frac = 0, $fracstep = 0, $idxprom = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $shr = 0, $sub = 0, $sub8 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99938]|0;
 $1 = HEAP32[99939]|0;
 $sub = (($0) - ($1))|0;
 $count = $sub;
 $2 = $count;
 $cmp = ($2|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99940]|0;
 $cmp1 = ($3>>>0)>=(320);
 $4 = HEAP32[99939]|0;
 $cmp2 = ($4|0)<(0);
 $or$cond = $cmp1 | $cmp2;
 $5 = HEAP32[99938]|0;
 $cmp4 = ($5|0)>=(200);
 $or$cond1 = $or$cond | $cmp4;
 if ($or$cond1) {
  $6 = HEAP32[99939]|0;
  $7 = HEAP32[99938]|0;
  $8 = HEAP32[99940]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $8;
  _I_Error(155950,$vararg_buffer);
 }
 $9 = HEAP32[99939]|0;
 $arrayidx = (206256 + ($9<<2)|0);
 $10 = HEAP32[$arrayidx>>2]|0;
 $11 = HEAP32[99940]|0;
 $arrayidx7 = (209584 + ($11<<2)|0);
 $12 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($10) + ($12)|0);
 $dest = $add$ptr;
 $13 = HEAP32[99941]|0;
 $fracstep = $13;
 $14 = HEAP32[99942]|0;
 $15 = HEAP32[99939]|0;
 $16 = HEAP32[99974]|0;
 $sub8 = (($15) - ($16))|0;
 $17 = $fracstep;
 $mul = Math_imul($sub8, $17)|0;
 $add = (($14) + ($mul))|0;
 $frac = $add;
 while(1) {
  $18 = HEAP32[99943]|0;
  $19 = HEAP32[99944]|0;
  $20 = $frac;
  $shr = $20 >> 16;
  $and = $shr & 127;
  $arrayidx9 = (($19) + ($and)|0);
  $21 = HEAP8[$arrayidx9>>0]|0;
  $idxprom = $21&255;
  $arrayidx10 = (($18) + ($idxprom)|0);
  $22 = HEAP8[$arrayidx10>>0]|0;
  $23 = $dest;
  HEAP8[$23>>0] = $22;
  $24 = $dest;
  $add$ptr11 = ((($24)) + 320|0);
  $dest = $add$ptr11;
  $25 = $fracstep;
  $26 = $frac;
  $add12 = (($26) + ($25))|0;
  $frac = $add12;
  $27 = $count;
  $dec = (($27) + -1)|0;
  $count = $dec;
  $tobool = ($27|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawColumnLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr15 = 0, $add$ptr16 = 0;
 var $add12 = 0, $add17 = 0, $and = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $count = 0, $dec = 0, $dest = 0, $dest2 = 0, $frac = 0, $fracstep = 0, $idxprom = 0;
 var $mul = 0, $or$cond = 0, $or$cond1 = 0, $shl = 0, $shr = 0, $sub = 0, $sub11 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99938]|0;
 $1 = HEAP32[99939]|0;
 $sub = (($0) - ($1))|0;
 $count = $sub;
 $2 = $count;
 $cmp = ($2|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99940]|0;
 $cmp1 = ($3>>>0)>=(320);
 $4 = HEAP32[99939]|0;
 $cmp2 = ($4|0)<(0);
 $or$cond = $cmp1 | $cmp2;
 $5 = HEAP32[99938]|0;
 $cmp4 = ($5|0)>=(200);
 $or$cond1 = $or$cond | $cmp4;
 if ($or$cond1) {
  $6 = HEAP32[99939]|0;
  $7 = HEAP32[99938]|0;
  $8 = HEAP32[99940]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $8;
  _I_Error(155950,$vararg_buffer);
 }
 $9 = HEAP32[99940]|0;
 $shl = $9 << 1;
 $x = $shl;
 $10 = HEAP32[99939]|0;
 $arrayidx = (206256 + ($10<<2)|0);
 $11 = HEAP32[$arrayidx>>2]|0;
 $12 = $x;
 $arrayidx7 = (209584 + ($12<<2)|0);
 $13 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($11) + ($13)|0);
 $dest = $add$ptr;
 $14 = HEAP32[99939]|0;
 $arrayidx8 = (206256 + ($14<<2)|0);
 $15 = HEAP32[$arrayidx8>>2]|0;
 $16 = $x;
 $add = (($16) + 1)|0;
 $arrayidx9 = (209584 + ($add<<2)|0);
 $17 = HEAP32[$arrayidx9>>2]|0;
 $add$ptr10 = (($15) + ($17)|0);
 $dest2 = $add$ptr10;
 $18 = HEAP32[99941]|0;
 $fracstep = $18;
 $19 = HEAP32[99942]|0;
 $20 = HEAP32[99939]|0;
 $21 = HEAP32[99974]|0;
 $sub11 = (($20) - ($21))|0;
 $22 = $fracstep;
 $mul = Math_imul($sub11, $22)|0;
 $add12 = (($19) + ($mul))|0;
 $frac = $add12;
 while(1) {
  $23 = HEAP32[99943]|0;
  $24 = HEAP32[99944]|0;
  $25 = $frac;
  $shr = $25 >> 16;
  $and = $shr & 127;
  $arrayidx13 = (($24) + ($and)|0);
  $26 = HEAP8[$arrayidx13>>0]|0;
  $idxprom = $26&255;
  $arrayidx14 = (($23) + ($idxprom)|0);
  $27 = HEAP8[$arrayidx14>>0]|0;
  $28 = $dest;
  HEAP8[$28>>0] = $27;
  $29 = $dest2;
  HEAP8[$29>>0] = $27;
  $30 = $dest;
  $add$ptr15 = ((($30)) + 320|0);
  $dest = $add$ptr15;
  $31 = $dest2;
  $add$ptr16 = ((($31)) + 320|0);
  $dest2 = $add$ptr16;
  $32 = $fracstep;
  $33 = $frac;
  $add17 = (($33) + ($32))|0;
  $frac = $add17;
  $34 = $count;
  $dec = (($34) + -1)|0;
  $count = $dec;
  $tobool = ($34|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawFuzzColumn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr24 = 0, $add18 = 0, $add25 = 0, $arrayidx = 0;
 var $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx19 = 0, $cmp = 0, $cmp11 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cmp9 = 0, $conv = 0, $count = 0, $dec = 0, $dest = 0, $frac = 0, $fracstep = 0, $inc = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0;
 var $spec$store$select = 0, $sub = 0, $sub15 = 0, $sub2 = 0, $sub4 = 0, $tobool = 0, $tobool26 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99939]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  HEAP32[99939] = 1;
 }
 $1 = HEAP32[99938]|0;
 $2 = HEAP32[99946]|0;
 $sub = (($2) - 1)|0;
 $cmp = ($1|0)==($sub|0);
 if ($cmp) {
  $3 = HEAP32[99946]|0;
  $sub2 = (($3) - 2)|0;
  HEAP32[99938] = $sub2;
 }
 $4 = HEAP32[99938]|0;
 $5 = HEAP32[99939]|0;
 $sub4 = (($4) - ($5))|0;
 $count = $sub4;
 $6 = $count;
 $cmp5 = ($6|0)<(0);
 if ($cmp5) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[99940]|0;
 $cmp8 = ($7>>>0)>=(320);
 $8 = HEAP32[99939]|0;
 $cmp9 = ($8|0)<(0);
 $or$cond = $cmp8 | $cmp9;
 $9 = HEAP32[99938]|0;
 $cmp11 = ($9|0)>=(200);
 $or$cond1 = $or$cond | $cmp11;
 if ($or$cond1) {
  $10 = HEAP32[99939]|0;
  $11 = HEAP32[99938]|0;
  $12 = HEAP32[99940]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $11;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $12;
  _I_Error(155979,$vararg_buffer);
 }
 $13 = HEAP32[99939]|0;
 $arrayidx = (206256 + ($13<<2)|0);
 $14 = HEAP32[$arrayidx>>2]|0;
 $15 = HEAP32[99940]|0;
 $arrayidx14 = (209584 + ($15<<2)|0);
 $16 = HEAP32[$arrayidx14>>2]|0;
 $add$ptr = (($14) + ($16)|0);
 $dest = $add$ptr;
 $17 = HEAP32[99941]|0;
 $fracstep = $17;
 $18 = HEAP32[99942]|0;
 $19 = HEAP32[99939]|0;
 $20 = HEAP32[99974]|0;
 $sub15 = (($19) - ($20))|0;
 $21 = $fracstep;
 $mul = Math_imul($sub15, $21)|0;
 $add = (($18) + ($mul))|0;
 $frac = $add;
 while(1) {
  $22 = HEAP32[99933]|0;
  $23 = $dest;
  $24 = HEAP32[99945]|0;
  $arrayidx16 = (51472 + ($24<<2)|0);
  $25 = HEAP32[$arrayidx16>>2]|0;
  $arrayidx17 = (($23) + ($25)|0);
  $26 = HEAP8[$arrayidx17>>0]|0;
  $conv = $26&255;
  $add18 = (1536 + ($conv))|0;
  $arrayidx19 = (($22) + ($add18)|0);
  $27 = HEAP8[$arrayidx19>>0]|0;
  $28 = $dest;
  HEAP8[$28>>0] = $27;
  $29 = HEAP32[99945]|0;
  $inc = (($29) + 1)|0;
  HEAP32[99945] = $inc;
  $cmp20 = ($inc|0)==(50);
  $spec$store$select = $cmp20 ? 0 : $inc;
  HEAP32[99945] = $spec$store$select;
  $30 = $dest;
  $add$ptr24 = ((($30)) + 320|0);
  $dest = $add$ptr24;
  $31 = $fracstep;
  $32 = $frac;
  $add25 = (($32) + ($31))|0;
  $frac = $add25;
  $33 = $count;
  $dec = (($33) + -1)|0;
  $count = $dec;
  $tobool26 = ($33|0)!=(0);
  if (!($tobool26)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawFuzzColumnLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add19 = 0, $add22 = 0, $add27 = 0, $add35 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0;
 var $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx28 = 0, $cmp = 0, $cmp11 = 0, $cmp29 = 0, $cmp5 = 0, $cmp8 = 0, $cmp9 = 0, $conv = 0, $conv26 = 0, $count = 0, $dec = 0, $dest = 0, $dest2 = 0, $frac = 0, $fracstep = 0;
 var $inc = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $shl = 0, $spec$store$select = 0, $sub = 0, $sub18 = 0, $sub2 = 0, $sub4 = 0, $tobool = 0, $tobool36 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99939]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  HEAP32[99939] = 1;
 }
 $1 = HEAP32[99938]|0;
 $2 = HEAP32[99946]|0;
 $sub = (($2) - 1)|0;
 $cmp = ($1|0)==($sub|0);
 if ($cmp) {
  $3 = HEAP32[99946]|0;
  $sub2 = (($3) - 2)|0;
  HEAP32[99938] = $sub2;
 }
 $4 = HEAP32[99938]|0;
 $5 = HEAP32[99939]|0;
 $sub4 = (($4) - ($5))|0;
 $count = $sub4;
 $6 = $count;
 $cmp5 = ($6|0)<(0);
 if ($cmp5) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[99940]|0;
 $shl = $7 << 1;
 $x = $shl;
 $8 = $x;
 $cmp8 = ($8>>>0)>=(320);
 $9 = HEAP32[99939]|0;
 $cmp9 = ($9|0)<(0);
 $or$cond = $cmp8 | $cmp9;
 $10 = HEAP32[99938]|0;
 $cmp11 = ($10|0)>=(200);
 $or$cond1 = $or$cond | $cmp11;
 if ($or$cond1) {
  $11 = HEAP32[99939]|0;
  $12 = HEAP32[99938]|0;
  $13 = HEAP32[99940]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $12;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $13;
  _I_Error(155979,$vararg_buffer);
 }
 $14 = HEAP32[99939]|0;
 $arrayidx = (206256 + ($14<<2)|0);
 $15 = HEAP32[$arrayidx>>2]|0;
 $16 = $x;
 $arrayidx14 = (209584 + ($16<<2)|0);
 $17 = HEAP32[$arrayidx14>>2]|0;
 $add$ptr = (($15) + ($17)|0);
 $dest = $add$ptr;
 $18 = HEAP32[99939]|0;
 $arrayidx15 = (206256 + ($18<<2)|0);
 $19 = HEAP32[$arrayidx15>>2]|0;
 $20 = $x;
 $add = (($20) + 1)|0;
 $arrayidx16 = (209584 + ($add<<2)|0);
 $21 = HEAP32[$arrayidx16>>2]|0;
 $add$ptr17 = (($19) + ($21)|0);
 $dest2 = $add$ptr17;
 $22 = HEAP32[99941]|0;
 $fracstep = $22;
 $23 = HEAP32[99942]|0;
 $24 = HEAP32[99939]|0;
 $25 = HEAP32[99974]|0;
 $sub18 = (($24) - ($25))|0;
 $26 = $fracstep;
 $mul = Math_imul($sub18, $26)|0;
 $add19 = (($23) + ($mul))|0;
 $frac = $add19;
 while(1) {
  $27 = HEAP32[99933]|0;
  $28 = $dest;
  $29 = HEAP32[99945]|0;
  $arrayidx20 = (51472 + ($29<<2)|0);
  $30 = HEAP32[$arrayidx20>>2]|0;
  $arrayidx21 = (($28) + ($30)|0);
  $31 = HEAP8[$arrayidx21>>0]|0;
  $conv = $31&255;
  $add22 = (1536 + ($conv))|0;
  $arrayidx23 = (($27) + ($add22)|0);
  $32 = HEAP8[$arrayidx23>>0]|0;
  $33 = $dest;
  HEAP8[$33>>0] = $32;
  $34 = HEAP32[99933]|0;
  $35 = $dest2;
  $36 = HEAP32[99945]|0;
  $arrayidx24 = (51472 + ($36<<2)|0);
  $37 = HEAP32[$arrayidx24>>2]|0;
  $arrayidx25 = (($35) + ($37)|0);
  $38 = HEAP8[$arrayidx25>>0]|0;
  $conv26 = $38&255;
  $add27 = (1536 + ($conv26))|0;
  $arrayidx28 = (($34) + ($add27)|0);
  $39 = HEAP8[$arrayidx28>>0]|0;
  $40 = $dest2;
  HEAP8[$40>>0] = $39;
  $41 = HEAP32[99945]|0;
  $inc = (($41) + 1)|0;
  HEAP32[99945] = $inc;
  $cmp29 = ($inc|0)==(50);
  $spec$store$select = $cmp29 ? 0 : $inc;
  HEAP32[99945] = $spec$store$select;
  $42 = $dest;
  $add$ptr33 = ((($42)) + 320|0);
  $dest = $add$ptr33;
  $43 = $dest2;
  $add$ptr34 = ((($43)) + 320|0);
  $dest2 = $add$ptr34;
  $44 = $fracstep;
  $45 = $frac;
  $add35 = (($45) + ($44))|0;
  $frac = $add35;
  $46 = $count;
  $dec = (($46) + -1)|0;
  $count = $dec;
  $tobool36 = ($46|0)!=(0);
  if (!($tobool36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawTranslatedColumn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr13 = 0, $add14 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $count = 0, $dec = 0, $dest = 0, $frac = 0, $fracstep = 0, $idxprom = 0, $idxprom11 = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $shr = 0, $sub = 0, $sub8 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99938]|0;
 $1 = HEAP32[99939]|0;
 $sub = (($0) - ($1))|0;
 $count = $sub;
 $2 = $count;
 $cmp = ($2|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99940]|0;
 $cmp1 = ($3>>>0)>=(320);
 $4 = HEAP32[99939]|0;
 $cmp2 = ($4|0)<(0);
 $or$cond = $cmp1 | $cmp2;
 $5 = HEAP32[99938]|0;
 $cmp4 = ($5|0)>=(200);
 $or$cond1 = $or$cond | $cmp4;
 if ($or$cond1) {
  $6 = HEAP32[99939]|0;
  $7 = HEAP32[99938]|0;
  $8 = HEAP32[99940]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $8;
  _I_Error(155950,$vararg_buffer);
 }
 $9 = HEAP32[99939]|0;
 $arrayidx = (206256 + ($9<<2)|0);
 $10 = HEAP32[$arrayidx>>2]|0;
 $11 = HEAP32[99940]|0;
 $arrayidx7 = (209584 + ($11<<2)|0);
 $12 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($10) + ($12)|0);
 $dest = $add$ptr;
 $13 = HEAP32[99941]|0;
 $fracstep = $13;
 $14 = HEAP32[99942]|0;
 $15 = HEAP32[99939]|0;
 $16 = HEAP32[99974]|0;
 $sub8 = (($15) - ($16))|0;
 $17 = $fracstep;
 $mul = Math_imul($sub8, $17)|0;
 $add = (($14) + ($mul))|0;
 $frac = $add;
 while(1) {
  $18 = HEAP32[99943]|0;
  $19 = HEAP32[99947]|0;
  $20 = HEAP32[99944]|0;
  $21 = $frac;
  $shr = $21 >> 16;
  $arrayidx9 = (($20) + ($shr)|0);
  $22 = HEAP8[$arrayidx9>>0]|0;
  $idxprom = $22&255;
  $arrayidx10 = (($19) + ($idxprom)|0);
  $23 = HEAP8[$arrayidx10>>0]|0;
  $idxprom11 = $23&255;
  $arrayidx12 = (($18) + ($idxprom11)|0);
  $24 = HEAP8[$arrayidx12>>0]|0;
  $25 = $dest;
  HEAP8[$25>>0] = $24;
  $26 = $dest;
  $add$ptr13 = ((($26)) + 320|0);
  $dest = $add$ptr13;
  $27 = $fracstep;
  $28 = $frac;
  $add14 = (($28) + ($27))|0;
  $frac = $add14;
  $29 = $count;
  $dec = (($29) + -1)|0;
  $count = $dec;
  $tobool = ($29|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawTranslatedColumnLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr23 = 0, $add$ptr24 = 0, $add12 = 0, $add25 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx7 = 0, $arrayidx8 = 0;
 var $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp4 = 0, $count = 0, $dec = 0, $dest = 0, $dest2 = 0, $frac = 0, $fracstep = 0, $idxprom = 0, $idxprom15 = 0, $idxprom19 = 0, $idxprom21 = 0, $mul = 0, $or$cond = 0, $or$cond1 = 0, $shl = 0, $shr = 0;
 var $shr17 = 0, $sub = 0, $sub11 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99938]|0;
 $1 = HEAP32[99939]|0;
 $sub = (($0) - ($1))|0;
 $count = $sub;
 $2 = $count;
 $cmp = ($2|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[99940]|0;
 $shl = $3 << 1;
 $x = $shl;
 $4 = $x;
 $cmp1 = ($4>>>0)>=(320);
 $5 = HEAP32[99939]|0;
 $cmp2 = ($5|0)<(0);
 $or$cond = $cmp1 | $cmp2;
 $6 = HEAP32[99938]|0;
 $cmp4 = ($6|0)>=(200);
 $or$cond1 = $or$cond | $cmp4;
 if ($or$cond1) {
  $7 = HEAP32[99939]|0;
  $8 = HEAP32[99938]|0;
  $9 = $x;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $8;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $9;
  _I_Error(155950,$vararg_buffer);
 }
 $10 = HEAP32[99939]|0;
 $arrayidx = (206256 + ($10<<2)|0);
 $11 = HEAP32[$arrayidx>>2]|0;
 $12 = $x;
 $arrayidx7 = (209584 + ($12<<2)|0);
 $13 = HEAP32[$arrayidx7>>2]|0;
 $add$ptr = (($11) + ($13)|0);
 $dest = $add$ptr;
 $14 = HEAP32[99939]|0;
 $arrayidx8 = (206256 + ($14<<2)|0);
 $15 = HEAP32[$arrayidx8>>2]|0;
 $16 = $x;
 $add = (($16) + 1)|0;
 $arrayidx9 = (209584 + ($add<<2)|0);
 $17 = HEAP32[$arrayidx9>>2]|0;
 $add$ptr10 = (($15) + ($17)|0);
 $dest2 = $add$ptr10;
 $18 = HEAP32[99941]|0;
 $fracstep = $18;
 $19 = HEAP32[99942]|0;
 $20 = HEAP32[99939]|0;
 $21 = HEAP32[99974]|0;
 $sub11 = (($20) - ($21))|0;
 $22 = $fracstep;
 $mul = Math_imul($sub11, $22)|0;
 $add12 = (($19) + ($mul))|0;
 $frac = $add12;
 while(1) {
  $23 = HEAP32[99943]|0;
  $24 = HEAP32[99947]|0;
  $25 = HEAP32[99944]|0;
  $26 = $frac;
  $shr = $26 >> 16;
  $arrayidx13 = (($25) + ($shr)|0);
  $27 = HEAP8[$arrayidx13>>0]|0;
  $idxprom = $27&255;
  $arrayidx14 = (($24) + ($idxprom)|0);
  $28 = HEAP8[$arrayidx14>>0]|0;
  $idxprom15 = $28&255;
  $arrayidx16 = (($23) + ($idxprom15)|0);
  $29 = HEAP8[$arrayidx16>>0]|0;
  $30 = $dest;
  HEAP8[$30>>0] = $29;
  $31 = HEAP32[99943]|0;
  $32 = HEAP32[99947]|0;
  $33 = HEAP32[99944]|0;
  $34 = $frac;
  $shr17 = $34 >> 16;
  $arrayidx18 = (($33) + ($shr17)|0);
  $35 = HEAP8[$arrayidx18>>0]|0;
  $idxprom19 = $35&255;
  $arrayidx20 = (($32) + ($idxprom19)|0);
  $36 = HEAP8[$arrayidx20>>0]|0;
  $idxprom21 = $36&255;
  $arrayidx22 = (($31) + ($idxprom21)|0);
  $37 = HEAP8[$arrayidx22>>0]|0;
  $38 = $dest2;
  HEAP8[$38>>0] = $37;
  $39 = $dest;
  $add$ptr23 = ((($39)) + 320|0);
  $dest = $add$ptr23;
  $40 = $dest2;
  $add$ptr24 = ((($40)) + 320|0);
  $dest2 = $add$ptr24;
  $41 = $fracstep;
  $42 = $frac;
  $add25 = (($42) + ($41))|0;
  $frac = $add25;
  $43 = $count;
  $dec = (($43) + -1)|0;
  $count = $dec;
  $tobool = ($43|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_InitTranslationTables() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add11 = 0, $add14 = 0, $add16 = 0, $add4 = 0, $add6 = 0, $add9 = 0, $and = 0, $and3 = 0, $and8 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx7 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $conv = 0;
 var $conv10 = 0, $conv13 = 0, $conv5 = 0, $i = 0, $inc = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_Z_Malloc(768,1,0)|0);
 HEAP32[99948] = $call;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(256);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $cmp1 = ($1|0)>=(112);
  $2 = $i;
  $cmp2 = ($2|0)<=(127);
  $or$cond = $cmp1 & $cmp2;
  $3 = $i;
  if ($or$cond) {
   $and = $3 & 15;
   $add = (96 + ($and))|0;
   $conv = $add&255;
   $4 = HEAP32[99948]|0;
   $5 = $i;
   $arrayidx = (($4) + ($5)|0);
   HEAP8[$arrayidx>>0] = $conv;
   $6 = $i;
   $and3 = $6 & 15;
   $add4 = (64 + ($and3))|0;
   $conv5 = $add4&255;
   $7 = HEAP32[99948]|0;
   $8 = $i;
   $add6 = (($8) + 256)|0;
   $arrayidx7 = (($7) + ($add6)|0);
   HEAP8[$arrayidx7>>0] = $conv5;
   $9 = $i;
   $and8 = $9 & 15;
   $add9 = (32 + ($and8))|0;
   $conv10 = $add9&255;
   $10 = HEAP32[99948]|0;
   $11 = $i;
   $add11 = (($11) + 512)|0;
   $arrayidx12 = (($10) + ($add11)|0);
   HEAP8[$arrayidx12>>0] = $conv10;
  } else {
   $conv13 = $3&255;
   $12 = HEAP32[99948]|0;
   $13 = $i;
   $add14 = (($13) + 512)|0;
   $arrayidx15 = (($12) + ($add14)|0);
   HEAP8[$arrayidx15>>0] = $conv13;
   $14 = HEAP32[99948]|0;
   $15 = $i;
   $add16 = (($15) + 256)|0;
   $arrayidx17 = (($14) + ($add16)|0);
   HEAP8[$arrayidx17>>0] = $conv13;
   $16 = HEAP32[99948]|0;
   $17 = $i;
   $arrayidx18 = (($16) + ($17)|0);
   HEAP8[$arrayidx18>>0] = $conv13;
  }
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _R_DrawSpan() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $and = 0, $and10 = 0, $and14 = 0, $and6 = 0, $and8 = 0, $arrayidx = 0, $arrayidx12 = 0;
 var $arrayidx17 = 0, $arrayidx18 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp5 = 0, $count = 0, $dec = 0, $dest = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or11 = 0, $or16 = 0, $position = 0, $shl = 0, $shl7 = 0;
 var $shr = 0, $shr13 = 0, $shr15 = 0, $shr9 = 0, $spot = 0, $step = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $xtemp = 0, $ytemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99949]|0;
 $1 = HEAP32[99950]|0;
 $cmp = ($0|0)<($1|0);
 $2 = HEAP32[99950]|0;
 $cmp1 = ($2|0)<(0);
 $or$cond = $cmp | $cmp1;
 $3 = HEAP32[99949]|0;
 $cmp3 = ($3|0)>=(320);
 $or$cond1 = $or$cond | $cmp3;
 $4 = HEAP32[99951]|0;
 $cmp5 = ($4>>>0)>(200);
 $or$cond2 = $or$cond1 | $cmp5;
 if ($or$cond2) {
  $5 = HEAP32[99950]|0;
  $6 = HEAP32[99949]|0;
  $7 = HEAP32[99951]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr3 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $6;
  $vararg_ptr4 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $7;
  _I_Error(156012,$vararg_buffer);
 }
 $8 = HEAP32[99952]|0;
 $shl = $8 << 10;
 $and = $shl & -65536;
 $9 = HEAP32[99953]|0;
 $shr = $9 >> 6;
 $and6 = $shr & 65535;
 $or = $and | $and6;
 $position = $or;
 $10 = HEAP32[99954]|0;
 $shl7 = $10 << 10;
 $and8 = $shl7 & -65536;
 $11 = HEAP32[99955]|0;
 $shr9 = $11 >> 6;
 $and10 = $shr9 & 65535;
 $or11 = $and8 | $and10;
 $step = $or11;
 $12 = HEAP32[99951]|0;
 $arrayidx = (206256 + ($12<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $14 = HEAP32[99950]|0;
 $arrayidx12 = (209584 + ($14<<2)|0);
 $15 = HEAP32[$arrayidx12>>2]|0;
 $add$ptr = (($13) + ($15)|0);
 $dest = $add$ptr;
 $16 = HEAP32[99949]|0;
 $17 = HEAP32[99950]|0;
 $sub = (($16) - ($17))|0;
 $count = $sub;
 while(1) {
  $18 = $position;
  $shr13 = $18 >>> 4;
  $and14 = $shr13 & 4032;
  $ytemp = $and14;
  $19 = $position;
  $shr15 = $19 >>> 26;
  $xtemp = $shr15;
  $20 = $xtemp;
  $21 = $ytemp;
  $or16 = $20 | $21;
  $spot = $or16;
  $22 = HEAP32[99956]|0;
  $23 = HEAP32[99957]|0;
  $24 = $spot;
  $arrayidx17 = (($23) + ($24)|0);
  $25 = HEAP8[$arrayidx17>>0]|0;
  $idxprom = $25&255;
  $arrayidx18 = (($22) + ($idxprom)|0);
  $26 = HEAP8[$arrayidx18>>0]|0;
  $27 = $dest;
  $incdec$ptr = ((($27)) + 1|0);
  $dest = $incdec$ptr;
  HEAP8[$27>>0] = $26;
  $28 = $step;
  $29 = $position;
  $add = (($29) + ($28))|0;
  $position = $add;
  $30 = $count;
  $dec = (($30) + -1)|0;
  $count = $dec;
  $tobool = ($30|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_DrawSpanLow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$ptr = 0, $and = 0, $and10 = 0, $and16 = 0, $and6 = 0, $and8 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp5 = 0, $count = 0, $dec = 0, $dest = 0, $idxprom = 0;
 var $idxprom22 = 0, $incdec$ptr = 0, $incdec$ptr24 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or11 = 0, $or18 = 0, $position = 0, $shl = 0, $shl12 = 0, $shl13 = 0, $shl7 = 0, $shr = 0, $shr15 = 0, $shr17 = 0, $shr9 = 0, $spot = 0, $step = 0;
 var $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $xtemp = 0, $ytemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $0 = HEAP32[99949]|0;
 $1 = HEAP32[99950]|0;
 $cmp = ($0|0)<($1|0);
 $2 = HEAP32[99950]|0;
 $cmp1 = ($2|0)<(0);
 $or$cond = $cmp | $cmp1;
 $3 = HEAP32[99949]|0;
 $cmp3 = ($3|0)>=(320);
 $or$cond1 = $or$cond | $cmp3;
 $4 = HEAP32[99951]|0;
 $cmp5 = ($4>>>0)>(200);
 $or$cond2 = $or$cond1 | $cmp5;
 if ($or$cond2) {
  $5 = HEAP32[99950]|0;
  $6 = HEAP32[99949]|0;
  $7 = HEAP32[99951]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr3 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $6;
  $vararg_ptr4 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $7;
  _I_Error(156012,$vararg_buffer);
 }
 $8 = HEAP32[99952]|0;
 $shl = $8 << 10;
 $and = $shl & -65536;
 $9 = HEAP32[99953]|0;
 $shr = $9 >> 6;
 $and6 = $shr & 65535;
 $or = $and | $and6;
 $position = $or;
 $10 = HEAP32[99954]|0;
 $shl7 = $10 << 10;
 $and8 = $shl7 & -65536;
 $11 = HEAP32[99955]|0;
 $shr9 = $11 >> 6;
 $and10 = $shr9 & 65535;
 $or11 = $and8 | $and10;
 $step = $or11;
 $12 = HEAP32[99949]|0;
 $13 = HEAP32[99950]|0;
 $sub = (($12) - ($13))|0;
 $count = $sub;
 $14 = HEAP32[99950]|0;
 $shl12 = $14 << 1;
 HEAP32[99950] = $shl12;
 $15 = HEAP32[99949]|0;
 $shl13 = $15 << 1;
 HEAP32[99949] = $shl13;
 $16 = HEAP32[99951]|0;
 $arrayidx = (206256 + ($16<<2)|0);
 $17 = HEAP32[$arrayidx>>2]|0;
 $18 = HEAP32[99950]|0;
 $arrayidx14 = (209584 + ($18<<2)|0);
 $19 = HEAP32[$arrayidx14>>2]|0;
 $add$ptr = (($17) + ($19)|0);
 $dest = $add$ptr;
 while(1) {
  $20 = $position;
  $shr15 = $20 >>> 4;
  $and16 = $shr15 & 4032;
  $ytemp = $and16;
  $21 = $position;
  $shr17 = $21 >>> 26;
  $xtemp = $shr17;
  $22 = $xtemp;
  $23 = $ytemp;
  $or18 = $22 | $23;
  $spot = $or18;
  $24 = HEAP32[99956]|0;
  $25 = HEAP32[99957]|0;
  $26 = $spot;
  $arrayidx19 = (($25) + ($26)|0);
  $27 = HEAP8[$arrayidx19>>0]|0;
  $idxprom = $27&255;
  $arrayidx20 = (($24) + ($idxprom)|0);
  $28 = HEAP8[$arrayidx20>>0]|0;
  $29 = $dest;
  $incdec$ptr = ((($29)) + 1|0);
  $dest = $incdec$ptr;
  HEAP8[$29>>0] = $28;
  $30 = HEAP32[99956]|0;
  $31 = HEAP32[99957]|0;
  $32 = $spot;
  $arrayidx21 = (($31) + ($32)|0);
  $33 = HEAP8[$arrayidx21>>0]|0;
  $idxprom22 = $33&255;
  $arrayidx23 = (($30) + ($idxprom22)|0);
  $34 = HEAP8[$arrayidx23>>0]|0;
  $35 = $dest;
  $incdec$ptr24 = ((($35)) + 1|0);
  $dest = $incdec$ptr24;
  HEAP8[$35>>0] = $34;
  $36 = $step;
  $37 = $position;
  $add = (($37) + ($36))|0;
  $position = $add;
  $38 = $count;
  $dec = (($38) + -1)|0;
  $count = $dec;
  $tobool = ($38|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _R_InitBuffer($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add7 = 0, $arrayidx = 0;
 var $arrayidx8 = 0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $height$addr = 0, $i = 0, $inc = 0, $inc10 = 0, $mul = 0, $shr = 0, $shr3 = 0, $sub = 0, $sub2 = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $width$addr = $width;
 $height$addr = $height;
 $0 = $width$addr;
 $sub = (320 - ($0))|0;
 $shr = $sub >> 1;
 HEAP32[99958] = $shr;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $width$addr;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = HEAP32[99958]|0;
  $4 = $i;
  $add = (($3) + ($4))|0;
  $5 = $i;
  $arrayidx = (209584 + ($5<<2)|0);
  HEAP32[$arrayidx>>2] = $add;
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 $7 = $width$addr;
 $cmp1 = ($7|0)==(320);
 if ($cmp1) {
  HEAP32[99959] = 0;
 } else {
  $8 = $height$addr;
  $sub2 = (168 - ($8))|0;
  $shr3 = $sub2 >> 1;
  HEAP32[99959] = $shr3;
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $height$addr;
  $cmp5 = ($9|0)<($10|0);
  if (!($cmp5)) {
   break;
  }
  $11 = HEAP32[100203]|0;
  $12 = $i;
  $13 = HEAP32[99959]|0;
  $add7 = (($12) + ($13))|0;
  $mul = ($add7*320)|0;
  $add$ptr = (($11) + ($mul)|0);
  $14 = $i;
  $arrayidx8 = (206256 + ($14<<2)|0);
  HEAP32[$arrayidx8>>2] = $add$ptr;
  $15 = $i;
  $inc10 = (($15) + 1)|0;
  $i = $inc10;
 }
 STACKTOP = sp;return;
}
function _R_FillBackScreen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0;
 var $add$ptr15 = 0, $add24 = 0, $add30 = 0, $add31 = 0, $add33 = 0, $add40 = 0, $add42 = 0, $add48 = 0, $add49 = 0, $add51 = 0, $add56 = 0, $add60 = 0, $add62 = 0, $add63 = 0, $and = 0, $call = 0, $call10 = 0, $call19 = 0, $call26 = 0, $call35 = 0;
 var $call44 = 0, $call55 = 0, $call58 = 0, $call61 = 0, $call64 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp21 = 0, $cmp28 = 0, $cmp37 = 0, $cmp4 = 0, $cmp46 = 0, $cmp7 = 0, $dest = 0, $inc = 0, $inc17 = 0, $name = 0, $name1 = 0;
 var $name2 = 0, $patch = 0, $shl = 0, $src = 0, $sub = 0, $sub39 = 0, $sub53 = 0, $sub54 = 0, $sub57 = 0, $sub59 = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $name1 = 156039;
 $name2 = 156048;
 $0 = HEAP32[99960]|0;
 $cmp = ($0|0)==(320);
 $1 = HEAP32[99962]|0;
 if ($cmp) {
  $cmp1 = ($1|0)!=(0|0);
  if (!($cmp1)) {
   STACKTOP = sp;return;
  }
  $2 = HEAP32[99962]|0;
  _Z_Free($2);
  HEAP32[99962] = 0;
  STACKTOP = sp;return;
 }
 $cmp4 = ($1|0)==(0|0);
 if ($cmp4) {
  $call = (_Z_Malloc(53760,1,0)|0);
  HEAP32[99962] = $call;
 }
 $3 = HEAP32[32168]|0;
 $cmp7 = ($3|0)==(2);
 if ($cmp7) {
  $4 = $name2;
  $name = $4;
 } else {
  $5 = $name1;
  $name = $5;
 }
 $6 = $name;
 $call10 = (_W_CacheLumpName($6,8)|0);
 $src = $call10;
 $7 = HEAP32[99962]|0;
 $dest = $7;
 $y = 0;
 while(1) {
  $8 = $y;
  $cmp11 = ($8|0)<(168);
  if (!($cmp11)) {
   break;
  }
  $x = 0;
  while(1) {
   $9 = $x;
   $cmp13 = ($9|0)<(5);
   if (!($cmp13)) {
    break;
   }
   $10 = $dest;
   $11 = $src;
   $12 = $y;
   $and = $12 & 63;
   $shl = $and << 6;
   $add$ptr = (($11) + ($shl)|0);
   dest=$10; src=$add$ptr; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $13 = $dest;
   $add$ptr15 = ((($13)) + 64|0);
   $dest = $add$ptr15;
   $14 = $x;
   $inc = (($14) + 1)|0;
   $x = $inc;
  }
  $15 = $y;
  $inc17 = (($15) + 1)|0;
  $y = $inc17;
 }
 $16 = HEAP32[99962]|0;
 _V_UseBuffer($16);
 $call19 = (_W_CacheLumpName(156056,8)|0);
 $patch = $call19;
 $x = 0;
 while(1) {
  $17 = $x;
  $18 = HEAP32[99960]|0;
  $cmp21 = ($17|0)<($18|0);
  if (!($cmp21)) {
   break;
  }
  $19 = HEAP32[99958]|0;
  $20 = $x;
  $add = (($19) + ($20))|0;
  $21 = HEAP32[99959]|0;
  $sub = (($21) - 8)|0;
  $22 = $patch;
  _V_DrawPatch($add,$sub,$22);
  $23 = $x;
  $add24 = (($23) + 8)|0;
  $x = $add24;
 }
 $call26 = (_W_CacheLumpName(156063,8)|0);
 $patch = $call26;
 $x = 0;
 while(1) {
  $24 = $x;
  $25 = HEAP32[99960]|0;
  $cmp28 = ($24|0)<($25|0);
  if (!($cmp28)) {
   break;
  }
  $26 = HEAP32[99958]|0;
  $27 = $x;
  $add30 = (($26) + ($27))|0;
  $28 = HEAP32[99959]|0;
  $29 = HEAP32[99946]|0;
  $add31 = (($28) + ($29))|0;
  $30 = $patch;
  _V_DrawPatch($add30,$add31,$30);
  $31 = $x;
  $add33 = (($31) + 8)|0;
  $x = $add33;
 }
 $call35 = (_W_CacheLumpName(156070,8)|0);
 $patch = $call35;
 $y = 0;
 while(1) {
  $32 = $y;
  $33 = HEAP32[99946]|0;
  $cmp37 = ($32|0)<($33|0);
  if (!($cmp37)) {
   break;
  }
  $34 = HEAP32[99958]|0;
  $sub39 = (($34) - 8)|0;
  $35 = HEAP32[99959]|0;
  $36 = $y;
  $add40 = (($35) + ($36))|0;
  $37 = $patch;
  _V_DrawPatch($sub39,$add40,$37);
  $38 = $y;
  $add42 = (($38) + 8)|0;
  $y = $add42;
 }
 $call44 = (_W_CacheLumpName(156077,8)|0);
 $patch = $call44;
 $y = 0;
 while(1) {
  $39 = $y;
  $40 = HEAP32[99946]|0;
  $cmp46 = ($39|0)<($40|0);
  $41 = HEAP32[99958]|0;
  if (!($cmp46)) {
   break;
  }
  $42 = HEAP32[99960]|0;
  $add48 = (($41) + ($42))|0;
  $43 = HEAP32[99959]|0;
  $44 = $y;
  $add49 = (($43) + ($44))|0;
  $45 = $patch;
  _V_DrawPatch($add48,$add49,$45);
  $46 = $y;
  $add51 = (($46) + 8)|0;
  $y = $add51;
 }
 $sub53 = (($41) - 8)|0;
 $47 = HEAP32[99959]|0;
 $sub54 = (($47) - 8)|0;
 $call55 = (_W_CacheLumpName(156084,8)|0);
 _V_DrawPatch($sub53,$sub54,$call55);
 $48 = HEAP32[99958]|0;
 $49 = HEAP32[99960]|0;
 $add56 = (($48) + ($49))|0;
 $50 = HEAP32[99959]|0;
 $sub57 = (($50) - 8)|0;
 $call58 = (_W_CacheLumpName(156092,8)|0);
 _V_DrawPatch($add56,$sub57,$call58);
 $51 = HEAP32[99958]|0;
 $sub59 = (($51) - 8)|0;
 $52 = HEAP32[99959]|0;
 $53 = HEAP32[99946]|0;
 $add60 = (($52) + ($53))|0;
 $call61 = (_W_CacheLumpName(156100,8)|0);
 _V_DrawPatch($sub59,$add60,$call61);
 $54 = HEAP32[99958]|0;
 $55 = HEAP32[99960]|0;
 $add62 = (($54) + ($55))|0;
 $56 = HEAP32[99959]|0;
 $57 = HEAP32[99946]|0;
 $add63 = (($56) + ($57))|0;
 $call64 = (_W_CacheLumpName(156108,8)|0);
 _V_DrawPatch($add62,$add63,$call64);
 _V_RestoreBuffer();
 STACKTOP = sp;return;
}
function _R_VideoErase($ofs,$count) {
 $ofs = $ofs|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $add$ptr1 = 0, $cmp = 0, $count$addr = 0, $ofs$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ofs$addr = $ofs;
 $count$addr = $count;
 $0 = HEAP32[99962]|0;
 $cmp = ($0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[100203]|0;
 $2 = $ofs$addr;
 $add$ptr = (($1) + ($2)|0);
 $3 = HEAP32[99962]|0;
 $4 = $ofs$addr;
 $add$ptr1 = (($3) + ($4)|0);
 $5 = $count$addr;
 _memcpy(($add$ptr|0),($add$ptr1|0),($5|0))|0;
 STACKTOP = sp;return;
}
function _R_DrawViewBorder() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add12 = 0, $add3 = 0, $add7 = 0, $add9 = 0, $cmp = 0, $cmp11 = 0, $div = 0, $div2 = 0, $i = 0, $inc = 0, $mul = 0, $mul4 = 0, $mul6 = 0, $mul8 = 0, $ofs = 0, $shl = 0, $side = 0, $sub = 0, $sub1 = 0;
 var $sub10 = 0, $sub5 = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99960]|0;
 $cmp = ($0|0)==(320);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[99946]|0;
 $sub = (168 - ($1))|0;
 $div = (($sub|0) / 2)&-1;
 $top = $div;
 $2 = HEAP32[99960]|0;
 $sub1 = (320 - ($2))|0;
 $div2 = (($sub1|0) / 2)&-1;
 $side = $div2;
 $3 = $top;
 $mul = ($3*320)|0;
 $4 = $side;
 $add = (($mul) + ($4))|0;
 _R_VideoErase(0,$add);
 $5 = HEAP32[99946]|0;
 $6 = $top;
 $add3 = (($5) + ($6))|0;
 $mul4 = ($add3*320)|0;
 $7 = $side;
 $sub5 = (($mul4) - ($7))|0;
 $ofs = $sub5;
 $8 = $ofs;
 $9 = $top;
 $mul6 = ($9*320)|0;
 $10 = $side;
 $add7 = (($mul6) + ($10))|0;
 _R_VideoErase($8,$add7);
 $11 = $top;
 $mul8 = ($11*320)|0;
 $add9 = (($mul8) + 320)|0;
 $12 = $side;
 $sub10 = (($add9) - ($12))|0;
 $ofs = $sub10;
 $13 = $side;
 $shl = $13 << 1;
 $side = $shl;
 $i = 1;
 while(1) {
  $14 = $i;
  $15 = HEAP32[99946]|0;
  $cmp11 = ($14|0)<($15|0);
  if (!($cmp11)) {
   break;
  }
  $16 = $ofs;
  $17 = $side;
  _R_VideoErase($16,$17);
  $18 = $ofs;
  $add12 = (($18) + 320)|0;
  $ofs = $add12;
  $19 = $i;
  $inc = (($19) + 1)|0;
  $i = $inc;
 }
 _V_MarkRect(0,0,320,168);
 STACKTOP = sp;return;
}
function _R_PointOnSide($x,$y,$node) {
 $x = $x|0;
 $y = $y|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and36 = 0, $call = 0, $call44 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp18 = 0, $cmp22 = 0, $cmp45 = 0, $cmp5 = 0, $cmp7 = 0, $conv = 0, $conv19 = 0, $conv23 = 0, $conv8 = 0, $dx = 0, $dx1 = 0, $dx17 = 0, $dx29 = 0, $dx42 = 0, $dy = 0, $dy10 = 0, $dy28 = 0, $dy34 = 0;
 var $dy4 = 0, $left = 0, $node$addr = 0, $retval = 0, $right = 0, $shr = 0, $shr43 = 0, $sub = 0, $sub27 = 0, $tobool = 0, $tobool11 = 0, $tobool32 = 0, $tobool37 = 0, $x$addr = 0, $xor = 0, $xor30 = 0, $xor31 = 0, $xor35 = 0, $y$addr = 0, $y13 = 0;
 var $y26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $node$addr = $node;
 $0 = $node$addr;
 $dx1 = ((($0)) + 8|0);
 $1 = HEAP32[$dx1>>2]|0;
 $tobool = ($1|0)!=(0);
 if (!($tobool)) {
  $2 = $x$addr;
  $3 = $node$addr;
  $4 = HEAP32[$3>>2]|0;
  $cmp = ($2|0)<=($4|0);
  $5 = $node$addr;
  $dy4 = ((($5)) + 12|0);
  $6 = HEAP32[$dy4>>2]|0;
  if ($cmp) {
   $cmp5 = ($6|0)>(0);
   $conv = $cmp5&1;
   $retval = $conv;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $cmp7 = ($6|0)<(0);
   $conv8 = $cmp7&1;
   $retval = $conv8;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 $7 = $node$addr;
 $dy10 = ((($7)) + 12|0);
 $8 = HEAP32[$dy10>>2]|0;
 $tobool11 = ($8|0)!=(0);
 if (!($tobool11)) {
  $9 = $y$addr;
  $10 = $node$addr;
  $y13 = ((($10)) + 4|0);
  $11 = HEAP32[$y13>>2]|0;
  $cmp14 = ($9|0)<=($11|0);
  $12 = $node$addr;
  $dx17 = ((($12)) + 8|0);
  $13 = HEAP32[$dx17>>2]|0;
  if ($cmp14) {
   $cmp18 = ($13|0)<(0);
   $conv19 = $cmp18&1;
   $retval = $conv19;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $cmp22 = ($13|0)>(0);
   $conv23 = $cmp22&1;
   $retval = $conv23;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 $14 = $x$addr;
 $15 = $node$addr;
 $16 = HEAP32[$15>>2]|0;
 $sub = (($14) - ($16))|0;
 $dx = $sub;
 $17 = $y$addr;
 $18 = $node$addr;
 $y26 = ((($18)) + 4|0);
 $19 = HEAP32[$y26>>2]|0;
 $sub27 = (($17) - ($19))|0;
 $dy = $sub27;
 $20 = $node$addr;
 $dy28 = ((($20)) + 12|0);
 $21 = HEAP32[$dy28>>2]|0;
 $22 = $node$addr;
 $dx29 = ((($22)) + 8|0);
 $23 = HEAP32[$dx29>>2]|0;
 $xor = $21 ^ $23;
 $24 = $dx;
 $xor30 = $xor ^ $24;
 $25 = $dy;
 $xor31 = $xor30 ^ $25;
 $and = $xor31 & -2147483648;
 $tobool32 = ($and|0)!=(0);
 $26 = $node$addr;
 $dy34 = ((($26)) + 12|0);
 $27 = HEAP32[$dy34>>2]|0;
 if ($tobool32) {
  $28 = $dx;
  $xor35 = $27 ^ $28;
  $and36 = $xor35 & -2147483648;
  $tobool37 = ($and36|0)!=(0);
  if ($tobool37) {
   $retval = 1;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $retval = 0;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 } else {
  $shr = $27 >> 16;
  $29 = $dx;
  $call = (_FixedMul($shr,$29)|0);
  $left = $call;
  $30 = $dy;
  $31 = $node$addr;
  $dx42 = ((($31)) + 8|0);
  $32 = HEAP32[$dx42>>2]|0;
  $shr43 = $32 >> 16;
  $call44 = (_FixedMul($30,$shr43)|0);
  $right = $call44;
  $33 = $right;
  $34 = $left;
  $cmp45 = ($33|0)<($34|0);
  if ($cmp45) {
   $retval = 0;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  } else {
   $retval = 1;
   $35 = $retval;
   STACKTOP = sp;return ($35|0);
  }
 }
 return (0)|0;
}
function _R_PointOnSegSide($x,$y,$line) {
 $x = $x|0;
 $y = $y|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and31 = 0;
 var $call = 0, $call37 = 0, $cmp = 0, $cmp10 = 0, $cmp15 = 0, $cmp18 = 0, $cmp21 = 0, $cmp38 = 0, $cmp9 = 0, $conv = 0, $conv11 = 0, $conv19 = 0, $conv22 = 0, $dx = 0, $dy = 0, $ldx = 0, $ldy = 0, $left = 0, $line$addr = 0, $lx = 0;
 var $ly = 0, $retval = 0, $right = 0, $shr = 0, $shr36 = 0, $sub = 0, $sub24 = 0, $sub25 = 0, $sub7 = 0, $tobool = 0, $tobool13 = 0, $tobool28 = 0, $tobool32 = 0, $v2 = 0, $v25 = 0, $x$addr = 0, $xor = 0, $xor26 = 0, $xor27 = 0, $xor30 = 0;
 var $y$addr = 0, $y3 = 0, $y6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $y$addr = $y;
 $line$addr = $line;
 $0 = $line$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $lx = $2;
 $3 = $line$addr;
 $4 = HEAP32[$3>>2]|0;
 $y3 = ((($4)) + 4|0);
 $5 = HEAP32[$y3>>2]|0;
 $ly = $5;
 $6 = $line$addr;
 $v2 = ((($6)) + 4|0);
 $7 = HEAP32[$v2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $lx;
 $sub = (($8) - ($9))|0;
 $ldx = $sub;
 $10 = $line$addr;
 $v25 = ((($10)) + 4|0);
 $11 = HEAP32[$v25>>2]|0;
 $y6 = ((($11)) + 4|0);
 $12 = HEAP32[$y6>>2]|0;
 $13 = $ly;
 $sub7 = (($12) - ($13))|0;
 $ldy = $sub7;
 $14 = $ldx;
 $tobool = ($14|0)!=(0);
 if (!($tobool)) {
  $15 = $x$addr;
  $16 = $lx;
  $cmp = ($15|0)<=($16|0);
  $17 = $ldy;
  if ($cmp) {
   $cmp9 = ($17|0)>(0);
   $conv = $cmp9&1;
   $retval = $conv;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  } else {
   $cmp10 = ($17|0)<(0);
   $conv11 = $cmp10&1;
   $retval = $conv11;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  }
 }
 $18 = $ldy;
 $tobool13 = ($18|0)!=(0);
 if (!($tobool13)) {
  $19 = $y$addr;
  $20 = $ly;
  $cmp15 = ($19|0)<=($20|0);
  $21 = $ldx;
  if ($cmp15) {
   $cmp18 = ($21|0)<(0);
   $conv19 = $cmp18&1;
   $retval = $conv19;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  } else {
   $cmp21 = ($21|0)>(0);
   $conv22 = $cmp21&1;
   $retval = $conv22;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  }
 }
 $22 = $x$addr;
 $23 = $lx;
 $sub24 = (($22) - ($23))|0;
 $dx = $sub24;
 $24 = $y$addr;
 $25 = $ly;
 $sub25 = (($24) - ($25))|0;
 $dy = $sub25;
 $26 = $ldy;
 $27 = $ldx;
 $xor = $26 ^ $27;
 $28 = $dx;
 $xor26 = $xor ^ $28;
 $29 = $dy;
 $xor27 = $xor26 ^ $29;
 $and = $xor27 & -2147483648;
 $tobool28 = ($and|0)!=(0);
 $30 = $ldy;
 if ($tobool28) {
  $31 = $dx;
  $xor30 = $30 ^ $31;
  $and31 = $xor30 & -2147483648;
  $tobool32 = ($and31|0)!=(0);
  if ($tobool32) {
   $retval = 1;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  } else {
   $retval = 0;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  }
 } else {
  $shr = $30 >> 16;
  $32 = $dx;
  $call = (_FixedMul($shr,$32)|0);
  $left = $call;
  $33 = $dy;
  $34 = $ldx;
  $shr36 = $34 >> 16;
  $call37 = (_FixedMul($33,$shr36)|0);
  $right = $call37;
  $35 = $right;
  $36 = $left;
  $cmp38 = ($35|0)<($36|0);
  if ($cmp38) {
   $retval = 0;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  } else {
   $retval = 1;
   $37 = $retval;
   STACKTOP = sp;return ($37|0);
  }
 }
 return (0)|0;
}
function _R_PointToAngle($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add33 = 0, $add40 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx28 = 0, $arrayidx32 = 0, $arrayidx39 = 0, $arrayidx43 = 0, $arrayidx9 = 0, $call = 0, $call15 = 0, $call19 = 0, $call27 = 0;
 var $call31 = 0, $call38 = 0, $call42 = 0, $call8 = 0, $cmp = 0, $cmp13 = 0, $cmp23 = 0, $cmp25 = 0, $cmp36 = 0, $cmp4 = 0, $cmp6 = 0, $or$cond = 0, $retval = 0, $sub = 0, $sub1 = 0, $sub10 = 0, $sub12 = 0, $sub17 = 0, $sub22 = 0, $sub29 = 0;
 var $sub35 = 0, $sub44 = 0, $tobool = 0, $tobool2 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = HEAP32[99963]|0;
 $1 = $x$addr;
 $sub = (($1) - ($0))|0;
 $x$addr = $sub;
 $2 = HEAP32[99964]|0;
 $3 = $y$addr;
 $sub1 = (($3) - ($2))|0;
 $y$addr = $sub1;
 $4 = $x$addr;
 $tobool = ($4|0)!=(0);
 $5 = $y$addr;
 $tobool2 = ($5|0)!=(0);
 $or$cond = $tobool | $tobool2;
 if (!($or$cond)) {
  $retval = 0;
  $44 = $retval;
  STACKTOP = sp;return ($44|0);
 }
 $6 = $x$addr;
 $cmp = ($6|0)>=(0);
 if ($cmp) {
  $7 = $y$addr;
  $cmp4 = ($7|0)>=(0);
  if ($cmp4) {
   $8 = $x$addr;
   $9 = $y$addr;
   $cmp6 = ($8|0)>($9|0);
   if ($cmp6) {
    $10 = $y$addr;
    $11 = $x$addr;
    $call = (_SlopeDiv($10,$11)|0);
    $arrayidx = (115760 + ($call<<2)|0);
    $12 = HEAP32[$arrayidx>>2]|0;
    $retval = $12;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   } else {
    $13 = $x$addr;
    $14 = $y$addr;
    $call8 = (_SlopeDiv($13,$14)|0);
    $arrayidx9 = (115760 + ($call8<<2)|0);
    $15 = HEAP32[$arrayidx9>>2]|0;
    $sub10 = (1073741823 - ($15))|0;
    $retval = $sub10;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   }
  } else {
   $16 = $y$addr;
   $sub12 = (0 - ($16))|0;
   $y$addr = $sub12;
   $17 = $x$addr;
   $18 = $y$addr;
   $cmp13 = ($17|0)>($18|0);
   if ($cmp13) {
    $19 = $y$addr;
    $20 = $x$addr;
    $call15 = (_SlopeDiv($19,$20)|0);
    $arrayidx16 = (115760 + ($call15<<2)|0);
    $21 = HEAP32[$arrayidx16>>2]|0;
    $sub17 = (0 - ($21))|0;
    $retval = $sub17;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   } else {
    $22 = $x$addr;
    $23 = $y$addr;
    $call19 = (_SlopeDiv($22,$23)|0);
    $arrayidx20 = (115760 + ($call19<<2)|0);
    $24 = HEAP32[$arrayidx20>>2]|0;
    $add = (-1073741824 + ($24))|0;
    $retval = $add;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   }
  }
 } else {
  $25 = $x$addr;
  $sub22 = (0 - ($25))|0;
  $x$addr = $sub22;
  $26 = $y$addr;
  $cmp23 = ($26|0)>=(0);
  if ($cmp23) {
   $27 = $x$addr;
   $28 = $y$addr;
   $cmp25 = ($27|0)>($28|0);
   if ($cmp25) {
    $29 = $y$addr;
    $30 = $x$addr;
    $call27 = (_SlopeDiv($29,$30)|0);
    $arrayidx28 = (115760 + ($call27<<2)|0);
    $31 = HEAP32[$arrayidx28>>2]|0;
    $sub29 = (2147483647 - ($31))|0;
    $retval = $sub29;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   } else {
    $32 = $x$addr;
    $33 = $y$addr;
    $call31 = (_SlopeDiv($32,$33)|0);
    $arrayidx32 = (115760 + ($call31<<2)|0);
    $34 = HEAP32[$arrayidx32>>2]|0;
    $add33 = (1073741824 + ($34))|0;
    $retval = $add33;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   }
  } else {
   $35 = $y$addr;
   $sub35 = (0 - ($35))|0;
   $y$addr = $sub35;
   $36 = $x$addr;
   $37 = $y$addr;
   $cmp36 = ($36|0)>($37|0);
   if ($cmp36) {
    $38 = $y$addr;
    $39 = $x$addr;
    $call38 = (_SlopeDiv($38,$39)|0);
    $arrayidx39 = (115760 + ($call38<<2)|0);
    $40 = HEAP32[$arrayidx39>>2]|0;
    $add40 = (-2147483648 + ($40))|0;
    $retval = $add40;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   } else {
    $41 = $x$addr;
    $42 = $y$addr;
    $call42 = (_SlopeDiv($41,$42)|0);
    $arrayidx43 = (115760 + ($call42<<2)|0);
    $43 = HEAP32[$arrayidx43>>2]|0;
    $sub44 = (-1073741825 - ($43))|0;
    $retval = $sub44;
    $44 = $retval;
    STACKTOP = sp;return ($44|0);
   }
  }
 }
 return (0)|0;
}
function _R_PointToAngle2($x1,$y1,$x2,$y2) {
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $x1$addr = 0, $x2$addr = 0, $y1$addr = 0, $y2$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x1$addr = $x1;
 $y1$addr = $y1;
 $x2$addr = $x2;
 $y2$addr = $y2;
 $0 = $x1$addr;
 HEAP32[99963] = $0;
 $1 = $y1$addr;
 HEAP32[99964] = $1;
 $2 = $x2$addr;
 $3 = $y2$addr;
 $call = (_R_PointToAngle($2,$3)|0);
 STACKTOP = sp;return ($call|0);
}
function _R_PointToDist($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $angle = 0;
 var $arrayidx = 0, $arrayidx8 = 0, $call = 0, $call2 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp3 = 0, $dist = 0, $dx = 0, $dy = 0, $frac = 0, $shr = 0, $shr7 = 0, $sub = 0, $sub1 = 0, $temp = 0, $x$addr = 0, $y$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = $x$addr;
 $1 = HEAP32[99963]|0;
 $sub = (($0) - ($1))|0;
 $call = (Math_abs(($sub|0))|0);
 $dx = $call;
 $2 = $y$addr;
 $3 = HEAP32[99964]|0;
 $sub1 = (($2) - ($3))|0;
 $call2 = (Math_abs(($sub1|0))|0);
 $dy = $call2;
 $4 = $dy;
 $5 = $dx;
 $cmp = ($4|0)>($5|0);
 if ($cmp) {
  $6 = $dx;
  $temp = $6;
  $7 = $dy;
  $dx = $7;
  $8 = $temp;
  $dy = $8;
 }
 $9 = $dx;
 $cmp3 = ($9|0)!=(0);
 if ($cmp3) {
  $10 = $dy;
  $11 = $dx;
  $call5 = (_FixedDiv($10,$11)|0);
  $frac = $call5;
 } else {
  $frac = 0;
 }
 $12 = $frac;
 $shr = $12 >> 5;
 $arrayidx = (115760 + ($shr<<2)|0);
 $13 = HEAP32[$arrayidx>>2]|0;
 $add = (($13) + 1073741824)|0;
 $shr7 = $add >>> 19;
 $angle = $shr7;
 $14 = $dx;
 $15 = $angle;
 $arrayidx8 = (74800 + ($15<<2)|0);
 $16 = HEAP32[$arrayidx8>>2]|0;
 $call9 = (_FixedDiv($14,$16)|0);
 $dist = $call9;
 $17 = $dist;
 STACKTOP = sp;return ($17|0);
}
function _R_InitPointToAngle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _R_ScaleFromGlobalAngle($visangle) {
 $visangle = $visangle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add2 = 0, $anglea = 0, $angleb = 0, $arrayidx = 0, $arrayidx4 = 0, $call = 0, $call5 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp8 = 0, $den = 0, $num = 0, $scale = 0, $shl = 0, $shr = 0, $shr3 = 0, $shr6 = 0, $sinea = 0;
 var $sineb = 0, $sub = 0, $sub1 = 0, $visangle$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $visangle$addr = $visangle;
 $0 = $visangle$addr;
 $1 = HEAP32[99965]|0;
 $sub = (($0) - ($1))|0;
 $add = (1073741824 + ($sub))|0;
 $anglea = $add;
 $2 = $visangle$addr;
 $3 = HEAP32[100025]|0;
 $sub1 = (($2) - ($3))|0;
 $add2 = (1073741824 + ($sub1))|0;
 $angleb = $add2;
 $4 = $anglea;
 $shr = $4 >>> 19;
 $arrayidx = (74800 + ($shr<<2)|0);
 $5 = HEAP32[$arrayidx>>2]|0;
 $sinea = $5;
 $6 = $angleb;
 $shr3 = $6 >>> 19;
 $arrayidx4 = (74800 + ($shr3<<2)|0);
 $7 = HEAP32[$arrayidx4>>2]|0;
 $sineb = $7;
 $8 = HEAP32[99966]|0;
 $9 = $sineb;
 $call = (_FixedMul($8,$9)|0);
 $10 = HEAP32[99967]|0;
 $shl = $call << $10;
 $num = $shl;
 $11 = HEAP32[100010]|0;
 $12 = $sinea;
 $call5 = (_FixedMul($11,$12)|0);
 $den = $call5;
 $13 = $den;
 $14 = $num;
 $shr6 = $14 >> 16;
 $cmp = ($13|0)>($shr6|0);
 if (!($cmp)) {
  $scale = 4194304;
  $19 = $scale;
  STACKTOP = sp;return ($19|0);
 }
 $15 = $num;
 $16 = $den;
 $call7 = (_FixedDiv($15,$16)|0);
 $scale = $call7;
 $17 = $scale;
 $cmp8 = ($17|0)>(4194304);
 if ($cmp8) {
  $scale = 4194304;
  $19 = $scale;
  STACKTOP = sp;return ($19|0);
 }
 $18 = $scale;
 $cmp10 = ($18|0)<(256);
 if (!($cmp10)) {
  $19 = $scale;
  STACKTOP = sp;return ($19|0);
 }
 $scale = 256;
 $19 = $scale;
 STACKTOP = sp;return ($19|0);
}
function _R_InitTables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _R_InitTextureMapping() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add13 = 0, $add16 = 0, $add44 = 0, $add8 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx35 = 0, $arrayidx38 = 0, $arrayidx41 = 0, $arrayidx47 = 0, $arrayidx6 = 0, $call = 0, $call36 = 0;
 var $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp14 = 0, $cmp22 = 0, $cmp25 = 0, $cmp3 = 0, $cmp33 = 0, $cmp39 = 0, $cmp45 = 0, $focallength = 0, $i = 0, $inc = 0, $inc26 = 0, $inc30 = 0, $inc51 = 0, $shl = 0, $shr = 0, $sub = 0;
 var $sub27 = 0, $sub37 = 0, $sub9 = 0, $t = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99968]|0;
 $1 = HEAP32[(70704)>>2]|0;
 $call = (_FixedDiv($0,$1)|0);
 $focallength = $call;
 $i = 0;
 while(1) {
  $2 = $i;
  $cmp = ($2|0)<(4096);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $arrayidx = (58416 + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $cmp1 = ($4|0)>(131072);
  do {
   if ($cmp1) {
    $t = -1;
   } else {
    $5 = $i;
    $arrayidx2 = (58416 + ($5<<2)|0);
    $6 = HEAP32[$arrayidx2>>2]|0;
    $cmp3 = ($6|0)<(-131072);
    if ($cmp3) {
     $7 = HEAP32[99961]|0;
     $add = (($7) + 1)|0;
     $t = $add;
     break;
    }
    $8 = $i;
    $arrayidx6 = (58416 + ($8<<2)|0);
    $9 = HEAP32[$arrayidx6>>2]|0;
    $10 = $focallength;
    $call7 = (_FixedMul($9,$10)|0);
    $t = $call7;
    $11 = HEAP32[99968]|0;
    $12 = $t;
    $sub = (($11) - ($12))|0;
    $add8 = (($sub) + 65536)|0;
    $sub9 = (($add8) - 1)|0;
    $shr = $sub9 >> 16;
    $t = $shr;
    $13 = $t;
    $cmp10 = ($13|0)<(-1);
    if ($cmp10) {
     $t = -1;
     break;
    }
    $14 = $t;
    $15 = HEAP32[99961]|0;
    $add13 = (($15) + 1)|0;
    $cmp14 = ($14|0)>($add13|0);
    if ($cmp14) {
     $16 = HEAP32[99961]|0;
     $add16 = (($16) + 1)|0;
     $t = $add16;
    }
   }
  } while(0);
  $17 = $t;
  $18 = $i;
  $arrayidx20 = (214064 + ($18<<2)|0);
  HEAP32[$arrayidx20>>2] = $17;
  $19 = $i;
  $inc = (($19) + 1)|0;
  $i = $inc;
 }
 $x = 0;
 while(1) {
  $20 = $x;
  $21 = HEAP32[99961]|0;
  $cmp22 = ($20|0)<=($21|0);
  $i = 0;
  if (!($cmp22)) {
   break;
  }
  while(1) {
   $22 = $i;
   $arrayidx24 = (214064 + ($22<<2)|0);
   $23 = HEAP32[$arrayidx24>>2]|0;
   $24 = $x;
   $cmp25 = ($23|0)>($24|0);
   $25 = $i;
   if (!($cmp25)) {
    break;
   }
   $inc26 = (($25) + 1)|0;
   $i = $inc26;
  }
  $shl = $25 << 19;
  $sub27 = (($shl) - 1073741824)|0;
  $26 = $x;
  $arrayidx28 = (230448 + ($26<<2)|0);
  HEAP32[$arrayidx28>>2] = $sub27;
  $27 = $x;
  $inc30 = (($27) + 1)|0;
  $x = $inc30;
 }
 while(1) {
  $28 = $i;
  $cmp33 = ($28|0)<(4096);
  if (!($cmp33)) {
   break;
  }
  $29 = $i;
  $arrayidx35 = (58416 + ($29<<2)|0);
  $30 = HEAP32[$arrayidx35>>2]|0;
  $31 = $focallength;
  $call36 = (_FixedMul($30,$31)|0);
  $t = $call36;
  $32 = HEAP32[99969]|0;
  $33 = $t;
  $sub37 = (($32) - ($33))|0;
  $t = $sub37;
  $34 = $i;
  $arrayidx38 = (214064 + ($34<<2)|0);
  $35 = HEAP32[$arrayidx38>>2]|0;
  $cmp39 = ($35|0)==(-1);
  $36 = $i;
  $arrayidx41 = (214064 + ($36<<2)|0);
  if ($cmp39) {
   HEAP32[$arrayidx41>>2] = 0;
  } else {
   $37 = HEAP32[$arrayidx41>>2]|0;
   $38 = HEAP32[99961]|0;
   $add44 = (($38) + 1)|0;
   $cmp45 = ($37|0)==($add44|0);
   if ($cmp45) {
    $39 = HEAP32[99961]|0;
    $40 = $i;
    $arrayidx47 = (214064 + ($40<<2)|0);
    HEAP32[$arrayidx47>>2] = $39;
   }
  }
  $41 = $i;
  $inc51 = (($41) + 1)|0;
  $i = $inc51;
 }
 $42 = HEAP32[57612]|0;
 HEAP32[99970] = $42;
 STACKTOP = sp;return;
}
function _R_InitLightTables() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx12 = 0, $call = 0;
 var $cmp = 0, $cmp3 = 0, $cmp7 = 0, $cmp8 = 0, $div = 0, $div5 = 0, $i = 0, $inc = 0, $inc14 = 0, $j = 0, $level = 0, $mul = 0, $mul1 = 0, $mul11 = 0, $scale = 0, $shl = 0, $shr = 0, $spec$store$select = 0, $spec$store$select1 = 0, $startmap = 0;
 var $sub = 0, $sub6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(16);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $sub = (15 - ($1))|0;
  $mul = $sub<<1;
  $mul1 = $mul<<5;
  $div = (($mul1|0) / 16)&-1;
  $startmap = $div;
  $j = 0;
  while(1) {
   $2 = $j;
   $cmp3 = ($2|0)<(128);
   if (!($cmp3)) {
    break;
   }
   $3 = $j;
   $add = (($3) + 1)|0;
   $shl = $add << 20;
   $call = (_FixedDiv(10485760,$shl)|0);
   $scale = $call;
   $4 = $scale;
   $shr = $4 >> 12;
   $scale = $shr;
   $5 = $startmap;
   $6 = $scale;
   $div5 = (($6|0) / 2)&-1;
   $sub6 = (($5) - ($div5))|0;
   $level = $sub6;
   $7 = $level;
   $cmp7 = ($7|0)<(0);
   $spec$store$select = $cmp7 ? 0 : $sub6;
   $level = $spec$store$select;
   $8 = $level;
   $cmp8 = ($8|0)>=(32);
   $spec$store$select1 = $cmp8 ? 31 : $spec$store$select;
   $level = $spec$store$select1;
   $9 = HEAP32[99933]|0;
   $10 = $level;
   $mul11 = $10<<8;
   $add$ptr = (($9) + ($mul11)|0);
   $11 = $i;
   $arrayidx = (231744 + ($11<<9)|0);
   $12 = $j;
   $arrayidx12 = (($arrayidx) + ($12<<2)|0);
   HEAP32[$arrayidx12>>2] = $add$ptr;
   $13 = $j;
   $inc = (($13) + 1)|0;
   $j = $inc;
  }
  $14 = $i;
  $inc14 = (($14) + 1)|0;
  $i = $inc14;
 }
 STACKTOP = sp;return;
}
function _R_SetViewSize($blocks,$detail) {
 $blocks = $blocks|0;
 $detail = $detail|0;
 var $0 = 0, $1 = 0, $blocks$addr = 0, $detail$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $blocks$addr = $blocks;
 $detail$addr = $detail;
 HEAP32[99971] = 1;
 $0 = $blocks$addr;
 HEAP32[99972] = $0;
 $1 = $detail$addr;
 HEAP32[99973] = $1;
 STACKTOP = sp;return;
}
function _R_ExecuteSetViewSize() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $and = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx30 = 0;
 var $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx65 = 0, $arrayidx66 = 0, $call = 0, $call21 = 0, $call33 = 0, $call34 = 0, $cmp = 0, $cmp11 = 0, $cmp13 = 0, $cmp27 = 0, $cmp40 = 0, $cmp48 = 0, $cmp56 = 0, $cmp60 = 0, $conv = 0, $cosadj = 0, $div = 0, $div10 = 0;
 var $div16 = 0, $div19 = 0, $div2 = 0, $div3 = 0, $div46 = 0, $div53 = 0, $div54 = 0, $div9 = 0, $dy = 0, $i = 0, $inc = 0, $inc24 = 0, $inc37 = 0, $inc68 = 0, $inc71 = 0, $j = 0, $level = 0, $mul = 0, $mul1 = 0, $mul20 = 0;
 var $mul44 = 0, $mul45 = 0, $mul51 = 0, $mul64 = 0, $mul8 = 0, $shl = 0, $shl17 = 0, $shl18 = 0, $shl4 = 0, $shl52 = 0, $shr = 0, $shr31 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $startmap = 0, $sub = 0, $sub43 = 0, $sub55 = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 HEAP32[99971] = 0;
 $0 = HEAP32[99972]|0;
 $cmp = ($0|0)==(11);
 if ($cmp) {
  HEAP32[99960] = 320;
  HEAP32[99946] = 200;
 } else {
  $1 = HEAP32[99972]|0;
  $mul = $1<<5;
  HEAP32[99960] = $mul;
  $2 = HEAP32[99972]|0;
  $mul1 = ($2*168)|0;
  $div = (($mul1|0) / 10)&-1;
  $and = $div & -8;
  HEAP32[99946] = $and;
 }
 $3 = HEAP32[99973]|0;
 HEAP32[99967] = $3;
 $4 = HEAP32[99960]|0;
 $5 = HEAP32[99967]|0;
 $shr = $4 >> $5;
 HEAP32[99961] = $shr;
 $6 = HEAP32[99946]|0;
 $div2 = (($6|0) / 2)&-1;
 HEAP32[99974] = $div2;
 $7 = HEAP32[99961]|0;
 $div3 = (($7|0) / 2)&-1;
 HEAP32[99969] = $div3;
 $8 = HEAP32[99969]|0;
 $shl = $8 << 16;
 HEAP32[99968] = $shl;
 $9 = HEAP32[99974]|0;
 $shl4 = $9 << 16;
 HEAP32[99975] = $shl4;
 $10 = HEAP32[99968]|0;
 HEAP32[99966] = $10;
 $11 = HEAP32[99967]|0;
 $tobool = ($11|0)!=(0);
 if ($tobool) {
  HEAP32[99976] = 158;
  HEAP32[99977] = 158;
  HEAP32[99978] = 159;
  HEAP32[99979] = 160;
  HEAP32[99980] = 161;
 } else {
  HEAP32[99976] = 154;
  HEAP32[99977] = 154;
  HEAP32[99978] = 155;
  HEAP32[99979] = 156;
  HEAP32[99980] = 157;
 }
 $12 = HEAP32[99960]|0;
 $13 = HEAP32[99946]|0;
 _R_InitBuffer($12,$13);
 _R_InitTextureMapping();
 $14 = HEAP32[99961]|0;
 $mul8 = $14<<16;
 $div9 = (($mul8|0) / 320)&-1;
 HEAP32[100059] = $div9;
 $15 = HEAP32[99961]|0;
 $div10 = (20971520 / ($15|0))&-1;
 HEAP32[100060] = $div10;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = HEAP32[99961]|0;
  $cmp11 = ($16|0)<($17|0);
  if (!($cmp11)) {
   break;
  }
  $18 = HEAP32[99946]|0;
  $conv = $18&65535;
  $19 = $i;
  $arrayidx = (385648 + ($19<<1)|0);
  HEAP16[$arrayidx>>1] = $conv;
  $20 = $i;
  $inc = (($20) + 1)|0;
  $i = $inc;
 }
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = HEAP32[99946]|0;
  $cmp13 = ($21|0)<($22|0);
  if (!($cmp13)) {
   break;
  }
  $23 = $i;
  $24 = HEAP32[99946]|0;
  $div16 = (($24|0) / 2)&-1;
  $sub = (($23) - ($div16))|0;
  $shl17 = $sub << 16;
  $add = (($shl17) + 32768)|0;
  $dy = $add;
  $25 = $dy;
  $call = (Math_abs(($25|0))|0);
  $dy = $call;
  $26 = HEAP32[99961]|0;
  $27 = HEAP32[99967]|0;
  $shl18 = $26 << $27;
  $div19 = (($shl18|0) / 2)&-1;
  $mul20 = $div19<<16;
  $28 = $dy;
  $call21 = (_FixedDiv($mul20,$28)|0);
  $29 = $i;
  $arrayidx22 = (244000 + ($29<<2)|0);
  HEAP32[$arrayidx22>>2] = $call21;
  $30 = $i;
  $inc24 = (($30) + 1)|0;
  $i = $inc24;
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = HEAP32[99961]|0;
  $cmp27 = ($31|0)<($32|0);
  if (!($cmp27)) {
   break;
  }
  $33 = $i;
  $arrayidx30 = (230448 + ($33<<2)|0);
  $34 = HEAP32[$arrayidx30>>2]|0;
  $shr31 = $34 >>> 19;
  $arrayidx32 = ((82992) + ($shr31<<2)|0);
  $35 = HEAP32[$arrayidx32>>2]|0;
  $call33 = (Math_abs(($35|0))|0);
  $cosadj = $call33;
  $36 = $cosadj;
  $call34 = (_FixedDiv(65536,$36)|0);
  $37 = $i;
  $arrayidx35 = (247200 + ($37<<2)|0);
  HEAP32[$arrayidx35>>2] = $call34;
  $38 = $i;
  $inc37 = (($38) + 1)|0;
  $i = $inc37;
 }
 $i = 0;
 while(1) {
  $39 = $i;
  $cmp40 = ($39|0)<(16);
  if (!($cmp40)) {
   break;
  }
  $40 = $i;
  $sub43 = (15 - ($40))|0;
  $mul44 = $sub43<<1;
  $mul45 = $mul44<<5;
  $div46 = (($mul45|0) / 16)&-1;
  $startmap = $div46;
  $j = 0;
  while(1) {
   $41 = $j;
   $cmp48 = ($41|0)<(48);
   if (!($cmp48)) {
    break;
   }
   $42 = $startmap;
   $43 = $j;
   $mul51 = ($43*320)|0;
   $44 = HEAP32[99961]|0;
   $45 = HEAP32[99967]|0;
   $shl52 = $44 << $45;
   $div53 = (($mul51|0) / ($shl52|0))&-1;
   $div54 = (($div53|0) / 2)&-1;
   $sub55 = (($42) - ($div54))|0;
   $level = $sub55;
   $46 = $level;
   $cmp56 = ($46|0)<(0);
   $spec$store$select = $cmp56 ? 0 : $sub55;
   $level = $spec$store$select;
   $47 = $level;
   $cmp60 = ($47|0)>=(32);
   $spec$store$select1 = $cmp60 ? 31 : $spec$store$select;
   $level = $spec$store$select1;
   $48 = HEAP32[99933]|0;
   $49 = $level;
   $mul64 = $49<<8;
   $add$ptr = (($48) + ($mul64)|0);
   $50 = $i;
   $arrayidx65 = (239936 + (($50*192)|0)|0);
   $51 = $j;
   $arrayidx66 = (($arrayidx65) + ($51<<2)|0);
   HEAP32[$arrayidx66>>2] = $add$ptr;
   $52 = $j;
   $inc68 = (($52) + 1)|0;
   $j = $inc68;
  }
  $53 = $i;
  $inc71 = (($53) + 1)|0;
  $i = $inc71;
 }
 STACKTOP = sp;return;
}
function _R_Init() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _R_InitData();
 (_printf(159941,$vararg_buffer)|0);
 _R_InitPointToAngle();
 (_printf(159941,$vararg_buffer1)|0);
 _R_InitTables();
 (_printf(159941,$vararg_buffer3)|0);
 $0 = HEAP32[32284]|0;
 $1 = HEAP32[99723]|0;
 _R_SetViewSize($0,$1);
 _R_InitPlanes();
 (_printf(159941,$vararg_buffer5)|0);
 _R_InitLightTables();
 (_printf(159941,$vararg_buffer7)|0);
 _R_InitSkyMap();
 _R_InitTranslationTables();
 (_printf(159941,$vararg_buffer9)|0);
 HEAP32[99981] = 0;
 STACKTOP = sp;return;
}
function _R_PointInSubsector($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and3 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0;
 var $call = 0, $children = 0, $conv = 0, $lnot = 0, $node = 0, $nodenum = 0, $retval = 0, $side = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = HEAP32[99851]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  $1 = HEAP32[99848]|0;
  $retval = $1;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 $2 = HEAP32[99851]|0;
 $sub = (($2) - 1)|0;
 $nodenum = $sub;
 while(1) {
  $3 = $nodenum;
  $and = $3 & 32768;
  $tobool1 = ($and|0)!=(0);
  $lnot = $tobool1 ^ 1;
  if (!($lnot)) {
   break;
  }
  $4 = HEAP32[99852]|0;
  $5 = $nodenum;
  $arrayidx = (($4) + (($5*52)|0)|0);
  $node = $arrayidx;
  $6 = $x$addr;
  $7 = $y$addr;
  $8 = $node;
  $call = (_R_PointOnSide($6,$7,$8)|0);
  $side = $call;
  $9 = $node;
  $children = ((($9)) + 48|0);
  $10 = $side;
  $arrayidx2 = (($children) + ($10<<1)|0);
  $11 = HEAP16[$arrayidx2>>1]|0;
  $conv = $11&65535;
  $nodenum = $conv;
 }
 $12 = HEAP32[99848]|0;
 $13 = $nodenum;
 $and3 = $13 & -32769;
 $arrayidx4 = (($12) + ($and3<<3)|0);
 $retval = $arrayidx4;
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function _R_SetupFrame($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $angle = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx7 = 0, $cmp = 0, $extralight = 0, $fixedcolormap = 0, $fixedcolormap5 = 0;
 var $i = 0, $inc = 0, $inc8 = 0, $inc9 = 0, $mul = 0, $mul6 = 0, $player$addr = 0, $shr = 0, $shr3 = 0, $tobool = 0, $viewz = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 HEAP32[99982] = $0;
 $1 = $player$addr;
 $2 = HEAP32[$1>>2]|0;
 $x = ((($2)) + 12|0);
 $3 = HEAP32[$x>>2]|0;
 HEAP32[99963] = $3;
 $4 = $player$addr;
 $5 = HEAP32[$4>>2]|0;
 $y = ((($5)) + 16|0);
 $6 = HEAP32[$y>>2]|0;
 HEAP32[99964] = $6;
 $7 = $player$addr;
 $8 = HEAP32[$7>>2]|0;
 $angle = ((($8)) + 32|0);
 $9 = HEAP32[$angle>>2]|0;
 $10 = HEAP32[99983]|0;
 $add = (($9) + ($10))|0;
 HEAP32[99965] = $add;
 $11 = $player$addr;
 $extralight = ((($11)) + 240|0);
 $12 = HEAP32[$extralight>>2]|0;
 HEAP32[99984] = $12;
 $13 = $player$addr;
 $viewz = ((($13)) + 24|0);
 $14 = HEAP32[$viewz>>2]|0;
 HEAP32[99985] = $14;
 $15 = HEAP32[99965]|0;
 $shr = $15 >>> 19;
 $arrayidx = (74800 + ($shr<<2)|0);
 $16 = HEAP32[$arrayidx>>2]|0;
 HEAP32[99986] = $16;
 $17 = HEAP32[99965]|0;
 $shr3 = $17 >>> 19;
 $arrayidx4 = ((82992) + ($shr3<<2)|0);
 $18 = HEAP32[$arrayidx4>>2]|0;
 HEAP32[99987] = $18;
 HEAP32[99988] = 0;
 $19 = $player$addr;
 $fixedcolormap = ((($19)) + 244|0);
 $20 = HEAP32[$fixedcolormap>>2]|0;
 $tobool = ($20|0)!=(0);
 if (!($tobool)) {
  HEAP32[99989] = 0;
  $28 = HEAP32[99981]|0;
  $inc8 = (($28) + 1)|0;
  HEAP32[99981] = $inc8;
  $29 = HEAP32[32346]|0;
  $inc9 = (($29) + 1)|0;
  HEAP32[32346] = $inc9;
  STACKTOP = sp;return;
 }
 $21 = HEAP32[99933]|0;
 $22 = $player$addr;
 $fixedcolormap5 = ((($22)) + 244|0);
 $23 = HEAP32[$fixedcolormap5>>2]|0;
 $mul = $23<<8;
 $mul6 = $mul;
 $add$ptr = (($21) + ($mul6)|0);
 HEAP32[99989] = $add$ptr;
 HEAP32[99998] = 243008;
 $i = 0;
 while(1) {
  $24 = $i;
  $cmp = ($24|0)<(48);
  if (!($cmp)) {
   break;
  }
  $25 = HEAP32[99989]|0;
  $26 = $i;
  $arrayidx7 = (243008 + ($26<<2)|0);
  HEAP32[$arrayidx7>>2] = $25;
  $27 = $i;
  $inc = (($27) + 1)|0;
  $i = $inc;
 }
 $28 = HEAP32[99981]|0;
 $inc8 = (($28) + 1)|0;
 HEAP32[99981] = $inc8;
 $29 = HEAP32[32346]|0;
 $inc9 = (($29) + 1)|0;
 HEAP32[32346] = $inc9;
 STACKTOP = sp;return;
}
function _R_RenderPlayerView($player) {
 $player = $player|0;
 var $0 = 0, $1 = 0, $player$addr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $player$addr = $player;
 $0 = $player$addr;
 _R_SetupFrame($0);
 _R_ClearClipSegs();
 _R_ClearDrawSegs();
 _R_ClearPlanes();
 _R_ClearSprites();
 _NetUpdate();
 $1 = HEAP32[99851]|0;
 $sub = (($1) - 1)|0;
 _R_RenderBSPNode($sub);
 _NetUpdate();
 _R_DrawPlanes();
 _NetUpdate();
 _R_DrawMasked();
 _NetUpdate();
 STACKTOP = sp;return;
}
function _R_InitPlanes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _R_MapPlane($y,$x1,$x2) {
 $y = $y|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add24 = 0, $angle = 0, $arrayidx = 0;
 var $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx22 = 0, $arrayidx25 = 0, $arrayidx34 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $call = 0, $call11 = 0, $call13 = 0, $call20 = 0, $call23 = 0, $call26 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp3 = 0, $cmp31 = 0, $cmp5 = 0, $cmp6 = 0, $distance = 0, $index = 0, $length = 0, $or$cond = 0, $shr = 0, $shr30 = 0, $spec$store$select = 0, $sub = 0, $sub27 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x1$addr = 0, $x2$addr = 0;
 var $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $y$addr = $y;
 $x1$addr = $x1;
 $x2$addr = $x2;
 $0 = $x2$addr;
 $1 = $x1$addr;
 $cmp = ($0|0)<($1|0);
 $2 = $x1$addr;
 $cmp1 = ($2|0)<(0);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  label = 4;
 } else {
  $3 = $x2$addr;
  $4 = HEAP32[99961]|0;
  $cmp3 = ($3|0)>=($4|0);
  if ($cmp3) {
   label = 4;
  } else {
   $5 = $y$addr;
   $6 = HEAP32[99946]|0;
   $cmp5 = ($5|0)>($6|0);
   if ($cmp5) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = $x1$addr;
  $8 = $x2$addr;
  $9 = $y$addr;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $9;
  _I_Error(156116,$vararg_buffer);
 }
 $10 = HEAP32[99990]|0;
 $11 = $y$addr;
 $arrayidx = (243200 + ($11<<2)|0);
 $12 = HEAP32[$arrayidx>>2]|0;
 $cmp6 = ($10|0)!=($12|0);
 if ($cmp6) {
  $13 = HEAP32[99990]|0;
  $14 = $y$addr;
  $arrayidx8 = (243200 + ($14<<2)|0);
  HEAP32[$arrayidx8>>2] = $13;
  $15 = HEAP32[99990]|0;
  $16 = $y$addr;
  $arrayidx9 = (244000 + ($16<<2)|0);
  $17 = HEAP32[$arrayidx9>>2]|0;
  $call = (_FixedMul($15,$17)|0);
  $18 = $y$addr;
  $arrayidx10 = (244800 + ($18<<2)|0);
  HEAP32[$arrayidx10>>2] = $call;
  $distance = $call;
  $19 = $distance;
  $20 = HEAP32[99991]|0;
  $call11 = (_FixedMul($19,$20)|0);
  $21 = $y$addr;
  $arrayidx12 = (245600 + ($21<<2)|0);
  HEAP32[$arrayidx12>>2] = $call11;
  HEAP32[99954] = $call11;
  $22 = $distance;
  $23 = HEAP32[99992]|0;
  $call13 = (_FixedMul($22,$23)|0);
  $24 = $y$addr;
  $arrayidx14 = (246400 + ($24<<2)|0);
  HEAP32[$arrayidx14>>2] = $call13;
  HEAP32[99955] = $call13;
 } else {
  $25 = $y$addr;
  $arrayidx15 = (244800 + ($25<<2)|0);
  $26 = HEAP32[$arrayidx15>>2]|0;
  $distance = $26;
  $27 = $y$addr;
  $arrayidx16 = (245600 + ($27<<2)|0);
  $28 = HEAP32[$arrayidx16>>2]|0;
  HEAP32[99954] = $28;
  $29 = $y$addr;
  $arrayidx17 = (246400 + ($29<<2)|0);
  $30 = HEAP32[$arrayidx17>>2]|0;
  HEAP32[99955] = $30;
 }
 $31 = $distance;
 $32 = $x1$addr;
 $arrayidx19 = (247200 + ($32<<2)|0);
 $33 = HEAP32[$arrayidx19>>2]|0;
 $call20 = (_FixedMul($31,$33)|0);
 $length = $call20;
 $34 = HEAP32[99965]|0;
 $35 = $x1$addr;
 $arrayidx21 = (230448 + ($35<<2)|0);
 $36 = HEAP32[$arrayidx21>>2]|0;
 $add = (($34) + ($36))|0;
 $shr = $add >>> 19;
 $angle = $shr;
 $37 = HEAP32[99963]|0;
 $38 = $angle;
 $arrayidx22 = ((82992) + ($38<<2)|0);
 $39 = HEAP32[$arrayidx22>>2]|0;
 $40 = $length;
 $call23 = (_FixedMul($39,$40)|0);
 $add24 = (($37) + ($call23))|0;
 HEAP32[99952] = $add24;
 $41 = HEAP32[99964]|0;
 $sub = (0 - ($41))|0;
 $42 = $angle;
 $arrayidx25 = (74800 + ($42<<2)|0);
 $43 = HEAP32[$arrayidx25>>2]|0;
 $44 = $length;
 $call26 = (_FixedMul($43,$44)|0);
 $sub27 = (($sub) - ($call26))|0;
 HEAP32[99953] = $sub27;
 $45 = HEAP32[99989]|0;
 $tobool = ($45|0)!=(0|0);
 if ($tobool) {
  $46 = HEAP32[99989]|0;
  HEAP32[99956] = $46;
  $52 = $y$addr;
  HEAP32[99951] = $52;
  $53 = $x1$addr;
  HEAP32[99950] = $53;
  $54 = $x2$addr;
  HEAP32[99949] = $54;
  $55 = HEAP32[99980]|0;
  FUNCTION_TABLE_v[$55 & 255]();
  STACKTOP = sp;return;
 } else {
  $47 = $distance;
  $shr30 = $47 >> 20;
  $index = $shr30;
  $48 = $index;
  $cmp31 = ($48>>>0)>=(128);
  $spec$store$select = $cmp31 ? 127 : $shr30;
  $index = $spec$store$select;
  $49 = HEAP32[99993]|0;
  $50 = $index;
  $arrayidx34 = (($49) + ($50<<2)|0);
  $51 = HEAP32[$arrayidx34>>2]|0;
  HEAP32[99956] = $51;
  $52 = $y$addr;
  HEAP32[99951] = $52;
  $53 = $x1$addr;
  HEAP32[99950] = $53;
  $54 = $x2$addr;
  HEAP32[99949] = $54;
  $55 = HEAP32[99980]|0;
  FUNCTION_TABLE_v[$55 & 255]();
  STACKTOP = sp;return;
 }
}
function _R_ClearPlanes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angle = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $call = 0, $call4 = 0;
 var $cmp = 0, $conv = 0, $i = 0, $inc = 0, $shr = 0, $sub = 0, $sub5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[99961]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[99946]|0;
  $conv = $2&65535;
  $3 = $i;
  $arrayidx = (248480 + ($3<<1)|0);
  HEAP16[$arrayidx>>1] = $conv;
  $4 = $i;
  $arrayidx1 = (249120 + ($4<<1)|0);
  HEAP16[$arrayidx1>>1] = -1;
  $5 = $i;
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 HEAP32[99994] = 249760;
 HEAP32[99995] = 334752;
 _memset((243200|0),0,800)|0;
 $6 = HEAP32[99965]|0;
 $sub = (($6) - 1073741824)|0;
 $shr = $sub >>> 19;
 $angle = $shr;
 $7 = $angle;
 $arrayidx2 = ((82992) + ($7<<2)|0);
 $8 = HEAP32[$arrayidx2>>2]|0;
 $9 = HEAP32[99968]|0;
 $call = (_FixedDiv($8,$9)|0);
 HEAP32[99991] = $call;
 $10 = $angle;
 $arrayidx3 = (74800 + ($10<<2)|0);
 $11 = HEAP32[$arrayidx3>>2]|0;
 $12 = HEAP32[99968]|0;
 $call4 = (_FixedDiv($11,$12)|0);
 $sub5 = (0 - ($call4))|0;
 HEAP32[99992] = $sub5;
 STACKTOP = sp;return;
}
function _R_FindPlane($height,$picnum,$lightlevel) {
 $height = $height|0;
 $picnum = $picnum|0;
 $lightlevel = $lightlevel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $check = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp14 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $height$addr = 0, $incdec$ptr = 0;
 var $incdec$ptr17 = 0, $lightlevel$addr = 0, $lightlevel20 = 0, $lightlevel7 = 0, $maxx = 0, $minx = 0, $picnum$addr = 0, $picnum19 = 0, $picnum4 = 0, $retval = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $top = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $height$addr = $height;
 $picnum$addr = $picnum;
 $lightlevel$addr = $lightlevel;
 $0 = $picnum$addr;
 $1 = HEAP32[100032]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $height$addr = 0;
  $lightlevel$addr = 0;
 }
 $check = 249760;
 while(1) {
  $2 = $check;
  $3 = HEAP32[99994]|0;
  $cmp1 = ($2>>>0)<($3>>>0);
  if (!($cmp1)) {
   break;
  }
  $4 = $height$addr;
  $5 = $check;
  $6 = HEAP32[$5>>2]|0;
  $cmp3 = ($4|0)==($6|0);
  if ($cmp3) {
   $7 = $picnum$addr;
   $8 = $check;
   $picnum4 = ((($8)) + 4|0);
   $9 = HEAP32[$picnum4>>2]|0;
   $cmp5 = ($7|0)==($9|0);
   if ($cmp5) {
    $10 = $lightlevel$addr;
    $11 = $check;
    $lightlevel7 = ((($11)) + 8|0);
    $12 = HEAP32[$lightlevel7>>2]|0;
    $cmp8 = ($10|0)==($12|0);
    if ($cmp8) {
     break;
    }
   }
  }
  $13 = $check;
  $incdec$ptr = ((($13)) + 664|0);
  $check = $incdec$ptr;
 }
 $14 = $check;
 $15 = HEAP32[99994]|0;
 $cmp11 = ($14>>>0)<($15>>>0);
 if ($cmp11) {
  $16 = $check;
  $retval = $16;
  $29 = $retval;
  STACKTOP = sp;return ($29|0);
 }
 $17 = HEAP32[99994]|0;
 $sub$ptr$lhs$cast = $17;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (249760))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 664)&-1;
 $cmp14 = ($sub$ptr$div|0)==(128);
 if ($cmp14) {
  _I_Error(156141,$vararg_buffer);
 }
 $18 = HEAP32[99994]|0;
 $incdec$ptr17 = ((($18)) + 664|0);
 HEAP32[99994] = $incdec$ptr17;
 $19 = $height$addr;
 $20 = $check;
 HEAP32[$20>>2] = $19;
 $21 = $picnum$addr;
 $22 = $check;
 $picnum19 = ((($22)) + 4|0);
 HEAP32[$picnum19>>2] = $21;
 $23 = $lightlevel$addr;
 $24 = $check;
 $lightlevel20 = ((($24)) + 8|0);
 HEAP32[$lightlevel20>>2] = $23;
 $25 = $check;
 $minx = ((($25)) + 12|0);
 HEAP32[$minx>>2] = 320;
 $26 = $check;
 $maxx = ((($26)) + 16|0);
 HEAP32[$maxx>>2] = -1;
 $27 = $check;
 $top = ((($27)) + 21|0);
 _memset(($top|0),-1,320)|0;
 $28 = $check;
 $retval = $28;
 $29 = $retval;
 STACKTOP = sp;return ($29|0);
}
function _R_CheckPlane($pl,$start,$stop) {
 $pl = $pl|0;
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp3 = 0, $cmp9 = 0, $conv = 0, $inc = 0, $incdec$ptr = 0, $intrh = 0, $intrl = 0, $lightlevel = 0, $lightlevel22 = 0, $maxx = 0, $maxx18 = 0;
 var $maxx24 = 0, $maxx5 = 0, $minx = 0, $minx1 = 0, $minx17 = 0, $minx23 = 0, $picnum = 0, $picnum21 = 0, $pl$addr = 0, $retval = 0, $start$addr = 0, $stop$addr = 0, $top = 0, $top25 = 0, $unionh = 0, $unionl = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $pl$addr = $pl;
 $start$addr = $start;
 $stop$addr = $stop;
 $0 = $start$addr;
 $1 = $pl$addr;
 $minx = ((($1)) + 12|0);
 $2 = HEAP32[$minx>>2]|0;
 $cmp = ($0|0)<($2|0);
 $3 = $pl$addr;
 $minx1 = ((($3)) + 12|0);
 $4 = HEAP32[$minx1>>2]|0;
 if ($cmp) {
  $intrl = $4;
  $5 = $start$addr;
  $unionl = $5;
 } else {
  $unionl = $4;
  $6 = $start$addr;
  $intrl = $6;
 }
 $7 = $stop$addr;
 $8 = $pl$addr;
 $maxx = ((($8)) + 16|0);
 $9 = HEAP32[$maxx>>2]|0;
 $cmp3 = ($7|0)>($9|0);
 $10 = $pl$addr;
 $maxx5 = ((($10)) + 16|0);
 $11 = HEAP32[$maxx5>>2]|0;
 if ($cmp3) {
  $intrh = $11;
  $12 = $stop$addr;
  $unionh = $12;
 } else {
  $unionh = $11;
  $13 = $stop$addr;
  $intrh = $13;
 }
 $14 = $intrl;
 $x = $14;
 while(1) {
  $15 = $x;
  $16 = $intrh;
  $cmp9 = ($15|0)<=($16|0);
  if (!($cmp9)) {
   break;
  }
  $17 = $pl$addr;
  $top = ((($17)) + 21|0);
  $18 = $x;
  $arrayidx = (($top) + ($18)|0);
  $19 = HEAP8[$arrayidx>>0]|0;
  $conv = $19&255;
  $cmp10 = ($conv|0)!=(255);
  if ($cmp10) {
   break;
  }
  $20 = $x;
  $inc = (($20) + 1)|0;
  $x = $inc;
 }
 $21 = $x;
 $22 = $intrh;
 $cmp14 = ($21|0)>($22|0);
 if ($cmp14) {
  $23 = $unionl;
  $24 = $pl$addr;
  $minx17 = ((($24)) + 12|0);
  HEAP32[$minx17>>2] = $23;
  $25 = $unionh;
  $26 = $pl$addr;
  $maxx18 = ((($26)) + 16|0);
  HEAP32[$maxx18>>2] = $25;
  $27 = $pl$addr;
  $retval = $27;
  $44 = $retval;
  STACKTOP = sp;return ($44|0);
 } else {
  $28 = $pl$addr;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[99994]|0;
  HEAP32[$30>>2] = $29;
  $31 = $pl$addr;
  $picnum = ((($31)) + 4|0);
  $32 = HEAP32[$picnum>>2]|0;
  $33 = HEAP32[99994]|0;
  $picnum21 = ((($33)) + 4|0);
  HEAP32[$picnum21>>2] = $32;
  $34 = $pl$addr;
  $lightlevel = ((($34)) + 8|0);
  $35 = HEAP32[$lightlevel>>2]|0;
  $36 = HEAP32[99994]|0;
  $lightlevel22 = ((($36)) + 8|0);
  HEAP32[$lightlevel22>>2] = $35;
  $37 = HEAP32[99994]|0;
  $incdec$ptr = ((($37)) + 664|0);
  HEAP32[99994] = $incdec$ptr;
  $pl$addr = $37;
  $38 = $start$addr;
  $39 = $pl$addr;
  $minx23 = ((($39)) + 12|0);
  HEAP32[$minx23>>2] = $38;
  $40 = $stop$addr;
  $41 = $pl$addr;
  $maxx24 = ((($41)) + 16|0);
  HEAP32[$maxx24>>2] = $40;
  $42 = $pl$addr;
  $top25 = ((($42)) + 21|0);
  _memset(($top25|0),-1,320)|0;
  $43 = $pl$addr;
  $retval = $43;
  $44 = $retval;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _R_MakeSpans($x,$t1,$b1,$t2,$b2) {
 $x = $x|0;
 $t1 = $t1|0;
 $b1 = $b1|0;
 $t2 = $t2|0;
 $b2 = $b2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx8 = 0, $b1$addr = 0, $b2$addr = 0, $cmp = 0, $cmp1 = 0;
 var $cmp12 = 0, $cmp14 = 0, $cmp21 = 0, $cmp23 = 0, $cmp3 = 0, $cmp5 = 0, $dec = 0, $dec27 = 0, $inc = 0, $inc18 = 0, $sub = 0, $sub9 = 0, $t1$addr = 0, $t2$addr = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $t1$addr = $t1;
 $b1$addr = $b1;
 $t2$addr = $t2;
 $b2$addr = $b2;
 while(1) {
  $0 = $t1$addr;
  $1 = $t2$addr;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = $t1$addr;
  $3 = $b1$addr;
  $cmp1 = ($2|0)<=($3|0);
  if (!($cmp1)) {
   break;
  }
  $4 = $t1$addr;
  $5 = $t1$addr;
  $arrayidx = (375712 + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $7 = $x$addr;
  $sub = (($7) - 1)|0;
  _R_MapPlane($4,$6,$sub);
  $8 = $t1$addr;
  $inc = (($8) + 1)|0;
  $t1$addr = $inc;
 }
 while(1) {
  $9 = $b1$addr;
  $10 = $b2$addr;
  $cmp3 = ($9|0)>($10|0);
  if (!($cmp3)) {
   break;
  }
  $11 = $b1$addr;
  $12 = $t1$addr;
  $cmp5 = ($11|0)>=($12|0);
  if (!($cmp5)) {
   break;
  }
  $13 = $b1$addr;
  $14 = $b1$addr;
  $arrayidx8 = (375712 + ($14<<2)|0);
  $15 = HEAP32[$arrayidx8>>2]|0;
  $16 = $x$addr;
  $sub9 = (($16) - 1)|0;
  _R_MapPlane($13,$15,$sub9);
  $17 = $b1$addr;
  $dec = (($17) + -1)|0;
  $b1$addr = $dec;
 }
 while(1) {
  $18 = $t2$addr;
  $19 = $t1$addr;
  $cmp12 = ($18|0)<($19|0);
  if (!($cmp12)) {
   break;
  }
  $20 = $t2$addr;
  $21 = $b2$addr;
  $cmp14 = ($20|0)<=($21|0);
  if (!($cmp14)) {
   break;
  }
  $22 = $x$addr;
  $23 = $t2$addr;
  $arrayidx17 = (375712 + ($23<<2)|0);
  HEAP32[$arrayidx17>>2] = $22;
  $24 = $t2$addr;
  $inc18 = (($24) + 1)|0;
  $t2$addr = $inc18;
 }
 while(1) {
  $25 = $b2$addr;
  $26 = $b1$addr;
  $cmp21 = ($25|0)>($26|0);
  if (!($cmp21)) {
   label = 17;
   break;
  }
  $27 = $b2$addr;
  $28 = $t2$addr;
  $cmp23 = ($27|0)>=($28|0);
  if (!($cmp23)) {
   label = 17;
   break;
  }
  $29 = $x$addr;
  $30 = $b2$addr;
  $arrayidx26 = (375712 + ($30<<2)|0);
  HEAP32[$arrayidx26>>2] = $29;
  $31 = $b2$addr;
  $dec27 = (($31) + -1)|0;
  $b2$addr = $dec27;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _R_DrawPlanes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $add = 0, $add44 = 0, $add48 = 0, $add60 = 0, $add67 = 0, $angle = 0, $arrayidx = 0, $arrayidx33 = 0, $arrayidx38 = 0, $arrayidx43 = 0, $arrayidx57 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $arrayidx75 = 0, $arrayidx79 = 0, $arrayidx82 = 0, $arrayidx85 = 0;
 var $bottom = 0, $bottom77 = 0, $bottom84 = 0, $call = 0, $call45 = 0, $call46 = 0, $cmp = 0, $cmp16 = 0, $cmp22 = 0, $cmp23 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp49 = 0, $cmp53 = 0, $cmp7 = 0, $cmp70 = 0, $conv = 0, $conv34 = 0, $conv76 = 0;
 var $conv80 = 0, $conv83 = 0, $conv86 = 0, $inc = 0, $inc88 = 0, $incdec$ptr = 0, $light = 0, $lightlevel = 0, $lumpnum = 0, $maxx = 0, $maxx30 = 0, $maxx59 = 0, $maxx66 = 0, $minx = 0, $minx28 = 0, $minx63 = 0, $minx68 = 0, $picnum = 0, $picnum42 = 0, $pl = 0;
 var $shr = 0, $shr39 = 0, $shr47 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $stop = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div11 = 0, $sub$ptr$div15 = 0, $sub$ptr$div20 = 0, $sub$ptr$div3 = 0, $sub$ptr$div6 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast1 = 0, $sub$ptr$lhs$cast13 = 0, $sub$ptr$lhs$cast18 = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$sub = 0;
 var $sub$ptr$sub10 = 0, $sub$ptr$sub14 = 0, $sub$ptr$sub19 = 0, $sub$ptr$sub2 = 0, $sub$ptr$sub5 = 0, $sub64 = 0, $sub74 = 0, $sub78 = 0, $top = 0, $top58 = 0, $top62 = 0, $top73 = 0, $top81 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[99907]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (193712))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 48)&-1;
 $cmp = ($sub$ptr$div|0)>(256);
 if ($cmp) {
  $1 = HEAP32[99907]|0;
  $sub$ptr$lhs$cast1 = $1;
  $sub$ptr$sub2 = (($sub$ptr$lhs$cast1) - (193712))|0;
  $sub$ptr$div3 = (($sub$ptr$sub2|0) / 48)&-1;
  HEAP32[$vararg_buffer>>2] = $sub$ptr$div3;
  _I_Error(156172,$vararg_buffer);
 }
 $2 = HEAP32[99994]|0;
 $sub$ptr$lhs$cast4 = $2;
 $sub$ptr$sub5 = (($sub$ptr$lhs$cast4) - (249760))|0;
 $sub$ptr$div6 = (($sub$ptr$sub5|0) / 664)&-1;
 $cmp7 = ($sub$ptr$div6|0)>(128);
 if ($cmp7) {
  $3 = HEAP32[99994]|0;
  $sub$ptr$lhs$cast9 = $3;
  $sub$ptr$sub10 = (($sub$ptr$lhs$cast9) - (249760))|0;
  $sub$ptr$div11 = (($sub$ptr$sub10|0) / 664)&-1;
  HEAP32[$vararg_buffer2>>2] = $sub$ptr$div11;
  _I_Error(156209,$vararg_buffer2);
 }
 $4 = HEAP32[99995]|0;
 $sub$ptr$lhs$cast13 = $4;
 $sub$ptr$sub14 = (($sub$ptr$lhs$cast13) - (334752))|0;
 $sub$ptr$div15 = (($sub$ptr$sub14|0) / 2)&-1;
 $cmp16 = ($sub$ptr$div15|0)>(20480);
 if ($cmp16) {
  $5 = HEAP32[99995]|0;
  $sub$ptr$lhs$cast18 = $5;
  $sub$ptr$sub19 = (($sub$ptr$lhs$cast18) - (334752))|0;
  $sub$ptr$div20 = (($sub$ptr$sub19|0) / 2)&-1;
  HEAP32[$vararg_buffer5>>2] = $sub$ptr$div20;
  _I_Error(156246,$vararg_buffer5);
 }
 $pl = 249760;
 while(1) {
  $6 = $pl;
  $7 = HEAP32[99994]|0;
  $cmp22 = ($6>>>0)<($7>>>0);
  if (!($cmp22)) {
   break;
  }
  $8 = $pl;
  $minx = ((($8)) + 12|0);
  $9 = HEAP32[$minx>>2]|0;
  $10 = $pl;
  $maxx = ((($10)) + 16|0);
  $11 = HEAP32[$maxx>>2]|0;
  $cmp23 = ($9|0)>($11|0);
  L13: do {
   if (!($cmp23)) {
    $12 = $pl;
    $picnum = ((($12)) + 4|0);
    $13 = HEAP32[$picnum>>2]|0;
    $14 = HEAP32[100032]|0;
    $cmp26 = ($13|0)==($14|0);
    if (!($cmp26)) {
     $40 = HEAP32[99923]|0;
     $41 = HEAP32[99926]|0;
     $42 = $pl;
     $picnum42 = ((($42)) + 4|0);
     $43 = HEAP32[$picnum42>>2]|0;
     $arrayidx43 = (($41) + ($43<<2)|0);
     $44 = HEAP32[$arrayidx43>>2]|0;
     $add44 = (($40) + ($44))|0;
     $lumpnum = $add44;
     $45 = $lumpnum;
     $call45 = (_W_CacheLumpNum($45,1)|0);
     HEAP32[99957] = $call45;
     $46 = $pl;
     $47 = HEAP32[$46>>2]|0;
     $48 = HEAP32[99985]|0;
     $sub = (($47) - ($48))|0;
     $call46 = (Math_abs(($sub|0))|0);
     HEAP32[99990] = $call46;
     $49 = $pl;
     $lightlevel = ((($49)) + 8|0);
     $50 = HEAP32[$lightlevel>>2]|0;
     $shr47 = $50 >> 4;
     $51 = HEAP32[99984]|0;
     $add48 = (($shr47) + ($51))|0;
     $light = $add48;
     $52 = $light;
     $cmp49 = ($52|0)>=(16);
     $spec$store$select = $cmp49 ? 15 : $add48;
     $light = $spec$store$select;
     $53 = $light;
     $cmp53 = ($53|0)<(0);
     $spec$store$select1 = $cmp53 ? 0 : $spec$store$select;
     $light = $spec$store$select1;
     $54 = $light;
     $arrayidx57 = (231744 + ($54<<9)|0);
     HEAP32[99993] = $arrayidx57;
     $55 = $pl;
     $top58 = ((($55)) + 21|0);
     $56 = $pl;
     $maxx59 = ((($56)) + 16|0);
     $57 = HEAP32[$maxx59>>2]|0;
     $add60 = (($57) + 1)|0;
     $arrayidx61 = (($top58) + ($add60)|0);
     HEAP8[$arrayidx61>>0] = -1;
     $58 = $pl;
     $top62 = ((($58)) + 21|0);
     $59 = $pl;
     $minx63 = ((($59)) + 12|0);
     $60 = HEAP32[$minx63>>2]|0;
     $sub64 = (($60) - 1)|0;
     $arrayidx65 = (($top62) + ($sub64)|0);
     HEAP8[$arrayidx65>>0] = -1;
     $61 = $pl;
     $maxx66 = ((($61)) + 16|0);
     $62 = HEAP32[$maxx66>>2]|0;
     $add67 = (($62) + 1)|0;
     $stop = $add67;
     $63 = $pl;
     $minx68 = ((($63)) + 12|0);
     $64 = HEAP32[$minx68>>2]|0;
     $x = $64;
     while(1) {
      $65 = $x;
      $66 = $stop;
      $cmp70 = ($65|0)<=($66|0);
      if (!($cmp70)) {
       break;
      }
      $67 = $x;
      $68 = $pl;
      $top73 = ((($68)) + 21|0);
      $69 = $x;
      $sub74 = (($69) - 1)|0;
      $arrayidx75 = (($top73) + ($sub74)|0);
      $70 = HEAP8[$arrayidx75>>0]|0;
      $conv76 = $70&255;
      $71 = $pl;
      $bottom77 = ((($71)) + 343|0);
      $72 = $x;
      $sub78 = (($72) - 1)|0;
      $arrayidx79 = (($bottom77) + ($sub78)|0);
      $73 = HEAP8[$arrayidx79>>0]|0;
      $conv80 = $73&255;
      $74 = $pl;
      $top81 = ((($74)) + 21|0);
      $75 = $x;
      $arrayidx82 = (($top81) + ($75)|0);
      $76 = HEAP8[$arrayidx82>>0]|0;
      $conv83 = $76&255;
      $77 = $pl;
      $bottom84 = ((($77)) + 343|0);
      $78 = $x;
      $arrayidx85 = (($bottom84) + ($78)|0);
      $79 = HEAP8[$arrayidx85>>0]|0;
      $conv86 = $79&255;
      _R_MakeSpans($67,$conv76,$conv80,$conv83,$conv86);
      $80 = $x;
      $inc88 = (($80) + 1)|0;
      $x = $inc88;
     }
     $81 = $lumpnum;
     _W_ReleaseLumpNum($81);
     break;
    }
    $15 = HEAP32[100060]|0;
    $16 = HEAP32[99967]|0;
    $shr = $15 >> $16;
    HEAP32[99941] = $shr;
    $17 = HEAP32[99933]|0;
    HEAP32[99943] = $17;
    $18 = HEAP32[100031]|0;
    HEAP32[99942] = $18;
    $19 = $pl;
    $minx28 = ((($19)) + 12|0);
    $20 = HEAP32[$minx28>>2]|0;
    $x = $20;
    while(1) {
     $21 = $x;
     $22 = $pl;
     $maxx30 = ((($22)) + 16|0);
     $23 = HEAP32[$maxx30>>2]|0;
     $cmp31 = ($21|0)<=($23|0);
     if (!($cmp31)) {
      break L13;
     }
     $24 = $pl;
     $top = ((($24)) + 21|0);
     $25 = $x;
     $arrayidx = (($top) + ($25)|0);
     $26 = HEAP8[$arrayidx>>0]|0;
     $conv = $26&255;
     HEAP32[99939] = $conv;
     $27 = $pl;
     $bottom = ((($27)) + 343|0);
     $28 = $x;
     $arrayidx33 = (($bottom) + ($28)|0);
     $29 = HEAP8[$arrayidx33>>0]|0;
     $conv34 = $29&255;
     HEAP32[99938] = $conv34;
     $30 = HEAP32[99939]|0;
     $31 = HEAP32[99938]|0;
     $cmp35 = ($30|0)<=($31|0);
     if ($cmp35) {
      $32 = HEAP32[99965]|0;
      $33 = $x;
      $arrayidx38 = (230448 + ($33<<2)|0);
      $34 = HEAP32[$arrayidx38>>2]|0;
      $add = (($32) + ($34))|0;
      $shr39 = $add >>> 22;
      $angle = $shr39;
      $35 = $x;
      HEAP32[99940] = $35;
      $36 = HEAP32[100033]|0;
      $37 = $angle;
      $call = (_R_GetColumn($36,$37)|0);
      HEAP32[99944] = $call;
      $38 = HEAP32[99977]|0;
      FUNCTION_TABLE_v[$38 & 255]();
     }
     $39 = $x;
     $inc = (($39) + 1)|0;
     $x = $inc;
    }
   }
  } while(0);
  $82 = $pl;
  $incdec$ptr = ((($82)) + 664|0);
  $pl = $incdec$ptr;
 }
 STACKTOP = sp;return;
}
function _R_RenderMaskedSegRange($ds,$x1,$x2) {
 $ds = $ds|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add22 = 0, $add31 = 0, $add46 = 0, $add72 = 0, $and = 0, $arrayidx = 0, $arrayidx18 = 0, $arrayidx30 = 0, $arrayidx52 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx70 = 0, $backsector = 0, $call = 0, $call69 = 0, $ceilingheight = 0;
 var $ceilingheight34 = 0, $ceilingheight38 = 0, $ceilingheight40 = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp26 = 0, $cmp35 = 0, $cmp50 = 0, $cmp54 = 0, $cmp6 = 0, $cmp60 = 0, $col = 0, $cond = 0, $cond42 = 0, $conv = 0, $conv23 = 0, $conv53 = 0, $conv68 = 0, $dec = 0;
 var $div = 0, $ds$addr = 0, $flags = 0, $frontsector = 0, $idxprom = 0, $inc = 0, $inc73 = 0, $index = 0, $lightlevel = 0, $lightnum = 0, $linedef = 0, $maskedtexturecol = 0, $midtexture = 0, $mul = 0, $rowoffset = 0, $scale1 = 0, $scalestep = 0, $shr = 0, $shr59 = 0, $sidedef = 0;
 var $sidedef45 = 0, $spec$store$select = 0, $sprbottomclip = 0, $sprtopclip = 0, $sub = 0, $sub32 = 0, $sub43 = 0, $sub66 = 0, $texnum = 0, $tobool = 0, $tobool47 = 0, $tobool57 = 0, $v2 = 0, $v24 = 0, $x1$addr = 0, $x121 = 0, $x2$addr = 0, $y = 0, $y1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ds$addr = $ds;
 $x1$addr = $x1;
 $x2$addr = $x2;
 $0 = $ds$addr;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[99909] = $1;
 $2 = HEAP32[99909]|0;
 $frontsector = ((($2)) + 24|0);
 $3 = HEAP32[$frontsector>>2]|0;
 HEAP32[99911] = $3;
 $4 = HEAP32[99909]|0;
 $backsector = ((($4)) + 28|0);
 $5 = HEAP32[$backsector>>2]|0;
 HEAP32[99910] = $5;
 $6 = HEAP32[99922]|0;
 $7 = HEAP32[99909]|0;
 $sidedef = ((($7)) + 16|0);
 $8 = HEAP32[$sidedef>>2]|0;
 $midtexture = ((($8)) + 12|0);
 $9 = HEAP16[$midtexture>>1]|0;
 $idxprom = $9 << 16 >> 16;
 $arrayidx = (($6) + ($idxprom<<2)|0);
 $10 = HEAP32[$arrayidx>>2]|0;
 $texnum = $10;
 $11 = HEAP32[99911]|0;
 $lightlevel = ((($11)) + 12|0);
 $12 = HEAP16[$lightlevel>>1]|0;
 $conv = $12 << 16 >> 16;
 $shr = $conv >> 4;
 $13 = HEAP32[99984]|0;
 $add = (($shr) + ($13))|0;
 $lightnum = $add;
 $14 = HEAP32[99909]|0;
 $15 = HEAP32[$14>>2]|0;
 $y = ((($15)) + 4|0);
 $16 = HEAP32[$y>>2]|0;
 $17 = HEAP32[99909]|0;
 $v2 = ((($17)) + 4|0);
 $18 = HEAP32[$v2>>2]|0;
 $y1 = ((($18)) + 4|0);
 $19 = HEAP32[$y1>>2]|0;
 $cmp = ($16|0)==($19|0);
 if ($cmp) {
  $20 = $lightnum;
  $dec = (($20) + -1)|0;
  $lightnum = $dec;
 } else {
  $21 = HEAP32[99909]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[99909]|0;
  $v24 = ((($24)) + 4|0);
  $25 = HEAP32[$v24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $cmp6 = ($23|0)==($26|0);
  if ($cmp6) {
   $27 = $lightnum;
   $inc = (($27) + 1)|0;
   $lightnum = $inc;
  }
 }
 $28 = $lightnum;
 $cmp10 = ($28|0)<(0);
 do {
  if ($cmp10) {
   HEAP32[99998] = 239936;
  } else {
   $29 = $lightnum;
   $cmp14 = ($29|0)>=(16);
   if ($cmp14) {
    HEAP32[99998] = (242816);
    break;
   } else {
    $30 = $lightnum;
    $arrayidx18 = (239936 + (($30*192)|0)|0);
    HEAP32[99998] = $arrayidx18;
    break;
   }
  }
 } while(0);
 $31 = $ds$addr;
 $maskedtexturecol = ((($31)) + 44|0);
 $32 = HEAP32[$maskedtexturecol>>2]|0;
 HEAP32[99999] = $32;
 $33 = $ds$addr;
 $scalestep = ((($33)) + 20|0);
 $34 = HEAP32[$scalestep>>2]|0;
 HEAP32[100000] = $34;
 $35 = $ds$addr;
 $scale1 = ((($35)) + 12|0);
 $36 = HEAP32[$scale1>>2]|0;
 $37 = $x1$addr;
 $38 = $ds$addr;
 $x121 = ((($38)) + 4|0);
 $39 = HEAP32[$x121>>2]|0;
 $sub = (($37) - ($39))|0;
 $40 = HEAP32[100000]|0;
 $mul = Math_imul($sub, $40)|0;
 $add22 = (($36) + ($mul))|0;
 HEAP32[100055] = $add22;
 $41 = $ds$addr;
 $sprbottomclip = ((($41)) + 40|0);
 $42 = HEAP32[$sprbottomclip>>2]|0;
 HEAP32[100056] = $42;
 $43 = $ds$addr;
 $sprtopclip = ((($43)) + 36|0);
 $44 = HEAP32[$sprtopclip>>2]|0;
 HEAP32[100057] = $44;
 $45 = HEAP32[99909]|0;
 $linedef = ((($45)) + 20|0);
 $46 = HEAP32[$linedef>>2]|0;
 $flags = ((($46)) + 16|0);
 $47 = HEAP16[$flags>>1]|0;
 $conv23 = $47 << 16 >> 16;
 $and = $conv23 & 16;
 $tobool = ($and|0)!=(0);
 $48 = HEAP32[99911]|0;
 if ($tobool) {
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[99910]|0;
  $51 = HEAP32[$50>>2]|0;
  $cmp26 = ($49|0)>($51|0);
  if ($cmp26) {
   $52 = HEAP32[99911]|0;
   $53 = HEAP32[$52>>2]|0;
   $cond = $53;
  } else {
   $54 = HEAP32[99910]|0;
   $55 = HEAP32[$54>>2]|0;
   $cond = $55;
  }
  HEAP32[99942] = $cond;
  $56 = HEAP32[99942]|0;
  $57 = HEAP32[99921]|0;
  $58 = $texnum;
  $arrayidx30 = (($57) + ($58<<2)|0);
  $59 = HEAP32[$arrayidx30>>2]|0;
  $add31 = (($56) + ($59))|0;
  $60 = HEAP32[99985]|0;
  $sub32 = (($add31) - ($60))|0;
  HEAP32[99942] = $sub32;
 } else {
  $ceilingheight = ((($48)) + 4|0);
  $61 = HEAP32[$ceilingheight>>2]|0;
  $62 = HEAP32[99910]|0;
  $ceilingheight34 = ((($62)) + 4|0);
  $63 = HEAP32[$ceilingheight34>>2]|0;
  $cmp35 = ($61|0)<($63|0);
  if ($cmp35) {
   $64 = HEAP32[99911]|0;
   $ceilingheight38 = ((($64)) + 4|0);
   $65 = HEAP32[$ceilingheight38>>2]|0;
   $cond42 = $65;
  } else {
   $66 = HEAP32[99910]|0;
   $ceilingheight40 = ((($66)) + 4|0);
   $67 = HEAP32[$ceilingheight40>>2]|0;
   $cond42 = $67;
  }
  HEAP32[99942] = $cond42;
  $68 = HEAP32[99942]|0;
  $69 = HEAP32[99985]|0;
  $sub43 = (($68) - ($69))|0;
  HEAP32[99942] = $sub43;
 }
 $70 = HEAP32[99909]|0;
 $sidedef45 = ((($70)) + 16|0);
 $71 = HEAP32[$sidedef45>>2]|0;
 $rowoffset = ((($71)) + 4|0);
 $72 = HEAP32[$rowoffset>>2]|0;
 $73 = HEAP32[99942]|0;
 $add46 = (($73) + ($72))|0;
 HEAP32[99942] = $add46;
 $74 = HEAP32[99989]|0;
 $tobool47 = ($74|0)!=(0|0);
 if ($tobool47) {
  $75 = HEAP32[99989]|0;
  HEAP32[99943] = $75;
 }
 $76 = $x1$addr;
 HEAP32[99940] = $76;
 while(1) {
  $77 = HEAP32[99940]|0;
  $78 = $x2$addr;
  $cmp50 = ($77|0)<=($78|0);
  if (!($cmp50)) {
   break;
  }
  $79 = HEAP32[99999]|0;
  $80 = HEAP32[99940]|0;
  $arrayidx52 = (($79) + ($80<<1)|0);
  $81 = HEAP16[$arrayidx52>>1]|0;
  $conv53 = $81 << 16 >> 16;
  $cmp54 = ($conv53|0)!=(32767);
  if ($cmp54) {
   $82 = HEAP32[99989]|0;
   $tobool57 = ($82|0)!=(0|0);
   if (!($tobool57)) {
    $83 = HEAP32[100055]|0;
    $shr59 = $83 >> 12;
    $index = $shr59;
    $84 = $index;
    $cmp60 = ($84>>>0)>=(48);
    $spec$store$select = $cmp60 ? 47 : $shr59;
    $index = $spec$store$select;
    $85 = HEAP32[99998]|0;
    $86 = $index;
    $arrayidx64 = (($85) + ($86<<2)|0);
    $87 = HEAP32[$arrayidx64>>2]|0;
    HEAP32[99943] = $87;
   }
   $88 = HEAP32[99975]|0;
   $89 = HEAP32[99942]|0;
   $90 = HEAP32[100055]|0;
   $call = (_FixedMul($89,$90)|0);
   $sub66 = (($88) - ($call))|0;
   HEAP32[100054] = $sub66;
   $91 = HEAP32[100055]|0;
   $div = (4294967295 / ($91>>>0))&-1;
   HEAP32[99941] = $div;
   $92 = $texnum;
   $93 = HEAP32[99999]|0;
   $94 = HEAP32[99940]|0;
   $arrayidx67 = (($93) + ($94<<1)|0);
   $95 = HEAP16[$arrayidx67>>1]|0;
   $conv68 = $95 << 16 >> 16;
   $call69 = (_R_GetColumn($92,$conv68)|0);
   $add$ptr = ((($call69)) + -3|0);
   $col = $add$ptr;
   $96 = $col;
   _R_DrawMaskedColumn($96);
   $97 = HEAP32[99999]|0;
   $98 = HEAP32[99940]|0;
   $arrayidx70 = (($97) + ($98<<1)|0);
   HEAP16[$arrayidx70>>1] = 32767;
  }
  $99 = HEAP32[100000]|0;
  $100 = HEAP32[100055]|0;
  $add72 = (($100) + ($99))|0;
  HEAP32[100055] = $add72;
  $101 = HEAP32[99940]|0;
  $inc73 = (($101) + 1)|0;
  HEAP32[99940] = $inc73;
 }
 STACKTOP = sp;return;
}
function _R_RenderSegLoop() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add1 = 0, $add10 = 0, $add124 = 0, $add127 = 0, $add135 = 0, $add144 = 0, $add151 = 0;
 var $add162 = 0, $add163 = 0, $add164 = 0, $add44 = 0, $add55 = 0, $add6 = 0, $add71 = 0, $add93 = 0, $angle = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx112 = 0, $arrayidx119 = 0, $arrayidx12 = 0, $arrayidx128 = 0, $arrayidx133 = 0, $arrayidx142 = 0, $arrayidx146 = 0, $arrayidx153 = 0, $arrayidx159 = 0;
 var $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx33 = 0, $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx45 = 0, $arrayidx48 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx70 = 0, $arrayidx73 = 0, $arrayidx8 = 0, $arrayidx81 = 0, $arrayidx87 = 0, $arrayidx88 = 0, $arrayidx94 = 0, $arrayidx99 = 0, $bottom = 0;
 var $bottom28 = 0, $bottom64 = 0, $call = 0, $call106 = 0, $call140 = 0, $call85 = 0, $cmp = 0, $cmp103 = 0, $cmp130 = 0, $cmp137 = 0, $cmp14 = 0, $cmp2 = 0, $cmp21 = 0, $cmp35 = 0, $cmp50 = 0, $cmp57 = 0, $cmp77 = 0, $cmp96 = 0, $conv = 0, $conv100 = 0;
 var $conv107 = 0, $conv111 = 0, $conv118 = 0, $conv129 = 0, $conv13 = 0, $conv134 = 0, $conv141 = 0, $conv145 = 0, $conv152 = 0, $conv158 = 0, $conv18 = 0, $conv24 = 0, $conv27 = 0, $conv34 = 0, $conv39 = 0, $conv46 = 0, $conv49 = 0, $conv5 = 0, $conv54 = 0, $conv60 = 0;
 var $conv63 = 0, $conv86 = 0, $conv9 = 0, $conv95 = 0, $div = 0, $inc = 0, $index = 0, $mid = 0, $shr = 0, $shr126 = 0, $shr32 = 0, $shr72 = 0, $shr75 = 0, $shr76 = 0, $shr92 = 0, $spec$store$select = 0, $sub = 0, $sub101 = 0, $sub11 = 0, $sub110 = 0;
 var $sub117 = 0, $sub125 = 0, $sub19 = 0, $sub40 = 0, $sub47 = 0, $sub74 = 0, $texturecolumn = 0, $tobool = 0, $tobool115 = 0, $tobool122 = 0, $tobool149 = 0, $tobool156 = 0, $tobool42 = 0, $tobool68 = 0, $tobool83 = 0, $tobool90 = 0, $top = 0, $top25 = 0, $top61 = 0, $yh = 0;
 var $yl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 while(1) {
  $0 = HEAP32[100001]|0;
  $1 = HEAP32[100002]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[100003]|0;
  $add = (($2) + 4096)|0;
  $sub = (($add) - 1)|0;
  $shr = $sub >> 12;
  $yl = $shr;
  $3 = $yl;
  $4 = HEAP32[100001]|0;
  $arrayidx = (249120 + ($4<<1)|0);
  $5 = HEAP16[$arrayidx>>1]|0;
  $conv = $5 << 16 >> 16;
  $add1 = (($conv) + 1)|0;
  $cmp2 = ($3|0)<($add1|0);
  if ($cmp2) {
   $6 = HEAP32[100001]|0;
   $arrayidx4 = (249120 + ($6<<1)|0);
   $7 = HEAP16[$arrayidx4>>1]|0;
   $conv5 = $7 << 16 >> 16;
   $add6 = (($conv5) + 1)|0;
   $yl = $add6;
  }
  $8 = HEAP32[100004]|0;
  $tobool = ($8|0)!=(0);
  if ($tobool) {
   $9 = HEAP32[100001]|0;
   $arrayidx8 = (249120 + ($9<<1)|0);
   $10 = HEAP16[$arrayidx8>>1]|0;
   $conv9 = $10 << 16 >> 16;
   $add10 = (($conv9) + 1)|0;
   $top = $add10;
   $11 = $yl;
   $sub11 = (($11) - 1)|0;
   $bottom = $sub11;
   $12 = $bottom;
   $13 = HEAP32[100001]|0;
   $arrayidx12 = (248480 + ($13<<1)|0);
   $14 = HEAP16[$arrayidx12>>1]|0;
   $conv13 = $14 << 16 >> 16;
   $cmp14 = ($12|0)>=($conv13|0);
   if ($cmp14) {
    $15 = HEAP32[100001]|0;
    $arrayidx17 = (248480 + ($15<<1)|0);
    $16 = HEAP16[$arrayidx17>>1]|0;
    $conv18 = $16 << 16 >> 16;
    $sub19 = (($conv18) - 1)|0;
    $bottom = $sub19;
   }
   $17 = $top;
   $18 = $bottom;
   $cmp21 = ($17|0)<=($18|0);
   if ($cmp21) {
    $19 = $top;
    $conv24 = $19&255;
    $20 = HEAP32[99997]|0;
    $top25 = ((($20)) + 21|0);
    $21 = HEAP32[100001]|0;
    $arrayidx26 = (($top25) + ($21)|0);
    HEAP8[$arrayidx26>>0] = $conv24;
    $22 = $bottom;
    $conv27 = $22&255;
    $23 = HEAP32[99997]|0;
    $bottom28 = ((($23)) + 343|0);
    $24 = HEAP32[100001]|0;
    $arrayidx29 = (($bottom28) + ($24)|0);
    HEAP8[$arrayidx29>>0] = $conv27;
   }
  }
  $25 = HEAP32[100005]|0;
  $shr32 = $25 >> 12;
  $yh = $shr32;
  $26 = $yh;
  $27 = HEAP32[100001]|0;
  $arrayidx33 = (248480 + ($27<<1)|0);
  $28 = HEAP16[$arrayidx33>>1]|0;
  $conv34 = $28 << 16 >> 16;
  $cmp35 = ($26|0)>=($conv34|0);
  if ($cmp35) {
   $29 = HEAP32[100001]|0;
   $arrayidx38 = (248480 + ($29<<1)|0);
   $30 = HEAP16[$arrayidx38>>1]|0;
   $conv39 = $30 << 16 >> 16;
   $sub40 = (($conv39) - 1)|0;
   $yh = $sub40;
  }
  $31 = HEAP32[100006]|0;
  $tobool42 = ($31|0)!=(0);
  if ($tobool42) {
   $32 = $yh;
   $add44 = (($32) + 1)|0;
   $top = $add44;
   $33 = HEAP32[100001]|0;
   $arrayidx45 = (248480 + ($33<<1)|0);
   $34 = HEAP16[$arrayidx45>>1]|0;
   $conv46 = $34 << 16 >> 16;
   $sub47 = (($conv46) - 1)|0;
   $bottom = $sub47;
   $35 = $top;
   $36 = HEAP32[100001]|0;
   $arrayidx48 = (249120 + ($36<<1)|0);
   $37 = HEAP16[$arrayidx48>>1]|0;
   $conv49 = $37 << 16 >> 16;
   $cmp50 = ($35|0)<=($conv49|0);
   if ($cmp50) {
    $38 = HEAP32[100001]|0;
    $arrayidx53 = (249120 + ($38<<1)|0);
    $39 = HEAP16[$arrayidx53>>1]|0;
    $conv54 = $39 << 16 >> 16;
    $add55 = (($conv54) + 1)|0;
    $top = $add55;
   }
   $40 = $top;
   $41 = $bottom;
   $cmp57 = ($40|0)<=($41|0);
   if ($cmp57) {
    $42 = $top;
    $conv60 = $42&255;
    $43 = HEAP32[99996]|0;
    $top61 = ((($43)) + 21|0);
    $44 = HEAP32[100001]|0;
    $arrayidx62 = (($top61) + ($44)|0);
    HEAP8[$arrayidx62>>0] = $conv60;
    $45 = $bottom;
    $conv63 = $45&255;
    $46 = HEAP32[99996]|0;
    $bottom64 = ((($46)) + 343|0);
    $47 = HEAP32[100001]|0;
    $arrayidx65 = (($bottom64) + ($47)|0);
    HEAP8[$arrayidx65>>0] = $conv63;
   }
  }
  $48 = HEAP32[100007]|0;
  $tobool68 = ($48|0)!=(0);
  if ($tobool68) {
   $49 = HEAP32[100008]|0;
   $50 = HEAP32[100001]|0;
   $arrayidx70 = (230448 + ($50<<2)|0);
   $51 = HEAP32[$arrayidx70>>2]|0;
   $add71 = (($49) + ($51))|0;
   $shr72 = $add71 >>> 19;
   $angle = $shr72;
   $52 = HEAP32[100009]|0;
   $53 = $angle;
   $arrayidx73 = (58416 + ($53<<2)|0);
   $54 = HEAP32[$arrayidx73>>2]|0;
   $55 = HEAP32[100010]|0;
   $call = (_FixedMul($54,$55)|0);
   $sub74 = (($52) - ($call))|0;
   $texturecolumn = $sub74;
   $56 = $texturecolumn;
   $shr75 = $56 >> 16;
   $texturecolumn = $shr75;
   $57 = HEAP32[100011]|0;
   $shr76 = $57 >> 12;
   $index = $shr76;
   $58 = $index;
   $cmp77 = ($58>>>0)>=(48);
   $spec$store$select = $cmp77 ? 47 : $shr76;
   $index = $spec$store$select;
   $59 = HEAP32[99998]|0;
   $60 = $index;
   $arrayidx81 = (($59) + ($60<<2)|0);
   $61 = HEAP32[$arrayidx81>>2]|0;
   HEAP32[99943] = $61;
   $62 = HEAP32[100001]|0;
   HEAP32[99940] = $62;
   $63 = HEAP32[100011]|0;
   $div = (4294967295 / ($63>>>0))&-1;
   HEAP32[99941] = $div;
  } else {
   $texturecolumn = 0;
  }
  $64 = HEAP32[100012]|0;
  $tobool83 = ($64|0)!=(0);
  if ($tobool83) {
   $65 = $yl;
   HEAP32[99939] = $65;
   $66 = $yh;
   HEAP32[99938] = $66;
   $67 = HEAP32[100013]|0;
   HEAP32[99942] = $67;
   $68 = HEAP32[100012]|0;
   $69 = $texturecolumn;
   $call85 = (_R_GetColumn($68,$69)|0);
   HEAP32[99944] = $call85;
   $70 = HEAP32[99977]|0;
   FUNCTION_TABLE_v[$70 & 255]();
   $71 = HEAP32[99946]|0;
   $conv86 = $71&65535;
   $72 = HEAP32[100001]|0;
   $arrayidx87 = (249120 + ($72<<1)|0);
   HEAP16[$arrayidx87>>1] = $conv86;
   $73 = HEAP32[100001]|0;
   $arrayidx88 = (248480 + ($73<<1)|0);
   HEAP16[$arrayidx88>>1] = -1;
  } else {
   $74 = HEAP32[100014]|0;
   $tobool90 = ($74|0)!=(0);
   do {
    if ($tobool90) {
     $75 = HEAP32[100015]|0;
     $shr92 = $75 >> 12;
     $mid = $shr92;
     $76 = HEAP32[100016]|0;
     $77 = HEAP32[100015]|0;
     $add93 = (($77) + ($76))|0;
     HEAP32[100015] = $add93;
     $78 = $mid;
     $79 = HEAP32[100001]|0;
     $arrayidx94 = (248480 + ($79<<1)|0);
     $80 = HEAP16[$arrayidx94>>1]|0;
     $conv95 = $80 << 16 >> 16;
     $cmp96 = ($78|0)>=($conv95|0);
     if ($cmp96) {
      $81 = HEAP32[100001]|0;
      $arrayidx99 = (248480 + ($81<<1)|0);
      $82 = HEAP16[$arrayidx99>>1]|0;
      $conv100 = $82 << 16 >> 16;
      $sub101 = (($conv100) - 1)|0;
      $mid = $sub101;
     }
     $83 = $mid;
     $84 = $yl;
     $cmp103 = ($83|0)>=($84|0);
     $85 = $yl;
     if ($cmp103) {
      HEAP32[99939] = $85;
      $86 = $mid;
      HEAP32[99938] = $86;
      $87 = HEAP32[100017]|0;
      HEAP32[99942] = $87;
      $88 = HEAP32[100014]|0;
      $89 = $texturecolumn;
      $call106 = (_R_GetColumn($88,$89)|0);
      HEAP32[99944] = $call106;
      $90 = HEAP32[99977]|0;
      FUNCTION_TABLE_v[$90 & 255]();
      $91 = $mid;
      $conv107 = $91&65535;
      $92 = HEAP32[100001]|0;
      $arrayidx108 = (249120 + ($92<<1)|0);
      HEAP16[$arrayidx108>>1] = $conv107;
      break;
     } else {
      $sub110 = (($85) - 1)|0;
      $conv111 = $sub110&65535;
      $93 = HEAP32[100001]|0;
      $arrayidx112 = (249120 + ($93<<1)|0);
      HEAP16[$arrayidx112>>1] = $conv111;
      break;
     }
    } else {
     $94 = HEAP32[100004]|0;
     $tobool115 = ($94|0)!=(0);
     if ($tobool115) {
      $95 = $yl;
      $sub117 = (($95) - 1)|0;
      $conv118 = $sub117&65535;
      $96 = HEAP32[100001]|0;
      $arrayidx119 = (249120 + ($96<<1)|0);
      HEAP16[$arrayidx119>>1] = $conv118;
     }
    }
   } while(0);
   $97 = HEAP32[100018]|0;
   $tobool122 = ($97|0)!=(0);
   do {
    if ($tobool122) {
     $98 = HEAP32[100019]|0;
     $add124 = (($98) + 4096)|0;
     $sub125 = (($add124) - 1)|0;
     $shr126 = $sub125 >> 12;
     $mid = $shr126;
     $99 = HEAP32[100020]|0;
     $100 = HEAP32[100019]|0;
     $add127 = (($100) + ($99))|0;
     HEAP32[100019] = $add127;
     $101 = $mid;
     $102 = HEAP32[100001]|0;
     $arrayidx128 = (249120 + ($102<<1)|0);
     $103 = HEAP16[$arrayidx128>>1]|0;
     $conv129 = $103 << 16 >> 16;
     $cmp130 = ($101|0)<=($conv129|0);
     if ($cmp130) {
      $104 = HEAP32[100001]|0;
      $arrayidx133 = (249120 + ($104<<1)|0);
      $105 = HEAP16[$arrayidx133>>1]|0;
      $conv134 = $105 << 16 >> 16;
      $add135 = (($conv134) + 1)|0;
      $mid = $add135;
     }
     $106 = $mid;
     $107 = $yh;
     $cmp137 = ($106|0)<=($107|0);
     if ($cmp137) {
      $108 = $mid;
      HEAP32[99939] = $108;
      $109 = $yh;
      HEAP32[99938] = $109;
      $110 = HEAP32[100021]|0;
      HEAP32[99942] = $110;
      $111 = HEAP32[100018]|0;
      $112 = $texturecolumn;
      $call140 = (_R_GetColumn($111,$112)|0);
      HEAP32[99944] = $call140;
      $113 = HEAP32[99977]|0;
      FUNCTION_TABLE_v[$113 & 255]();
      $114 = $mid;
      $conv141 = $114&65535;
      $115 = HEAP32[100001]|0;
      $arrayidx142 = (248480 + ($115<<1)|0);
      HEAP16[$arrayidx142>>1] = $conv141;
      break;
     } else {
      $116 = $yh;
      $add144 = (($116) + 1)|0;
      $conv145 = $add144&65535;
      $117 = HEAP32[100001]|0;
      $arrayidx146 = (248480 + ($117<<1)|0);
      HEAP16[$arrayidx146>>1] = $conv145;
      break;
     }
    } else {
     $118 = HEAP32[100006]|0;
     $tobool149 = ($118|0)!=(0);
     if ($tobool149) {
      $119 = $yh;
      $add151 = (($119) + 1)|0;
      $conv152 = $add151&65535;
      $120 = HEAP32[100001]|0;
      $arrayidx153 = (248480 + ($120<<1)|0);
      HEAP16[$arrayidx153>>1] = $conv152;
     }
    }
   } while(0);
   $121 = HEAP32[100022]|0;
   $tobool156 = ($121|0)!=(0);
   if ($tobool156) {
    $122 = $texturecolumn;
    $conv158 = $122&65535;
    $123 = HEAP32[99999]|0;
    $124 = HEAP32[100001]|0;
    $arrayidx159 = (($123) + ($124<<1)|0);
    HEAP16[$arrayidx159>>1] = $conv158;
   }
  }
  $125 = HEAP32[100000]|0;
  $126 = HEAP32[100011]|0;
  $add162 = (($126) + ($125))|0;
  HEAP32[100011] = $add162;
  $127 = HEAP32[100023]|0;
  $128 = HEAP32[100003]|0;
  $add163 = (($128) + ($127))|0;
  HEAP32[100003] = $add163;
  $129 = HEAP32[100024]|0;
  $130 = HEAP32[100005]|0;
  $add164 = (($130) + ($129))|0;
  HEAP32[100005] = $add164;
  $131 = HEAP32[100001]|0;
  $inc = (($131) + 1)|0;
  HEAP32[100001] = $inc;
 }
 STACKTOP = sp;return;
}
function _R_StoreWallRange($start,$stop) {
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr208 = 0, $add$ptr343 = 0, $add$ptr346 = 0, $add$ptr349 = 0, $add$ptr360 = 0, $add$ptr364 = 0, $add$ptr367 = 0, $add14 = 0;
 var $add16 = 0, $add182 = 0, $add200 = 0, $add202 = 0, $add22 = 0, $add235 = 0, $add236 = 0, $add237 = 0, $add244 = 0, $add42 = 0, $add46 = 0, $and = 0, $and174 = 0, $and193 = 0, $and335 = 0, $and352 = 0, $and372 = 0, $and382 = 0, $angle = 0, $arrayidx = 0;
 var $arrayidx15 = 0, $arrayidx171 = 0, $arrayidx181 = 0, $arrayidx190 = 0, $arrayidx21 = 0, $arrayidx227 = 0, $arrayidx269 = 0, $arrayidx33 = 0, $arrayidx41 = 0, $bottomtexture = 0, $bsilheight = 0, $bsilheight387 = 0, $bsilheight58 = 0, $bsilheight65 = 0, $bsilheight93 = 0, $call = 0, $call12 = 0, $call13 = 0, $call17 = 0, $call228 = 0;
 var $call23 = 0, $call291 = 0, $call294 = 0, $call296 = 0, $call299 = 0, $call309 = 0, $call311 = 0, $call318 = 0, $call320 = 0, $call327 = 0, $call332 = 0, $ceilingheight = 0, $ceilingheight107 = 0, $ceilingheight156 = 0, $ceilingheight162 = 0, $ceilingheight178 = 0, $ceilingheight279 = 0, $ceilingheight68 = 0, $ceilingheight69 = 0, $ceilingheight75 = 0;
 var $ceilingheight78 = 0, $ceilingheight87 = 0, $ceilingheight98 = 0, $ceilingpic = 0, $ceilingpic114 = 0, $ceilingpic140 = 0, $ceilingpic142 = 0, $ceilingpic283 = 0, $cmp = 0, $cmp1 = 0, $cmp112 = 0, $cmp116 = 0, $cmp120 = 0, $cmp126 = 0, $cmp132 = 0, $cmp137 = 0, $cmp144 = 0, $cmp151 = 0, $cmp158 = 0, $cmp163 = 0;
 var $cmp167 = 0, $cmp18 = 0, $cmp186 = 0, $cmp2 = 0, $cmp217 = 0, $cmp222 = 0, $cmp230 = 0, $cmp248 = 0, $cmp256 = 0, $cmp261 = 0, $cmp265 = 0, $cmp275 = 0, $cmp280 = 0, $cmp285 = 0, $cmp305 = 0, $cmp314 = 0, $cmp53 = 0, $cmp6 = 0, $cmp61 = 0, $cmp70 = 0;
 var $cmp79 = 0, $cmp89 = 0, $cmp99 = 0, $conv = 0, $conv111 = 0, $conv115 = 0, $conv123 = 0, $conv125 = 0, $conv129 = 0, $conv131 = 0, $conv141 = 0, $conv143 = 0, $conv148 = 0, $conv150 = 0, $conv173 = 0, $conv192 = 0, $conv242 = 0, $conv284 = 0, $conv35 = 0, $conv5 = 0;
 var $dec = 0, $distangle = 0, $div = 0, $flags = 0, $flags172 = 0, $flags191 = 0, $flags34 = 0, $floorpic = 0, $floorpic124 = 0, $hyp = 0, $idx$neg = 0, $idx$neg345 = 0, $idx$neg363 = 0, $idxprom = 0, $idxprom170 = 0, $idxprom180 = 0, $idxprom189 = 0, $idxprom40 = 0, $inc = 0, $incdec$ptr = 0;
 var $lightlevel = 0, $lightlevel130 = 0, $lightlevel147 = 0, $lightlevel149 = 0, $lightlevel241 = 0, $lightnum = 0, $linedef = 0, $maskedtexturecol = 0, $maskedtexturecol206 = 0, $midtexture = 0, $midtexture203 = 0, $midtexture39 = 0, $mul = 0, $mul362 = 0, $offset = 0, $offsetangle = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or105 = 0;
 var $or211 = 0, $or212 = 0, $or213 = 0, $or376 = 0, $or386 = 0, $or74 = 0, $or83 = 0, $or95 = 0, $rowoffset = 0, $rowoffset199 = 0, $rowoffset201 = 0, $scale1 = 0, $scale127 = 0, $scale2 = 0, $scale224 = 0, $scale228 = 0, $scalestep = 0, $shr = 0, $shr226 = 0, $shr243 = 0;
 var $shr289 = 0, $shr290 = 0, $shr293 = 0, $shr298 = 0, $shr303 = 0, $shr304 = 0, $shr308 = 0, $shr317 = 0, $sidedef = 0, $silhouette = 0, $silhouette104 = 0, $silhouette334 = 0, $silhouette351 = 0, $silhouette371 = 0, $silhouette375 = 0, $silhouette381 = 0, $silhouette385 = 0, $silhouette50 = 0, $silhouette56 = 0, $silhouette64 = 0;
 var $silhouette73 = 0, $silhouette82 = 0, $silhouette94 = 0, $sineval = 0, $spec$store$select = 0, $sprbottomclip = 0, $sprbottomclip357 = 0, $sprbottomclip365 = 0, $sprbottomclip48 = 0, $sprbottomclip92 = 0, $sprtopclip = 0, $sprtopclip102 = 0, $sprtopclip340 = 0, $sprtopclip347 = 0, $sprtopclip49 = 0, $start$addr = 0, $stop$addr = 0, $sub = 0, $sub10 = 0, $sub108 = 0;
 var $sub110 = 0, $sub183 = 0, $sub207 = 0, $sub216 = 0, $sub220 = 0, $sub229 = 0, $sub233 = 0, $sub238 = 0, $sub25 = 0, $sub26 = 0, $sub292 = 0, $sub295 = 0, $sub297 = 0, $sub30 = 0, $sub300 = 0, $sub31 = 0, $sub310 = 0, $sub312 = 0, $sub319 = 0, $sub321 = 0;
 var $sub326 = 0, $sub331 = 0, $sub344 = 0, $sub348 = 0, $sub361 = 0, $sub366 = 0, $sub43 = 0, $tobool = 0, $tobool175 = 0, $tobool194 = 0, $tobool204 = 0, $tobool214 = 0, $tobool239 = 0, $tobool301 = 0, $tobool324 = 0, $tobool329 = 0, $tobool336 = 0, $tobool338 = 0, $tobool341 = 0, $tobool353 = 0;
 var $tobool355 = 0, $tobool358 = 0, $tobool36 = 0, $tobool369 = 0, $tobool373 = 0, $tobool379 = 0, $tobool383 = 0, $toptexture = 0, $toptexture179 = 0, $tsilheight = 0, $tsilheight103 = 0, $tsilheight377 = 0, $tsilheight76 = 0, $tsilheight84 = 0, $v2 = 0, $v2254 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vtop = 0, $x1 = 0;
 var $x2 = 0, $y = 0, $y246 = 0, $y247 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $start$addr = $start;
 $stop$addr = $stop;
 $0 = HEAP32[99907]|0;
 $1 = 206000;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $2 = $start$addr;
 $3 = HEAP32[99961]|0;
 $cmp1 = ($2|0)>=($3|0);
 if ($cmp1) {
  label = 4;
 } else {
  $4 = $start$addr;
  $5 = $stop$addr;
  $cmp2 = ($4|0)>($5|0);
  if ($cmp2) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $6 = $start$addr;
  $7 = $stop$addr;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  _I_Error(156282,$vararg_buffer);
 }
 $8 = HEAP32[99909]|0;
 $sidedef = ((($8)) + 16|0);
 $9 = HEAP32[$sidedef>>2]|0;
 HEAP32[99912] = $9;
 $10 = HEAP32[99909]|0;
 $linedef = ((($10)) + 20|0);
 $11 = HEAP32[$linedef>>2]|0;
 HEAP32[99913] = $11;
 $12 = HEAP32[99913]|0;
 $flags = ((($12)) + 16|0);
 $13 = HEAP16[$flags>>1]|0;
 $conv = $13 << 16 >> 16;
 $or = $conv | 256;
 $conv5 = $or&65535;
 HEAP16[$flags>>1] = $conv5;
 $14 = HEAP32[99909]|0;
 $angle = ((($14)) + 12|0);
 $15 = HEAP32[$angle>>2]|0;
 $add = (($15) + 1073741824)|0;
 HEAP32[100025] = $add;
 $16 = HEAP32[100025]|0;
 $17 = HEAP32[100026]|0;
 $sub = (($16) - ($17))|0;
 $call = (Math_abs(($sub|0))|0);
 $offsetangle = $call;
 $18 = $offsetangle;
 $cmp6 = ($18>>>0)>(1073741824);
 $spec$store$select = $cmp6 ? 1073741824 : $call;
 $offsetangle = $spec$store$select;
 $19 = $offsetangle;
 $sub10 = (1073741824 - ($19))|0;
 $distangle = $sub10;
 $20 = HEAP32[99909]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[99909]|0;
 $24 = HEAP32[$23>>2]|0;
 $y = ((($24)) + 4|0);
 $25 = HEAP32[$y>>2]|0;
 $call12 = (_R_PointToDist($22,$25)|0);
 $hyp = $call12;
 $26 = $distangle;
 $shr = $26 >>> 19;
 $arrayidx = (74800 + ($shr<<2)|0);
 $27 = HEAP32[$arrayidx>>2]|0;
 $sineval = $27;
 $28 = $hyp;
 $29 = $sineval;
 $call13 = (_FixedMul($28,$29)|0);
 HEAP32[100010] = $call13;
 $30 = $start$addr;
 HEAP32[100001] = $30;
 $31 = HEAP32[99907]|0;
 $x1 = ((($31)) + 4|0);
 HEAP32[$x1>>2] = $30;
 $32 = $stop$addr;
 $33 = HEAP32[99907]|0;
 $x2 = ((($33)) + 8|0);
 HEAP32[$x2>>2] = $32;
 $34 = HEAP32[99909]|0;
 $35 = HEAP32[99907]|0;
 HEAP32[$35>>2] = $34;
 $36 = $stop$addr;
 $add14 = (($36) + 1)|0;
 HEAP32[100002] = $add14;
 $37 = HEAP32[99965]|0;
 $38 = $start$addr;
 $arrayidx15 = (230448 + ($38<<2)|0);
 $39 = HEAP32[$arrayidx15>>2]|0;
 $add16 = (($37) + ($39))|0;
 $call17 = (_R_ScaleFromGlobalAngle($add16)|0);
 HEAP32[100011] = $call17;
 $40 = HEAP32[99907]|0;
 $scale1 = ((($40)) + 12|0);
 HEAP32[$scale1>>2] = $call17;
 $41 = $stop$addr;
 $42 = $start$addr;
 $cmp18 = ($41|0)>($42|0);
 if ($cmp18) {
  $43 = HEAP32[99965]|0;
  $44 = $stop$addr;
  $arrayidx21 = (230448 + ($44<<2)|0);
  $45 = HEAP32[$arrayidx21>>2]|0;
  $add22 = (($43) + ($45))|0;
  $call23 = (_R_ScaleFromGlobalAngle($add22)|0);
  $46 = HEAP32[99907]|0;
  $scale2 = ((($46)) + 16|0);
  HEAP32[$scale2>>2] = $call23;
  $47 = HEAP32[99907]|0;
  $scale224 = ((($47)) + 16|0);
  $48 = HEAP32[$scale224>>2]|0;
  $49 = HEAP32[100011]|0;
  $sub25 = (($48) - ($49))|0;
  $50 = $stop$addr;
  $51 = $start$addr;
  $sub26 = (($50) - ($51))|0;
  $div = (($sub25|0) / ($sub26|0))&-1;
  HEAP32[100000] = $div;
  $52 = HEAP32[99907]|0;
  $scalestep = ((($52)) + 20|0);
  HEAP32[$scalestep>>2] = $div;
 } else {
  $53 = HEAP32[99907]|0;
  $scale127 = ((($53)) + 12|0);
  $54 = HEAP32[$scale127>>2]|0;
  $55 = HEAP32[99907]|0;
  $scale228 = ((($55)) + 16|0);
  HEAP32[$scale228>>2] = $54;
 }
 $56 = HEAP32[99911]|0;
 $ceilingheight = ((($56)) + 4|0);
 $57 = HEAP32[$ceilingheight>>2]|0;
 $58 = HEAP32[99985]|0;
 $sub30 = (($57) - ($58))|0;
 HEAP32[100027] = $sub30;
 $59 = HEAP32[99911]|0;
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[99985]|0;
 $sub31 = (($60) - ($61))|0;
 HEAP32[100028] = $sub31;
 HEAP32[100022] = 0;
 HEAP32[100018] = 0;
 HEAP32[100014] = 0;
 HEAP32[100012] = 0;
 $62 = HEAP32[99907]|0;
 $maskedtexturecol = ((($62)) + 44|0);
 HEAP32[$maskedtexturecol>>2] = 0;
 $63 = HEAP32[99910]|0;
 $tobool = ($63|0)!=(0|0);
 if ($tobool) {
  $87 = HEAP32[99907]|0;
  $sprbottomclip48 = ((($87)) + 40|0);
  HEAP32[$sprbottomclip48>>2] = 0;
  $88 = HEAP32[99907]|0;
  $sprtopclip49 = ((($88)) + 36|0);
  HEAP32[$sprtopclip49>>2] = 0;
  $89 = HEAP32[99907]|0;
  $silhouette50 = ((($89)) + 24|0);
  HEAP32[$silhouette50>>2] = 0;
  $90 = HEAP32[99911]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[99910]|0;
  $93 = HEAP32[$92>>2]|0;
  $cmp53 = ($91|0)>($93|0);
  if ($cmp53) {
   $94 = HEAP32[99907]|0;
   $silhouette56 = ((($94)) + 24|0);
   HEAP32[$silhouette56>>2] = 1;
   $95 = HEAP32[99911]|0;
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[99907]|0;
   $bsilheight58 = ((($97)) + 28|0);
   HEAP32[$bsilheight58>>2] = $96;
  } else {
   $98 = HEAP32[99910]|0;
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[99985]|0;
   $cmp61 = ($99|0)>($100|0);
   if ($cmp61) {
    $101 = HEAP32[99907]|0;
    $silhouette64 = ((($101)) + 24|0);
    HEAP32[$silhouette64>>2] = 1;
    $102 = HEAP32[99907]|0;
    $bsilheight65 = ((($102)) + 28|0);
    HEAP32[$bsilheight65>>2] = 2147483647;
   }
  }
  $103 = HEAP32[99911]|0;
  $ceilingheight68 = ((($103)) + 4|0);
  $104 = HEAP32[$ceilingheight68>>2]|0;
  $105 = HEAP32[99910]|0;
  $ceilingheight69 = ((($105)) + 4|0);
  $106 = HEAP32[$ceilingheight69>>2]|0;
  $cmp70 = ($104|0)<($106|0);
  if ($cmp70) {
   $107 = HEAP32[99907]|0;
   $silhouette73 = ((($107)) + 24|0);
   $108 = HEAP32[$silhouette73>>2]|0;
   $or74 = $108 | 2;
   HEAP32[$silhouette73>>2] = $or74;
   $109 = HEAP32[99911]|0;
   $ceilingheight75 = ((($109)) + 4|0);
   $110 = HEAP32[$ceilingheight75>>2]|0;
   $111 = HEAP32[99907]|0;
   $tsilheight76 = ((($111)) + 32|0);
   HEAP32[$tsilheight76>>2] = $110;
  } else {
   $112 = HEAP32[99910]|0;
   $ceilingheight78 = ((($112)) + 4|0);
   $113 = HEAP32[$ceilingheight78>>2]|0;
   $114 = HEAP32[99985]|0;
   $cmp79 = ($113|0)<($114|0);
   if ($cmp79) {
    $115 = HEAP32[99907]|0;
    $silhouette82 = ((($115)) + 24|0);
    $116 = HEAP32[$silhouette82>>2]|0;
    $or83 = $116 | 2;
    HEAP32[$silhouette82>>2] = $or83;
    $117 = HEAP32[99907]|0;
    $tsilheight84 = ((($117)) + 32|0);
    HEAP32[$tsilheight84>>2] = -2147483648;
   }
  }
  $118 = HEAP32[99910]|0;
  $ceilingheight87 = ((($118)) + 4|0);
  $119 = HEAP32[$ceilingheight87>>2]|0;
  $120 = HEAP32[99911]|0;
  $121 = HEAP32[$120>>2]|0;
  $cmp89 = ($119|0)<=($121|0);
  if ($cmp89) {
   $122 = HEAP32[99907]|0;
   $sprbottomclip92 = ((($122)) + 40|0);
   HEAP32[$sprbottomclip92>>2] = 377328;
   $123 = HEAP32[99907]|0;
   $bsilheight93 = ((($123)) + 28|0);
   HEAP32[$bsilheight93>>2] = 2147483647;
   $124 = HEAP32[99907]|0;
   $silhouette94 = ((($124)) + 24|0);
   $125 = HEAP32[$silhouette94>>2]|0;
   $or95 = $125 | 1;
   HEAP32[$silhouette94>>2] = $or95;
  }
  $126 = HEAP32[99910]|0;
  $127 = HEAP32[$126>>2]|0;
  $128 = HEAP32[99911]|0;
  $ceilingheight98 = ((($128)) + 4|0);
  $129 = HEAP32[$ceilingheight98>>2]|0;
  $cmp99 = ($127|0)>=($129|0);
  if ($cmp99) {
   $130 = HEAP32[99907]|0;
   $sprtopclip102 = ((($130)) + 36|0);
   HEAP32[$sprtopclip102>>2] = 385648;
   $131 = HEAP32[99907]|0;
   $tsilheight103 = ((($131)) + 32|0);
   HEAP32[$tsilheight103>>2] = -2147483648;
   $132 = HEAP32[99907]|0;
   $silhouette104 = ((($132)) + 24|0);
   $133 = HEAP32[$silhouette104>>2]|0;
   $or105 = $133 | 2;
   HEAP32[$silhouette104>>2] = $or105;
  }
  $134 = HEAP32[99910]|0;
  $ceilingheight107 = ((($134)) + 4|0);
  $135 = HEAP32[$ceilingheight107>>2]|0;
  $136 = HEAP32[99985]|0;
  $sub108 = (($135) - ($136))|0;
  HEAP32[100029] = $sub108;
  $137 = HEAP32[99910]|0;
  $138 = HEAP32[$137>>2]|0;
  $139 = HEAP32[99985]|0;
  $sub110 = (($138) - ($139))|0;
  HEAP32[100030] = $sub110;
  $140 = HEAP32[99911]|0;
  $ceilingpic = ((($140)) + 10|0);
  $141 = HEAP16[$ceilingpic>>1]|0;
  $conv111 = $141 << 16 >> 16;
  $142 = HEAP32[100032]|0;
  $cmp112 = ($conv111|0)==($142|0);
  if ($cmp112) {
   $143 = HEAP32[99910]|0;
   $ceilingpic114 = ((($143)) + 10|0);
   $144 = HEAP16[$ceilingpic114>>1]|0;
   $conv115 = $144 << 16 >> 16;
   $145 = HEAP32[100032]|0;
   $cmp116 = ($conv115|0)==($145|0);
   if ($cmp116) {
    $146 = HEAP32[100029]|0;
    HEAP32[100027] = $146;
   }
  }
  $147 = HEAP32[100030]|0;
  $148 = HEAP32[100028]|0;
  $cmp120 = ($147|0)!=($148|0);
  if ($cmp120) {
   label = 31;
  } else {
   $149 = HEAP32[99910]|0;
   $floorpic = ((($149)) + 8|0);
   $150 = HEAP16[$floorpic>>1]|0;
   $conv123 = $150 << 16 >> 16;
   $151 = HEAP32[99911]|0;
   $floorpic124 = ((($151)) + 8|0);
   $152 = HEAP16[$floorpic124>>1]|0;
   $conv125 = $152 << 16 >> 16;
   $cmp126 = ($conv123|0)!=($conv125|0);
   if ($cmp126) {
    label = 31;
   } else {
    $153 = HEAP32[99910]|0;
    $lightlevel = ((($153)) + 12|0);
    $154 = HEAP16[$lightlevel>>1]|0;
    $conv129 = $154 << 16 >> 16;
    $155 = HEAP32[99911]|0;
    $lightlevel130 = ((($155)) + 12|0);
    $156 = HEAP16[$lightlevel130>>1]|0;
    $conv131 = $156 << 16 >> 16;
    $cmp132 = ($conv129|0)!=($conv131|0);
    if ($cmp132) {
     label = 31;
    } else {
     HEAP32[100006] = 0;
    }
   }
  }
  if ((label|0) == 31) {
   HEAP32[100006] = 1;
  }
  $157 = HEAP32[100029]|0;
  $158 = HEAP32[100027]|0;
  $cmp137 = ($157|0)!=($158|0);
  if ($cmp137) {
   label = 36;
  } else {
   $159 = HEAP32[99910]|0;
   $ceilingpic140 = ((($159)) + 10|0);
   $160 = HEAP16[$ceilingpic140>>1]|0;
   $conv141 = $160 << 16 >> 16;
   $161 = HEAP32[99911]|0;
   $ceilingpic142 = ((($161)) + 10|0);
   $162 = HEAP16[$ceilingpic142>>1]|0;
   $conv143 = $162 << 16 >> 16;
   $cmp144 = ($conv141|0)!=($conv143|0);
   if ($cmp144) {
    label = 36;
   } else {
    $163 = HEAP32[99910]|0;
    $lightlevel147 = ((($163)) + 12|0);
    $164 = HEAP16[$lightlevel147>>1]|0;
    $conv148 = $164 << 16 >> 16;
    $165 = HEAP32[99911]|0;
    $lightlevel149 = ((($165)) + 12|0);
    $166 = HEAP16[$lightlevel149>>1]|0;
    $conv150 = $166 << 16 >> 16;
    $cmp151 = ($conv148|0)!=($conv150|0);
    if ($cmp151) {
     label = 36;
    } else {
     HEAP32[100004] = 0;
    }
   }
  }
  if ((label|0) == 36) {
   HEAP32[100004] = 1;
  }
  $167 = HEAP32[99910]|0;
  $ceilingheight156 = ((($167)) + 4|0);
  $168 = HEAP32[$ceilingheight156>>2]|0;
  $169 = HEAP32[99911]|0;
  $170 = HEAP32[$169>>2]|0;
  $cmp158 = ($168|0)<=($170|0);
  if ($cmp158) {
   label = 40;
  } else {
   $171 = HEAP32[99910]|0;
   $172 = HEAP32[$171>>2]|0;
   $173 = HEAP32[99911]|0;
   $ceilingheight162 = ((($173)) + 4|0);
   $174 = HEAP32[$ceilingheight162>>2]|0;
   $cmp163 = ($172|0)>=($174|0);
   if ($cmp163) {
    label = 40;
   }
  }
  if ((label|0) == 40) {
   HEAP32[100006] = 1;
   HEAP32[100004] = 1;
  }
  $175 = HEAP32[100029]|0;
  $176 = HEAP32[100027]|0;
  $cmp167 = ($175|0)<($176|0);
  do {
   if ($cmp167) {
    $177 = HEAP32[99922]|0;
    $178 = HEAP32[99912]|0;
    $toptexture = ((($178)) + 8|0);
    $179 = HEAP16[$toptexture>>1]|0;
    $idxprom170 = $179 << 16 >> 16;
    $arrayidx171 = (($177) + ($idxprom170<<2)|0);
    $180 = HEAP32[$arrayidx171>>2]|0;
    HEAP32[100014] = $180;
    $181 = HEAP32[99913]|0;
    $flags172 = ((($181)) + 16|0);
    $182 = HEAP16[$flags172>>1]|0;
    $conv173 = $182 << 16 >> 16;
    $and174 = $conv173 & 8;
    $tobool175 = ($and174|0)!=(0);
    if ($tobool175) {
     $183 = HEAP32[100027]|0;
     HEAP32[100017] = $183;
     break;
    } else {
     $184 = HEAP32[99910]|0;
     $ceilingheight178 = ((($184)) + 4|0);
     $185 = HEAP32[$ceilingheight178>>2]|0;
     $186 = HEAP32[99921]|0;
     $187 = HEAP32[99912]|0;
     $toptexture179 = ((($187)) + 8|0);
     $188 = HEAP16[$toptexture179>>1]|0;
     $idxprom180 = $188 << 16 >> 16;
     $arrayidx181 = (($186) + ($idxprom180<<2)|0);
     $189 = HEAP32[$arrayidx181>>2]|0;
     $add182 = (($185) + ($189))|0;
     $vtop = $add182;
     $190 = $vtop;
     $191 = HEAP32[99985]|0;
     $sub183 = (($190) - ($191))|0;
     HEAP32[100017] = $sub183;
     break;
    }
   }
  } while(0);
  $192 = HEAP32[100030]|0;
  $193 = HEAP32[100028]|0;
  $cmp186 = ($192|0)>($193|0);
  do {
   if ($cmp186) {
    $194 = HEAP32[99922]|0;
    $195 = HEAP32[99912]|0;
    $bottomtexture = ((($195)) + 10|0);
    $196 = HEAP16[$bottomtexture>>1]|0;
    $idxprom189 = $196 << 16 >> 16;
    $arrayidx190 = (($194) + ($idxprom189<<2)|0);
    $197 = HEAP32[$arrayidx190>>2]|0;
    HEAP32[100018] = $197;
    $198 = HEAP32[99913]|0;
    $flags191 = ((($198)) + 16|0);
    $199 = HEAP16[$flags191>>1]|0;
    $conv192 = $199 << 16 >> 16;
    $and193 = $conv192 & 16;
    $tobool194 = ($and193|0)!=(0);
    if ($tobool194) {
     $200 = HEAP32[100027]|0;
     HEAP32[100021] = $200;
     break;
    } else {
     $201 = HEAP32[100030]|0;
     HEAP32[100021] = $201;
     break;
    }
   }
  } while(0);
  $202 = HEAP32[99912]|0;
  $rowoffset199 = ((($202)) + 4|0);
  $203 = HEAP32[$rowoffset199>>2]|0;
  $204 = HEAP32[100017]|0;
  $add200 = (($204) + ($203))|0;
  HEAP32[100017] = $add200;
  $205 = HEAP32[99912]|0;
  $rowoffset201 = ((($205)) + 4|0);
  $206 = HEAP32[$rowoffset201>>2]|0;
  $207 = HEAP32[100021]|0;
  $add202 = (($207) + ($206))|0;
  HEAP32[100021] = $add202;
  $208 = HEAP32[99912]|0;
  $midtexture203 = ((($208)) + 12|0);
  $209 = HEAP16[$midtexture203>>1]|0;
  $tobool204 = ($209<<16>>16)!=(0);
  if ($tobool204) {
   HEAP32[100022] = 1;
   $210 = HEAP32[99995]|0;
   $211 = HEAP32[100001]|0;
   $idx$neg = (0 - ($211))|0;
   $add$ptr = (($210) + ($idx$neg<<1)|0);
   HEAP32[99999] = $add$ptr;
   $212 = HEAP32[99907]|0;
   $maskedtexturecol206 = ((($212)) + 44|0);
   HEAP32[$maskedtexturecol206>>2] = $add$ptr;
   $213 = HEAP32[100002]|0;
   $214 = HEAP32[100001]|0;
   $sub207 = (($213) - ($214))|0;
   $215 = HEAP32[99995]|0;
   $add$ptr208 = (($215) + ($sub207<<1)|0);
   HEAP32[99995] = $add$ptr208;
  }
 } else {
  $64 = HEAP32[99922]|0;
  $65 = HEAP32[99912]|0;
  $midtexture = ((($65)) + 12|0);
  $66 = HEAP16[$midtexture>>1]|0;
  $idxprom = $66 << 16 >> 16;
  $arrayidx33 = (($64) + ($idxprom<<2)|0);
  $67 = HEAP32[$arrayidx33>>2]|0;
  HEAP32[100012] = $67;
  HEAP32[100004] = 1;
  HEAP32[100006] = 1;
  $68 = HEAP32[99913]|0;
  $flags34 = ((($68)) + 16|0);
  $69 = HEAP16[$flags34>>1]|0;
  $conv35 = $69 << 16 >> 16;
  $and = $conv35 & 16;
  $tobool36 = ($and|0)!=(0);
  if ($tobool36) {
   $70 = HEAP32[99911]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[99921]|0;
   $73 = HEAP32[99912]|0;
   $midtexture39 = ((($73)) + 12|0);
   $74 = HEAP16[$midtexture39>>1]|0;
   $idxprom40 = $74 << 16 >> 16;
   $arrayidx41 = (($72) + ($idxprom40<<2)|0);
   $75 = HEAP32[$arrayidx41>>2]|0;
   $add42 = (($71) + ($75))|0;
   $vtop = $add42;
   $76 = $vtop;
   $77 = HEAP32[99985]|0;
   $sub43 = (($76) - ($77))|0;
   HEAP32[100013] = $sub43;
  } else {
   $78 = HEAP32[100027]|0;
   HEAP32[100013] = $78;
  }
  $79 = HEAP32[99912]|0;
  $rowoffset = ((($79)) + 4|0);
  $80 = HEAP32[$rowoffset>>2]|0;
  $81 = HEAP32[100013]|0;
  $add46 = (($81) + ($80))|0;
  HEAP32[100013] = $add46;
  $82 = HEAP32[99907]|0;
  $silhouette = ((($82)) + 24|0);
  HEAP32[$silhouette>>2] = 3;
  $83 = HEAP32[99907]|0;
  $sprtopclip = ((($83)) + 36|0);
  HEAP32[$sprtopclip>>2] = 385648;
  $84 = HEAP32[99907]|0;
  $sprbottomclip = ((($84)) + 40|0);
  HEAP32[$sprbottomclip>>2] = 377328;
  $85 = HEAP32[99907]|0;
  $bsilheight = ((($85)) + 28|0);
  HEAP32[$bsilheight>>2] = 2147483647;
  $86 = HEAP32[99907]|0;
  $tsilheight = ((($86)) + 32|0);
  HEAP32[$tsilheight>>2] = -2147483648;
 }
 $216 = HEAP32[100012]|0;
 $217 = HEAP32[100014]|0;
 $or211 = $216 | $217;
 $218 = HEAP32[100018]|0;
 $or212 = $or211 | $218;
 $219 = HEAP32[100022]|0;
 $or213 = $or212 | $219;
 HEAP32[100007] = $or213;
 $220 = HEAP32[100007]|0;
 $tobool214 = ($220|0)!=(0);
 do {
  if ($tobool214) {
   $221 = HEAP32[100025]|0;
   $222 = HEAP32[100026]|0;
   $sub216 = (($221) - ($222))|0;
   $offsetangle = $sub216;
   $223 = $offsetangle;
   $cmp217 = ($223>>>0)>(2147483648);
   if ($cmp217) {
    $224 = $offsetangle;
    $sub220 = (0 - ($224))|0;
    $offsetangle = $sub220;
   }
   $225 = $offsetangle;
   $cmp222 = ($225>>>0)>(1073741824);
   if ($cmp222) {
    $offsetangle = 1073741824;
   }
   $226 = $offsetangle;
   $shr226 = $226 >>> 19;
   $arrayidx227 = (74800 + ($shr226<<2)|0);
   $227 = HEAP32[$arrayidx227>>2]|0;
   $sineval = $227;
   $228 = $hyp;
   $229 = $sineval;
   $call228 = (_FixedMul($228,$229)|0);
   HEAP32[100009] = $call228;
   $230 = HEAP32[100025]|0;
   $231 = HEAP32[100026]|0;
   $sub229 = (($230) - ($231))|0;
   $cmp230 = ($sub229>>>0)<(2147483648);
   if ($cmp230) {
    $232 = HEAP32[100009]|0;
    $sub233 = (0 - ($232))|0;
    HEAP32[100009] = $sub233;
   }
   $233 = HEAP32[99912]|0;
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[99909]|0;
   $offset = ((($235)) + 8|0);
   $236 = HEAP32[$offset>>2]|0;
   $add235 = (($234) + ($236))|0;
   $237 = HEAP32[100009]|0;
   $add236 = (($237) + ($add235))|0;
   HEAP32[100009] = $add236;
   $238 = HEAP32[99965]|0;
   $add237 = (1073741824 + ($238))|0;
   $239 = HEAP32[100025]|0;
   $sub238 = (($add237) - ($239))|0;
   HEAP32[100008] = $sub238;
   $240 = HEAP32[99989]|0;
   $tobool239 = ($240|0)!=(0|0);
   if (!($tobool239)) {
    $241 = HEAP32[99911]|0;
    $lightlevel241 = ((($241)) + 12|0);
    $242 = HEAP16[$lightlevel241>>1]|0;
    $conv242 = $242 << 16 >> 16;
    $shr243 = $conv242 >> 4;
    $243 = HEAP32[99984]|0;
    $add244 = (($shr243) + ($243))|0;
    $lightnum = $add244;
    $244 = HEAP32[99909]|0;
    $245 = HEAP32[$244>>2]|0;
    $y246 = ((($245)) + 4|0);
    $246 = HEAP32[$y246>>2]|0;
    $247 = HEAP32[99909]|0;
    $v2 = ((($247)) + 4|0);
    $248 = HEAP32[$v2>>2]|0;
    $y247 = ((($248)) + 4|0);
    $249 = HEAP32[$y247>>2]|0;
    $cmp248 = ($246|0)==($249|0);
    if ($cmp248) {
     $250 = $lightnum;
     $dec = (($250) + -1)|0;
     $lightnum = $dec;
    } else {
     $251 = HEAP32[99909]|0;
     $252 = HEAP32[$251>>2]|0;
     $253 = HEAP32[$252>>2]|0;
     $254 = HEAP32[99909]|0;
     $v2254 = ((($254)) + 4|0);
     $255 = HEAP32[$v2254>>2]|0;
     $256 = HEAP32[$255>>2]|0;
     $cmp256 = ($253|0)==($256|0);
     if ($cmp256) {
      $257 = $lightnum;
      $inc = (($257) + 1)|0;
      $lightnum = $inc;
     }
    }
    $258 = $lightnum;
    $cmp261 = ($258|0)<(0);
    if ($cmp261) {
     HEAP32[99998] = 239936;
     break;
    }
    $259 = $lightnum;
    $cmp265 = ($259|0)>=(16);
    if ($cmp265) {
     HEAP32[99998] = (242816);
     break;
    } else {
     $260 = $lightnum;
     $arrayidx269 = (239936 + (($260*192)|0)|0);
     HEAP32[99998] = $arrayidx269;
     break;
    }
   }
  }
 } while(0);
 $261 = HEAP32[99911]|0;
 $262 = HEAP32[$261>>2]|0;
 $263 = HEAP32[99985]|0;
 $cmp275 = ($262|0)>=($263|0);
 if ($cmp275) {
  HEAP32[100006] = 0;
 }
 $264 = HEAP32[99911]|0;
 $ceilingheight279 = ((($264)) + 4|0);
 $265 = HEAP32[$ceilingheight279>>2]|0;
 $266 = HEAP32[99985]|0;
 $cmp280 = ($265|0)<=($266|0);
 if ($cmp280) {
  $267 = HEAP32[99911]|0;
  $ceilingpic283 = ((($267)) + 10|0);
  $268 = HEAP16[$ceilingpic283>>1]|0;
  $conv284 = $268 << 16 >> 16;
  $269 = HEAP32[100032]|0;
  $cmp285 = ($conv284|0)!=($269|0);
  if ($cmp285) {
   HEAP32[100004] = 0;
  }
 }
 $270 = HEAP32[100027]|0;
 $shr289 = $270 >> 4;
 HEAP32[100027] = $shr289;
 $271 = HEAP32[100028]|0;
 $shr290 = $271 >> 4;
 HEAP32[100028] = $shr290;
 $272 = HEAP32[100000]|0;
 $273 = HEAP32[100027]|0;
 $call291 = (_FixedMul($272,$273)|0);
 $sub292 = (0 - ($call291))|0;
 HEAP32[100023] = $sub292;
 $274 = HEAP32[99975]|0;
 $shr293 = $274 >> 4;
 $275 = HEAP32[100027]|0;
 $276 = HEAP32[100011]|0;
 $call294 = (_FixedMul($275,$276)|0);
 $sub295 = (($shr293) - ($call294))|0;
 HEAP32[100003] = $sub295;
 $277 = HEAP32[100000]|0;
 $278 = HEAP32[100028]|0;
 $call296 = (_FixedMul($277,$278)|0);
 $sub297 = (0 - ($call296))|0;
 HEAP32[100024] = $sub297;
 $279 = HEAP32[99975]|0;
 $shr298 = $279 >> 4;
 $280 = HEAP32[100028]|0;
 $281 = HEAP32[100011]|0;
 $call299 = (_FixedMul($280,$281)|0);
 $sub300 = (($shr298) - ($call299))|0;
 HEAP32[100005] = $sub300;
 $282 = HEAP32[99910]|0;
 $tobool301 = ($282|0)!=(0|0);
 if ($tobool301) {
  $283 = HEAP32[100029]|0;
  $shr303 = $283 >> 4;
  HEAP32[100029] = $shr303;
  $284 = HEAP32[100030]|0;
  $shr304 = $284 >> 4;
  HEAP32[100030] = $shr304;
  $285 = HEAP32[100029]|0;
  $286 = HEAP32[100027]|0;
  $cmp305 = ($285|0)<($286|0);
  if ($cmp305) {
   $287 = HEAP32[99975]|0;
   $shr308 = $287 >> 4;
   $288 = HEAP32[100029]|0;
   $289 = HEAP32[100011]|0;
   $call309 = (_FixedMul($288,$289)|0);
   $sub310 = (($shr308) - ($call309))|0;
   HEAP32[100015] = $sub310;
   $290 = HEAP32[100000]|0;
   $291 = HEAP32[100029]|0;
   $call311 = (_FixedMul($290,$291)|0);
   $sub312 = (0 - ($call311))|0;
   HEAP32[100016] = $sub312;
  }
  $292 = HEAP32[100030]|0;
  $293 = HEAP32[100028]|0;
  $cmp314 = ($292|0)>($293|0);
  if ($cmp314) {
   $294 = HEAP32[99975]|0;
   $shr317 = $294 >> 4;
   $295 = HEAP32[100030]|0;
   $296 = HEAP32[100011]|0;
   $call318 = (_FixedMul($295,$296)|0);
   $sub319 = (($shr317) - ($call318))|0;
   HEAP32[100019] = $sub319;
   $297 = HEAP32[100000]|0;
   $298 = HEAP32[100030]|0;
   $call320 = (_FixedMul($297,$298)|0);
   $sub321 = (0 - ($call320))|0;
   HEAP32[100020] = $sub321;
  }
 }
 $299 = HEAP32[100004]|0;
 $tobool324 = ($299|0)!=(0);
 if ($tobool324) {
  $300 = HEAP32[99997]|0;
  $301 = HEAP32[100001]|0;
  $302 = HEAP32[100002]|0;
  $sub326 = (($302) - 1)|0;
  $call327 = (_R_CheckPlane($300,$301,$sub326)|0);
  HEAP32[99997] = $call327;
 }
 $303 = HEAP32[100006]|0;
 $tobool329 = ($303|0)!=(0);
 if ($tobool329) {
  $304 = HEAP32[99996]|0;
  $305 = HEAP32[100001]|0;
  $306 = HEAP32[100002]|0;
  $sub331 = (($306) - 1)|0;
  $call332 = (_R_CheckPlane($304,$305,$sub331)|0);
  HEAP32[99996] = $call332;
 }
 _R_RenderSegLoop();
 $307 = HEAP32[99907]|0;
 $silhouette334 = ((($307)) + 24|0);
 $308 = HEAP32[$silhouette334>>2]|0;
 $and335 = $308 & 2;
 $tobool336 = ($and335|0)!=(0);
 $309 = HEAP32[100022]|0;
 $tobool338 = ($309|0)!=(0);
 $or$cond = $tobool336 | $tobool338;
 if ($or$cond) {
  $310 = HEAP32[99907]|0;
  $sprtopclip340 = ((($310)) + 36|0);
  $311 = HEAP32[$sprtopclip340>>2]|0;
  $tobool341 = ($311|0)!=(0|0);
  if (!($tobool341)) {
   $312 = HEAP32[99995]|0;
   $313 = $start$addr;
   $add$ptr343 = (249120 + ($313<<1)|0);
   $314 = HEAP32[100002]|0;
   $315 = $start$addr;
   $sub344 = (($314) - ($315))|0;
   $mul = $sub344<<1;
   _memcpy(($312|0),($add$ptr343|0),($mul|0))|0;
   $316 = HEAP32[99995]|0;
   $317 = $start$addr;
   $idx$neg345 = (0 - ($317))|0;
   $add$ptr346 = (($316) + ($idx$neg345<<1)|0);
   $318 = HEAP32[99907]|0;
   $sprtopclip347 = ((($318)) + 36|0);
   HEAP32[$sprtopclip347>>2] = $add$ptr346;
   $319 = HEAP32[100002]|0;
   $320 = $start$addr;
   $sub348 = (($319) - ($320))|0;
   $321 = HEAP32[99995]|0;
   $add$ptr349 = (($321) + ($sub348<<1)|0);
   HEAP32[99995] = $add$ptr349;
  }
 }
 $322 = HEAP32[99907]|0;
 $silhouette351 = ((($322)) + 24|0);
 $323 = HEAP32[$silhouette351>>2]|0;
 $and352 = $323 & 1;
 $tobool353 = ($and352|0)!=(0);
 $324 = HEAP32[100022]|0;
 $tobool355 = ($324|0)!=(0);
 $or$cond1 = $tobool353 | $tobool355;
 if ($or$cond1) {
  $325 = HEAP32[99907]|0;
  $sprbottomclip357 = ((($325)) + 40|0);
  $326 = HEAP32[$sprbottomclip357>>2]|0;
  $tobool358 = ($326|0)!=(0|0);
  if (!($tobool358)) {
   $327 = HEAP32[99995]|0;
   $328 = $start$addr;
   $add$ptr360 = (248480 + ($328<<1)|0);
   $329 = HEAP32[100002]|0;
   $330 = $start$addr;
   $sub361 = (($329) - ($330))|0;
   $mul362 = $sub361<<1;
   _memcpy(($327|0),($add$ptr360|0),($mul362|0))|0;
   $331 = HEAP32[99995]|0;
   $332 = $start$addr;
   $idx$neg363 = (0 - ($332))|0;
   $add$ptr364 = (($331) + ($idx$neg363<<1)|0);
   $333 = HEAP32[99907]|0;
   $sprbottomclip365 = ((($333)) + 40|0);
   HEAP32[$sprbottomclip365>>2] = $add$ptr364;
   $334 = HEAP32[100002]|0;
   $335 = $start$addr;
   $sub366 = (($334) - ($335))|0;
   $336 = HEAP32[99995]|0;
   $add$ptr367 = (($336) + ($sub366<<1)|0);
   HEAP32[99995] = $add$ptr367;
  }
 }
 $337 = HEAP32[100022]|0;
 $tobool369 = ($337|0)!=(0);
 if ($tobool369) {
  $338 = HEAP32[99907]|0;
  $silhouette371 = ((($338)) + 24|0);
  $339 = HEAP32[$silhouette371>>2]|0;
  $and372 = $339 & 2;
  $tobool373 = ($and372|0)!=(0);
  if (!($tobool373)) {
   $340 = HEAP32[99907]|0;
   $silhouette375 = ((($340)) + 24|0);
   $341 = HEAP32[$silhouette375>>2]|0;
   $or376 = $341 | 2;
   HEAP32[$silhouette375>>2] = $or376;
   $342 = HEAP32[99907]|0;
   $tsilheight377 = ((($342)) + 32|0);
   HEAP32[$tsilheight377>>2] = -2147483648;
  }
 }
 $343 = HEAP32[100022]|0;
 $tobool379 = ($343|0)!=(0);
 if ($tobool379) {
  $344 = HEAP32[99907]|0;
  $silhouette381 = ((($344)) + 24|0);
  $345 = HEAP32[$silhouette381>>2]|0;
  $and382 = $345 & 1;
  $tobool383 = ($and382|0)!=(0);
  if (!($tobool383)) {
   $346 = HEAP32[99907]|0;
   $silhouette385 = ((($346)) + 24|0);
   $347 = HEAP32[$silhouette385>>2]|0;
   $or386 = $347 | 1;
   HEAP32[$silhouette385>>2] = $or386;
   $348 = HEAP32[99907]|0;
   $bsilheight387 = ((($348)) + 28|0);
   HEAP32[$bsilheight387>>2] = 2147483647;
  }
 }
 $349 = HEAP32[99907]|0;
 $incdec$ptr = ((($349)) + 48|0);
 HEAP32[99907] = $incdec$ptr;
 STACKTOP = sp;return;
}
function _R_InitSkyMap() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100031] = 6553600;
 return;
}
function _R_InstallSpriteLump($lump,$frame,$rotation,$flipped) {
 $lump = $lump|0;
 $frame = $frame|0;
 $rotation = $rotation|0;
 $flipped = $flipped|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add14 = 0, $add31 = 0, $add42 = 0, $add43 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx16 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx33 = 0, $arrayidx35 = 0, $arrayidx37 = 0, $arrayidx47 = 0, $arrayidx49 = 0, $arrayidx51 = 0;
 var $arrayidx53 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp18 = 0, $cmp2 = 0, $cmp39 = 0, $cmp5 = 0, $cmp7 = 0, $conv = 0, $conv22 = 0, $conv38 = 0, $conv46 = 0, $conv50 = 0, $dec = 0, $flip = 0, $flip52 = 0, $flipped$addr = 0, $frame$addr = 0, $inc = 0;
 var $lump$addr = 0, $lump20 = 0, $lump36 = 0, $lump48 = 0, $or$cond = 0, $r = 0, $rotation$addr = 0, $sub = 0, $sub45 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lump$addr = $lump;
 $frame$addr = $frame;
 $rotation$addr = $rotation;
 $flipped$addr = $flipped;
 $0 = $frame$addr;
 $cmp = ($0>>>0)>=(29);
 $1 = $rotation$addr;
 $cmp1 = ($1>>>0)>(8);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $2 = $lump$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(156314,$vararg_buffer);
 }
 $3 = $frame$addr;
 $4 = HEAP32[100034]|0;
 $cmp2 = ($3|0)>($4|0);
 if ($cmp2) {
  $5 = $frame$addr;
  HEAP32[100034] = $5;
 }
 $6 = $rotation$addr;
 $cmp5 = ($6|0)==(0);
 $7 = $frame$addr;
 $arrayidx = (376512 + (($7*28)|0)|0);
 $8 = HEAP32[$arrayidx>>2]|0;
 $cmp7 = ($8|0)==(0);
 if (!($cmp5)) {
  if ($cmp7) {
   $25 = HEAP32[100035]|0;
   $26 = $frame$addr;
   $add31 = (65 + ($26))|0;
   HEAP32[$vararg_buffer9>>2] = $25;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $add31;
   _I_Error(156423,$vararg_buffer9);
  }
  $27 = $frame$addr;
  $arrayidx33 = (376512 + (($27*28)|0)|0);
  HEAP32[$arrayidx33>>2] = 1;
  $28 = $rotation$addr;
  $dec = (($28) + -1)|0;
  $rotation$addr = $dec;
  $29 = $frame$addr;
  $arrayidx35 = (376512 + (($29*28)|0)|0);
  $lump36 = ((($arrayidx35)) + 4|0);
  $30 = $rotation$addr;
  $arrayidx37 = (($lump36) + ($30<<1)|0);
  $31 = HEAP16[$arrayidx37>>1]|0;
  $conv38 = $31 << 16 >> 16;
  $cmp39 = ($conv38|0)!=(-1);
  if ($cmp39) {
   $32 = HEAP32[100035]|0;
   $33 = $frame$addr;
   $add42 = (65 + ($33))|0;
   $34 = $rotation$addr;
   $add43 = (49 + ($34))|0;
   HEAP32[$vararg_buffer13>>2] = $32;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $add42;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $add43;
   _I_Error(156488,$vararg_buffer13);
  }
  $35 = $lump$addr;
  $36 = HEAP32[99927]|0;
  $sub45 = (($35) - ($36))|0;
  $conv46 = $sub45&65535;
  $37 = $frame$addr;
  $arrayidx47 = (376512 + (($37*28)|0)|0);
  $lump48 = ((($arrayidx47)) + 4|0);
  $38 = $rotation$addr;
  $arrayidx49 = (($lump48) + ($38<<1)|0);
  HEAP16[$arrayidx49>>1] = $conv46;
  $39 = $flipped$addr;
  $conv50 = $39&255;
  $40 = $frame$addr;
  $arrayidx51 = (376512 + (($40*28)|0)|0);
  $flip52 = ((($arrayidx51)) + 20|0);
  $41 = $rotation$addr;
  $arrayidx53 = (($flip52) + ($41)|0);
  HEAP8[$arrayidx53>>0] = $conv50;
  STACKTOP = sp;return;
 }
 if ($cmp7) {
  $9 = HEAP32[100035]|0;
  $10 = $frame$addr;
  $add = (65 + ($10))|0;
  HEAP32[$vararg_buffer1>>2] = $9;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $add;
  _I_Error(156367,$vararg_buffer1);
 }
 $11 = $frame$addr;
 $arrayidx10 = (376512 + (($11*28)|0)|0);
 $12 = HEAP32[$arrayidx10>>2]|0;
 $cmp12 = ($12|0)==(1);
 if ($cmp12) {
  $13 = HEAP32[100035]|0;
  $14 = $frame$addr;
  $add14 = (65 + ($14))|0;
  HEAP32[$vararg_buffer5>>2] = $13;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $add14;
  _I_Error(156423,$vararg_buffer5);
 }
 $15 = $frame$addr;
 $arrayidx16 = (376512 + (($15*28)|0)|0);
 HEAP32[$arrayidx16>>2] = 0;
 $r = 0;
 while(1) {
  $16 = $r;
  $cmp18 = ($16|0)<(8);
  if (!($cmp18)) {
   break;
  }
  $17 = $lump$addr;
  $18 = HEAP32[99927]|0;
  $sub = (($17) - ($18))|0;
  $conv = $sub&65535;
  $19 = $frame$addr;
  $arrayidx19 = (376512 + (($19*28)|0)|0);
  $lump20 = ((($arrayidx19)) + 4|0);
  $20 = $r;
  $arrayidx21 = (($lump20) + ($20<<1)|0);
  HEAP16[$arrayidx21>>1] = $conv;
  $21 = $flipped$addr;
  $conv22 = $21&255;
  $22 = $frame$addr;
  $arrayidx23 = (376512 + (($22*28)|0)|0);
  $flip = ((($arrayidx23)) + 20|0);
  $23 = $r;
  $arrayidx24 = (($flip) + ($23)|0);
  HEAP8[$arrayidx24>>0] = $conv22;
  $24 = $r;
  $inc = (($24) + 1)|0;
  $r = $inc;
 }
 STACKTOP = sp;return;
}
function _R_InitSpriteDefs($namelist) {
 $namelist = $namelist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $add = 0, $add2 = 0, $add54 = 0, $add67 = 0, $arrayidx = 0;
 var $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx21 = 0, $arrayidx26 = 0, $arrayidx28 = 0, $arrayidx31 = 0, $arrayidx33 = 0, $arrayidx36 = 0, $arrayidx38 = 0, $arrayidx46 = 0, $arrayidx53 = 0, $arrayidx6 = 0, $arrayidx61 = 0, $arrayidx62 = 0, $arrayidx75 = 0, $arrayidx79 = 0, $arrayidx80 = 0, $call = 0;
 var $call24 = 0, $call7 = 0, $call78 = 0, $check = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp43 = 0, $cmp50 = 0, $cmp58 = 0, $cmp64 = 0, $conv = 0, $conv17 = 0, $conv34 = 0, $conv39 = 0, $conv63 = 0, $end = 0, $frame = 0, $i = 0, $inc = 0;
 var $inc48 = 0, $inc70 = 0, $inc73 = 0, $inc84 = 0, $incdec$ptr = 0, $l = 0, $lump = 0, $mul = 0, $mul77 = 0, $mul82 = 0, $namelist$addr = 0, $patched = 0, $rotation = 0, $spriteframes = 0, $spriteframes81 = 0, $start = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, $sub13 = 0, $sub18 = 0, $sub35 = 0, $sub40 = 0, $tobool = 0, $tobool19 = 0, $tobool29 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $namelist$addr = $namelist;
 $0 = $namelist$addr;
 $check = $0;
 while(1) {
  $1 = $check;
  $2 = HEAP32[$1>>2]|0;
  $cmp = ($2|0)!=(0|0);
  $3 = $check;
  if (!($cmp)) {
   break;
  }
  $incdec$ptr = ((($3)) + 4|0);
  $check = $incdec$ptr;
 }
 $4 = $namelist$addr;
 $sub$ptr$lhs$cast = $3;
 $sub$ptr$rhs$cast = $4;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 4)&-1;
 HEAP32[100036] = $sub$ptr$div;
 $5 = HEAP32[100036]|0;
 $tobool = ($5|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[100036]|0;
 $mul = $6<<3;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[100037] = $call;
 $7 = HEAP32[99927]|0;
 $sub = (($7) - 1)|0;
 $start = $sub;
 $8 = HEAP32[99928]|0;
 $add = (($8) + 1)|0;
 $end = $add;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = HEAP32[100036]|0;
  $cmp1 = ($9|0)<($10|0);
  if (!($cmp1)) {
   break;
  }
  $11 = $namelist$addr;
  $12 = $i;
  $arrayidx = (($11) + ($12<<2)|0);
  $13 = HEAP32[$arrayidx>>2]|0;
  HEAP32[100035] = $13;
  _memset((376512|0),-1,812)|0;
  HEAP32[100034] = -1;
  $14 = $start;
  $add2 = (($14) + 1)|0;
  $l = $add2;
  while(1) {
   $15 = $l;
   $16 = $end;
   $cmp4 = ($15|0)<($16|0);
   if (!($cmp4)) {
    break;
   }
   $17 = HEAP32[100199]|0;
   $18 = $l;
   $arrayidx6 = (($17) + (($18*28)|0)|0);
   $19 = HEAP32[100035]|0;
   $call7 = (_strncasecmp($arrayidx6,$19,4)|0);
   $tobool8 = ($call7|0)!=(0);
   if (!($tobool8)) {
    $20 = HEAP32[100199]|0;
    $21 = $l;
    $arrayidx10 = (($20) + (($21*28)|0)|0);
    $arrayidx12 = ((($arrayidx10)) + 4|0);
    $22 = HEAP8[$arrayidx12>>0]|0;
    $conv = $22 << 24 >> 24;
    $sub13 = (($conv) - 65)|0;
    $frame = $sub13;
    $23 = HEAP32[100199]|0;
    $24 = $l;
    $arrayidx14 = (($23) + (($24*28)|0)|0);
    $arrayidx16 = ((($arrayidx14)) + 5|0);
    $25 = HEAP8[$arrayidx16>>0]|0;
    $conv17 = $25 << 24 >> 24;
    $sub18 = (($conv17) - 48)|0;
    $rotation = $sub18;
    $26 = HEAP32[99358]|0;
    $tobool19 = ($26|0)!=(0);
    if ($tobool19) {
     $27 = HEAP32[100199]|0;
     $28 = $l;
     $arrayidx21 = (($27) + (($28*28)|0)|0);
     $call24 = (_W_GetNumForName($arrayidx21)|0);
     $patched = $call24;
    } else {
     $29 = $l;
     $patched = $29;
    }
    $30 = $patched;
    $31 = $frame;
    $32 = $rotation;
    _R_InstallSpriteLump($30,$31,$32,0);
    $33 = HEAP32[100199]|0;
    $34 = $l;
    $arrayidx26 = (($33) + (($34*28)|0)|0);
    $arrayidx28 = ((($arrayidx26)) + 6|0);
    $35 = HEAP8[$arrayidx28>>0]|0;
    $tobool29 = ($35<<24>>24)!=(0);
    if ($tobool29) {
     $36 = HEAP32[100199]|0;
     $37 = $l;
     $arrayidx31 = (($36) + (($37*28)|0)|0);
     $arrayidx33 = ((($arrayidx31)) + 6|0);
     $38 = HEAP8[$arrayidx33>>0]|0;
     $conv34 = $38 << 24 >> 24;
     $sub35 = (($conv34) - 65)|0;
     $frame = $sub35;
     $39 = HEAP32[100199]|0;
     $40 = $l;
     $arrayidx36 = (($39) + (($40*28)|0)|0);
     $arrayidx38 = ((($arrayidx36)) + 7|0);
     $41 = HEAP8[$arrayidx38>>0]|0;
     $conv39 = $41 << 24 >> 24;
     $sub40 = (($conv39) - 48)|0;
     $rotation = $sub40;
     $42 = $l;
     $43 = $frame;
     $44 = $rotation;
     _R_InstallSpriteLump($42,$43,$44,1);
    }
   }
   $45 = $l;
   $inc = (($45) + 1)|0;
   $l = $inc;
  }
  $46 = HEAP32[100034]|0;
  $cmp43 = ($46|0)==(-1);
  if ($cmp43) {
   $47 = HEAP32[100037]|0;
   $48 = $i;
   $arrayidx46 = (($47) + ($48<<3)|0);
   HEAP32[$arrayidx46>>2] = 0;
  } else {
   $49 = HEAP32[100034]|0;
   $inc48 = (($49) + 1)|0;
   HEAP32[100034] = $inc48;
   $frame = 0;
   while(1) {
    $50 = $frame;
    $51 = HEAP32[100034]|0;
    $cmp50 = ($50|0)<($51|0);
    if (!($cmp50)) {
     break;
    }
    $52 = $frame;
    $arrayidx53 = (376512 + (($52*28)|0)|0);
    $53 = HEAP32[$arrayidx53>>2]|0;
    L29: do {
     switch ($53|0) {
     case -1:  {
      $54 = HEAP32[100035]|0;
      $55 = $frame;
      $add54 = (($55) + 65)|0;
      HEAP32[$vararg_buffer>>2] = $54;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $add54;
      _I_Error(156550,$vararg_buffer);
      break;
     }
     case 1:  {
      $rotation = 0;
      while(1) {
       $56 = $rotation;
       $cmp58 = ($56|0)<(8);
       if (!($cmp58)) {
        break L29;
       }
       $57 = $frame;
       $arrayidx61 = (376512 + (($57*28)|0)|0);
       $lump = ((($arrayidx61)) + 4|0);
       $58 = $rotation;
       $arrayidx62 = (($lump) + ($58<<1)|0);
       $59 = HEAP16[$arrayidx62>>1]|0;
       $conv63 = $59 << 16 >> 16;
       $cmp64 = ($conv63|0)==(-1);
       if ($cmp64) {
        $60 = HEAP32[100035]|0;
        $61 = $frame;
        $add67 = (($61) + 65)|0;
        HEAP32[$vararg_buffer2>>2] = $60;
        $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
        HEAP32[$vararg_ptr5>>2] = $add67;
        _I_Error(156598,$vararg_buffer2);
       }
       $62 = $rotation;
       $inc70 = (($62) + 1)|0;
       $rotation = $inc70;
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $63 = $frame;
    $inc73 = (($63) + 1)|0;
    $frame = $inc73;
   }
   $64 = HEAP32[100034]|0;
   $65 = HEAP32[100037]|0;
   $66 = $i;
   $arrayidx75 = (($65) + ($66<<3)|0);
   HEAP32[$arrayidx75>>2] = $64;
   $67 = HEAP32[100034]|0;
   $mul77 = ($67*28)|0;
   $call78 = (_Z_Malloc($mul77,1,0)|0);
   $68 = HEAP32[100037]|0;
   $69 = $i;
   $arrayidx79 = (($68) + ($69<<3)|0);
   $spriteframes = ((($arrayidx79)) + 4|0);
   HEAP32[$spriteframes>>2] = $call78;
   $70 = HEAP32[100037]|0;
   $71 = $i;
   $arrayidx80 = (($70) + ($71<<3)|0);
   $spriteframes81 = ((($arrayidx80)) + 4|0);
   $72 = HEAP32[$spriteframes81>>2]|0;
   $73 = HEAP32[100034]|0;
   $mul82 = ($73*28)|0;
   _memcpy(($72|0),(376512|0),($mul82|0))|0;
  }
  $74 = $i;
  $inc84 = (($74) + 1)|0;
  $i = $inc84;
 }
 STACKTOP = sp;return;
}
function _R_InitSprites($namelist) {
 $namelist = $namelist|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $namelist$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $namelist$addr = $namelist;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(320);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (377328 + ($1<<1)|0);
  HEAP16[$arrayidx>>1] = -1;
  $2 = $i;
  $inc = (($2) + 1)|0;
  $i = $inc;
 }
 $3 = $namelist$addr;
 _R_InitSpriteDefs($3);
 STACKTOP = sp;return;
}
function _R_ClearSprites() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100038] = 377968;
 return;
}
function _R_NewVisSprite() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $cmp = 0, $incdec$ptr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100038]|0;
 $1 = 385648;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $retval = 400156;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 } else {
  $2 = HEAP32[100038]|0;
  $incdec$ptr = ((($2)) + 60|0);
  HEAP32[100038] = $incdec$ptr;
  $3 = HEAP32[100038]|0;
  $add$ptr = ((($3)) + -60|0);
  $retval = $add$ptr;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _R_DrawMaskedColumn($column) {
 $column = $column|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0;
 var $add$ptr34 = 0, $add$ptr35 = 0, $add23 = 0, $add6 = 0, $add7 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx16 = 0, $arrayidx21 = 0, $basetexturemid = 0, $bottomscreen = 0, $cmp = 0, $cmp11 = 0, $cmp18 = 0, $cmp25 = 0, $column$addr = 0, $conv = 0, $conv10 = 0, $conv14 = 0, $conv17 = 0;
 var $conv22 = 0, $conv29 = 0, $conv3 = 0, $conv33 = 0, $conv4 = 0, $length = 0, $length32 = 0, $mul = 0, $mul5 = 0, $shl = 0, $shr = 0, $shr9 = 0, $sub = 0, $sub15 = 0, $sub30 = 0, $sub8 = 0, $topscreen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $column$addr = $column;
 $0 = HEAP32[99942]|0;
 $basetexturemid = $0;
 while(1) {
  $1 = $column$addr;
  $2 = HEAP8[$1>>0]|0;
  $conv = $2&255;
  $cmp = ($conv|0)!=(255);
  if (!($cmp)) {
   break;
  }
  $3 = HEAP32[100054]|0;
  $4 = HEAP32[100055]|0;
  $5 = $column$addr;
  $6 = HEAP8[$5>>0]|0;
  $conv3 = $6&255;
  $mul = Math_imul($4, $conv3)|0;
  $add = (($3) + ($mul))|0;
  $topscreen = $add;
  $7 = $topscreen;
  $8 = HEAP32[100055]|0;
  $9 = $column$addr;
  $length = ((($9)) + 1|0);
  $10 = HEAP8[$length>>0]|0;
  $conv4 = $10&255;
  $mul5 = Math_imul($8, $conv4)|0;
  $add6 = (($7) + ($mul5))|0;
  $bottomscreen = $add6;
  $11 = $topscreen;
  $add7 = (($11) + 65536)|0;
  $sub = (($add7) - 1)|0;
  $shr = $sub >> 16;
  HEAP32[99939] = $shr;
  $12 = $bottomscreen;
  $sub8 = (($12) - 1)|0;
  $shr9 = $sub8 >> 16;
  HEAP32[99938] = $shr9;
  $13 = HEAP32[99938]|0;
  $14 = HEAP32[100056]|0;
  $15 = HEAP32[99940]|0;
  $arrayidx = (($14) + ($15<<1)|0);
  $16 = HEAP16[$arrayidx>>1]|0;
  $conv10 = $16 << 16 >> 16;
  $cmp11 = ($13|0)>=($conv10|0);
  if ($cmp11) {
   $17 = HEAP32[100056]|0;
   $18 = HEAP32[99940]|0;
   $arrayidx13 = (($17) + ($18<<1)|0);
   $19 = HEAP16[$arrayidx13>>1]|0;
   $conv14 = $19 << 16 >> 16;
   $sub15 = (($conv14) - 1)|0;
   HEAP32[99938] = $sub15;
  }
  $20 = HEAP32[99939]|0;
  $21 = HEAP32[100057]|0;
  $22 = HEAP32[99940]|0;
  $arrayidx16 = (($21) + ($22<<1)|0);
  $23 = HEAP16[$arrayidx16>>1]|0;
  $conv17 = $23 << 16 >> 16;
  $cmp18 = ($20|0)<=($conv17|0);
  if ($cmp18) {
   $24 = HEAP32[100057]|0;
   $25 = HEAP32[99940]|0;
   $arrayidx21 = (($24) + ($25<<1)|0);
   $26 = HEAP16[$arrayidx21>>1]|0;
   $conv22 = $26 << 16 >> 16;
   $add23 = (($conv22) + 1)|0;
   HEAP32[99939] = $add23;
  }
  $27 = HEAP32[99939]|0;
  $28 = HEAP32[99938]|0;
  $cmp25 = ($27|0)<=($28|0);
  if ($cmp25) {
   $29 = $column$addr;
   $add$ptr = ((($29)) + 3|0);
   HEAP32[99944] = $add$ptr;
   $30 = $basetexturemid;
   $31 = $column$addr;
   $32 = HEAP8[$31>>0]|0;
   $conv29 = $32&255;
   $shl = $conv29 << 16;
   $sub30 = (($30) - ($shl))|0;
   HEAP32[99942] = $sub30;
   $33 = HEAP32[99977]|0;
   FUNCTION_TABLE_v[$33 & 255]();
  }
  $34 = $column$addr;
  $35 = $column$addr;
  $length32 = ((($35)) + 1|0);
  $36 = HEAP8[$length32>>0]|0;
  $conv33 = $36&255;
  $add$ptr34 = (($34) + ($conv33)|0);
  $add$ptr35 = ((($add$ptr34)) + 4|0);
  $column$addr = $add$ptr35;
 }
 $37 = $basetexturemid;
 HEAP32[99942] = $37;
 STACKTOP = sp;return;
}
function _R_DrawVisSprite($vis,$x1,$x2) {
 $vis = $vis|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr19 = 0, $add$ptr6 = 0, $add21 = 0, $and = 0, $and5 = 0, $arrayidx = 0, $call = 0, $call10 = 0, $call8 = 0, $cmp = 0, $cmp14 = 0, $cmp15 = 0, $colormap = 0;
 var $column = 0, $columnofs = 0, $conv = 0, $frac = 0, $inc = 0, $mobjflags = 0, $mobjflags4 = 0, $patch = 0, $patch1 = 0, $scale = 0, $shr = 0, $shr13 = 0, $shr9 = 0, $startfrac = 0, $sub = 0, $texturecolumn = 0, $texturemid = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0;
 var $vis$addr = 0, $x1$addr = 0, $x111 = 0, $x2$addr = 0, $x212 = 0, $xiscale = 0, $xiscale20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $vis$addr = $vis;
 $x1$addr = $x1;
 $x2$addr = $x2;
 $0 = $vis$addr;
 $patch1 = ((($0)) + 48|0);
 $1 = HEAP32[$patch1>>2]|0;
 $2 = HEAP32[99927]|0;
 $add = (($1) + ($2))|0;
 $call = (_W_CacheLumpNum($add,8)|0);
 $patch = $call;
 $3 = $vis$addr;
 $colormap = ((($3)) + 52|0);
 $4 = HEAP32[$colormap>>2]|0;
 HEAP32[99943] = $4;
 $5 = HEAP32[99943]|0;
 $tobool = ($5|0)!=(0|0);
 if ($tobool) {
  $7 = $vis$addr;
  $mobjflags = ((($7)) + 56|0);
  $8 = HEAP32[$mobjflags>>2]|0;
  $and = $8 & 201326592;
  $tobool2 = ($and|0)!=(0);
  if ($tobool2) {
   $9 = HEAP32[99979]|0;
   HEAP32[99977] = $9;
   $10 = HEAP32[99948]|0;
   $add$ptr = ((($10)) + -256|0);
   $11 = $vis$addr;
   $mobjflags4 = ((($11)) + 56|0);
   $12 = HEAP32[$mobjflags4>>2]|0;
   $and5 = $12 & 201326592;
   $shr = $and5 >> 18;
   $add$ptr6 = (($add$ptr) + ($shr)|0);
   HEAP32[99947] = $add$ptr6;
  }
 } else {
  $6 = HEAP32[99978]|0;
  HEAP32[99977] = $6;
 }
 $13 = $vis$addr;
 $xiscale = ((($13)) + 40|0);
 $14 = HEAP32[$xiscale>>2]|0;
 $call8 = (Math_abs(($14|0))|0);
 $15 = HEAP32[99967]|0;
 $shr9 = $call8 >> $15;
 HEAP32[99941] = $shr9;
 $16 = $vis$addr;
 $texturemid = ((($16)) + 44|0);
 $17 = HEAP32[$texturemid>>2]|0;
 HEAP32[99942] = $17;
 $18 = $vis$addr;
 $startfrac = ((($18)) + 32|0);
 $19 = HEAP32[$startfrac>>2]|0;
 $frac = $19;
 $20 = $vis$addr;
 $scale = ((($20)) + 36|0);
 $21 = HEAP32[$scale>>2]|0;
 HEAP32[100055] = $21;
 $22 = HEAP32[99975]|0;
 $23 = HEAP32[99942]|0;
 $24 = HEAP32[100055]|0;
 $call10 = (_FixedMul($23,$24)|0);
 $sub = (($22) - ($call10))|0;
 HEAP32[100054] = $sub;
 $25 = $vis$addr;
 $x111 = ((($25)) + 8|0);
 $26 = HEAP32[$x111>>2]|0;
 HEAP32[99940] = $26;
 while(1) {
  $27 = HEAP32[99940]|0;
  $28 = $vis$addr;
  $x212 = ((($28)) + 12|0);
  $29 = HEAP32[$x212>>2]|0;
  $cmp = ($27|0)<=($29|0);
  if (!($cmp)) {
   break;
  }
  $30 = $frac;
  $shr13 = $30 >> 16;
  $texturecolumn = $shr13;
  $31 = $texturecolumn;
  $cmp14 = ($31|0)<(0);
  if ($cmp14) {
   label = 9;
  } else {
   $32 = $texturecolumn;
   $33 = $patch;
   $34 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
   $conv = $34 << 16 >> 16;
   $cmp15 = ($32|0)>=($conv|0);
   if ($cmp15) {
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   _I_Error(156653,$vararg_buffer);
  }
  $35 = $patch;
  $36 = $patch;
  $columnofs = ((($36)) + 8|0);
  $37 = $texturecolumn;
  $arrayidx = (($columnofs) + ($37<<2)|0);
  $38 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
  $add$ptr19 = (($35) + ($38)|0);
  $column = $add$ptr19;
  $39 = $column;
  _R_DrawMaskedColumn($39);
  $40 = HEAP32[99940]|0;
  $inc = (($40) + 1)|0;
  HEAP32[99940] = $inc;
  $41 = $vis$addr;
  $xiscale20 = ((($41)) + 40|0);
  $42 = HEAP32[$xiscale20>>2]|0;
  $43 = $frac;
  $add21 = (($43) + ($42))|0;
  $frac = $add21;
 }
 $44 = HEAP32[99976]|0;
 HEAP32[99977] = $44;
 STACKTOP = sp;return;
}
function _R_ProjectSprite($thing) {
 $thing = $thing|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add102 = 0, $add32 = 0, $add48 = 0, $add55 = 0, $add57 = 0, $add70 = 0, $and = 0;
 var $and105 = 0, $and114 = 0, $and25 = 0, $ang = 0, $angle = 0, $arrayidx = 0, $arrayidx125 = 0, $arrayidx26 = 0, $arrayidx34 = 0, $arrayidx36 = 0, $arrayidx45 = 0, $arrayidx54 = 0, $arrayidx69 = 0, $arrayidx87 = 0, $call = 0, $call10 = 0, $call2 = 0, $call30 = 0, $call47 = 0, $call5 = 0;
 var $call56 = 0, $call6 = 0, $call64 = 0, $call8 = 0, $call84 = 0, $cmp = 0, $cmp11 = 0, $cmp121 = 0, $cmp14 = 0, $cmp19 = 0, $cmp50 = 0, $cmp60 = 0, $cmp73 = 0, $cmp76 = 0, $cmp95 = 0, $colormap = 0, $colormap111 = 0, $colormap117 = 0, $colormap126 = 0, $cond = 0;
 var $cond82 = 0, $conv = 0, $conv37 = 0, $conv40 = 0, $conv43 = 0, $flags = 0, $flags104 = 0, $flip = 0, $flip35 = 0, $flip41 = 0, $frame = 0, $frame113 = 0, $frame22 = 0, $frame24 = 0, $gx = 0, $gxt = 0, $gy = 0, $gyt = 0, $gz = 0, $gzt = 0;
 var $gzt71 = 0, $index = 0, $iscale = 0, $lump = 0, $lump33 = 0, $lump38 = 0, $mobjflags = 0, $mul = 0, $patch = 0, $rot = 0, $scale = 0, $shl = 0, $shl65 = 0, $shr = 0, $shr120 = 0, $shr49 = 0, $shr58 = 0, $spec$store$select = 0, $sprdef = 0, $sprframe = 0;
 var $sprite = 0, $sprite16 = 0, $sprite18 = 0, $sprite21 = 0, $spriteframes = 0, $startfrac = 0, $startfrac101 = 0, $startfrac91 = 0, $sub = 0, $sub1 = 0, $sub100 = 0, $sub119 = 0, $sub3 = 0, $sub31 = 0, $sub4 = 0, $sub46 = 0, $sub59 = 0, $sub7 = 0, $sub72 = 0, $sub79 = 0;
 var $sub88 = 0, $sub89 = 0, $sub9 = 0, $texturemid = 0, $thing$addr = 0, $tobool = 0, $tobool106 = 0, $tobool109 = 0, $tobool115 = 0, $tobool85 = 0, $tr_x = 0, $tr_y = 0, $tx = 0, $tz = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vis = 0, $x = 0, $x1 = 0;
 var $x175 = 0, $x194 = 0, $x199 = 0, $x2 = 0, $x28 = 0, $x283 = 0, $x66 = 0, $xiscale = 0, $xiscale92 = 0, $xiscale98 = 0, $xscale = 0, $y = 0, $y29 = 0, $y67 = 0, $z = 0, $z68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $thing$addr = $thing;
 $0 = $thing$addr;
 $x = ((($0)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 $2 = HEAP32[99963]|0;
 $sub = (($1) - ($2))|0;
 $tr_x = $sub;
 $3 = $thing$addr;
 $y = ((($3)) + 16|0);
 $4 = HEAP32[$y>>2]|0;
 $5 = HEAP32[99964]|0;
 $sub1 = (($4) - ($5))|0;
 $tr_y = $sub1;
 $6 = $tr_x;
 $7 = HEAP32[99987]|0;
 $call = (_FixedMul($6,$7)|0);
 $gxt = $call;
 $8 = $tr_y;
 $9 = HEAP32[99986]|0;
 $call2 = (_FixedMul($8,$9)|0);
 $sub3 = (0 - ($call2))|0;
 $gyt = $sub3;
 $10 = $gxt;
 $11 = $gyt;
 $sub4 = (($10) - ($11))|0;
 $tz = $sub4;
 $12 = $tz;
 $cmp = ($12|0)<(262144);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[99966]|0;
 $14 = $tz;
 $call5 = (_FixedDiv($13,$14)|0);
 $xscale = $call5;
 $15 = $tr_x;
 $16 = HEAP32[99986]|0;
 $call6 = (_FixedMul($15,$16)|0);
 $sub7 = (0 - ($call6))|0;
 $gxt = $sub7;
 $17 = $tr_y;
 $18 = HEAP32[99987]|0;
 $call8 = (_FixedMul($17,$18)|0);
 $gyt = $call8;
 $19 = $gyt;
 $20 = $gxt;
 $add = (($19) + ($20))|0;
 $sub9 = (0 - ($add))|0;
 $tx = $sub9;
 $21 = $tx;
 $call10 = (Math_abs(($21|0))|0);
 $22 = $tz;
 $shl = $22 << 2;
 $cmp11 = ($call10|0)>($shl|0);
 if ($cmp11) {
  STACKTOP = sp;return;
 }
 $23 = $thing$addr;
 $sprite = ((($23)) + 36|0);
 $24 = HEAP32[$sprite>>2]|0;
 $25 = HEAP32[100036]|0;
 $cmp14 = ($24>>>0)>=($25>>>0);
 if ($cmp14) {
  $26 = $thing$addr;
  $sprite16 = ((($26)) + 36|0);
  $27 = HEAP32[$sprite16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $27;
  _I_Error(156690,$vararg_buffer);
 }
 $28 = HEAP32[100037]|0;
 $29 = $thing$addr;
 $sprite18 = ((($29)) + 36|0);
 $30 = HEAP32[$sprite18>>2]|0;
 $arrayidx = (($28) + ($30<<3)|0);
 $sprdef = $arrayidx;
 $31 = $thing$addr;
 $frame = ((($31)) + 40|0);
 $32 = HEAP32[$frame>>2]|0;
 $and = $32 & 32767;
 $33 = $sprdef;
 $34 = HEAP32[$33>>2]|0;
 $cmp19 = ($and|0)>=($34|0);
 if ($cmp19) {
  $35 = $thing$addr;
  $sprite21 = ((($35)) + 36|0);
  $36 = HEAP32[$sprite21>>2]|0;
  $37 = $thing$addr;
  $frame22 = ((($37)) + 40|0);
  $38 = HEAP32[$frame22>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $36;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $38;
  _I_Error(156733,$vararg_buffer1);
 }
 $39 = $sprdef;
 $spriteframes = ((($39)) + 4|0);
 $40 = HEAP32[$spriteframes>>2]|0;
 $41 = $thing$addr;
 $frame24 = ((($41)) + 40|0);
 $42 = HEAP32[$frame24>>2]|0;
 $and25 = $42 & 32767;
 $arrayidx26 = (($40) + (($and25*28)|0)|0);
 $sprframe = $arrayidx26;
 $43 = $sprframe;
 $44 = HEAP32[$43>>2]|0;
 $tobool = ($44|0)!=(0);
 if ($tobool) {
  $45 = $thing$addr;
  $x28 = ((($45)) + 12|0);
  $46 = HEAP32[$x28>>2]|0;
  $47 = $thing$addr;
  $y29 = ((($47)) + 16|0);
  $48 = HEAP32[$y29>>2]|0;
  $call30 = (_R_PointToAngle($46,$48)|0);
  $ang = $call30;
  $49 = $ang;
  $50 = $thing$addr;
  $angle = ((($50)) + 32|0);
  $51 = HEAP32[$angle>>2]|0;
  $sub31 = (($49) - ($51))|0;
  $add32 = (($sub31) + -1879048192)|0;
  $shr = $add32 >>> 29;
  $rot = $shr;
  $52 = $sprframe;
  $lump33 = ((($52)) + 4|0);
  $53 = $rot;
  $arrayidx34 = (($lump33) + ($53<<1)|0);
  $54 = HEAP16[$arrayidx34>>1]|0;
  $conv = $54 << 16 >> 16;
  $lump = $conv;
  $55 = $sprframe;
  $flip35 = ((($55)) + 20|0);
  $56 = $rot;
  $arrayidx36 = (($flip35) + ($56)|0);
  $57 = HEAP8[$arrayidx36>>0]|0;
  $conv37 = $57&255;
  $flip = $conv37;
 } else {
  $58 = $sprframe;
  $lump38 = ((($58)) + 4|0);
  $59 = HEAP16[$lump38>>1]|0;
  $conv40 = $59 << 16 >> 16;
  $lump = $conv40;
  $60 = $sprframe;
  $flip41 = ((($60)) + 20|0);
  $61 = HEAP8[$flip41>>0]|0;
  $conv43 = $61&255;
  $flip = $conv43;
 }
 $62 = HEAP32[99931]|0;
 $63 = $lump;
 $arrayidx45 = (($62) + ($63<<2)|0);
 $64 = HEAP32[$arrayidx45>>2]|0;
 $65 = $tx;
 $sub46 = (($65) - ($64))|0;
 $tx = $sub46;
 $66 = HEAP32[99968]|0;
 $67 = $tx;
 $68 = $xscale;
 $call47 = (_FixedMul($67,$68)|0);
 $add48 = (($66) + ($call47))|0;
 $shr49 = $add48 >> 16;
 $x1 = $shr49;
 $69 = $x1;
 $70 = HEAP32[99961]|0;
 $cmp50 = ($69|0)>($70|0);
 if ($cmp50) {
  STACKTOP = sp;return;
 }
 $71 = HEAP32[99930]|0;
 $72 = $lump;
 $arrayidx54 = (($71) + ($72<<2)|0);
 $73 = HEAP32[$arrayidx54>>2]|0;
 $74 = $tx;
 $add55 = (($74) + ($73))|0;
 $tx = $add55;
 $75 = HEAP32[99968]|0;
 $76 = $tx;
 $77 = $xscale;
 $call56 = (_FixedMul($76,$77)|0);
 $add57 = (($75) + ($call56))|0;
 $shr58 = $add57 >> 16;
 $sub59 = (($shr58) - 1)|0;
 $x2 = $sub59;
 $78 = $x2;
 $cmp60 = ($78|0)<(0);
 if ($cmp60) {
  STACKTOP = sp;return;
 }
 $call64 = (_R_NewVisSprite()|0);
 $vis = $call64;
 $79 = $thing$addr;
 $flags = ((($79)) + 104|0);
 $80 = HEAP32[$flags>>2]|0;
 $81 = $vis;
 $mobjflags = ((($81)) + 56|0);
 HEAP32[$mobjflags>>2] = $80;
 $82 = $xscale;
 $83 = HEAP32[99967]|0;
 $shl65 = $82 << $83;
 $84 = $vis;
 $scale = ((($84)) + 36|0);
 HEAP32[$scale>>2] = $shl65;
 $85 = $thing$addr;
 $x66 = ((($85)) + 12|0);
 $86 = HEAP32[$x66>>2]|0;
 $87 = $vis;
 $gx = ((($87)) + 16|0);
 HEAP32[$gx>>2] = $86;
 $88 = $thing$addr;
 $y67 = ((($88)) + 16|0);
 $89 = HEAP32[$y67>>2]|0;
 $90 = $vis;
 $gy = ((($90)) + 20|0);
 HEAP32[$gy>>2] = $89;
 $91 = $thing$addr;
 $z = ((($91)) + 20|0);
 $92 = HEAP32[$z>>2]|0;
 $93 = $vis;
 $gz = ((($93)) + 24|0);
 HEAP32[$gz>>2] = $92;
 $94 = $thing$addr;
 $z68 = ((($94)) + 20|0);
 $95 = HEAP32[$z68>>2]|0;
 $96 = HEAP32[99932]|0;
 $97 = $lump;
 $arrayidx69 = (($96) + ($97<<2)|0);
 $98 = HEAP32[$arrayidx69>>2]|0;
 $add70 = (($95) + ($98))|0;
 $99 = $vis;
 $gzt = ((($99)) + 28|0);
 HEAP32[$gzt>>2] = $add70;
 $100 = $vis;
 $gzt71 = ((($100)) + 28|0);
 $101 = HEAP32[$gzt71>>2]|0;
 $102 = HEAP32[99985]|0;
 $sub72 = (($101) - ($102))|0;
 $103 = $vis;
 $texturemid = ((($103)) + 44|0);
 HEAP32[$texturemid>>2] = $sub72;
 $104 = $x1;
 $cmp73 = ($104|0)<(0);
 $105 = $x1;
 $cond = $cmp73 ? 0 : $105;
 $106 = $vis;
 $x175 = ((($106)) + 8|0);
 HEAP32[$x175>>2] = $cond;
 $107 = $x2;
 $108 = HEAP32[99961]|0;
 $cmp76 = ($107|0)>=($108|0);
 $109 = HEAP32[99961]|0;
 $sub79 = (($109) - 1)|0;
 $110 = $x2;
 $cond82 = $cmp76 ? $sub79 : $110;
 $111 = $vis;
 $x283 = ((($111)) + 12|0);
 HEAP32[$x283>>2] = $cond82;
 $112 = $xscale;
 $call84 = (_FixedDiv(65536,$112)|0);
 $iscale = $call84;
 $113 = $flip;
 $tobool85 = ($113|0)!=(0);
 if ($tobool85) {
  $114 = HEAP32[99930]|0;
  $115 = $lump;
  $arrayidx87 = (($114) + ($115<<2)|0);
  $116 = HEAP32[$arrayidx87>>2]|0;
  $sub88 = (($116) - 1)|0;
  $117 = $vis;
  $startfrac = ((($117)) + 32|0);
  HEAP32[$startfrac>>2] = $sub88;
  $118 = $iscale;
  $sub89 = (0 - ($118))|0;
  $119 = $vis;
  $xiscale = ((($119)) + 40|0);
  HEAP32[$xiscale>>2] = $sub89;
 } else {
  $120 = $vis;
  $startfrac91 = ((($120)) + 32|0);
  HEAP32[$startfrac91>>2] = 0;
  $121 = $iscale;
  $122 = $vis;
  $xiscale92 = ((($122)) + 40|0);
  HEAP32[$xiscale92>>2] = $121;
 }
 $123 = $vis;
 $x194 = ((($123)) + 8|0);
 $124 = HEAP32[$x194>>2]|0;
 $125 = $x1;
 $cmp95 = ($124|0)>($125|0);
 if ($cmp95) {
  $126 = $vis;
  $xiscale98 = ((($126)) + 40|0);
  $127 = HEAP32[$xiscale98>>2]|0;
  $128 = $vis;
  $x199 = ((($128)) + 8|0);
  $129 = HEAP32[$x199>>2]|0;
  $130 = $x1;
  $sub100 = (($129) - ($130))|0;
  $mul = Math_imul($127, $sub100)|0;
  $131 = $vis;
  $startfrac101 = ((($131)) + 32|0);
  $132 = HEAP32[$startfrac101>>2]|0;
  $add102 = (($132) + ($mul))|0;
  HEAP32[$startfrac101>>2] = $add102;
 }
 $133 = $lump;
 $134 = $vis;
 $patch = ((($134)) + 48|0);
 HEAP32[$patch>>2] = $133;
 $135 = $thing$addr;
 $flags104 = ((($135)) + 104|0);
 $136 = HEAP32[$flags104>>2]|0;
 $and105 = $136 & 262144;
 $tobool106 = ($and105|0)!=(0);
 if ($tobool106) {
  $137 = $vis;
  $colormap = ((($137)) + 52|0);
  HEAP32[$colormap>>2] = 0;
  STACKTOP = sp;return;
 }
 $138 = HEAP32[99989]|0;
 $tobool109 = ($138|0)!=(0|0);
 if ($tobool109) {
  $139 = HEAP32[99989]|0;
  $140 = $vis;
  $colormap111 = ((($140)) + 52|0);
  HEAP32[$colormap111>>2] = $139;
  STACKTOP = sp;return;
 }
 $141 = $thing$addr;
 $frame113 = ((($141)) + 40|0);
 $142 = HEAP32[$frame113>>2]|0;
 $and114 = $142 & 32768;
 $tobool115 = ($and114|0)!=(0);
 if ($tobool115) {
  $143 = HEAP32[99933]|0;
  $144 = $vis;
  $colormap117 = ((($144)) + 52|0);
  HEAP32[$colormap117>>2] = $143;
  STACKTOP = sp;return;
 } else {
  $145 = $xscale;
  $146 = HEAP32[99967]|0;
  $sub119 = (12 - ($146))|0;
  $shr120 = $145 >> $sub119;
  $index = $shr120;
  $147 = $index;
  $cmp121 = ($147|0)>=(48);
  $spec$store$select = $cmp121 ? 47 : $shr120;
  $index = $spec$store$select;
  $148 = HEAP32[100058]|0;
  $149 = $index;
  $arrayidx125 = (($148) + ($149<<2)|0);
  $150 = HEAP32[$arrayidx125>>2]|0;
  $151 = $vis;
  $colormap126 = ((($151)) + 52|0);
  HEAP32[$colormap126>>2] = $150;
  STACKTOP = sp;return;
 }
}
function _R_AddSprites($sec) {
 $sec = $sec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $cmp = 0;
 var $cmp2 = 0, $cmp5 = 0, $conv = 0, $lightlevel = 0, $lightnum = 0, $sec$addr = 0, $shr = 0, $snext = 0, $thing = 0, $thinglist = 0, $tobool = 0, $validcount = 0, $validcount1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sec$addr = $sec;
 $0 = $sec$addr;
 $validcount = ((($0)) + 68|0);
 $1 = HEAP32[$validcount>>2]|0;
 $2 = HEAP32[32346]|0;
 $cmp = ($1|0)==($2|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[32346]|0;
 $4 = $sec$addr;
 $validcount1 = ((($4)) + 68|0);
 HEAP32[$validcount1>>2] = $3;
 $5 = $sec$addr;
 $lightlevel = ((($5)) + 12|0);
 $6 = HEAP16[$lightlevel>>1]|0;
 $conv = $6 << 16 >> 16;
 $shr = $conv >> 4;
 $7 = HEAP32[99984]|0;
 $add = (($shr) + ($7))|0;
 $lightnum = $add;
 $8 = $lightnum;
 $cmp2 = ($8|0)<(0);
 do {
  if ($cmp2) {
   HEAP32[100058] = 239936;
  } else {
   $9 = $lightnum;
   $cmp5 = ($9|0)>=(16);
   if ($cmp5) {
    HEAP32[100058] = (242816);
    break;
   } else {
    $10 = $lightnum;
    $arrayidx = (239936 + (($10*192)|0)|0);
    HEAP32[100058] = $arrayidx;
    break;
   }
  }
 } while(0);
 $11 = $sec$addr;
 $thinglist = ((($11)) + 72|0);
 $12 = HEAP32[$thinglist>>2]|0;
 $thing = $12;
 while(1) {
  $13 = $thing;
  $tobool = ($13|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $14 = $thing;
  _R_ProjectSprite($14);
  $15 = $thing;
  $snext = ((($15)) + 24|0);
  $16 = HEAP32[$snext>>2]|0;
  $thing = $16;
 }
 STACKTOP = sp;return;
}
function _R_DrawPSprite($psp) {
 $psp = $psp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add29 = 0, $add31 = 0, $add67 = 0, $and = 0, $and15 = 0, $and74 = 0, $and84 = 0, $arrayidx = 0, $arrayidx16 = 0;
 var $arrayidx22 = 0, $arrayidx28 = 0, $arrayidx38 = 0, $arrayidx54 = 0, $arrayidx69 = 0, $arrayidx73 = 0, $arrayidx89 = 0, $avis = 0, $call = 0, $call30 = 0, $cmp = 0, $cmp24 = 0, $cmp34 = 0, $cmp41 = 0, $cmp44 = 0, $cmp6 = 0, $cmp60 = 0, $cmp70 = 0, $colormap = 0, $colormap80 = 0;
 var $colormap87 = 0, $colormap90 = 0, $cond = 0, $cond50 = 0, $conv = 0, $conv21 = 0, $flip = 0, $flip19 = 0, $frame = 0, $frame11 = 0, $frame14 = 0, $frame83 = 0, $lump = 0, $lump17 = 0, $mobjflags = 0, $mul = 0, $patch = 0, $powers = 0, $powers72 = 0, $psp$addr = 0;
 var $scale = 0, $shl = 0, $shr = 0, $shr32 = 0, $sprdef = 0, $sprframe = 0, $spriteframes = 0, $startfrac = 0, $startfrac57 = 0, $startfrac66 = 0, $sub = 0, $sub23 = 0, $sub33 = 0, $sub39 = 0, $sub40 = 0, $sub47 = 0, $sub53 = 0, $sub55 = 0, $sub65 = 0, $sx = 0;
 var $sy = 0, $texturemid = 0, $tobool = 0, $tobool75 = 0, $tobool78 = 0, $tobool85 = 0, $tx = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vis = 0, $x1 = 0, $x143 = 0, $x159 = 0, $x164 = 0, $x194 = 0, $x2 = 0, $x251 = 0, $x295 = 0, $xiscale = 0;
 var $xiscale56 = 0, $xiscale63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $avis = sp + 16|0;
 $psp$addr = $psp;
 $0 = $psp$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[100036]|0;
 $cmp = ($2>>>0)>=($3>>>0);
 if ($cmp) {
  $4 = $psp$addr;
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  _I_Error(156690,$vararg_buffer);
 }
 $7 = HEAP32[100037]|0;
 $8 = $psp$addr;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $arrayidx = (($7) + ($10<<3)|0);
 $sprdef = $arrayidx;
 $11 = $psp$addr;
 $12 = HEAP32[$11>>2]|0;
 $frame = ((($12)) + 4|0);
 $13 = HEAP32[$frame>>2]|0;
 $and = $13 & 32767;
 $14 = $sprdef;
 $15 = HEAP32[$14>>2]|0;
 $cmp6 = ($and|0)>=($15|0);
 if ($cmp6) {
  $16 = $psp$addr;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $psp$addr;
  $20 = HEAP32[$19>>2]|0;
  $frame11 = ((($20)) + 4|0);
  $21 = HEAP32[$frame11>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $18;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $21;
  _I_Error(156733,$vararg_buffer1);
 }
 $22 = $sprdef;
 $spriteframes = ((($22)) + 4|0);
 $23 = HEAP32[$spriteframes>>2]|0;
 $24 = $psp$addr;
 $25 = HEAP32[$24>>2]|0;
 $frame14 = ((($25)) + 4|0);
 $26 = HEAP32[$frame14>>2]|0;
 $and15 = $26 & 32767;
 $arrayidx16 = (($23) + (($and15*28)|0)|0);
 $sprframe = $arrayidx16;
 $27 = $sprframe;
 $lump17 = ((($27)) + 4|0);
 $28 = HEAP16[$lump17>>1]|0;
 $conv = $28 << 16 >> 16;
 $lump = $conv;
 $29 = $sprframe;
 $flip19 = ((($29)) + 20|0);
 $30 = HEAP8[$flip19>>0]|0;
 $conv21 = $30&255;
 $flip = $conv21;
 $31 = $psp$addr;
 $sx = ((($31)) + 8|0);
 $32 = HEAP32[$sx>>2]|0;
 $sub = (($32) - 10485760)|0;
 $tx = $sub;
 $33 = HEAP32[99931]|0;
 $34 = $lump;
 $arrayidx22 = (($33) + ($34<<2)|0);
 $35 = HEAP32[$arrayidx22>>2]|0;
 $36 = $tx;
 $sub23 = (($36) - ($35))|0;
 $tx = $sub23;
 $37 = HEAP32[99968]|0;
 $38 = $tx;
 $39 = HEAP32[100059]|0;
 $call = (_FixedMul($38,$39)|0);
 $add = (($37) + ($call))|0;
 $shr = $add >> 16;
 $x1 = $shr;
 $40 = $x1;
 $41 = HEAP32[99961]|0;
 $cmp24 = ($40|0)>($41|0);
 if ($cmp24) {
  STACKTOP = sp;return;
 }
 $42 = HEAP32[99930]|0;
 $43 = $lump;
 $arrayidx28 = (($42) + ($43<<2)|0);
 $44 = HEAP32[$arrayidx28>>2]|0;
 $45 = $tx;
 $add29 = (($45) + ($44))|0;
 $tx = $add29;
 $46 = HEAP32[99968]|0;
 $47 = $tx;
 $48 = HEAP32[100059]|0;
 $call30 = (_FixedMul($47,$48)|0);
 $add31 = (($46) + ($call30))|0;
 $shr32 = $add31 >> 16;
 $sub33 = (($shr32) - 1)|0;
 $x2 = $sub33;
 $49 = $x2;
 $cmp34 = ($49|0)<(0);
 if ($cmp34) {
  STACKTOP = sp;return;
 }
 $vis = $avis;
 $50 = $vis;
 $mobjflags = ((($50)) + 56|0);
 HEAP32[$mobjflags>>2] = 0;
 $51 = $psp$addr;
 $sy = ((($51)) + 12|0);
 $52 = HEAP32[$sy>>2]|0;
 $53 = HEAP32[99932]|0;
 $54 = $lump;
 $arrayidx38 = (($53) + ($54<<2)|0);
 $55 = HEAP32[$arrayidx38>>2]|0;
 $sub39 = (($52) - ($55))|0;
 $sub40 = (6586368 - ($sub39))|0;
 $56 = $vis;
 $texturemid = ((($56)) + 44|0);
 HEAP32[$texturemid>>2] = $sub40;
 $57 = $x1;
 $cmp41 = ($57|0)<(0);
 $58 = $x1;
 $cond = $cmp41 ? 0 : $58;
 $59 = $vis;
 $x143 = ((($59)) + 8|0);
 HEAP32[$x143>>2] = $cond;
 $60 = $x2;
 $61 = HEAP32[99961]|0;
 $cmp44 = ($60|0)>=($61|0);
 $62 = HEAP32[99961]|0;
 $sub47 = (($62) - 1)|0;
 $63 = $x2;
 $cond50 = $cmp44 ? $sub47 : $63;
 $64 = $vis;
 $x251 = ((($64)) + 12|0);
 HEAP32[$x251>>2] = $cond50;
 $65 = HEAP32[100059]|0;
 $66 = HEAP32[99967]|0;
 $shl = $65 << $66;
 $67 = $vis;
 $scale = ((($67)) + 36|0);
 HEAP32[$scale>>2] = $shl;
 $68 = $flip;
 $tobool = ($68|0)!=(0);
 $69 = HEAP32[100060]|0;
 if ($tobool) {
  $sub53 = (0 - ($69))|0;
  $70 = $vis;
  $xiscale = ((($70)) + 40|0);
  HEAP32[$xiscale>>2] = $sub53;
  $71 = HEAP32[99930]|0;
  $72 = $lump;
  $arrayidx54 = (($71) + ($72<<2)|0);
  $73 = HEAP32[$arrayidx54>>2]|0;
  $sub55 = (($73) - 1)|0;
  $74 = $vis;
  $startfrac = ((($74)) + 32|0);
  HEAP32[$startfrac>>2] = $sub55;
 } else {
  $75 = $vis;
  $xiscale56 = ((($75)) + 40|0);
  HEAP32[$xiscale56>>2] = $69;
  $76 = $vis;
  $startfrac57 = ((($76)) + 32|0);
  HEAP32[$startfrac57>>2] = 0;
 }
 $77 = $vis;
 $x159 = ((($77)) + 8|0);
 $78 = HEAP32[$x159>>2]|0;
 $79 = $x1;
 $cmp60 = ($78|0)>($79|0);
 if ($cmp60) {
  $80 = $vis;
  $xiscale63 = ((($80)) + 40|0);
  $81 = HEAP32[$xiscale63>>2]|0;
  $82 = $vis;
  $x164 = ((($82)) + 8|0);
  $83 = HEAP32[$x164>>2]|0;
  $84 = $x1;
  $sub65 = (($83) - ($84))|0;
  $mul = Math_imul($81, $sub65)|0;
  $85 = $vis;
  $startfrac66 = ((($85)) + 32|0);
  $86 = HEAP32[$startfrac66>>2]|0;
  $add67 = (($86) + ($mul))|0;
  HEAP32[$startfrac66>>2] = $add67;
 }
 $87 = $lump;
 $88 = $vis;
 $patch = ((($88)) + 48|0);
 HEAP32[$patch>>2] = $87;
 $89 = HEAP32[99982]|0;
 $powers = ((($89)) + 52|0);
 $arrayidx69 = ((($powers)) + 8|0);
 $90 = HEAP32[$arrayidx69>>2]|0;
 $cmp70 = ($90|0)>(128);
 do {
  if ($cmp70) {
   label = 14;
  } else {
   $91 = HEAP32[99982]|0;
   $powers72 = ((($91)) + 52|0);
   $arrayidx73 = ((($powers72)) + 8|0);
   $92 = HEAP32[$arrayidx73>>2]|0;
   $and74 = $92 & 8;
   $tobool75 = ($and74|0)!=(0);
   if ($tobool75) {
    label = 14;
   } else {
    $94 = HEAP32[99989]|0;
    $tobool78 = ($94|0)!=(0|0);
    if ($tobool78) {
     $95 = HEAP32[99989]|0;
     $96 = $vis;
     $colormap80 = ((($96)) + 52|0);
     HEAP32[$colormap80>>2] = $95;
     break;
    }
    $97 = $psp$addr;
    $98 = HEAP32[$97>>2]|0;
    $frame83 = ((($98)) + 4|0);
    $99 = HEAP32[$frame83>>2]|0;
    $and84 = $99 & 32768;
    $tobool85 = ($and84|0)!=(0);
    if ($tobool85) {
     $100 = HEAP32[99933]|0;
     $101 = $vis;
     $colormap87 = ((($101)) + 52|0);
     HEAP32[$colormap87>>2] = $100;
     break;
    } else {
     $102 = HEAP32[100058]|0;
     $arrayidx89 = ((($102)) + 188|0);
     $103 = HEAP32[$arrayidx89>>2]|0;
     $104 = $vis;
     $colormap90 = ((($104)) + 52|0);
     HEAP32[$colormap90>>2] = $103;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $93 = $vis;
  $colormap = ((($93)) + 52|0);
  HEAP32[$colormap>>2] = 0;
 }
 $105 = $vis;
 $106 = $vis;
 $x194 = ((($106)) + 8|0);
 $107 = HEAP32[$x194>>2]|0;
 $108 = $vis;
 $x295 = ((($108)) + 12|0);
 $109 = HEAP32[$x295>>2]|0;
 _R_DrawVisSprite($105,$107,$109);
 STACKTOP = sp;return;
}
function _R_DrawPlayerSprites() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $cmp = 0, $cmp2 = 0;
 var $cmp8 = 0, $conv = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $lightlevel = 0, $lightnum = 0, $psp = 0, $psprites = 0, $shr = 0, $subsector = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[99982]|0;
 $1 = HEAP32[$0>>2]|0;
 $subsector = ((($1)) + 52|0);
 $2 = HEAP32[$subsector>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $lightlevel = ((($3)) + 12|0);
 $4 = HEAP16[$lightlevel>>1]|0;
 $conv = $4 << 16 >> 16;
 $shr = $conv >> 4;
 $5 = HEAP32[99984]|0;
 $add = (($shr) + ($5))|0;
 $lightnum = $add;
 $6 = $lightnum;
 $cmp = ($6|0)<(0);
 do {
  if ($cmp) {
   HEAP32[100058] = 239936;
  } else {
   $7 = $lightnum;
   $cmp2 = ($7|0)>=(16);
   if ($cmp2) {
    HEAP32[100058] = (242816);
    break;
   } else {
    $8 = $lightnum;
    $arrayidx = (239936 + (($8*192)|0)|0);
    HEAP32[100058] = $arrayidx;
    break;
   }
  }
 } while(0);
 HEAP32[100056] = 385648;
 HEAP32[100057] = 377328;
 $i = 0;
 $9 = HEAP32[99982]|0;
 $psprites = ((($9)) + 252|0);
 $psp = $psprites;
 while(1) {
  $10 = $i;
  $cmp8 = ($10|0)<(2);
  if (!($cmp8)) {
   break;
  }
  $11 = $psp;
  $12 = HEAP32[$11>>2]|0;
  $tobool = ($12|0)!=(0|0);
  if ($tobool) {
   $13 = $psp;
   _R_DrawPSprite($13);
  }
  $14 = $i;
  $inc = (($14) + 1)|0;
  $i = $inc;
  $15 = $psp;
  $incdec$ptr = ((($15)) + 16|0);
  $psp = $incdec$ptr;
 }
 STACKTOP = sp;return;
}
function _R_SortVisSprites() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0;
 var $add$ptr2 = 0, $add$ptr5 = 0, $add$ptr7 = 0, $best = 0, $bestscale = 0, $cmp = 0, $cmp10 = 0, $cmp15 = 0, $cmp17 = 0, $count = 0, $ds = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $next = 0, $next1 = 0, $next12 = 0, $next13 = 0, $next22 = 0, $next25 = 0;
 var $next27 = 0, $next29 = 0, $next30 = 0, $next32 = 0, $next4 = 0, $next6 = 0, $scale = 0, $scale19 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $unsorted = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $unsorted = sp + 4|0;
 $0 = HEAP32[100038]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (377968))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 60)&-1;
 $count = $sub$ptr$div;
 HEAP32[$unsorted>>2] = $unsorted;
 $next = ((($unsorted)) + 4|0);
 HEAP32[$next>>2] = $unsorted;
 $1 = $count;
 $tobool = ($1|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $ds = 377968;
 while(1) {
  $2 = $ds;
  $3 = HEAP32[100038]|0;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   break;
  }
  $4 = $ds;
  $add$ptr = ((($4)) + 60|0);
  $5 = $ds;
  $next1 = ((($5)) + 4|0);
  HEAP32[$next1>>2] = $add$ptr;
  $6 = $ds;
  $add$ptr2 = ((($6)) + -60|0);
  $7 = $ds;
  HEAP32[$7>>2] = $add$ptr2;
  $8 = $ds;
  $incdec$ptr = ((($8)) + 60|0);
  $ds = $incdec$ptr;
 }
 HEAP32[94492] = $unsorted;
 $next4 = ((($unsorted)) + 4|0);
 HEAP32[$next4>>2] = 377968;
 $9 = HEAP32[100038]|0;
 $add$ptr5 = ((($9)) + -60|0);
 $next6 = ((($add$ptr5)) + 4|0);
 HEAP32[$next6>>2] = $unsorted;
 $10 = HEAP32[100038]|0;
 $add$ptr7 = ((($10)) + -60|0);
 HEAP32[$unsorted>>2] = $add$ptr7;
 HEAP32[100061] = 400244;
 HEAP32[(400248)>>2] = 400244;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $count;
  $cmp10 = ($11|0)<($12|0);
  if (!($cmp10)) {
   break;
  }
  $bestscale = 2147483647;
  $next12 = ((($unsorted)) + 4|0);
  $13 = HEAP32[$next12>>2]|0;
  $best = $13;
  $next13 = ((($unsorted)) + 4|0);
  $14 = HEAP32[$next13>>2]|0;
  $ds = $14;
  while(1) {
   $15 = $ds;
   $cmp15 = ($15|0)!=($unsorted|0);
   if (!($cmp15)) {
    break;
   }
   $16 = $ds;
   $scale = ((($16)) + 36|0);
   $17 = HEAP32[$scale>>2]|0;
   $18 = $bestscale;
   $cmp17 = ($17|0)<($18|0);
   if ($cmp17) {
    $19 = $ds;
    $scale19 = ((($19)) + 36|0);
    $20 = HEAP32[$scale19>>2]|0;
    $bestscale = $20;
    $21 = $ds;
    $best = $21;
   }
   $22 = $ds;
   $next22 = ((($22)) + 4|0);
   $23 = HEAP32[$next22>>2]|0;
   $ds = $23;
  }
  $24 = $best;
  $25 = HEAP32[$24>>2]|0;
  $26 = $best;
  $next25 = ((($26)) + 4|0);
  $27 = HEAP32[$next25>>2]|0;
  HEAP32[$27>>2] = $25;
  $28 = $best;
  $next27 = ((($28)) + 4|0);
  $29 = HEAP32[$next27>>2]|0;
  $30 = $best;
  $31 = HEAP32[$30>>2]|0;
  $next29 = ((($31)) + 4|0);
  HEAP32[$next29>>2] = $29;
  $32 = $best;
  $next30 = ((($32)) + 4|0);
  HEAP32[$next30>>2] = 400244;
  $33 = HEAP32[100061]|0;
  $34 = $best;
  HEAP32[$34>>2] = $33;
  $35 = $best;
  $36 = HEAP32[100061]|0;
  $next32 = ((($36)) + 4|0);
  HEAP32[$next32>>2] = $35;
  $37 = $best;
  HEAP32[100061] = $37;
  $38 = $i;
  $inc = (($38) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _R_DrawSprite($spr) {
 $spr = $spr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $add$ptr = 0, $and = 0, $and54 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx104 = 0, $arrayidx105 = 0, $arrayidx107 = 0, $arrayidx113 = 0, $arrayidx114 = 0, $arrayidx130 = 0, $arrayidx136 = 0, $arrayidx138 = 0, $arrayidx143 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $arrayidx66 = 0, $arrayidx79 = 0, $arrayidx84 = 0, $arrayidx85 = 0;
 var $arrayidx98 = 0, $bsilheight = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp100 = 0, $cmp109 = 0, $cmp127 = 0, $cmp132 = 0, $cmp140 = 0, $cmp16 = 0, $cmp21 = 0, $cmp28 = 0, $cmp3 = 0, $cmp36 = 0, $cmp39 = 0, $cmp49 = 0, $cmp52 = 0, $cmp56 = 0, $cmp59 = 0;
 var $cmp62 = 0, $cmp7 = 0, $cmp72 = 0, $cmp76 = 0, $cmp81 = 0, $cmp91 = 0, $cmp95 = 0, $cond = 0, $cond27 = 0, $conv = 0, $conv108 = 0, $conv131 = 0, $conv135 = 0, $conv139 = 0, $conv80 = 0, $conv99 = 0, $ds = 0, $gx = 0, $gy = 0, $gz = 0;
 var $gzt = 0, $inc = 0, $inc117 = 0, $inc146 = 0, $inc69 = 0, $inc88 = 0, $incdec$ptr = 0, $lowscale = 0, $maskedtexturecol = 0, $maskedtexturecol43 = 0, $r1 = 0, $r2 = 0, $scale = 0, $scale1 = 0, $scale131 = 0, $scale132 = 0, $scale2 = 0, $scale230 = 0, $scale233 = 0, $scale35 = 0;
 var $scale38 = 0, $silhouette = 0, $silhouette12 = 0, $silhouette48 = 0, $spr$addr = 0, $sprbottomclip = 0, $sprbottomclip103 = 0, $sprtopclip = 0, $sprtopclip112 = 0, $tobool = 0, $tobool13 = 0, $tobool41 = 0, $tobool44 = 0, $tsilheight = 0, $x = 0, $x1 = 0, $x1124 = 0, $x114 = 0, $x1148 = 0, $x115 = 0;
 var $x117 = 0, $x118 = 0, $x15 = 0, $x19 = 0, $x2 = 0, $x2126 = 0, $x2149 = 0, $x219 = 0, $x220 = 0, $x223 = 0, $x225 = 0, $x26 = 0, $x28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $spr$addr = $spr;
 $0 = $spr$addr;
 $x1 = ((($0)) + 8|0);
 $1 = HEAP32[$x1>>2]|0;
 $x = $1;
 while(1) {
  $2 = $x;
  $3 = $spr$addr;
  $x2 = ((($3)) + 12|0);
  $4 = HEAP32[$x2>>2]|0;
  $cmp = ($2|0)<=($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $x;
  $arrayidx = (386288 + ($5<<1)|0);
  HEAP16[$arrayidx>>1] = -2;
  $6 = $x;
  $arrayidx1 = (386928 + ($6<<1)|0);
  HEAP16[$arrayidx1>>1] = -2;
  $7 = $x;
  $inc = (($7) + 1)|0;
  $x = $inc;
 }
 $8 = HEAP32[99907]|0;
 $add$ptr = ((($8)) + -48|0);
 $ds = $add$ptr;
 while(1) {
  $9 = $ds;
  $cmp3 = ($9>>>0)>=(193712>>>0);
  if (!($cmp3)) {
   break;
  }
  $10 = $ds;
  $x15 = ((($10)) + 4|0);
  $11 = HEAP32[$x15>>2]|0;
  $12 = $spr$addr;
  $x26 = ((($12)) + 12|0);
  $13 = HEAP32[$x26>>2]|0;
  $cmp7 = ($11|0)>($13|0);
  L8: do {
   if (!($cmp7)) {
    $14 = $ds;
    $x28 = ((($14)) + 8|0);
    $15 = HEAP32[$x28>>2]|0;
    $16 = $spr$addr;
    $x19 = ((($16)) + 8|0);
    $17 = HEAP32[$x19>>2]|0;
    $cmp10 = ($15|0)<($17|0);
    if (!($cmp10)) {
     $18 = $ds;
     $silhouette12 = ((($18)) + 24|0);
     $19 = HEAP32[$silhouette12>>2]|0;
     $tobool = ($19|0)!=(0);
     if (!($tobool)) {
      $20 = $ds;
      $maskedtexturecol = ((($20)) + 44|0);
      $21 = HEAP32[$maskedtexturecol>>2]|0;
      $tobool13 = ($21|0)!=(0|0);
      if (!($tobool13)) {
       break;
      }
     }
     $22 = $ds;
     $x114 = ((($22)) + 4|0);
     $23 = HEAP32[$x114>>2]|0;
     $24 = $spr$addr;
     $x115 = ((($24)) + 8|0);
     $25 = HEAP32[$x115>>2]|0;
     $cmp16 = ($23|0)<($25|0);
     if ($cmp16) {
      $26 = $spr$addr;
      $x117 = ((($26)) + 8|0);
      $27 = HEAP32[$x117>>2]|0;
      $cond = $27;
     } else {
      $28 = $ds;
      $x118 = ((($28)) + 4|0);
      $29 = HEAP32[$x118>>2]|0;
      $cond = $29;
     }
     $r1 = $cond;
     $30 = $ds;
     $x219 = ((($30)) + 8|0);
     $31 = HEAP32[$x219>>2]|0;
     $32 = $spr$addr;
     $x220 = ((($32)) + 12|0);
     $33 = HEAP32[$x220>>2]|0;
     $cmp21 = ($31|0)>($33|0);
     if ($cmp21) {
      $34 = $spr$addr;
      $x223 = ((($34)) + 12|0);
      $35 = HEAP32[$x223>>2]|0;
      $cond27 = $35;
     } else {
      $36 = $ds;
      $x225 = ((($36)) + 8|0);
      $37 = HEAP32[$x225>>2]|0;
      $cond27 = $37;
     }
     $r2 = $cond27;
     $38 = $ds;
     $scale1 = ((($38)) + 12|0);
     $39 = HEAP32[$scale1>>2]|0;
     $40 = $ds;
     $scale2 = ((($40)) + 16|0);
     $41 = HEAP32[$scale2>>2]|0;
     $cmp28 = ($39|0)>($41|0);
     $42 = $ds;
     if ($cmp28) {
      $scale230 = ((($42)) + 16|0);
      $43 = HEAP32[$scale230>>2]|0;
      $lowscale = $43;
      $44 = $ds;
      $scale131 = ((($44)) + 12|0);
      $45 = HEAP32[$scale131>>2]|0;
      $scale = $45;
     } else {
      $scale132 = ((($42)) + 12|0);
      $46 = HEAP32[$scale132>>2]|0;
      $lowscale = $46;
      $47 = $ds;
      $scale233 = ((($47)) + 16|0);
      $48 = HEAP32[$scale233>>2]|0;
      $scale = $48;
     }
     $49 = $scale;
     $50 = $spr$addr;
     $scale35 = ((($50)) + 36|0);
     $51 = HEAP32[$scale35>>2]|0;
     $cmp36 = ($49|0)<($51|0);
     do {
      if (!($cmp36)) {
       $52 = $lowscale;
       $53 = $spr$addr;
       $scale38 = ((($53)) + 36|0);
       $54 = HEAP32[$scale38>>2]|0;
       $cmp39 = ($52|0)<($54|0);
       if ($cmp39) {
        $55 = $spr$addr;
        $gx = ((($55)) + 16|0);
        $56 = HEAP32[$gx>>2]|0;
        $57 = $spr$addr;
        $gy = ((($57)) + 20|0);
        $58 = HEAP32[$gy>>2]|0;
        $59 = $ds;
        $60 = HEAP32[$59>>2]|0;
        $call = (_R_PointOnSegSide($56,$58,$60)|0);
        $tobool41 = ($call|0)!=(0);
        if (!($tobool41)) {
         break;
        }
       }
       $66 = $ds;
       $silhouette48 = ((($66)) + 24|0);
       $67 = HEAP32[$silhouette48>>2]|0;
       $silhouette = $67;
       $68 = $spr$addr;
       $gz = ((($68)) + 24|0);
       $69 = HEAP32[$gz>>2]|0;
       $70 = $ds;
       $bsilheight = ((($70)) + 28|0);
       $71 = HEAP32[$bsilheight>>2]|0;
       $cmp49 = ($69|0)>=($71|0);
       if ($cmp49) {
        $72 = $silhouette;
        $and = $72 & -2;
        $silhouette = $and;
       }
       $73 = $spr$addr;
       $gzt = ((($73)) + 28|0);
       $74 = HEAP32[$gzt>>2]|0;
       $75 = $ds;
       $tsilheight = ((($75)) + 32|0);
       $76 = HEAP32[$tsilheight>>2]|0;
       $cmp52 = ($74|0)<=($76|0);
       if ($cmp52) {
        $77 = $silhouette;
        $and54 = $77 & -3;
        $silhouette = $and54;
       }
       $78 = $silhouette;
       $cmp56 = ($78|0)==(1);
       if ($cmp56) {
        $79 = $r1;
        $x = $79;
        while(1) {
         $80 = $x;
         $81 = $r2;
         $cmp59 = ($80|0)<=($81|0);
         if (!($cmp59)) {
          break L8;
         }
         $82 = $x;
         $arrayidx61 = (386928 + ($82<<1)|0);
         $83 = HEAP16[$arrayidx61>>1]|0;
         $conv = $83 << 16 >> 16;
         $cmp62 = ($conv|0)==(-2);
         if ($cmp62) {
          $84 = $ds;
          $sprbottomclip = ((($84)) + 40|0);
          $85 = HEAP32[$sprbottomclip>>2]|0;
          $86 = $x;
          $arrayidx65 = (($85) + ($86<<1)|0);
          $87 = HEAP16[$arrayidx65>>1]|0;
          $88 = $x;
          $arrayidx66 = (386928 + ($88<<1)|0);
          HEAP16[$arrayidx66>>1] = $87;
         }
         $89 = $x;
         $inc69 = (($89) + 1)|0;
         $x = $inc69;
        }
       }
       $90 = $silhouette;
       $cmp72 = ($90|0)==(2);
       if ($cmp72) {
        $91 = $r1;
        $x = $91;
        while(1) {
         $92 = $x;
         $93 = $r2;
         $cmp76 = ($92|0)<=($93|0);
         if (!($cmp76)) {
          break L8;
         }
         $94 = $x;
         $arrayidx79 = (386288 + ($94<<1)|0);
         $95 = HEAP16[$arrayidx79>>1]|0;
         $conv80 = $95 << 16 >> 16;
         $cmp81 = ($conv80|0)==(-2);
         if ($cmp81) {
          $96 = $ds;
          $sprtopclip = ((($96)) + 36|0);
          $97 = HEAP32[$sprtopclip>>2]|0;
          $98 = $x;
          $arrayidx84 = (($97) + ($98<<1)|0);
          $99 = HEAP16[$arrayidx84>>1]|0;
          $100 = $x;
          $arrayidx85 = (386288 + ($100<<1)|0);
          HEAP16[$arrayidx85>>1] = $99;
         }
         $101 = $x;
         $inc88 = (($101) + 1)|0;
         $x = $inc88;
        }
       }
       $102 = $silhouette;
       $cmp91 = ($102|0)==(3);
       if (!($cmp91)) {
        break L8;
       }
       $103 = $r1;
       $x = $103;
       while(1) {
        $104 = $x;
        $105 = $r2;
        $cmp95 = ($104|0)<=($105|0);
        if (!($cmp95)) {
         break L8;
        }
        $106 = $x;
        $arrayidx98 = (386928 + ($106<<1)|0);
        $107 = HEAP16[$arrayidx98>>1]|0;
        $conv99 = $107 << 16 >> 16;
        $cmp100 = ($conv99|0)==(-2);
        if ($cmp100) {
         $108 = $ds;
         $sprbottomclip103 = ((($108)) + 40|0);
         $109 = HEAP32[$sprbottomclip103>>2]|0;
         $110 = $x;
         $arrayidx104 = (($109) + ($110<<1)|0);
         $111 = HEAP16[$arrayidx104>>1]|0;
         $112 = $x;
         $arrayidx105 = (386928 + ($112<<1)|0);
         HEAP16[$arrayidx105>>1] = $111;
        }
        $113 = $x;
        $arrayidx107 = (386288 + ($113<<1)|0);
        $114 = HEAP16[$arrayidx107>>1]|0;
        $conv108 = $114 << 16 >> 16;
        $cmp109 = ($conv108|0)==(-2);
        if ($cmp109) {
         $115 = $ds;
         $sprtopclip112 = ((($115)) + 36|0);
         $116 = HEAP32[$sprtopclip112>>2]|0;
         $117 = $x;
         $arrayidx113 = (($116) + ($117<<1)|0);
         $118 = HEAP16[$arrayidx113>>1]|0;
         $119 = $x;
         $arrayidx114 = (386288 + ($119<<1)|0);
         HEAP16[$arrayidx114>>1] = $118;
        }
        $120 = $x;
        $inc117 = (($120) + 1)|0;
        $x = $inc117;
       }
      }
     } while(0);
     $61 = $ds;
     $maskedtexturecol43 = ((($61)) + 44|0);
     $62 = HEAP32[$maskedtexturecol43>>2]|0;
     $tobool44 = ($62|0)!=(0|0);
     if ($tobool44) {
      $63 = $ds;
      $64 = $r1;
      $65 = $r2;
      _R_RenderMaskedSegRange($63,$64,$65);
     }
    }
   }
  } while(0);
  $121 = $ds;
  $incdec$ptr = ((($121)) + -48|0);
  $ds = $incdec$ptr;
 }
 $122 = $spr$addr;
 $x1124 = ((($122)) + 8|0);
 $123 = HEAP32[$x1124>>2]|0;
 $x = $123;
 while(1) {
  $124 = $x;
  $125 = $spr$addr;
  $x2126 = ((($125)) + 12|0);
  $126 = HEAP32[$x2126>>2]|0;
  $cmp127 = ($124|0)<=($126|0);
  if (!($cmp127)) {
   break;
  }
  $127 = $x;
  $arrayidx130 = (386928 + ($127<<1)|0);
  $128 = HEAP16[$arrayidx130>>1]|0;
  $conv131 = $128 << 16 >> 16;
  $cmp132 = ($conv131|0)==(-2);
  if ($cmp132) {
   $129 = HEAP32[99946]|0;
   $conv135 = $129&65535;
   $130 = $x;
   $arrayidx136 = (386928 + ($130<<1)|0);
   HEAP16[$arrayidx136>>1] = $conv135;
  }
  $131 = $x;
  $arrayidx138 = (386288 + ($131<<1)|0);
  $132 = HEAP16[$arrayidx138>>1]|0;
  $conv139 = $132 << 16 >> 16;
  $cmp140 = ($conv139|0)==(-2);
  if ($cmp140) {
   $133 = $x;
   $arrayidx143 = (386288 + ($133<<1)|0);
   HEAP16[$arrayidx143>>1] = -1;
  }
  $134 = $x;
  $inc146 = (($134) + 1)|0;
  $x = $inc146;
 }
 HEAP32[100056] = 386928;
 HEAP32[100057] = 386288;
 $135 = $spr$addr;
 $136 = $spr$addr;
 $x1148 = ((($136)) + 8|0);
 $137 = HEAP32[$x1148>>2]|0;
 $138 = $spr$addr;
 $x2149 = ((($138)) + 12|0);
 $139 = HEAP32[$x2149>>2]|0;
 _R_DrawVisSprite($135,$137,$139);
 STACKTOP = sp;return;
}
function _R_DrawMasked() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $cmp = 0, $cmp1 = 0;
 var $cmp3 = 0, $ds = 0, $incdec$ptr = 0, $maskedtexturecol = 0, $next = 0, $spr = 0, $tobool = 0, $tobool9 = 0, $x1 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 _R_SortVisSprites();
 $0 = HEAP32[100038]|0;
 $cmp = ($0>>>0)>(377968>>>0);
 L1: do {
  if ($cmp) {
   $1 = HEAP32[(400248)>>2]|0;
   $spr = $1;
   while(1) {
    $2 = $spr;
    $cmp1 = ($2|0)!=(400244|0);
    if (!($cmp1)) {
     break L1;
    }
    $3 = $spr;
    _R_DrawSprite($3);
    $4 = $spr;
    $next = ((($4)) + 4|0);
    $5 = HEAP32[$next>>2]|0;
    $spr = $5;
   }
  }
 } while(0);
 $6 = HEAP32[99907]|0;
 $add$ptr = ((($6)) + -48|0);
 $ds = $add$ptr;
 while(1) {
  $7 = $ds;
  $cmp3 = ($7>>>0)>=(193712>>>0);
  if (!($cmp3)) {
   break;
  }
  $8 = $ds;
  $maskedtexturecol = ((($8)) + 44|0);
  $9 = HEAP32[$maskedtexturecol>>2]|0;
  $tobool = ($9|0)!=(0|0);
  if ($tobool) {
   $10 = $ds;
   $11 = $ds;
   $x1 = ((($11)) + 4|0);
   $12 = HEAP32[$x1>>2]|0;
   $13 = $ds;
   $x2 = ((($13)) + 8|0);
   $14 = HEAP32[$x2>>2]|0;
   _R_RenderMaskedSegRange($10,$12,$14);
  }
  $15 = $ds;
  $incdec$ptr = ((($15)) + -48|0);
  $ds = $incdec$ptr;
 }
 $16 = HEAP32[99983]|0;
 $tobool9 = ($16|0)!=(0);
 if ($tobool9) {
  STACKTOP = sp;return;
 }
 _R_DrawPlayerSprites();
 STACKTOP = sp;return;
}
function _SHA1_Init($hd) {
 $hd = $hd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $count = 0, $h1 = 0, $h2 = 0, $h3 = 0, $h4 = 0, $hd$addr = 0, $nblocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $hd$addr = $hd;
 $0 = $hd$addr;
 HEAP32[$0>>2] = 1732584193;
 $1 = $hd$addr;
 $h1 = ((($1)) + 4|0);
 HEAP32[$h1>>2] = -271733879;
 $2 = $hd$addr;
 $h2 = ((($2)) + 8|0);
 HEAP32[$h2>>2] = -1732584194;
 $3 = $hd$addr;
 $h3 = ((($3)) + 12|0);
 HEAP32[$h3>>2] = 271733878;
 $4 = $hd$addr;
 $h4 = ((($4)) + 16|0);
 HEAP32[$h4>>2] = -1009589776;
 $5 = $hd$addr;
 $nblocks = ((($5)) + 20|0);
 HEAP32[$nblocks>>2] = 0;
 $6 = $hd$addr;
 $count = ((($6)) + 88|0);
 HEAP32[$count>>2] = 0;
 STACKTOP = sp;return;
}
function _SHA1_Update($hd,$inbuf,$inlen) {
 $hd = $hd|0;
 $inbuf = $inbuf|0;
 $inlen = $inlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0;
 var $arrayidx32 = 0, $buf = 0, $buf10 = 0, $buf29 = 0, $cmp = 0, $cmp17 = 0, $cmp25 = 0, $cmp9 = 0, $count = 0, $count1 = 0, $count11 = 0, $count18 = 0, $count24 = 0, $count30 = 0, $count4 = 0, $count8 = 0, $dec = 0, $dec34 = 0, $hd$addr = 0, $inbuf$addr = 0;
 var $inc = 0, $inc12 = 0, $inc20 = 0, $inc31 = 0, $incdec$ptr = 0, $incdec$ptr28 = 0, $inlen$addr = 0, $nblocks = 0, $nblocks19 = 0, $sub = 0, $tobool = 0, $tobool13 = 0, $tobool22 = 0, $tobool5 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $hd$addr = $hd;
 $inbuf$addr = $inbuf;
 $inlen$addr = $inlen;
 $0 = $hd$addr;
 $count = ((($0)) + 88|0);
 $1 = HEAP32[$count>>2]|0;
 $cmp = ($1|0)==(64);
 if ($cmp) {
  $2 = $hd$addr;
  $3 = $hd$addr;
  $buf = ((($3)) + 24|0);
  _Transform($2,$buf);
  $4 = $hd$addr;
  $count1 = ((($4)) + 88|0);
  HEAP32[$count1>>2] = 0;
  $5 = $hd$addr;
  $nblocks = ((($5)) + 20|0);
  $6 = HEAP32[$nblocks>>2]|0;
  $inc = (($6) + 1)|0;
  HEAP32[$nblocks>>2] = $inc;
 }
 $7 = $inbuf$addr;
 $tobool = ($7|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $8 = $hd$addr;
 $count4 = ((($8)) + 88|0);
 $9 = HEAP32[$count4>>2]|0;
 $tobool5 = ($9|0)!=(0);
 if ($tobool5) {
  while(1) {
   $10 = $inlen$addr;
   $tobool7 = ($10|0)!=(0);
   if (!($tobool7)) {
    break;
   }
   $11 = $hd$addr;
   $count8 = ((($11)) + 88|0);
   $12 = HEAP32[$count8>>2]|0;
   $cmp9 = ($12|0)<(64);
   if (!($cmp9)) {
    break;
   }
   $13 = $inbuf$addr;
   $incdec$ptr = ((($13)) + 1|0);
   $inbuf$addr = $incdec$ptr;
   $14 = HEAP8[$13>>0]|0;
   $15 = $hd$addr;
   $buf10 = ((($15)) + 24|0);
   $16 = $hd$addr;
   $count11 = ((($16)) + 88|0);
   $17 = HEAP32[$count11>>2]|0;
   $inc12 = (($17) + 1)|0;
   HEAP32[$count11>>2] = $inc12;
   $arrayidx = (($buf10) + ($17)|0);
   HEAP8[$arrayidx>>0] = $14;
   $18 = $inlen$addr;
   $dec = (($18) + -1)|0;
   $inlen$addr = $dec;
  }
  $19 = $hd$addr;
  _SHA1_Update($19,0,0);
  $20 = $inlen$addr;
  $tobool13 = ($20|0)!=(0);
  if (!($tobool13)) {
   STACKTOP = sp;return;
  }
 }
 while(1) {
  $21 = $inlen$addr;
  $cmp17 = ($21>>>0)>=(64);
  if (!($cmp17)) {
   break;
  }
  $22 = $hd$addr;
  $23 = $inbuf$addr;
  _Transform($22,$23);
  $24 = $hd$addr;
  $count18 = ((($24)) + 88|0);
  HEAP32[$count18>>2] = 0;
  $25 = $hd$addr;
  $nblocks19 = ((($25)) + 20|0);
  $26 = HEAP32[$nblocks19>>2]|0;
  $inc20 = (($26) + 1)|0;
  HEAP32[$nblocks19>>2] = $inc20;
  $27 = $inlen$addr;
  $sub = (($27) - 64)|0;
  $inlen$addr = $sub;
  $28 = $inbuf$addr;
  $add$ptr = ((($28)) + 64|0);
  $inbuf$addr = $add$ptr;
 }
 while(1) {
  $29 = $inlen$addr;
  $tobool22 = ($29|0)!=(0);
  if (!($tobool22)) {
   label = 17;
   break;
  }
  $30 = $hd$addr;
  $count24 = ((($30)) + 88|0);
  $31 = HEAP32[$count24>>2]|0;
  $cmp25 = ($31|0)<(64);
  if (!($cmp25)) {
   label = 17;
   break;
  }
  $32 = $inbuf$addr;
  $incdec$ptr28 = ((($32)) + 1|0);
  $inbuf$addr = $incdec$ptr28;
  $33 = HEAP8[$32>>0]|0;
  $34 = $hd$addr;
  $buf29 = ((($34)) + 24|0);
  $35 = $hd$addr;
  $count30 = ((($35)) + 88|0);
  $36 = HEAP32[$count30>>2]|0;
  $inc31 = (($36) + 1)|0;
  HEAP32[$count30>>2] = $inc31;
  $arrayidx32 = (($buf29) + ($36)|0);
  HEAP8[$arrayidx32>>0] = $33;
  $37 = $inlen$addr;
  $dec34 = (($37) + -1)|0;
  $inlen$addr = $dec34;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _Transform($hd,$data) {
 $hd = $hd|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a = 0, $add = 0, $add$ptr = 0, $add10 = 0, $add1002 = 0, $add1003 = 0, $add1015 = 0, $add1016 = 0, $add102 = 0, $add1029 = 0, $add103 = 0, $add1030 = 0, $add1042 = 0, $add1043 = 0, $add105 = 0, $add1056 = 0, $add1057 = 0, $add106 = 0, $add1069 = 0, $add1070 = 0;
 var $add1083 = 0, $add1084 = 0, $add1096 = 0, $add1097 = 0, $add11 = 0, $add1110 = 0, $add1111 = 0, $add1123 = 0, $add1124 = 0, $add1137 = 0, $add1138 = 0, $add1150 = 0, $add1151 = 0, $add1164 = 0, $add1165 = 0, $add1177 = 0, $add1178 = 0, $add118 = 0, $add119 = 0, $add1191 = 0;
 var $add1192 = 0, $add1204 = 0, $add1205 = 0, $add121 = 0, $add1218 = 0, $add1219 = 0, $add122 = 0, $add1231 = 0, $add1232 = 0, $add1245 = 0, $add1246 = 0, $add1258 = 0, $add1259 = 0, $add1272 = 0, $add1273 = 0, $add1285 = 0, $add1286 = 0, $add1299 = 0, $add1300 = 0, $add1312 = 0;
 var $add1313 = 0, $add1326 = 0, $add1327 = 0, $add1339 = 0, $add134 = 0, $add1340 = 0, $add135 = 0, $add1353 = 0, $add1354 = 0, $add1366 = 0, $add1367 = 0, $add137 = 0, $add138 = 0, $add1380 = 0, $add1381 = 0, $add1393 = 0, $add1394 = 0, $add1405 = 0, $add1406 = 0, $add1418 = 0;
 var $add1419 = 0, $add1430 = 0, $add1431 = 0, $add1443 = 0, $add1444 = 0, $add1455 = 0, $add1456 = 0, $add1468 = 0, $add1469 = 0, $add1480 = 0, $add1481 = 0, $add1493 = 0, $add1494 = 0, $add150 = 0, $add1505 = 0, $add1506 = 0, $add151 = 0, $add1518 = 0, $add1519 = 0, $add153 = 0;
 var $add1530 = 0, $add1531 = 0, $add154 = 0, $add1543 = 0, $add1544 = 0, $add1555 = 0, $add1556 = 0, $add1568 = 0, $add1569 = 0, $add1580 = 0, $add1581 = 0, $add1593 = 0, $add1594 = 0, $add1605 = 0, $add1606 = 0, $add1618 = 0, $add1619 = 0, $add1630 = 0, $add1631 = 0, $add1643 = 0;
 var $add1644 = 0, $add1655 = 0, $add1656 = 0, $add166 = 0, $add1668 = 0, $add1669 = 0, $add167 = 0, $add1680 = 0, $add1681 = 0, $add169 = 0, $add1693 = 0, $add1694 = 0, $add170 = 0, $add1705 = 0, $add1706 = 0, $add1718 = 0, $add1719 = 0, $add1730 = 0, $add1731 = 0, $add1743 = 0;
 var $add1744 = 0, $add1755 = 0, $add1756 = 0, $add1768 = 0, $add1769 = 0, $add1780 = 0, $add1781 = 0, $add1793 = 0, $add1794 = 0, $add1805 = 0, $add1806 = 0, $add1818 = 0, $add1819 = 0, $add182 = 0, $add183 = 0, $add1830 = 0, $add1831 = 0, $add1843 = 0, $add1844 = 0, $add185 = 0;
 var $add1855 = 0, $add1856 = 0, $add186 = 0, $add1868 = 0, $add1869 = 0, $add1880 = 0, $add1881 = 0, $add1893 = 0, $add1894 = 0, $add1900 = 0, $add1902 = 0, $add1904 = 0, $add1906 = 0, $add1908 = 0, $add198 = 0, $add199 = 0, $add201 = 0, $add202 = 0, $add214 = 0, $add215 = 0;
 var $add217 = 0, $add218 = 0, $add22 = 0, $add23 = 0, $add230 = 0, $add231 = 0, $add233 = 0, $add234 = 0, $add246 = 0, $add247 = 0, $add249 = 0, $add25 = 0, $add250 = 0, $add26 = 0, $add262 = 0, $add263 = 0, $add275 = 0, $add276 = 0, $add288 = 0, $add289 = 0;
 var $add301 = 0, $add302 = 0, $add314 = 0, $add315 = 0, $add327 = 0, $add328 = 0, $add340 = 0, $add341 = 0, $add353 = 0, $add354 = 0, $add365 = 0, $add366 = 0, $add378 = 0, $add379 = 0, $add38 = 0, $add39 = 0, $add390 = 0, $add391 = 0, $add403 = 0, $add404 = 0;
 var $add41 = 0, $add415 = 0, $add416 = 0, $add42 = 0, $add428 = 0, $add429 = 0, $add440 = 0, $add441 = 0, $add453 = 0, $add454 = 0, $add465 = 0, $add466 = 0, $add478 = 0, $add479 = 0, $add490 = 0, $add491 = 0, $add503 = 0, $add504 = 0, $add515 = 0, $add516 = 0;
 var $add528 = 0, $add529 = 0, $add54 = 0, $add540 = 0, $add541 = 0, $add55 = 0, $add553 = 0, $add554 = 0, $add565 = 0, $add566 = 0, $add57 = 0, $add578 = 0, $add579 = 0, $add58 = 0, $add590 = 0, $add591 = 0, $add603 = 0, $add604 = 0, $add615 = 0, $add616 = 0;
 var $add628 = 0, $add629 = 0, $add640 = 0, $add641 = 0, $add653 = 0, $add654 = 0, $add665 = 0, $add666 = 0, $add678 = 0, $add679 = 0, $add690 = 0, $add691 = 0, $add70 = 0, $add703 = 0, $add704 = 0, $add71 = 0, $add715 = 0, $add716 = 0, $add728 = 0, $add729 = 0;
 var $add73 = 0, $add74 = 0, $add740 = 0, $add741 = 0, $add753 = 0, $add754 = 0, $add765 = 0, $add766 = 0, $add778 = 0, $add779 = 0, $add790 = 0, $add791 = 0, $add8 = 0, $add803 = 0, $add804 = 0, $add815 = 0, $add816 = 0, $add828 = 0, $add829 = 0, $add840 = 0;
 var $add841 = 0, $add853 = 0, $add854 = 0, $add86 = 0, $add867 = 0, $add868 = 0, $add87 = 0, $add880 = 0, $add881 = 0, $add89 = 0, $add894 = 0, $add895 = 0, $add90 = 0, $add907 = 0, $add908 = 0, $add921 = 0, $add922 = 0, $add934 = 0, $add935 = 0, $add948 = 0;
 var $add949 = 0, $add961 = 0, $add962 = 0, $add975 = 0, $add976 = 0, $add988 = 0, $add989 = 0, $and = 0, $and100 = 0, $and1000 = 0, $and1025 = 0, $and1027 = 0, $and1052 = 0, $and1054 = 0, $and1079 = 0, $and1081 = 0, $and1106 = 0, $and1108 = 0, $and1133 = 0, $and1135 = 0;
 var $and116 = 0, $and1160 = 0, $and1162 = 0, $and1187 = 0, $and1189 = 0, $and1214 = 0, $and1216 = 0, $and1241 = 0, $and1243 = 0, $and1268 = 0, $and1270 = 0, $and1295 = 0, $and1297 = 0, $and132 = 0, $and1322 = 0, $and1324 = 0, $and1349 = 0, $and1351 = 0, $and1376 = 0, $and1378 = 0;
 var $and148 = 0, $and164 = 0, $and180 = 0, $and196 = 0, $and20 = 0, $and212 = 0, $and228 = 0, $and244 = 0, $and260 = 0, $and286 = 0, $and312 = 0, $and338 = 0, $and36 = 0, $and52 = 0, $and68 = 0, $and84 = 0, $and863 = 0, $and865 = 0, $and890 = 0, $and892 = 0;
 var $and917 = 0, $and919 = 0, $and944 = 0, $and946 = 0, $and971 = 0, $and973 = 0, $and998 = 0, $arrayidx = 0, $arrayidx1004 = 0, $arrayidx1005 = 0, $arrayidx1007 = 0, $arrayidx1009 = 0, $arrayidx1014 = 0, $arrayidx1031 = 0, $arrayidx1034 = 0, $arrayidx1036 = 0, $arrayidx104 = 0, $arrayidx1041 = 0, $arrayidx1058 = 0, $arrayidx1059 = 0;
 var $arrayidx1061 = 0, $arrayidx1063 = 0, $arrayidx1068 = 0, $arrayidx1086 = 0, $arrayidx1088 = 0, $arrayidx1090 = 0, $arrayidx1112 = 0, $arrayidx1113 = 0, $arrayidx1115 = 0, $arrayidx1117 = 0, $arrayidx1122 = 0, $arrayidx1139 = 0, $arrayidx1140 = 0, $arrayidx1142 = 0, $arrayidx1144 = 0, $arrayidx1149 = 0, $arrayidx1166 = 0, $arrayidx1167 = 0, $arrayidx1169 = 0, $arrayidx1176 = 0;
 var $arrayidx1193 = 0, $arrayidx1194 = 0, $arrayidx1196 = 0, $arrayidx1198 = 0, $arrayidx120 = 0, $arrayidx1203 = 0, $arrayidx1220 = 0, $arrayidx1221 = 0, $arrayidx1223 = 0, $arrayidx1225 = 0, $arrayidx1230 = 0, $arrayidx1247 = 0, $arrayidx1248 = 0, $arrayidx1250 = 0, $arrayidx1252 = 0, $arrayidx1257 = 0, $arrayidx1274 = 0, $arrayidx1275 = 0, $arrayidx1277 = 0, $arrayidx1279 = 0;
 var $arrayidx1284 = 0, $arrayidx1301 = 0, $arrayidx1302 = 0, $arrayidx1306 = 0, $arrayidx1311 = 0, $arrayidx1328 = 0, $arrayidx1329 = 0, $arrayidx1331 = 0, $arrayidx1333 = 0, $arrayidx1338 = 0, $arrayidx1355 = 0, $arrayidx1356 = 0, $arrayidx1358 = 0, $arrayidx136 = 0, $arrayidx1360 = 0, $arrayidx1365 = 0, $arrayidx1382 = 0, $arrayidx1383 = 0, $arrayidx1385 = 0, $arrayidx1387 = 0;
 var $arrayidx1392 = 0, $arrayidx1407 = 0, $arrayidx1408 = 0, $arrayidx1410 = 0, $arrayidx1412 = 0, $arrayidx1417 = 0, $arrayidx1432 = 0, $arrayidx1433 = 0, $arrayidx1435 = 0, $arrayidx1437 = 0, $arrayidx1442 = 0, $arrayidx1457 = 0, $arrayidx1460 = 0, $arrayidx1462 = 0, $arrayidx1467 = 0, $arrayidx1482 = 0, $arrayidx1483 = 0, $arrayidx1485 = 0, $arrayidx1487 = 0, $arrayidx1492 = 0;
 var $arrayidx1508 = 0, $arrayidx1510 = 0, $arrayidx1512 = 0, $arrayidx152 = 0, $arrayidx1532 = 0, $arrayidx1533 = 0, $arrayidx1535 = 0, $arrayidx1537 = 0, $arrayidx1542 = 0, $arrayidx1557 = 0, $arrayidx1558 = 0, $arrayidx1560 = 0, $arrayidx1562 = 0, $arrayidx1567 = 0, $arrayidx1582 = 0, $arrayidx1583 = 0, $arrayidx1585 = 0, $arrayidx1592 = 0, $arrayidx1607 = 0, $arrayidx1608 = 0;
 var $arrayidx1610 = 0, $arrayidx1612 = 0, $arrayidx1617 = 0, $arrayidx1632 = 0, $arrayidx1633 = 0, $arrayidx1635 = 0, $arrayidx1637 = 0, $arrayidx1642 = 0, $arrayidx1657 = 0, $arrayidx1658 = 0, $arrayidx1660 = 0, $arrayidx1662 = 0, $arrayidx1667 = 0, $arrayidx168 = 0, $arrayidx1682 = 0, $arrayidx1683 = 0, $arrayidx1685 = 0, $arrayidx1687 = 0, $arrayidx1692 = 0, $arrayidx1707 = 0;
 var $arrayidx1708 = 0, $arrayidx1712 = 0, $arrayidx1717 = 0, $arrayidx1732 = 0, $arrayidx1733 = 0, $arrayidx1735 = 0, $arrayidx1737 = 0, $arrayidx1742 = 0, $arrayidx1757 = 0, $arrayidx1758 = 0, $arrayidx1760 = 0, $arrayidx1762 = 0, $arrayidx1767 = 0, $arrayidx1782 = 0, $arrayidx1783 = 0, $arrayidx1785 = 0, $arrayidx1787 = 0, $arrayidx1792 = 0, $arrayidx1807 = 0, $arrayidx1808 = 0;
 var $arrayidx1810 = 0, $arrayidx1812 = 0, $arrayidx1817 = 0, $arrayidx1832 = 0, $arrayidx1833 = 0, $arrayidx1835 = 0, $arrayidx1837 = 0, $arrayidx184 = 0, $arrayidx1842 = 0, $arrayidx1857 = 0, $arrayidx1860 = 0, $arrayidx1862 = 0, $arrayidx1867 = 0, $arrayidx1882 = 0, $arrayidx1883 = 0, $arrayidx1885 = 0, $arrayidx1887 = 0, $arrayidx1892 = 0, $arrayidx2 = 0, $arrayidx200 = 0;
 var $arrayidx216 = 0, $arrayidx232 = 0, $arrayidx24 = 0, $arrayidx248 = 0, $arrayidx265 = 0, $arrayidx267 = 0, $arrayidx269 = 0, $arrayidx290 = 0, $arrayidx291 = 0, $arrayidx293 = 0, $arrayidx295 = 0, $arrayidx300 = 0, $arrayidx316 = 0, $arrayidx317 = 0, $arrayidx319 = 0, $arrayidx321 = 0, $arrayidx326 = 0, $arrayidx342 = 0, $arrayidx343 = 0, $arrayidx345 = 0;
 var $arrayidx352 = 0, $arrayidx367 = 0, $arrayidx368 = 0, $arrayidx370 = 0, $arrayidx372 = 0, $arrayidx377 = 0, $arrayidx392 = 0, $arrayidx393 = 0, $arrayidx395 = 0, $arrayidx397 = 0, $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx402 = 0, $arrayidx417 = 0, $arrayidx418 = 0, $arrayidx420 = 0, $arrayidx422 = 0, $arrayidx427 = 0, $arrayidx442 = 0, $arrayidx443 = 0;
 var $arrayidx445 = 0, $arrayidx447 = 0, $arrayidx452 = 0, $arrayidx467 = 0, $arrayidx468 = 0, $arrayidx472 = 0, $arrayidx477 = 0, $arrayidx492 = 0, $arrayidx493 = 0, $arrayidx495 = 0, $arrayidx497 = 0, $arrayidx502 = 0, $arrayidx517 = 0, $arrayidx518 = 0, $arrayidx520 = 0, $arrayidx522 = 0, $arrayidx527 = 0, $arrayidx542 = 0, $arrayidx543 = 0, $arrayidx545 = 0;
 var $arrayidx547 = 0, $arrayidx552 = 0, $arrayidx56 = 0, $arrayidx567 = 0, $arrayidx568 = 0, $arrayidx570 = 0, $arrayidx572 = 0, $arrayidx577 = 0, $arrayidx592 = 0, $arrayidx593 = 0, $arrayidx595 = 0, $arrayidx597 = 0, $arrayidx602 = 0, $arrayidx617 = 0, $arrayidx620 = 0, $arrayidx622 = 0, $arrayidx627 = 0, $arrayidx642 = 0, $arrayidx643 = 0, $arrayidx645 = 0;
 var $arrayidx647 = 0, $arrayidx652 = 0, $arrayidx668 = 0, $arrayidx670 = 0, $arrayidx672 = 0, $arrayidx692 = 0, $arrayidx693 = 0, $arrayidx695 = 0, $arrayidx697 = 0, $arrayidx702 = 0, $arrayidx717 = 0, $arrayidx718 = 0, $arrayidx72 = 0, $arrayidx720 = 0, $arrayidx722 = 0, $arrayidx727 = 0, $arrayidx742 = 0, $arrayidx743 = 0, $arrayidx745 = 0, $arrayidx752 = 0;
 var $arrayidx767 = 0, $arrayidx768 = 0, $arrayidx770 = 0, $arrayidx772 = 0, $arrayidx777 = 0, $arrayidx792 = 0, $arrayidx793 = 0, $arrayidx795 = 0, $arrayidx797 = 0, $arrayidx802 = 0, $arrayidx817 = 0, $arrayidx818 = 0, $arrayidx820 = 0, $arrayidx822 = 0, $arrayidx827 = 0, $arrayidx842 = 0, $arrayidx843 = 0, $arrayidx845 = 0, $arrayidx847 = 0, $arrayidx852 = 0;
 var $arrayidx869 = 0, $arrayidx870 = 0, $arrayidx874 = 0, $arrayidx879 = 0, $arrayidx88 = 0, $arrayidx896 = 0, $arrayidx897 = 0, $arrayidx899 = 0, $arrayidx901 = 0, $arrayidx906 = 0, $arrayidx923 = 0, $arrayidx924 = 0, $arrayidx926 = 0, $arrayidx928 = 0, $arrayidx933 = 0, $arrayidx950 = 0, $arrayidx951 = 0, $arrayidx953 = 0, $arrayidx955 = 0, $arrayidx960 = 0;
 var $arrayidx977 = 0, $arrayidx978 = 0, $arrayidx980 = 0, $arrayidx982 = 0, $arrayidx987 = 0, $b = 0, $c = 0, $cmp = 0, $d = 0, $data$addr = 0, $e = 0, $h1 = 0, $h11901 = 0, $h2 = 0, $h21903 = 0, $h3 = 0, $h31905 = 0, $h4 = 0, $h41907 = 0, $hd$addr = 0;
 var $i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $incdec$ptr3 = 0, $incdec$ptr5 = 0, $or = 0, $or1001 = 0, $or1013 = 0, $or1019 = 0, $or1024 = 0, $or1026 = 0, $or1028 = 0, $or1040 = 0, $or1046 = 0, $or1051 = 0, $or1053 = 0, $or1055 = 0, $or1067 = 0, $or1073 = 0;
 var $or1078 = 0, $or1080 = 0, $or1082 = 0, $or109 = 0, $or1094 = 0, $or1100 = 0, $or1105 = 0, $or1107 = 0, $or1109 = 0, $or1121 = 0, $or1127 = 0, $or1132 = 0, $or1134 = 0, $or1136 = 0, $or114 = 0, $or1148 = 0, $or1154 = 0, $or1159 = 0, $or1161 = 0, $or1163 = 0;
 var $or1175 = 0, $or1181 = 0, $or1186 = 0, $or1188 = 0, $or1190 = 0, $or1202 = 0, $or1208 = 0, $or1213 = 0, $or1215 = 0, $or1217 = 0, $or1229 = 0, $or1235 = 0, $or1240 = 0, $or1242 = 0, $or1244 = 0, $or125 = 0, $or1256 = 0, $or1262 = 0, $or1267 = 0, $or1269 = 0;
 var $or1271 = 0, $or1283 = 0, $or1289 = 0, $or1294 = 0, $or1296 = 0, $or1298 = 0, $or130 = 0, $or1310 = 0, $or1316 = 0, $or1321 = 0, $or1323 = 0, $or1325 = 0, $or1337 = 0, $or1343 = 0, $or1348 = 0, $or1350 = 0, $or1352 = 0, $or1364 = 0, $or1370 = 0, $or1375 = 0;
 var $or1377 = 0, $or1379 = 0, $or1391 = 0, $or1397 = 0, $or14 = 0, $or1402 = 0, $or141 = 0, $or1416 = 0, $or1422 = 0, $or1427 = 0, $or1441 = 0, $or1447 = 0, $or1452 = 0, $or146 = 0, $or1466 = 0, $or1472 = 0, $or1477 = 0, $or1491 = 0, $or1497 = 0, $or1502 = 0;
 var $or1516 = 0, $or1522 = 0, $or1527 = 0, $or1541 = 0, $or1547 = 0, $or1552 = 0, $or1566 = 0, $or157 = 0, $or1572 = 0, $or1577 = 0, $or1591 = 0, $or1597 = 0, $or1602 = 0, $or1616 = 0, $or162 = 0, $or1622 = 0, $or1627 = 0, $or1641 = 0, $or1647 = 0, $or1652 = 0;
 var $or1666 = 0, $or1672 = 0, $or1677 = 0, $or1691 = 0, $or1697 = 0, $or1702 = 0, $or1716 = 0, $or1722 = 0, $or1727 = 0, $or173 = 0, $or1741 = 0, $or1747 = 0, $or1752 = 0, $or1766 = 0, $or1772 = 0, $or1777 = 0, $or178 = 0, $or1791 = 0, $or1797 = 0, $or18 = 0;
 var $or1802 = 0, $or1816 = 0, $or1822 = 0, $or1827 = 0, $or1841 = 0, $or1847 = 0, $or1852 = 0, $or1866 = 0, $or1872 = 0, $or1877 = 0, $or189 = 0, $or1891 = 0, $or1897 = 0, $or194 = 0, $or205 = 0, $or210 = 0, $or221 = 0, $or226 = 0, $or237 = 0, $or242 = 0;
 var $or253 = 0, $or258 = 0, $or273 = 0, $or279 = 0, $or284 = 0, $or29 = 0, $or299 = 0, $or305 = 0, $or310 = 0, $or325 = 0, $or331 = 0, $or336 = 0, $or34 = 0, $or351 = 0, $or357 = 0, $or362 = 0, $or376 = 0, $or382 = 0, $or387 = 0, $or401 = 0;
 var $or407 = 0, $or412 = 0, $or426 = 0, $or432 = 0, $or437 = 0, $or45 = 0, $or451 = 0, $or457 = 0, $or462 = 0, $or476 = 0, $or482 = 0, $or487 = 0, $or50 = 0, $or501 = 0, $or507 = 0, $or512 = 0, $or526 = 0, $or532 = 0, $or537 = 0, $or551 = 0;
 var $or557 = 0, $or562 = 0, $or576 = 0, $or582 = 0, $or587 = 0, $or601 = 0, $or607 = 0, $or61 = 0, $or612 = 0, $or626 = 0, $or632 = 0, $or637 = 0, $or651 = 0, $or657 = 0, $or66 = 0, $or662 = 0, $or676 = 0, $or682 = 0, $or687 = 0, $or701 = 0;
 var $or707 = 0, $or712 = 0, $or726 = 0, $or732 = 0, $or737 = 0, $or751 = 0, $or757 = 0, $or762 = 0, $or77 = 0, $or776 = 0, $or782 = 0, $or787 = 0, $or801 = 0, $or807 = 0, $or812 = 0, $or82 = 0, $or826 = 0, $or832 = 0, $or837 = 0, $or851 = 0;
 var $or857 = 0, $or862 = 0, $or864 = 0, $or866 = 0, $or878 = 0, $or884 = 0, $or889 = 0, $or891 = 0, $or893 = 0, $or905 = 0, $or911 = 0, $or916 = 0, $or918 = 0, $or920 = 0, $or93 = 0, $or932 = 0, $or938 = 0, $or943 = 0, $or945 = 0, $or947 = 0;
 var $or959 = 0, $or965 = 0, $or970 = 0, $or972 = 0, $or974 = 0, $or98 = 0, $or986 = 0, $or992 = 0, $or997 = 0, $or999 = 0, $p2 = 0, $shl = 0, $shl1011 = 0, $shl1017 = 0, $shl1022 = 0, $shl1038 = 0, $shl1044 = 0, $shl1049 = 0, $shl1065 = 0, $shl107 = 0;
 var $shl1071 = 0, $shl1076 = 0, $shl1092 = 0, $shl1098 = 0, $shl1103 = 0, $shl1119 = 0, $shl112 = 0, $shl1125 = 0, $shl1130 = 0, $shl1146 = 0, $shl1152 = 0, $shl1157 = 0, $shl1173 = 0, $shl1179 = 0, $shl1184 = 0, $shl12 = 0, $shl1200 = 0, $shl1206 = 0, $shl1211 = 0, $shl1227 = 0;
 var $shl123 = 0, $shl1233 = 0, $shl1238 = 0, $shl1254 = 0, $shl1260 = 0, $shl1265 = 0, $shl128 = 0, $shl1281 = 0, $shl1287 = 0, $shl1292 = 0, $shl1308 = 0, $shl1314 = 0, $shl1319 = 0, $shl1335 = 0, $shl1341 = 0, $shl1346 = 0, $shl1362 = 0, $shl1368 = 0, $shl1373 = 0, $shl1389 = 0;
 var $shl139 = 0, $shl1395 = 0, $shl1400 = 0, $shl1414 = 0, $shl1420 = 0, $shl1425 = 0, $shl1439 = 0, $shl144 = 0, $shl1445 = 0, $shl1450 = 0, $shl1464 = 0, $shl1470 = 0, $shl1475 = 0, $shl1489 = 0, $shl1495 = 0, $shl1500 = 0, $shl1514 = 0, $shl1520 = 0, $shl1525 = 0, $shl1539 = 0;
 var $shl1545 = 0, $shl155 = 0, $shl1550 = 0, $shl1564 = 0, $shl1570 = 0, $shl1575 = 0, $shl1589 = 0, $shl1595 = 0, $shl16 = 0, $shl160 = 0, $shl1600 = 0, $shl1614 = 0, $shl1620 = 0, $shl1625 = 0, $shl1639 = 0, $shl1645 = 0, $shl1650 = 0, $shl1664 = 0, $shl1670 = 0, $shl1675 = 0;
 var $shl1689 = 0, $shl1695 = 0, $shl1700 = 0, $shl171 = 0, $shl1714 = 0, $shl1720 = 0, $shl1725 = 0, $shl1739 = 0, $shl1745 = 0, $shl1750 = 0, $shl176 = 0, $shl1764 = 0, $shl1770 = 0, $shl1775 = 0, $shl1789 = 0, $shl1795 = 0, $shl1800 = 0, $shl1814 = 0, $shl1820 = 0, $shl1825 = 0;
 var $shl1839 = 0, $shl1845 = 0, $shl1850 = 0, $shl1864 = 0, $shl187 = 0, $shl1870 = 0, $shl1875 = 0, $shl1889 = 0, $shl1895 = 0, $shl192 = 0, $shl203 = 0, $shl208 = 0, $shl219 = 0, $shl224 = 0, $shl235 = 0, $shl240 = 0, $shl251 = 0, $shl256 = 0, $shl27 = 0, $shl271 = 0;
 var $shl277 = 0, $shl282 = 0, $shl297 = 0, $shl303 = 0, $shl308 = 0, $shl32 = 0, $shl323 = 0, $shl329 = 0, $shl334 = 0, $shl349 = 0, $shl355 = 0, $shl360 = 0, $shl374 = 0, $shl380 = 0, $shl385 = 0, $shl399 = 0, $shl405 = 0, $shl410 = 0, $shl424 = 0, $shl43 = 0;
 var $shl430 = 0, $shl435 = 0, $shl449 = 0, $shl455 = 0, $shl460 = 0, $shl474 = 0, $shl48 = 0, $shl480 = 0, $shl485 = 0, $shl499 = 0, $shl505 = 0, $shl510 = 0, $shl524 = 0, $shl530 = 0, $shl535 = 0, $shl549 = 0, $shl555 = 0, $shl560 = 0, $shl574 = 0, $shl580 = 0;
 var $shl585 = 0, $shl59 = 0, $shl599 = 0, $shl605 = 0, $shl610 = 0, $shl624 = 0, $shl630 = 0, $shl635 = 0, $shl64 = 0, $shl649 = 0, $shl655 = 0, $shl660 = 0, $shl674 = 0, $shl680 = 0, $shl685 = 0, $shl699 = 0, $shl705 = 0, $shl710 = 0, $shl724 = 0, $shl730 = 0;
 var $shl735 = 0, $shl749 = 0, $shl75 = 0, $shl755 = 0, $shl760 = 0, $shl774 = 0, $shl780 = 0, $shl785 = 0, $shl799 = 0, $shl80 = 0, $shl805 = 0, $shl810 = 0, $shl824 = 0, $shl830 = 0, $shl835 = 0, $shl849 = 0, $shl855 = 0, $shl860 = 0, $shl876 = 0, $shl882 = 0;
 var $shl887 = 0, $shl903 = 0, $shl909 = 0, $shl91 = 0, $shl914 = 0, $shl930 = 0, $shl936 = 0, $shl941 = 0, $shl957 = 0, $shl96 = 0, $shl963 = 0, $shl968 = 0, $shl984 = 0, $shl990 = 0, $shl995 = 0, $shr = 0, $shr1012 = 0, $shr1018 = 0, $shr1023 = 0, $shr1039 = 0;
 var $shr1045 = 0, $shr1050 = 0, $shr1066 = 0, $shr1072 = 0, $shr1077 = 0, $shr108 = 0, $shr1093 = 0, $shr1099 = 0, $shr1104 = 0, $shr1120 = 0, $shr1126 = 0, $shr113 = 0, $shr1131 = 0, $shr1147 = 0, $shr1153 = 0, $shr1158 = 0, $shr1174 = 0, $shr1180 = 0, $shr1185 = 0, $shr1201 = 0;
 var $shr1207 = 0, $shr1212 = 0, $shr1228 = 0, $shr1234 = 0, $shr1239 = 0, $shr124 = 0, $shr1255 = 0, $shr1261 = 0, $shr1266 = 0, $shr1282 = 0, $shr1288 = 0, $shr129 = 0, $shr1293 = 0, $shr13 = 0, $shr1309 = 0, $shr1315 = 0, $shr1320 = 0, $shr1336 = 0, $shr1342 = 0, $shr1347 = 0;
 var $shr1363 = 0, $shr1369 = 0, $shr1374 = 0, $shr1390 = 0, $shr1396 = 0, $shr140 = 0, $shr1401 = 0, $shr1415 = 0, $shr1421 = 0, $shr1426 = 0, $shr1440 = 0, $shr1446 = 0, $shr145 = 0, $shr1451 = 0, $shr1465 = 0, $shr1471 = 0, $shr1476 = 0, $shr1490 = 0, $shr1496 = 0, $shr1501 = 0;
 var $shr1515 = 0, $shr1521 = 0, $shr1526 = 0, $shr1540 = 0, $shr1546 = 0, $shr1551 = 0, $shr156 = 0, $shr1565 = 0, $shr1571 = 0, $shr1576 = 0, $shr1590 = 0, $shr1596 = 0, $shr1601 = 0, $shr161 = 0, $shr1615 = 0, $shr1621 = 0, $shr1626 = 0, $shr1640 = 0, $shr1646 = 0, $shr1651 = 0;
 var $shr1665 = 0, $shr1671 = 0, $shr1676 = 0, $shr1690 = 0, $shr1696 = 0, $shr17 = 0, $shr1701 = 0, $shr1715 = 0, $shr172 = 0, $shr1721 = 0, $shr1726 = 0, $shr1740 = 0, $shr1746 = 0, $shr1751 = 0, $shr1765 = 0, $shr177 = 0, $shr1771 = 0, $shr1776 = 0, $shr1790 = 0, $shr1796 = 0;
 var $shr1801 = 0, $shr1815 = 0, $shr1821 = 0, $shr1826 = 0, $shr1840 = 0, $shr1846 = 0, $shr1851 = 0, $shr1865 = 0, $shr1871 = 0, $shr1876 = 0, $shr188 = 0, $shr1890 = 0, $shr1896 = 0, $shr193 = 0, $shr204 = 0, $shr209 = 0, $shr220 = 0, $shr225 = 0, $shr236 = 0, $shr241 = 0;
 var $shr252 = 0, $shr257 = 0, $shr272 = 0, $shr278 = 0, $shr28 = 0, $shr283 = 0, $shr298 = 0, $shr304 = 0, $shr309 = 0, $shr324 = 0, $shr33 = 0, $shr330 = 0, $shr335 = 0, $shr350 = 0, $shr356 = 0, $shr361 = 0, $shr375 = 0, $shr381 = 0, $shr386 = 0, $shr400 = 0;
 var $shr406 = 0, $shr411 = 0, $shr425 = 0, $shr431 = 0, $shr436 = 0, $shr44 = 0, $shr450 = 0, $shr456 = 0, $shr461 = 0, $shr475 = 0, $shr481 = 0, $shr486 = 0, $shr49 = 0, $shr500 = 0, $shr506 = 0, $shr511 = 0, $shr525 = 0, $shr531 = 0, $shr536 = 0, $shr550 = 0;
 var $shr556 = 0, $shr561 = 0, $shr575 = 0, $shr581 = 0, $shr586 = 0, $shr60 = 0, $shr600 = 0, $shr606 = 0, $shr611 = 0, $shr625 = 0, $shr631 = 0, $shr636 = 0, $shr65 = 0, $shr650 = 0, $shr656 = 0, $shr661 = 0, $shr675 = 0, $shr681 = 0, $shr686 = 0, $shr700 = 0;
 var $shr706 = 0, $shr711 = 0, $shr725 = 0, $shr731 = 0, $shr736 = 0, $shr750 = 0, $shr756 = 0, $shr76 = 0, $shr761 = 0, $shr775 = 0, $shr781 = 0, $shr786 = 0, $shr800 = 0, $shr806 = 0, $shr81 = 0, $shr811 = 0, $shr825 = 0, $shr831 = 0, $shr836 = 0, $shr850 = 0;
 var $shr856 = 0, $shr861 = 0, $shr877 = 0, $shr883 = 0, $shr888 = 0, $shr904 = 0, $shr910 = 0, $shr915 = 0, $shr92 = 0, $shr931 = 0, $shr937 = 0, $shr942 = 0, $shr958 = 0, $shr964 = 0, $shr969 = 0, $shr97 = 0, $shr985 = 0, $shr991 = 0, $shr996 = 0, $tm = 0;
 var $x = 0, $xor = 0, $xor1006 = 0, $xor1008 = 0, $xor101 = 0, $xor1010 = 0, $xor1033 = 0, $xor1035 = 0, $xor1037 = 0, $xor1060 = 0, $xor1062 = 0, $xor1064 = 0, $xor1087 = 0, $xor1089 = 0, $xor1091 = 0, $xor1114 = 0, $xor1116 = 0, $xor1118 = 0, $xor1141 = 0, $xor1143 = 0;
 var $xor1145 = 0, $xor115 = 0, $xor1168 = 0, $xor117 = 0, $xor1170 = 0, $xor1172 = 0, $xor1195 = 0, $xor1197 = 0, $xor1199 = 0, $xor1222 = 0, $xor1224 = 0, $xor1226 = 0, $xor1249 = 0, $xor1251 = 0, $xor1253 = 0, $xor1276 = 0, $xor1278 = 0, $xor1280 = 0, $xor1303 = 0, $xor1305 = 0;
 var $xor1307 = 0, $xor131 = 0, $xor133 = 0, $xor1330 = 0, $xor1332 = 0, $xor1334 = 0, $xor1357 = 0, $xor1359 = 0, $xor1361 = 0, $xor1384 = 0, $xor1386 = 0, $xor1388 = 0, $xor1403 = 0, $xor1404 = 0, $xor1409 = 0, $xor1411 = 0, $xor1413 = 0, $xor1428 = 0, $xor1429 = 0, $xor1434 = 0;
 var $xor1436 = 0, $xor1438 = 0, $xor1453 = 0, $xor1454 = 0, $xor1459 = 0, $xor1461 = 0, $xor1463 = 0, $xor147 = 0, $xor1478 = 0, $xor1479 = 0, $xor1484 = 0, $xor1486 = 0, $xor1488 = 0, $xor149 = 0, $xor1503 = 0, $xor1504 = 0, $xor1509 = 0, $xor1511 = 0, $xor1513 = 0, $xor1528 = 0;
 var $xor1529 = 0, $xor1534 = 0, $xor1536 = 0, $xor1538 = 0, $xor1553 = 0, $xor1554 = 0, $xor1559 = 0, $xor1561 = 0, $xor1563 = 0, $xor1578 = 0, $xor1579 = 0, $xor1584 = 0, $xor1586 = 0, $xor1588 = 0, $xor1603 = 0, $xor1604 = 0, $xor1609 = 0, $xor1611 = 0, $xor1613 = 0, $xor1628 = 0;
 var $xor1629 = 0, $xor163 = 0, $xor1634 = 0, $xor1636 = 0, $xor1638 = 0, $xor165 = 0, $xor1653 = 0, $xor1654 = 0, $xor1659 = 0, $xor1661 = 0, $xor1663 = 0, $xor1678 = 0, $xor1679 = 0, $xor1684 = 0, $xor1686 = 0, $xor1688 = 0, $xor1703 = 0, $xor1704 = 0, $xor1709 = 0, $xor1711 = 0;
 var $xor1713 = 0, $xor1728 = 0, $xor1729 = 0, $xor1734 = 0, $xor1736 = 0, $xor1738 = 0, $xor1753 = 0, $xor1754 = 0, $xor1759 = 0, $xor1761 = 0, $xor1763 = 0, $xor1778 = 0, $xor1779 = 0, $xor1784 = 0, $xor1786 = 0, $xor1788 = 0, $xor179 = 0, $xor1803 = 0, $xor1804 = 0, $xor1809 = 0;
 var $xor181 = 0, $xor1811 = 0, $xor1813 = 0, $xor1828 = 0, $xor1829 = 0, $xor1834 = 0, $xor1836 = 0, $xor1838 = 0, $xor1853 = 0, $xor1854 = 0, $xor1859 = 0, $xor1861 = 0, $xor1863 = 0, $xor1878 = 0, $xor1879 = 0, $xor1884 = 0, $xor1886 = 0, $xor1888 = 0, $xor19 = 0, $xor195 = 0;
 var $xor197 = 0, $xor21 = 0, $xor211 = 0, $xor213 = 0, $xor227 = 0, $xor229 = 0, $xor243 = 0, $xor245 = 0, $xor259 = 0, $xor261 = 0, $xor266 = 0, $xor268 = 0, $xor270 = 0, $xor285 = 0, $xor287 = 0, $xor292 = 0, $xor294 = 0, $xor296 = 0, $xor311 = 0, $xor313 = 0;
 var $xor318 = 0, $xor320 = 0, $xor322 = 0, $xor337 = 0, $xor339 = 0, $xor344 = 0, $xor346 = 0, $xor348 = 0, $xor35 = 0, $xor363 = 0, $xor364 = 0, $xor369 = 0, $xor37 = 0, $xor371 = 0, $xor373 = 0, $xor388 = 0, $xor389 = 0, $xor394 = 0, $xor396 = 0, $xor398 = 0;
 var $xor413 = 0, $xor414 = 0, $xor419 = 0, $xor421 = 0, $xor423 = 0, $xor438 = 0, $xor439 = 0, $xor444 = 0, $xor446 = 0, $xor448 = 0, $xor463 = 0, $xor464 = 0, $xor469 = 0, $xor471 = 0, $xor473 = 0, $xor488 = 0, $xor489 = 0, $xor494 = 0, $xor496 = 0, $xor498 = 0;
 var $xor51 = 0, $xor513 = 0, $xor514 = 0, $xor519 = 0, $xor521 = 0, $xor523 = 0, $xor53 = 0, $xor538 = 0, $xor539 = 0, $xor544 = 0, $xor546 = 0, $xor548 = 0, $xor563 = 0, $xor564 = 0, $xor569 = 0, $xor571 = 0, $xor573 = 0, $xor588 = 0, $xor589 = 0, $xor594 = 0;
 var $xor596 = 0, $xor598 = 0, $xor613 = 0, $xor614 = 0, $xor619 = 0, $xor621 = 0, $xor623 = 0, $xor638 = 0, $xor639 = 0, $xor644 = 0, $xor646 = 0, $xor648 = 0, $xor663 = 0, $xor664 = 0, $xor669 = 0, $xor67 = 0, $xor671 = 0, $xor673 = 0, $xor688 = 0, $xor689 = 0;
 var $xor69 = 0, $xor694 = 0, $xor696 = 0, $xor698 = 0, $xor7 = 0, $xor713 = 0, $xor714 = 0, $xor719 = 0, $xor721 = 0, $xor723 = 0, $xor738 = 0, $xor739 = 0, $xor744 = 0, $xor746 = 0, $xor748 = 0, $xor763 = 0, $xor764 = 0, $xor769 = 0, $xor771 = 0, $xor773 = 0;
 var $xor788 = 0, $xor789 = 0, $xor794 = 0, $xor796 = 0, $xor798 = 0, $xor813 = 0, $xor814 = 0, $xor819 = 0, $xor821 = 0, $xor823 = 0, $xor83 = 0, $xor838 = 0, $xor839 = 0, $xor844 = 0, $xor846 = 0, $xor848 = 0, $xor85 = 0, $xor871 = 0, $xor873 = 0, $xor875 = 0;
 var $xor898 = 0, $xor900 = 0, $xor902 = 0, $xor925 = 0, $xor927 = 0, $xor929 = 0, $xor952 = 0, $xor954 = 0, $xor956 = 0, $xor979 = 0, $xor981 = 0, $xor983 = 0, $xor99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $x = sp;
 $hd$addr = $hd;
 $data$addr = $data;
 $0 = $hd$addr;
 $1 = HEAP32[$0>>2]|0;
 $a = $1;
 $2 = $hd$addr;
 $h1 = ((($2)) + 4|0);
 $3 = HEAP32[$h1>>2]|0;
 $b = $3;
 $4 = $hd$addr;
 $h2 = ((($4)) + 8|0);
 $5 = HEAP32[$h2>>2]|0;
 $c = $5;
 $6 = $hd$addr;
 $h3 = ((($6)) + 12|0);
 $7 = HEAP32[$h3>>2]|0;
 $d = $7;
 $8 = $hd$addr;
 $h4 = ((($8)) + 16|0);
 $9 = HEAP32[$h4>>2]|0;
 $e = $9;
 $i = 0;
 $p2 = $x;
 while(1) {
  $10 = $i;
  $cmp = ($10|0)<(16);
  if (!($cmp)) {
   break;
  }
  $11 = $data$addr;
  $incdec$ptr = ((($11)) + 1|0);
  $data$addr = $incdec$ptr;
  $12 = HEAP8[$11>>0]|0;
  $13 = $p2;
  $arrayidx = ((($13)) + 3|0);
  HEAP8[$arrayidx>>0] = $12;
  $14 = $data$addr;
  $incdec$ptr1 = ((($14)) + 1|0);
  $data$addr = $incdec$ptr1;
  $15 = HEAP8[$14>>0]|0;
  $16 = $p2;
  $arrayidx2 = ((($16)) + 2|0);
  HEAP8[$arrayidx2>>0] = $15;
  $17 = $data$addr;
  $incdec$ptr3 = ((($17)) + 1|0);
  $data$addr = $incdec$ptr3;
  $18 = HEAP8[$17>>0]|0;
  $19 = $p2;
  $arrayidx4 = ((($19)) + 1|0);
  HEAP8[$arrayidx4>>0] = $18;
  $20 = $data$addr;
  $incdec$ptr5 = ((($20)) + 1|0);
  $data$addr = $incdec$ptr5;
  $21 = HEAP8[$20>>0]|0;
  $22 = $p2;
  HEAP8[$22>>0] = $21;
  $23 = $i;
  $inc = (($23) + 1)|0;
  $i = $inc;
  $24 = $p2;
  $add$ptr = ((($24)) + 4|0);
  $p2 = $add$ptr;
 }
 $25 = $a;
 $shl = $25 << 5;
 $26 = $a;
 $shr = $26 >>> 27;
 $or = $shl | $shr;
 $27 = $d;
 $28 = $b;
 $29 = $c;
 $30 = $d;
 $xor = $29 ^ $30;
 $and = $28 & $xor;
 $xor7 = $27 ^ $and;
 $add = (($or) + ($xor7))|0;
 $add8 = (($add) + 1518500249)|0;
 $31 = HEAP32[$x>>2]|0;
 $add10 = (($add8) + ($31))|0;
 $32 = $e;
 $add11 = (($32) + ($add10))|0;
 $e = $add11;
 $33 = $b;
 $shl12 = $33 << 30;
 $34 = $b;
 $shr13 = $34 >>> 2;
 $or14 = $shl12 | $shr13;
 $b = $or14;
 $35 = $e;
 $shl16 = $35 << 5;
 $36 = $e;
 $shr17 = $36 >>> 27;
 $or18 = $shl16 | $shr17;
 $37 = $c;
 $38 = $a;
 $39 = $b;
 $40 = $c;
 $xor19 = $39 ^ $40;
 $and20 = $38 & $xor19;
 $xor21 = $37 ^ $and20;
 $add22 = (($or18) + ($xor21))|0;
 $add23 = (($add22) + 1518500249)|0;
 $arrayidx24 = ((($x)) + 4|0);
 $41 = HEAP32[$arrayidx24>>2]|0;
 $add25 = (($add23) + ($41))|0;
 $42 = $d;
 $add26 = (($42) + ($add25))|0;
 $d = $add26;
 $43 = $a;
 $shl27 = $43 << 30;
 $44 = $a;
 $shr28 = $44 >>> 2;
 $or29 = $shl27 | $shr28;
 $a = $or29;
 $45 = $d;
 $shl32 = $45 << 5;
 $46 = $d;
 $shr33 = $46 >>> 27;
 $or34 = $shl32 | $shr33;
 $47 = $b;
 $48 = $e;
 $49 = $a;
 $50 = $b;
 $xor35 = $49 ^ $50;
 $and36 = $48 & $xor35;
 $xor37 = $47 ^ $and36;
 $add38 = (($or34) + ($xor37))|0;
 $add39 = (($add38) + 1518500249)|0;
 $arrayidx40 = ((($x)) + 8|0);
 $51 = HEAP32[$arrayidx40>>2]|0;
 $add41 = (($add39) + ($51))|0;
 $52 = $c;
 $add42 = (($52) + ($add41))|0;
 $c = $add42;
 $53 = $e;
 $shl43 = $53 << 30;
 $54 = $e;
 $shr44 = $54 >>> 2;
 $or45 = $shl43 | $shr44;
 $e = $or45;
 $55 = $c;
 $shl48 = $55 << 5;
 $56 = $c;
 $shr49 = $56 >>> 27;
 $or50 = $shl48 | $shr49;
 $57 = $a;
 $58 = $d;
 $59 = $e;
 $60 = $a;
 $xor51 = $59 ^ $60;
 $and52 = $58 & $xor51;
 $xor53 = $57 ^ $and52;
 $add54 = (($or50) + ($xor53))|0;
 $add55 = (($add54) + 1518500249)|0;
 $arrayidx56 = ((($x)) + 12|0);
 $61 = HEAP32[$arrayidx56>>2]|0;
 $add57 = (($add55) + ($61))|0;
 $62 = $b;
 $add58 = (($62) + ($add57))|0;
 $b = $add58;
 $63 = $d;
 $shl59 = $63 << 30;
 $64 = $d;
 $shr60 = $64 >>> 2;
 $or61 = $shl59 | $shr60;
 $d = $or61;
 $65 = $b;
 $shl64 = $65 << 5;
 $66 = $b;
 $shr65 = $66 >>> 27;
 $or66 = $shl64 | $shr65;
 $67 = $e;
 $68 = $c;
 $69 = $d;
 $70 = $e;
 $xor67 = $69 ^ $70;
 $and68 = $68 & $xor67;
 $xor69 = $67 ^ $and68;
 $add70 = (($or66) + ($xor69))|0;
 $add71 = (($add70) + 1518500249)|0;
 $arrayidx72 = ((($x)) + 16|0);
 $71 = HEAP32[$arrayidx72>>2]|0;
 $add73 = (($add71) + ($71))|0;
 $72 = $a;
 $add74 = (($72) + ($add73))|0;
 $a = $add74;
 $73 = $c;
 $shl75 = $73 << 30;
 $74 = $c;
 $shr76 = $74 >>> 2;
 $or77 = $shl75 | $shr76;
 $c = $or77;
 $75 = $a;
 $shl80 = $75 << 5;
 $76 = $a;
 $shr81 = $76 >>> 27;
 $or82 = $shl80 | $shr81;
 $77 = $d;
 $78 = $b;
 $79 = $c;
 $80 = $d;
 $xor83 = $79 ^ $80;
 $and84 = $78 & $xor83;
 $xor85 = $77 ^ $and84;
 $add86 = (($or82) + ($xor85))|0;
 $add87 = (($add86) + 1518500249)|0;
 $arrayidx88 = ((($x)) + 20|0);
 $81 = HEAP32[$arrayidx88>>2]|0;
 $add89 = (($add87) + ($81))|0;
 $82 = $e;
 $add90 = (($82) + ($add89))|0;
 $e = $add90;
 $83 = $b;
 $shl91 = $83 << 30;
 $84 = $b;
 $shr92 = $84 >>> 2;
 $or93 = $shl91 | $shr92;
 $b = $or93;
 $85 = $e;
 $shl96 = $85 << 5;
 $86 = $e;
 $shr97 = $86 >>> 27;
 $or98 = $shl96 | $shr97;
 $87 = $c;
 $88 = $a;
 $89 = $b;
 $90 = $c;
 $xor99 = $89 ^ $90;
 $and100 = $88 & $xor99;
 $xor101 = $87 ^ $and100;
 $add102 = (($or98) + ($xor101))|0;
 $add103 = (($add102) + 1518500249)|0;
 $arrayidx104 = ((($x)) + 24|0);
 $91 = HEAP32[$arrayidx104>>2]|0;
 $add105 = (($add103) + ($91))|0;
 $92 = $d;
 $add106 = (($92) + ($add105))|0;
 $d = $add106;
 $93 = $a;
 $shl107 = $93 << 30;
 $94 = $a;
 $shr108 = $94 >>> 2;
 $or109 = $shl107 | $shr108;
 $a = $or109;
 $95 = $d;
 $shl112 = $95 << 5;
 $96 = $d;
 $shr113 = $96 >>> 27;
 $or114 = $shl112 | $shr113;
 $97 = $b;
 $98 = $e;
 $99 = $a;
 $100 = $b;
 $xor115 = $99 ^ $100;
 $and116 = $98 & $xor115;
 $xor117 = $97 ^ $and116;
 $add118 = (($or114) + ($xor117))|0;
 $add119 = (($add118) + 1518500249)|0;
 $arrayidx120 = ((($x)) + 28|0);
 $101 = HEAP32[$arrayidx120>>2]|0;
 $add121 = (($add119) + ($101))|0;
 $102 = $c;
 $add122 = (($102) + ($add121))|0;
 $c = $add122;
 $103 = $e;
 $shl123 = $103 << 30;
 $104 = $e;
 $shr124 = $104 >>> 2;
 $or125 = $shl123 | $shr124;
 $e = $or125;
 $105 = $c;
 $shl128 = $105 << 5;
 $106 = $c;
 $shr129 = $106 >>> 27;
 $or130 = $shl128 | $shr129;
 $107 = $a;
 $108 = $d;
 $109 = $e;
 $110 = $a;
 $xor131 = $109 ^ $110;
 $and132 = $108 & $xor131;
 $xor133 = $107 ^ $and132;
 $add134 = (($or130) + ($xor133))|0;
 $add135 = (($add134) + 1518500249)|0;
 $arrayidx136 = ((($x)) + 32|0);
 $111 = HEAP32[$arrayidx136>>2]|0;
 $add137 = (($add135) + ($111))|0;
 $112 = $b;
 $add138 = (($112) + ($add137))|0;
 $b = $add138;
 $113 = $d;
 $shl139 = $113 << 30;
 $114 = $d;
 $shr140 = $114 >>> 2;
 $or141 = $shl139 | $shr140;
 $d = $or141;
 $115 = $b;
 $shl144 = $115 << 5;
 $116 = $b;
 $shr145 = $116 >>> 27;
 $or146 = $shl144 | $shr145;
 $117 = $e;
 $118 = $c;
 $119 = $d;
 $120 = $e;
 $xor147 = $119 ^ $120;
 $and148 = $118 & $xor147;
 $xor149 = $117 ^ $and148;
 $add150 = (($or146) + ($xor149))|0;
 $add151 = (($add150) + 1518500249)|0;
 $arrayidx152 = ((($x)) + 36|0);
 $121 = HEAP32[$arrayidx152>>2]|0;
 $add153 = (($add151) + ($121))|0;
 $122 = $a;
 $add154 = (($122) + ($add153))|0;
 $a = $add154;
 $123 = $c;
 $shl155 = $123 << 30;
 $124 = $c;
 $shr156 = $124 >>> 2;
 $or157 = $shl155 | $shr156;
 $c = $or157;
 $125 = $a;
 $shl160 = $125 << 5;
 $126 = $a;
 $shr161 = $126 >>> 27;
 $or162 = $shl160 | $shr161;
 $127 = $d;
 $128 = $b;
 $129 = $c;
 $130 = $d;
 $xor163 = $129 ^ $130;
 $and164 = $128 & $xor163;
 $xor165 = $127 ^ $and164;
 $add166 = (($or162) + ($xor165))|0;
 $add167 = (($add166) + 1518500249)|0;
 $arrayidx168 = ((($x)) + 40|0);
 $131 = HEAP32[$arrayidx168>>2]|0;
 $add169 = (($add167) + ($131))|0;
 $132 = $e;
 $add170 = (($132) + ($add169))|0;
 $e = $add170;
 $133 = $b;
 $shl171 = $133 << 30;
 $134 = $b;
 $shr172 = $134 >>> 2;
 $or173 = $shl171 | $shr172;
 $b = $or173;
 $135 = $e;
 $shl176 = $135 << 5;
 $136 = $e;
 $shr177 = $136 >>> 27;
 $or178 = $shl176 | $shr177;
 $137 = $c;
 $138 = $a;
 $139 = $b;
 $140 = $c;
 $xor179 = $139 ^ $140;
 $and180 = $138 & $xor179;
 $xor181 = $137 ^ $and180;
 $add182 = (($or178) + ($xor181))|0;
 $add183 = (($add182) + 1518500249)|0;
 $arrayidx184 = ((($x)) + 44|0);
 $141 = HEAP32[$arrayidx184>>2]|0;
 $add185 = (($add183) + ($141))|0;
 $142 = $d;
 $add186 = (($142) + ($add185))|0;
 $d = $add186;
 $143 = $a;
 $shl187 = $143 << 30;
 $144 = $a;
 $shr188 = $144 >>> 2;
 $or189 = $shl187 | $shr188;
 $a = $or189;
 $145 = $d;
 $shl192 = $145 << 5;
 $146 = $d;
 $shr193 = $146 >>> 27;
 $or194 = $shl192 | $shr193;
 $147 = $b;
 $148 = $e;
 $149 = $a;
 $150 = $b;
 $xor195 = $149 ^ $150;
 $and196 = $148 & $xor195;
 $xor197 = $147 ^ $and196;
 $add198 = (($or194) + ($xor197))|0;
 $add199 = (($add198) + 1518500249)|0;
 $arrayidx200 = ((($x)) + 48|0);
 $151 = HEAP32[$arrayidx200>>2]|0;
 $add201 = (($add199) + ($151))|0;
 $152 = $c;
 $add202 = (($152) + ($add201))|0;
 $c = $add202;
 $153 = $e;
 $shl203 = $153 << 30;
 $154 = $e;
 $shr204 = $154 >>> 2;
 $or205 = $shl203 | $shr204;
 $e = $or205;
 $155 = $c;
 $shl208 = $155 << 5;
 $156 = $c;
 $shr209 = $156 >>> 27;
 $or210 = $shl208 | $shr209;
 $157 = $a;
 $158 = $d;
 $159 = $e;
 $160 = $a;
 $xor211 = $159 ^ $160;
 $and212 = $158 & $xor211;
 $xor213 = $157 ^ $and212;
 $add214 = (($or210) + ($xor213))|0;
 $add215 = (($add214) + 1518500249)|0;
 $arrayidx216 = ((($x)) + 52|0);
 $161 = HEAP32[$arrayidx216>>2]|0;
 $add217 = (($add215) + ($161))|0;
 $162 = $b;
 $add218 = (($162) + ($add217))|0;
 $b = $add218;
 $163 = $d;
 $shl219 = $163 << 30;
 $164 = $d;
 $shr220 = $164 >>> 2;
 $or221 = $shl219 | $shr220;
 $d = $or221;
 $165 = $b;
 $shl224 = $165 << 5;
 $166 = $b;
 $shr225 = $166 >>> 27;
 $or226 = $shl224 | $shr225;
 $167 = $e;
 $168 = $c;
 $169 = $d;
 $170 = $e;
 $xor227 = $169 ^ $170;
 $and228 = $168 & $xor227;
 $xor229 = $167 ^ $and228;
 $add230 = (($or226) + ($xor229))|0;
 $add231 = (($add230) + 1518500249)|0;
 $arrayidx232 = ((($x)) + 56|0);
 $171 = HEAP32[$arrayidx232>>2]|0;
 $add233 = (($add231) + ($171))|0;
 $172 = $a;
 $add234 = (($172) + ($add233))|0;
 $a = $add234;
 $173 = $c;
 $shl235 = $173 << 30;
 $174 = $c;
 $shr236 = $174 >>> 2;
 $or237 = $shl235 | $shr236;
 $c = $or237;
 $175 = $a;
 $shl240 = $175 << 5;
 $176 = $a;
 $shr241 = $176 >>> 27;
 $or242 = $shl240 | $shr241;
 $177 = $d;
 $178 = $b;
 $179 = $c;
 $180 = $d;
 $xor243 = $179 ^ $180;
 $and244 = $178 & $xor243;
 $xor245 = $177 ^ $and244;
 $add246 = (($or242) + ($xor245))|0;
 $add247 = (($add246) + 1518500249)|0;
 $arrayidx248 = ((($x)) + 60|0);
 $181 = HEAP32[$arrayidx248>>2]|0;
 $add249 = (($add247) + ($181))|0;
 $182 = $e;
 $add250 = (($182) + ($add249))|0;
 $e = $add250;
 $183 = $b;
 $shl251 = $183 << 30;
 $184 = $b;
 $shr252 = $184 >>> 2;
 $or253 = $shl251 | $shr252;
 $b = $or253;
 $185 = $e;
 $shl256 = $185 << 5;
 $186 = $e;
 $shr257 = $186 >>> 27;
 $or258 = $shl256 | $shr257;
 $187 = $c;
 $188 = $a;
 $189 = $b;
 $190 = $c;
 $xor259 = $189 ^ $190;
 $and260 = $188 & $xor259;
 $xor261 = $187 ^ $and260;
 $add262 = (($or258) + ($xor261))|0;
 $add263 = (($add262) + 1518500249)|0;
 $191 = HEAP32[$x>>2]|0;
 $arrayidx265 = ((($x)) + 8|0);
 $192 = HEAP32[$arrayidx265>>2]|0;
 $xor266 = $191 ^ $192;
 $arrayidx267 = ((($x)) + 32|0);
 $193 = HEAP32[$arrayidx267>>2]|0;
 $xor268 = $xor266 ^ $193;
 $arrayidx269 = ((($x)) + 52|0);
 $194 = HEAP32[$arrayidx269>>2]|0;
 $xor270 = $xor268 ^ $194;
 $tm = $xor270;
 $195 = $tm;
 $shl271 = $195 << 1;
 $196 = $tm;
 $shr272 = $196 >>> 31;
 $or273 = $shl271 | $shr272;
 HEAP32[$x>>2] = $or273;
 $add275 = (($add263) + ($or273))|0;
 $197 = $d;
 $add276 = (($197) + ($add275))|0;
 $d = $add276;
 $198 = $a;
 $shl277 = $198 << 30;
 $199 = $a;
 $shr278 = $199 >>> 2;
 $or279 = $shl277 | $shr278;
 $a = $or279;
 $200 = $d;
 $shl282 = $200 << 5;
 $201 = $d;
 $shr283 = $201 >>> 27;
 $or284 = $shl282 | $shr283;
 $202 = $b;
 $203 = $e;
 $204 = $a;
 $205 = $b;
 $xor285 = $204 ^ $205;
 $and286 = $203 & $xor285;
 $xor287 = $202 ^ $and286;
 $add288 = (($or284) + ($xor287))|0;
 $add289 = (($add288) + 1518500249)|0;
 $arrayidx290 = ((($x)) + 4|0);
 $206 = HEAP32[$arrayidx290>>2]|0;
 $arrayidx291 = ((($x)) + 12|0);
 $207 = HEAP32[$arrayidx291>>2]|0;
 $xor292 = $206 ^ $207;
 $arrayidx293 = ((($x)) + 36|0);
 $208 = HEAP32[$arrayidx293>>2]|0;
 $xor294 = $xor292 ^ $208;
 $arrayidx295 = ((($x)) + 56|0);
 $209 = HEAP32[$arrayidx295>>2]|0;
 $xor296 = $xor294 ^ $209;
 $tm = $xor296;
 $210 = $tm;
 $shl297 = $210 << 1;
 $211 = $tm;
 $shr298 = $211 >>> 31;
 $or299 = $shl297 | $shr298;
 $arrayidx300 = ((($x)) + 4|0);
 HEAP32[$arrayidx300>>2] = $or299;
 $add301 = (($add289) + ($or299))|0;
 $212 = $c;
 $add302 = (($212) + ($add301))|0;
 $c = $add302;
 $213 = $e;
 $shl303 = $213 << 30;
 $214 = $e;
 $shr304 = $214 >>> 2;
 $or305 = $shl303 | $shr304;
 $e = $or305;
 $215 = $c;
 $shl308 = $215 << 5;
 $216 = $c;
 $shr309 = $216 >>> 27;
 $or310 = $shl308 | $shr309;
 $217 = $a;
 $218 = $d;
 $219 = $e;
 $220 = $a;
 $xor311 = $219 ^ $220;
 $and312 = $218 & $xor311;
 $xor313 = $217 ^ $and312;
 $add314 = (($or310) + ($xor313))|0;
 $add315 = (($add314) + 1518500249)|0;
 $arrayidx316 = ((($x)) + 8|0);
 $221 = HEAP32[$arrayidx316>>2]|0;
 $arrayidx317 = ((($x)) + 16|0);
 $222 = HEAP32[$arrayidx317>>2]|0;
 $xor318 = $221 ^ $222;
 $arrayidx319 = ((($x)) + 40|0);
 $223 = HEAP32[$arrayidx319>>2]|0;
 $xor320 = $xor318 ^ $223;
 $arrayidx321 = ((($x)) + 60|0);
 $224 = HEAP32[$arrayidx321>>2]|0;
 $xor322 = $xor320 ^ $224;
 $tm = $xor322;
 $225 = $tm;
 $shl323 = $225 << 1;
 $226 = $tm;
 $shr324 = $226 >>> 31;
 $or325 = $shl323 | $shr324;
 $arrayidx326 = ((($x)) + 8|0);
 HEAP32[$arrayidx326>>2] = $or325;
 $add327 = (($add315) + ($or325))|0;
 $227 = $b;
 $add328 = (($227) + ($add327))|0;
 $b = $add328;
 $228 = $d;
 $shl329 = $228 << 30;
 $229 = $d;
 $shr330 = $229 >>> 2;
 $or331 = $shl329 | $shr330;
 $d = $or331;
 $230 = $b;
 $shl334 = $230 << 5;
 $231 = $b;
 $shr335 = $231 >>> 27;
 $or336 = $shl334 | $shr335;
 $232 = $e;
 $233 = $c;
 $234 = $d;
 $235 = $e;
 $xor337 = $234 ^ $235;
 $and338 = $233 & $xor337;
 $xor339 = $232 ^ $and338;
 $add340 = (($or336) + ($xor339))|0;
 $add341 = (($add340) + 1518500249)|0;
 $arrayidx342 = ((($x)) + 12|0);
 $236 = HEAP32[$arrayidx342>>2]|0;
 $arrayidx343 = ((($x)) + 20|0);
 $237 = HEAP32[$arrayidx343>>2]|0;
 $xor344 = $236 ^ $237;
 $arrayidx345 = ((($x)) + 44|0);
 $238 = HEAP32[$arrayidx345>>2]|0;
 $xor346 = $xor344 ^ $238;
 $239 = HEAP32[$x>>2]|0;
 $xor348 = $xor346 ^ $239;
 $tm = $xor348;
 $240 = $tm;
 $shl349 = $240 << 1;
 $241 = $tm;
 $shr350 = $241 >>> 31;
 $or351 = $shl349 | $shr350;
 $arrayidx352 = ((($x)) + 12|0);
 HEAP32[$arrayidx352>>2] = $or351;
 $add353 = (($add341) + ($or351))|0;
 $242 = $a;
 $add354 = (($242) + ($add353))|0;
 $a = $add354;
 $243 = $c;
 $shl355 = $243 << 30;
 $244 = $c;
 $shr356 = $244 >>> 2;
 $or357 = $shl355 | $shr356;
 $c = $or357;
 $245 = $a;
 $shl360 = $245 << 5;
 $246 = $a;
 $shr361 = $246 >>> 27;
 $or362 = $shl360 | $shr361;
 $247 = $b;
 $248 = $c;
 $xor363 = $247 ^ $248;
 $249 = $d;
 $xor364 = $xor363 ^ $249;
 $add365 = (($or362) + ($xor364))|0;
 $add366 = (($add365) + 1859775393)|0;
 $arrayidx367 = ((($x)) + 16|0);
 $250 = HEAP32[$arrayidx367>>2]|0;
 $arrayidx368 = ((($x)) + 24|0);
 $251 = HEAP32[$arrayidx368>>2]|0;
 $xor369 = $250 ^ $251;
 $arrayidx370 = ((($x)) + 48|0);
 $252 = HEAP32[$arrayidx370>>2]|0;
 $xor371 = $xor369 ^ $252;
 $arrayidx372 = ((($x)) + 4|0);
 $253 = HEAP32[$arrayidx372>>2]|0;
 $xor373 = $xor371 ^ $253;
 $tm = $xor373;
 $254 = $tm;
 $shl374 = $254 << 1;
 $255 = $tm;
 $shr375 = $255 >>> 31;
 $or376 = $shl374 | $shr375;
 $arrayidx377 = ((($x)) + 16|0);
 HEAP32[$arrayidx377>>2] = $or376;
 $add378 = (($add366) + ($or376))|0;
 $256 = $e;
 $add379 = (($256) + ($add378))|0;
 $e = $add379;
 $257 = $b;
 $shl380 = $257 << 30;
 $258 = $b;
 $shr381 = $258 >>> 2;
 $or382 = $shl380 | $shr381;
 $b = $or382;
 $259 = $e;
 $shl385 = $259 << 5;
 $260 = $e;
 $shr386 = $260 >>> 27;
 $or387 = $shl385 | $shr386;
 $261 = $a;
 $262 = $b;
 $xor388 = $261 ^ $262;
 $263 = $c;
 $xor389 = $xor388 ^ $263;
 $add390 = (($or387) + ($xor389))|0;
 $add391 = (($add390) + 1859775393)|0;
 $arrayidx392 = ((($x)) + 20|0);
 $264 = HEAP32[$arrayidx392>>2]|0;
 $arrayidx393 = ((($x)) + 28|0);
 $265 = HEAP32[$arrayidx393>>2]|0;
 $xor394 = $264 ^ $265;
 $arrayidx395 = ((($x)) + 52|0);
 $266 = HEAP32[$arrayidx395>>2]|0;
 $xor396 = $xor394 ^ $266;
 $arrayidx397 = ((($x)) + 8|0);
 $267 = HEAP32[$arrayidx397>>2]|0;
 $xor398 = $xor396 ^ $267;
 $tm = $xor398;
 $268 = $tm;
 $shl399 = $268 << 1;
 $269 = $tm;
 $shr400 = $269 >>> 31;
 $or401 = $shl399 | $shr400;
 $arrayidx402 = ((($x)) + 20|0);
 HEAP32[$arrayidx402>>2] = $or401;
 $add403 = (($add391) + ($or401))|0;
 $270 = $d;
 $add404 = (($270) + ($add403))|0;
 $d = $add404;
 $271 = $a;
 $shl405 = $271 << 30;
 $272 = $a;
 $shr406 = $272 >>> 2;
 $or407 = $shl405 | $shr406;
 $a = $or407;
 $273 = $d;
 $shl410 = $273 << 5;
 $274 = $d;
 $shr411 = $274 >>> 27;
 $or412 = $shl410 | $shr411;
 $275 = $e;
 $276 = $a;
 $xor413 = $275 ^ $276;
 $277 = $b;
 $xor414 = $xor413 ^ $277;
 $add415 = (($or412) + ($xor414))|0;
 $add416 = (($add415) + 1859775393)|0;
 $arrayidx417 = ((($x)) + 24|0);
 $278 = HEAP32[$arrayidx417>>2]|0;
 $arrayidx418 = ((($x)) + 32|0);
 $279 = HEAP32[$arrayidx418>>2]|0;
 $xor419 = $278 ^ $279;
 $arrayidx420 = ((($x)) + 56|0);
 $280 = HEAP32[$arrayidx420>>2]|0;
 $xor421 = $xor419 ^ $280;
 $arrayidx422 = ((($x)) + 12|0);
 $281 = HEAP32[$arrayidx422>>2]|0;
 $xor423 = $xor421 ^ $281;
 $tm = $xor423;
 $282 = $tm;
 $shl424 = $282 << 1;
 $283 = $tm;
 $shr425 = $283 >>> 31;
 $or426 = $shl424 | $shr425;
 $arrayidx427 = ((($x)) + 24|0);
 HEAP32[$arrayidx427>>2] = $or426;
 $add428 = (($add416) + ($or426))|0;
 $284 = $c;
 $add429 = (($284) + ($add428))|0;
 $c = $add429;
 $285 = $e;
 $shl430 = $285 << 30;
 $286 = $e;
 $shr431 = $286 >>> 2;
 $or432 = $shl430 | $shr431;
 $e = $or432;
 $287 = $c;
 $shl435 = $287 << 5;
 $288 = $c;
 $shr436 = $288 >>> 27;
 $or437 = $shl435 | $shr436;
 $289 = $d;
 $290 = $e;
 $xor438 = $289 ^ $290;
 $291 = $a;
 $xor439 = $xor438 ^ $291;
 $add440 = (($or437) + ($xor439))|0;
 $add441 = (($add440) + 1859775393)|0;
 $arrayidx442 = ((($x)) + 28|0);
 $292 = HEAP32[$arrayidx442>>2]|0;
 $arrayidx443 = ((($x)) + 36|0);
 $293 = HEAP32[$arrayidx443>>2]|0;
 $xor444 = $292 ^ $293;
 $arrayidx445 = ((($x)) + 60|0);
 $294 = HEAP32[$arrayidx445>>2]|0;
 $xor446 = $xor444 ^ $294;
 $arrayidx447 = ((($x)) + 16|0);
 $295 = HEAP32[$arrayidx447>>2]|0;
 $xor448 = $xor446 ^ $295;
 $tm = $xor448;
 $296 = $tm;
 $shl449 = $296 << 1;
 $297 = $tm;
 $shr450 = $297 >>> 31;
 $or451 = $shl449 | $shr450;
 $arrayidx452 = ((($x)) + 28|0);
 HEAP32[$arrayidx452>>2] = $or451;
 $add453 = (($add441) + ($or451))|0;
 $298 = $b;
 $add454 = (($298) + ($add453))|0;
 $b = $add454;
 $299 = $d;
 $shl455 = $299 << 30;
 $300 = $d;
 $shr456 = $300 >>> 2;
 $or457 = $shl455 | $shr456;
 $d = $or457;
 $301 = $b;
 $shl460 = $301 << 5;
 $302 = $b;
 $shr461 = $302 >>> 27;
 $or462 = $shl460 | $shr461;
 $303 = $c;
 $304 = $d;
 $xor463 = $303 ^ $304;
 $305 = $e;
 $xor464 = $xor463 ^ $305;
 $add465 = (($or462) + ($xor464))|0;
 $add466 = (($add465) + 1859775393)|0;
 $arrayidx467 = ((($x)) + 32|0);
 $306 = HEAP32[$arrayidx467>>2]|0;
 $arrayidx468 = ((($x)) + 40|0);
 $307 = HEAP32[$arrayidx468>>2]|0;
 $xor469 = $306 ^ $307;
 $308 = HEAP32[$x>>2]|0;
 $xor471 = $xor469 ^ $308;
 $arrayidx472 = ((($x)) + 20|0);
 $309 = HEAP32[$arrayidx472>>2]|0;
 $xor473 = $xor471 ^ $309;
 $tm = $xor473;
 $310 = $tm;
 $shl474 = $310 << 1;
 $311 = $tm;
 $shr475 = $311 >>> 31;
 $or476 = $shl474 | $shr475;
 $arrayidx477 = ((($x)) + 32|0);
 HEAP32[$arrayidx477>>2] = $or476;
 $add478 = (($add466) + ($or476))|0;
 $312 = $a;
 $add479 = (($312) + ($add478))|0;
 $a = $add479;
 $313 = $c;
 $shl480 = $313 << 30;
 $314 = $c;
 $shr481 = $314 >>> 2;
 $or482 = $shl480 | $shr481;
 $c = $or482;
 $315 = $a;
 $shl485 = $315 << 5;
 $316 = $a;
 $shr486 = $316 >>> 27;
 $or487 = $shl485 | $shr486;
 $317 = $b;
 $318 = $c;
 $xor488 = $317 ^ $318;
 $319 = $d;
 $xor489 = $xor488 ^ $319;
 $add490 = (($or487) + ($xor489))|0;
 $add491 = (($add490) + 1859775393)|0;
 $arrayidx492 = ((($x)) + 36|0);
 $320 = HEAP32[$arrayidx492>>2]|0;
 $arrayidx493 = ((($x)) + 44|0);
 $321 = HEAP32[$arrayidx493>>2]|0;
 $xor494 = $320 ^ $321;
 $arrayidx495 = ((($x)) + 4|0);
 $322 = HEAP32[$arrayidx495>>2]|0;
 $xor496 = $xor494 ^ $322;
 $arrayidx497 = ((($x)) + 24|0);
 $323 = HEAP32[$arrayidx497>>2]|0;
 $xor498 = $xor496 ^ $323;
 $tm = $xor498;
 $324 = $tm;
 $shl499 = $324 << 1;
 $325 = $tm;
 $shr500 = $325 >>> 31;
 $or501 = $shl499 | $shr500;
 $arrayidx502 = ((($x)) + 36|0);
 HEAP32[$arrayidx502>>2] = $or501;
 $add503 = (($add491) + ($or501))|0;
 $326 = $e;
 $add504 = (($326) + ($add503))|0;
 $e = $add504;
 $327 = $b;
 $shl505 = $327 << 30;
 $328 = $b;
 $shr506 = $328 >>> 2;
 $or507 = $shl505 | $shr506;
 $b = $or507;
 $329 = $e;
 $shl510 = $329 << 5;
 $330 = $e;
 $shr511 = $330 >>> 27;
 $or512 = $shl510 | $shr511;
 $331 = $a;
 $332 = $b;
 $xor513 = $331 ^ $332;
 $333 = $c;
 $xor514 = $xor513 ^ $333;
 $add515 = (($or512) + ($xor514))|0;
 $add516 = (($add515) + 1859775393)|0;
 $arrayidx517 = ((($x)) + 40|0);
 $334 = HEAP32[$arrayidx517>>2]|0;
 $arrayidx518 = ((($x)) + 48|0);
 $335 = HEAP32[$arrayidx518>>2]|0;
 $xor519 = $334 ^ $335;
 $arrayidx520 = ((($x)) + 8|0);
 $336 = HEAP32[$arrayidx520>>2]|0;
 $xor521 = $xor519 ^ $336;
 $arrayidx522 = ((($x)) + 28|0);
 $337 = HEAP32[$arrayidx522>>2]|0;
 $xor523 = $xor521 ^ $337;
 $tm = $xor523;
 $338 = $tm;
 $shl524 = $338 << 1;
 $339 = $tm;
 $shr525 = $339 >>> 31;
 $or526 = $shl524 | $shr525;
 $arrayidx527 = ((($x)) + 40|0);
 HEAP32[$arrayidx527>>2] = $or526;
 $add528 = (($add516) + ($or526))|0;
 $340 = $d;
 $add529 = (($340) + ($add528))|0;
 $d = $add529;
 $341 = $a;
 $shl530 = $341 << 30;
 $342 = $a;
 $shr531 = $342 >>> 2;
 $or532 = $shl530 | $shr531;
 $a = $or532;
 $343 = $d;
 $shl535 = $343 << 5;
 $344 = $d;
 $shr536 = $344 >>> 27;
 $or537 = $shl535 | $shr536;
 $345 = $e;
 $346 = $a;
 $xor538 = $345 ^ $346;
 $347 = $b;
 $xor539 = $xor538 ^ $347;
 $add540 = (($or537) + ($xor539))|0;
 $add541 = (($add540) + 1859775393)|0;
 $arrayidx542 = ((($x)) + 44|0);
 $348 = HEAP32[$arrayidx542>>2]|0;
 $arrayidx543 = ((($x)) + 52|0);
 $349 = HEAP32[$arrayidx543>>2]|0;
 $xor544 = $348 ^ $349;
 $arrayidx545 = ((($x)) + 12|0);
 $350 = HEAP32[$arrayidx545>>2]|0;
 $xor546 = $xor544 ^ $350;
 $arrayidx547 = ((($x)) + 32|0);
 $351 = HEAP32[$arrayidx547>>2]|0;
 $xor548 = $xor546 ^ $351;
 $tm = $xor548;
 $352 = $tm;
 $shl549 = $352 << 1;
 $353 = $tm;
 $shr550 = $353 >>> 31;
 $or551 = $shl549 | $shr550;
 $arrayidx552 = ((($x)) + 44|0);
 HEAP32[$arrayidx552>>2] = $or551;
 $add553 = (($add541) + ($or551))|0;
 $354 = $c;
 $add554 = (($354) + ($add553))|0;
 $c = $add554;
 $355 = $e;
 $shl555 = $355 << 30;
 $356 = $e;
 $shr556 = $356 >>> 2;
 $or557 = $shl555 | $shr556;
 $e = $or557;
 $357 = $c;
 $shl560 = $357 << 5;
 $358 = $c;
 $shr561 = $358 >>> 27;
 $or562 = $shl560 | $shr561;
 $359 = $d;
 $360 = $e;
 $xor563 = $359 ^ $360;
 $361 = $a;
 $xor564 = $xor563 ^ $361;
 $add565 = (($or562) + ($xor564))|0;
 $add566 = (($add565) + 1859775393)|0;
 $arrayidx567 = ((($x)) + 48|0);
 $362 = HEAP32[$arrayidx567>>2]|0;
 $arrayidx568 = ((($x)) + 56|0);
 $363 = HEAP32[$arrayidx568>>2]|0;
 $xor569 = $362 ^ $363;
 $arrayidx570 = ((($x)) + 16|0);
 $364 = HEAP32[$arrayidx570>>2]|0;
 $xor571 = $xor569 ^ $364;
 $arrayidx572 = ((($x)) + 36|0);
 $365 = HEAP32[$arrayidx572>>2]|0;
 $xor573 = $xor571 ^ $365;
 $tm = $xor573;
 $366 = $tm;
 $shl574 = $366 << 1;
 $367 = $tm;
 $shr575 = $367 >>> 31;
 $or576 = $shl574 | $shr575;
 $arrayidx577 = ((($x)) + 48|0);
 HEAP32[$arrayidx577>>2] = $or576;
 $add578 = (($add566) + ($or576))|0;
 $368 = $b;
 $add579 = (($368) + ($add578))|0;
 $b = $add579;
 $369 = $d;
 $shl580 = $369 << 30;
 $370 = $d;
 $shr581 = $370 >>> 2;
 $or582 = $shl580 | $shr581;
 $d = $or582;
 $371 = $b;
 $shl585 = $371 << 5;
 $372 = $b;
 $shr586 = $372 >>> 27;
 $or587 = $shl585 | $shr586;
 $373 = $c;
 $374 = $d;
 $xor588 = $373 ^ $374;
 $375 = $e;
 $xor589 = $xor588 ^ $375;
 $add590 = (($or587) + ($xor589))|0;
 $add591 = (($add590) + 1859775393)|0;
 $arrayidx592 = ((($x)) + 52|0);
 $376 = HEAP32[$arrayidx592>>2]|0;
 $arrayidx593 = ((($x)) + 60|0);
 $377 = HEAP32[$arrayidx593>>2]|0;
 $xor594 = $376 ^ $377;
 $arrayidx595 = ((($x)) + 20|0);
 $378 = HEAP32[$arrayidx595>>2]|0;
 $xor596 = $xor594 ^ $378;
 $arrayidx597 = ((($x)) + 40|0);
 $379 = HEAP32[$arrayidx597>>2]|0;
 $xor598 = $xor596 ^ $379;
 $tm = $xor598;
 $380 = $tm;
 $shl599 = $380 << 1;
 $381 = $tm;
 $shr600 = $381 >>> 31;
 $or601 = $shl599 | $shr600;
 $arrayidx602 = ((($x)) + 52|0);
 HEAP32[$arrayidx602>>2] = $or601;
 $add603 = (($add591) + ($or601))|0;
 $382 = $a;
 $add604 = (($382) + ($add603))|0;
 $a = $add604;
 $383 = $c;
 $shl605 = $383 << 30;
 $384 = $c;
 $shr606 = $384 >>> 2;
 $or607 = $shl605 | $shr606;
 $c = $or607;
 $385 = $a;
 $shl610 = $385 << 5;
 $386 = $a;
 $shr611 = $386 >>> 27;
 $or612 = $shl610 | $shr611;
 $387 = $b;
 $388 = $c;
 $xor613 = $387 ^ $388;
 $389 = $d;
 $xor614 = $xor613 ^ $389;
 $add615 = (($or612) + ($xor614))|0;
 $add616 = (($add615) + 1859775393)|0;
 $arrayidx617 = ((($x)) + 56|0);
 $390 = HEAP32[$arrayidx617>>2]|0;
 $391 = HEAP32[$x>>2]|0;
 $xor619 = $390 ^ $391;
 $arrayidx620 = ((($x)) + 24|0);
 $392 = HEAP32[$arrayidx620>>2]|0;
 $xor621 = $xor619 ^ $392;
 $arrayidx622 = ((($x)) + 44|0);
 $393 = HEAP32[$arrayidx622>>2]|0;
 $xor623 = $xor621 ^ $393;
 $tm = $xor623;
 $394 = $tm;
 $shl624 = $394 << 1;
 $395 = $tm;
 $shr625 = $395 >>> 31;
 $or626 = $shl624 | $shr625;
 $arrayidx627 = ((($x)) + 56|0);
 HEAP32[$arrayidx627>>2] = $or626;
 $add628 = (($add616) + ($or626))|0;
 $396 = $e;
 $add629 = (($396) + ($add628))|0;
 $e = $add629;
 $397 = $b;
 $shl630 = $397 << 30;
 $398 = $b;
 $shr631 = $398 >>> 2;
 $or632 = $shl630 | $shr631;
 $b = $or632;
 $399 = $e;
 $shl635 = $399 << 5;
 $400 = $e;
 $shr636 = $400 >>> 27;
 $or637 = $shl635 | $shr636;
 $401 = $a;
 $402 = $b;
 $xor638 = $401 ^ $402;
 $403 = $c;
 $xor639 = $xor638 ^ $403;
 $add640 = (($or637) + ($xor639))|0;
 $add641 = (($add640) + 1859775393)|0;
 $arrayidx642 = ((($x)) + 60|0);
 $404 = HEAP32[$arrayidx642>>2]|0;
 $arrayidx643 = ((($x)) + 4|0);
 $405 = HEAP32[$arrayidx643>>2]|0;
 $xor644 = $404 ^ $405;
 $arrayidx645 = ((($x)) + 28|0);
 $406 = HEAP32[$arrayidx645>>2]|0;
 $xor646 = $xor644 ^ $406;
 $arrayidx647 = ((($x)) + 48|0);
 $407 = HEAP32[$arrayidx647>>2]|0;
 $xor648 = $xor646 ^ $407;
 $tm = $xor648;
 $408 = $tm;
 $shl649 = $408 << 1;
 $409 = $tm;
 $shr650 = $409 >>> 31;
 $or651 = $shl649 | $shr650;
 $arrayidx652 = ((($x)) + 60|0);
 HEAP32[$arrayidx652>>2] = $or651;
 $add653 = (($add641) + ($or651))|0;
 $410 = $d;
 $add654 = (($410) + ($add653))|0;
 $d = $add654;
 $411 = $a;
 $shl655 = $411 << 30;
 $412 = $a;
 $shr656 = $412 >>> 2;
 $or657 = $shl655 | $shr656;
 $a = $or657;
 $413 = $d;
 $shl660 = $413 << 5;
 $414 = $d;
 $shr661 = $414 >>> 27;
 $or662 = $shl660 | $shr661;
 $415 = $e;
 $416 = $a;
 $xor663 = $415 ^ $416;
 $417 = $b;
 $xor664 = $xor663 ^ $417;
 $add665 = (($or662) + ($xor664))|0;
 $add666 = (($add665) + 1859775393)|0;
 $418 = HEAP32[$x>>2]|0;
 $arrayidx668 = ((($x)) + 8|0);
 $419 = HEAP32[$arrayidx668>>2]|0;
 $xor669 = $418 ^ $419;
 $arrayidx670 = ((($x)) + 32|0);
 $420 = HEAP32[$arrayidx670>>2]|0;
 $xor671 = $xor669 ^ $420;
 $arrayidx672 = ((($x)) + 52|0);
 $421 = HEAP32[$arrayidx672>>2]|0;
 $xor673 = $xor671 ^ $421;
 $tm = $xor673;
 $422 = $tm;
 $shl674 = $422 << 1;
 $423 = $tm;
 $shr675 = $423 >>> 31;
 $or676 = $shl674 | $shr675;
 HEAP32[$x>>2] = $or676;
 $add678 = (($add666) + ($or676))|0;
 $424 = $c;
 $add679 = (($424) + ($add678))|0;
 $c = $add679;
 $425 = $e;
 $shl680 = $425 << 30;
 $426 = $e;
 $shr681 = $426 >>> 2;
 $or682 = $shl680 | $shr681;
 $e = $or682;
 $427 = $c;
 $shl685 = $427 << 5;
 $428 = $c;
 $shr686 = $428 >>> 27;
 $or687 = $shl685 | $shr686;
 $429 = $d;
 $430 = $e;
 $xor688 = $429 ^ $430;
 $431 = $a;
 $xor689 = $xor688 ^ $431;
 $add690 = (($or687) + ($xor689))|0;
 $add691 = (($add690) + 1859775393)|0;
 $arrayidx692 = ((($x)) + 4|0);
 $432 = HEAP32[$arrayidx692>>2]|0;
 $arrayidx693 = ((($x)) + 12|0);
 $433 = HEAP32[$arrayidx693>>2]|0;
 $xor694 = $432 ^ $433;
 $arrayidx695 = ((($x)) + 36|0);
 $434 = HEAP32[$arrayidx695>>2]|0;
 $xor696 = $xor694 ^ $434;
 $arrayidx697 = ((($x)) + 56|0);
 $435 = HEAP32[$arrayidx697>>2]|0;
 $xor698 = $xor696 ^ $435;
 $tm = $xor698;
 $436 = $tm;
 $shl699 = $436 << 1;
 $437 = $tm;
 $shr700 = $437 >>> 31;
 $or701 = $shl699 | $shr700;
 $arrayidx702 = ((($x)) + 4|0);
 HEAP32[$arrayidx702>>2] = $or701;
 $add703 = (($add691) + ($or701))|0;
 $438 = $b;
 $add704 = (($438) + ($add703))|0;
 $b = $add704;
 $439 = $d;
 $shl705 = $439 << 30;
 $440 = $d;
 $shr706 = $440 >>> 2;
 $or707 = $shl705 | $shr706;
 $d = $or707;
 $441 = $b;
 $shl710 = $441 << 5;
 $442 = $b;
 $shr711 = $442 >>> 27;
 $or712 = $shl710 | $shr711;
 $443 = $c;
 $444 = $d;
 $xor713 = $443 ^ $444;
 $445 = $e;
 $xor714 = $xor713 ^ $445;
 $add715 = (($or712) + ($xor714))|0;
 $add716 = (($add715) + 1859775393)|0;
 $arrayidx717 = ((($x)) + 8|0);
 $446 = HEAP32[$arrayidx717>>2]|0;
 $arrayidx718 = ((($x)) + 16|0);
 $447 = HEAP32[$arrayidx718>>2]|0;
 $xor719 = $446 ^ $447;
 $arrayidx720 = ((($x)) + 40|0);
 $448 = HEAP32[$arrayidx720>>2]|0;
 $xor721 = $xor719 ^ $448;
 $arrayidx722 = ((($x)) + 60|0);
 $449 = HEAP32[$arrayidx722>>2]|0;
 $xor723 = $xor721 ^ $449;
 $tm = $xor723;
 $450 = $tm;
 $shl724 = $450 << 1;
 $451 = $tm;
 $shr725 = $451 >>> 31;
 $or726 = $shl724 | $shr725;
 $arrayidx727 = ((($x)) + 8|0);
 HEAP32[$arrayidx727>>2] = $or726;
 $add728 = (($add716) + ($or726))|0;
 $452 = $a;
 $add729 = (($452) + ($add728))|0;
 $a = $add729;
 $453 = $c;
 $shl730 = $453 << 30;
 $454 = $c;
 $shr731 = $454 >>> 2;
 $or732 = $shl730 | $shr731;
 $c = $or732;
 $455 = $a;
 $shl735 = $455 << 5;
 $456 = $a;
 $shr736 = $456 >>> 27;
 $or737 = $shl735 | $shr736;
 $457 = $b;
 $458 = $c;
 $xor738 = $457 ^ $458;
 $459 = $d;
 $xor739 = $xor738 ^ $459;
 $add740 = (($or737) + ($xor739))|0;
 $add741 = (($add740) + 1859775393)|0;
 $arrayidx742 = ((($x)) + 12|0);
 $460 = HEAP32[$arrayidx742>>2]|0;
 $arrayidx743 = ((($x)) + 20|0);
 $461 = HEAP32[$arrayidx743>>2]|0;
 $xor744 = $460 ^ $461;
 $arrayidx745 = ((($x)) + 44|0);
 $462 = HEAP32[$arrayidx745>>2]|0;
 $xor746 = $xor744 ^ $462;
 $463 = HEAP32[$x>>2]|0;
 $xor748 = $xor746 ^ $463;
 $tm = $xor748;
 $464 = $tm;
 $shl749 = $464 << 1;
 $465 = $tm;
 $shr750 = $465 >>> 31;
 $or751 = $shl749 | $shr750;
 $arrayidx752 = ((($x)) + 12|0);
 HEAP32[$arrayidx752>>2] = $or751;
 $add753 = (($add741) + ($or751))|0;
 $466 = $e;
 $add754 = (($466) + ($add753))|0;
 $e = $add754;
 $467 = $b;
 $shl755 = $467 << 30;
 $468 = $b;
 $shr756 = $468 >>> 2;
 $or757 = $shl755 | $shr756;
 $b = $or757;
 $469 = $e;
 $shl760 = $469 << 5;
 $470 = $e;
 $shr761 = $470 >>> 27;
 $or762 = $shl760 | $shr761;
 $471 = $a;
 $472 = $b;
 $xor763 = $471 ^ $472;
 $473 = $c;
 $xor764 = $xor763 ^ $473;
 $add765 = (($or762) + ($xor764))|0;
 $add766 = (($add765) + 1859775393)|0;
 $arrayidx767 = ((($x)) + 16|0);
 $474 = HEAP32[$arrayidx767>>2]|0;
 $arrayidx768 = ((($x)) + 24|0);
 $475 = HEAP32[$arrayidx768>>2]|0;
 $xor769 = $474 ^ $475;
 $arrayidx770 = ((($x)) + 48|0);
 $476 = HEAP32[$arrayidx770>>2]|0;
 $xor771 = $xor769 ^ $476;
 $arrayidx772 = ((($x)) + 4|0);
 $477 = HEAP32[$arrayidx772>>2]|0;
 $xor773 = $xor771 ^ $477;
 $tm = $xor773;
 $478 = $tm;
 $shl774 = $478 << 1;
 $479 = $tm;
 $shr775 = $479 >>> 31;
 $or776 = $shl774 | $shr775;
 $arrayidx777 = ((($x)) + 16|0);
 HEAP32[$arrayidx777>>2] = $or776;
 $add778 = (($add766) + ($or776))|0;
 $480 = $d;
 $add779 = (($480) + ($add778))|0;
 $d = $add779;
 $481 = $a;
 $shl780 = $481 << 30;
 $482 = $a;
 $shr781 = $482 >>> 2;
 $or782 = $shl780 | $shr781;
 $a = $or782;
 $483 = $d;
 $shl785 = $483 << 5;
 $484 = $d;
 $shr786 = $484 >>> 27;
 $or787 = $shl785 | $shr786;
 $485 = $e;
 $486 = $a;
 $xor788 = $485 ^ $486;
 $487 = $b;
 $xor789 = $xor788 ^ $487;
 $add790 = (($or787) + ($xor789))|0;
 $add791 = (($add790) + 1859775393)|0;
 $arrayidx792 = ((($x)) + 20|0);
 $488 = HEAP32[$arrayidx792>>2]|0;
 $arrayidx793 = ((($x)) + 28|0);
 $489 = HEAP32[$arrayidx793>>2]|0;
 $xor794 = $488 ^ $489;
 $arrayidx795 = ((($x)) + 52|0);
 $490 = HEAP32[$arrayidx795>>2]|0;
 $xor796 = $xor794 ^ $490;
 $arrayidx797 = ((($x)) + 8|0);
 $491 = HEAP32[$arrayidx797>>2]|0;
 $xor798 = $xor796 ^ $491;
 $tm = $xor798;
 $492 = $tm;
 $shl799 = $492 << 1;
 $493 = $tm;
 $shr800 = $493 >>> 31;
 $or801 = $shl799 | $shr800;
 $arrayidx802 = ((($x)) + 20|0);
 HEAP32[$arrayidx802>>2] = $or801;
 $add803 = (($add791) + ($or801))|0;
 $494 = $c;
 $add804 = (($494) + ($add803))|0;
 $c = $add804;
 $495 = $e;
 $shl805 = $495 << 30;
 $496 = $e;
 $shr806 = $496 >>> 2;
 $or807 = $shl805 | $shr806;
 $e = $or807;
 $497 = $c;
 $shl810 = $497 << 5;
 $498 = $c;
 $shr811 = $498 >>> 27;
 $or812 = $shl810 | $shr811;
 $499 = $d;
 $500 = $e;
 $xor813 = $499 ^ $500;
 $501 = $a;
 $xor814 = $xor813 ^ $501;
 $add815 = (($or812) + ($xor814))|0;
 $add816 = (($add815) + 1859775393)|0;
 $arrayidx817 = ((($x)) + 24|0);
 $502 = HEAP32[$arrayidx817>>2]|0;
 $arrayidx818 = ((($x)) + 32|0);
 $503 = HEAP32[$arrayidx818>>2]|0;
 $xor819 = $502 ^ $503;
 $arrayidx820 = ((($x)) + 56|0);
 $504 = HEAP32[$arrayidx820>>2]|0;
 $xor821 = $xor819 ^ $504;
 $arrayidx822 = ((($x)) + 12|0);
 $505 = HEAP32[$arrayidx822>>2]|0;
 $xor823 = $xor821 ^ $505;
 $tm = $xor823;
 $506 = $tm;
 $shl824 = $506 << 1;
 $507 = $tm;
 $shr825 = $507 >>> 31;
 $or826 = $shl824 | $shr825;
 $arrayidx827 = ((($x)) + 24|0);
 HEAP32[$arrayidx827>>2] = $or826;
 $add828 = (($add816) + ($or826))|0;
 $508 = $b;
 $add829 = (($508) + ($add828))|0;
 $b = $add829;
 $509 = $d;
 $shl830 = $509 << 30;
 $510 = $d;
 $shr831 = $510 >>> 2;
 $or832 = $shl830 | $shr831;
 $d = $or832;
 $511 = $b;
 $shl835 = $511 << 5;
 $512 = $b;
 $shr836 = $512 >>> 27;
 $or837 = $shl835 | $shr836;
 $513 = $c;
 $514 = $d;
 $xor838 = $513 ^ $514;
 $515 = $e;
 $xor839 = $xor838 ^ $515;
 $add840 = (($or837) + ($xor839))|0;
 $add841 = (($add840) + 1859775393)|0;
 $arrayidx842 = ((($x)) + 28|0);
 $516 = HEAP32[$arrayidx842>>2]|0;
 $arrayidx843 = ((($x)) + 36|0);
 $517 = HEAP32[$arrayidx843>>2]|0;
 $xor844 = $516 ^ $517;
 $arrayidx845 = ((($x)) + 60|0);
 $518 = HEAP32[$arrayidx845>>2]|0;
 $xor846 = $xor844 ^ $518;
 $arrayidx847 = ((($x)) + 16|0);
 $519 = HEAP32[$arrayidx847>>2]|0;
 $xor848 = $xor846 ^ $519;
 $tm = $xor848;
 $520 = $tm;
 $shl849 = $520 << 1;
 $521 = $tm;
 $shr850 = $521 >>> 31;
 $or851 = $shl849 | $shr850;
 $arrayidx852 = ((($x)) + 28|0);
 HEAP32[$arrayidx852>>2] = $or851;
 $add853 = (($add841) + ($or851))|0;
 $522 = $a;
 $add854 = (($522) + ($add853))|0;
 $a = $add854;
 $523 = $c;
 $shl855 = $523 << 30;
 $524 = $c;
 $shr856 = $524 >>> 2;
 $or857 = $shl855 | $shr856;
 $c = $or857;
 $525 = $a;
 $shl860 = $525 << 5;
 $526 = $a;
 $shr861 = $526 >>> 27;
 $or862 = $shl860 | $shr861;
 $527 = $b;
 $528 = $c;
 $and863 = $527 & $528;
 $529 = $d;
 $530 = $b;
 $531 = $c;
 $or864 = $530 | $531;
 $and865 = $529 & $or864;
 $or866 = $and863 | $and865;
 $add867 = (($or862) + ($or866))|0;
 $add868 = (($add867) + -1894007588)|0;
 $arrayidx869 = ((($x)) + 32|0);
 $532 = HEAP32[$arrayidx869>>2]|0;
 $arrayidx870 = ((($x)) + 40|0);
 $533 = HEAP32[$arrayidx870>>2]|0;
 $xor871 = $532 ^ $533;
 $534 = HEAP32[$x>>2]|0;
 $xor873 = $xor871 ^ $534;
 $arrayidx874 = ((($x)) + 20|0);
 $535 = HEAP32[$arrayidx874>>2]|0;
 $xor875 = $xor873 ^ $535;
 $tm = $xor875;
 $536 = $tm;
 $shl876 = $536 << 1;
 $537 = $tm;
 $shr877 = $537 >>> 31;
 $or878 = $shl876 | $shr877;
 $arrayidx879 = ((($x)) + 32|0);
 HEAP32[$arrayidx879>>2] = $or878;
 $add880 = (($add868) + ($or878))|0;
 $538 = $e;
 $add881 = (($538) + ($add880))|0;
 $e = $add881;
 $539 = $b;
 $shl882 = $539 << 30;
 $540 = $b;
 $shr883 = $540 >>> 2;
 $or884 = $shl882 | $shr883;
 $b = $or884;
 $541 = $e;
 $shl887 = $541 << 5;
 $542 = $e;
 $shr888 = $542 >>> 27;
 $or889 = $shl887 | $shr888;
 $543 = $a;
 $544 = $b;
 $and890 = $543 & $544;
 $545 = $c;
 $546 = $a;
 $547 = $b;
 $or891 = $546 | $547;
 $and892 = $545 & $or891;
 $or893 = $and890 | $and892;
 $add894 = (($or889) + ($or893))|0;
 $add895 = (($add894) + -1894007588)|0;
 $arrayidx896 = ((($x)) + 36|0);
 $548 = HEAP32[$arrayidx896>>2]|0;
 $arrayidx897 = ((($x)) + 44|0);
 $549 = HEAP32[$arrayidx897>>2]|0;
 $xor898 = $548 ^ $549;
 $arrayidx899 = ((($x)) + 4|0);
 $550 = HEAP32[$arrayidx899>>2]|0;
 $xor900 = $xor898 ^ $550;
 $arrayidx901 = ((($x)) + 24|0);
 $551 = HEAP32[$arrayidx901>>2]|0;
 $xor902 = $xor900 ^ $551;
 $tm = $xor902;
 $552 = $tm;
 $shl903 = $552 << 1;
 $553 = $tm;
 $shr904 = $553 >>> 31;
 $or905 = $shl903 | $shr904;
 $arrayidx906 = ((($x)) + 36|0);
 HEAP32[$arrayidx906>>2] = $or905;
 $add907 = (($add895) + ($or905))|0;
 $554 = $d;
 $add908 = (($554) + ($add907))|0;
 $d = $add908;
 $555 = $a;
 $shl909 = $555 << 30;
 $556 = $a;
 $shr910 = $556 >>> 2;
 $or911 = $shl909 | $shr910;
 $a = $or911;
 $557 = $d;
 $shl914 = $557 << 5;
 $558 = $d;
 $shr915 = $558 >>> 27;
 $or916 = $shl914 | $shr915;
 $559 = $e;
 $560 = $a;
 $and917 = $559 & $560;
 $561 = $b;
 $562 = $e;
 $563 = $a;
 $or918 = $562 | $563;
 $and919 = $561 & $or918;
 $or920 = $and917 | $and919;
 $add921 = (($or916) + ($or920))|0;
 $add922 = (($add921) + -1894007588)|0;
 $arrayidx923 = ((($x)) + 40|0);
 $564 = HEAP32[$arrayidx923>>2]|0;
 $arrayidx924 = ((($x)) + 48|0);
 $565 = HEAP32[$arrayidx924>>2]|0;
 $xor925 = $564 ^ $565;
 $arrayidx926 = ((($x)) + 8|0);
 $566 = HEAP32[$arrayidx926>>2]|0;
 $xor927 = $xor925 ^ $566;
 $arrayidx928 = ((($x)) + 28|0);
 $567 = HEAP32[$arrayidx928>>2]|0;
 $xor929 = $xor927 ^ $567;
 $tm = $xor929;
 $568 = $tm;
 $shl930 = $568 << 1;
 $569 = $tm;
 $shr931 = $569 >>> 31;
 $or932 = $shl930 | $shr931;
 $arrayidx933 = ((($x)) + 40|0);
 HEAP32[$arrayidx933>>2] = $or932;
 $add934 = (($add922) + ($or932))|0;
 $570 = $c;
 $add935 = (($570) + ($add934))|0;
 $c = $add935;
 $571 = $e;
 $shl936 = $571 << 30;
 $572 = $e;
 $shr937 = $572 >>> 2;
 $or938 = $shl936 | $shr937;
 $e = $or938;
 $573 = $c;
 $shl941 = $573 << 5;
 $574 = $c;
 $shr942 = $574 >>> 27;
 $or943 = $shl941 | $shr942;
 $575 = $d;
 $576 = $e;
 $and944 = $575 & $576;
 $577 = $a;
 $578 = $d;
 $579 = $e;
 $or945 = $578 | $579;
 $and946 = $577 & $or945;
 $or947 = $and944 | $and946;
 $add948 = (($or943) + ($or947))|0;
 $add949 = (($add948) + -1894007588)|0;
 $arrayidx950 = ((($x)) + 44|0);
 $580 = HEAP32[$arrayidx950>>2]|0;
 $arrayidx951 = ((($x)) + 52|0);
 $581 = HEAP32[$arrayidx951>>2]|0;
 $xor952 = $580 ^ $581;
 $arrayidx953 = ((($x)) + 12|0);
 $582 = HEAP32[$arrayidx953>>2]|0;
 $xor954 = $xor952 ^ $582;
 $arrayidx955 = ((($x)) + 32|0);
 $583 = HEAP32[$arrayidx955>>2]|0;
 $xor956 = $xor954 ^ $583;
 $tm = $xor956;
 $584 = $tm;
 $shl957 = $584 << 1;
 $585 = $tm;
 $shr958 = $585 >>> 31;
 $or959 = $shl957 | $shr958;
 $arrayidx960 = ((($x)) + 44|0);
 HEAP32[$arrayidx960>>2] = $or959;
 $add961 = (($add949) + ($or959))|0;
 $586 = $b;
 $add962 = (($586) + ($add961))|0;
 $b = $add962;
 $587 = $d;
 $shl963 = $587 << 30;
 $588 = $d;
 $shr964 = $588 >>> 2;
 $or965 = $shl963 | $shr964;
 $d = $or965;
 $589 = $b;
 $shl968 = $589 << 5;
 $590 = $b;
 $shr969 = $590 >>> 27;
 $or970 = $shl968 | $shr969;
 $591 = $c;
 $592 = $d;
 $and971 = $591 & $592;
 $593 = $e;
 $594 = $c;
 $595 = $d;
 $or972 = $594 | $595;
 $and973 = $593 & $or972;
 $or974 = $and971 | $and973;
 $add975 = (($or970) + ($or974))|0;
 $add976 = (($add975) + -1894007588)|0;
 $arrayidx977 = ((($x)) + 48|0);
 $596 = HEAP32[$arrayidx977>>2]|0;
 $arrayidx978 = ((($x)) + 56|0);
 $597 = HEAP32[$arrayidx978>>2]|0;
 $xor979 = $596 ^ $597;
 $arrayidx980 = ((($x)) + 16|0);
 $598 = HEAP32[$arrayidx980>>2]|0;
 $xor981 = $xor979 ^ $598;
 $arrayidx982 = ((($x)) + 36|0);
 $599 = HEAP32[$arrayidx982>>2]|0;
 $xor983 = $xor981 ^ $599;
 $tm = $xor983;
 $600 = $tm;
 $shl984 = $600 << 1;
 $601 = $tm;
 $shr985 = $601 >>> 31;
 $or986 = $shl984 | $shr985;
 $arrayidx987 = ((($x)) + 48|0);
 HEAP32[$arrayidx987>>2] = $or986;
 $add988 = (($add976) + ($or986))|0;
 $602 = $a;
 $add989 = (($602) + ($add988))|0;
 $a = $add989;
 $603 = $c;
 $shl990 = $603 << 30;
 $604 = $c;
 $shr991 = $604 >>> 2;
 $or992 = $shl990 | $shr991;
 $c = $or992;
 $605 = $a;
 $shl995 = $605 << 5;
 $606 = $a;
 $shr996 = $606 >>> 27;
 $or997 = $shl995 | $shr996;
 $607 = $b;
 $608 = $c;
 $and998 = $607 & $608;
 $609 = $d;
 $610 = $b;
 $611 = $c;
 $or999 = $610 | $611;
 $and1000 = $609 & $or999;
 $or1001 = $and998 | $and1000;
 $add1002 = (($or997) + ($or1001))|0;
 $add1003 = (($add1002) + -1894007588)|0;
 $arrayidx1004 = ((($x)) + 52|0);
 $612 = HEAP32[$arrayidx1004>>2]|0;
 $arrayidx1005 = ((($x)) + 60|0);
 $613 = HEAP32[$arrayidx1005>>2]|0;
 $xor1006 = $612 ^ $613;
 $arrayidx1007 = ((($x)) + 20|0);
 $614 = HEAP32[$arrayidx1007>>2]|0;
 $xor1008 = $xor1006 ^ $614;
 $arrayidx1009 = ((($x)) + 40|0);
 $615 = HEAP32[$arrayidx1009>>2]|0;
 $xor1010 = $xor1008 ^ $615;
 $tm = $xor1010;
 $616 = $tm;
 $shl1011 = $616 << 1;
 $617 = $tm;
 $shr1012 = $617 >>> 31;
 $or1013 = $shl1011 | $shr1012;
 $arrayidx1014 = ((($x)) + 52|0);
 HEAP32[$arrayidx1014>>2] = $or1013;
 $add1015 = (($add1003) + ($or1013))|0;
 $618 = $e;
 $add1016 = (($618) + ($add1015))|0;
 $e = $add1016;
 $619 = $b;
 $shl1017 = $619 << 30;
 $620 = $b;
 $shr1018 = $620 >>> 2;
 $or1019 = $shl1017 | $shr1018;
 $b = $or1019;
 $621 = $e;
 $shl1022 = $621 << 5;
 $622 = $e;
 $shr1023 = $622 >>> 27;
 $or1024 = $shl1022 | $shr1023;
 $623 = $a;
 $624 = $b;
 $and1025 = $623 & $624;
 $625 = $c;
 $626 = $a;
 $627 = $b;
 $or1026 = $626 | $627;
 $and1027 = $625 & $or1026;
 $or1028 = $and1025 | $and1027;
 $add1029 = (($or1024) + ($or1028))|0;
 $add1030 = (($add1029) + -1894007588)|0;
 $arrayidx1031 = ((($x)) + 56|0);
 $628 = HEAP32[$arrayidx1031>>2]|0;
 $629 = HEAP32[$x>>2]|0;
 $xor1033 = $628 ^ $629;
 $arrayidx1034 = ((($x)) + 24|0);
 $630 = HEAP32[$arrayidx1034>>2]|0;
 $xor1035 = $xor1033 ^ $630;
 $arrayidx1036 = ((($x)) + 44|0);
 $631 = HEAP32[$arrayidx1036>>2]|0;
 $xor1037 = $xor1035 ^ $631;
 $tm = $xor1037;
 $632 = $tm;
 $shl1038 = $632 << 1;
 $633 = $tm;
 $shr1039 = $633 >>> 31;
 $or1040 = $shl1038 | $shr1039;
 $arrayidx1041 = ((($x)) + 56|0);
 HEAP32[$arrayidx1041>>2] = $or1040;
 $add1042 = (($add1030) + ($or1040))|0;
 $634 = $d;
 $add1043 = (($634) + ($add1042))|0;
 $d = $add1043;
 $635 = $a;
 $shl1044 = $635 << 30;
 $636 = $a;
 $shr1045 = $636 >>> 2;
 $or1046 = $shl1044 | $shr1045;
 $a = $or1046;
 $637 = $d;
 $shl1049 = $637 << 5;
 $638 = $d;
 $shr1050 = $638 >>> 27;
 $or1051 = $shl1049 | $shr1050;
 $639 = $e;
 $640 = $a;
 $and1052 = $639 & $640;
 $641 = $b;
 $642 = $e;
 $643 = $a;
 $or1053 = $642 | $643;
 $and1054 = $641 & $or1053;
 $or1055 = $and1052 | $and1054;
 $add1056 = (($or1051) + ($or1055))|0;
 $add1057 = (($add1056) + -1894007588)|0;
 $arrayidx1058 = ((($x)) + 60|0);
 $644 = HEAP32[$arrayidx1058>>2]|0;
 $arrayidx1059 = ((($x)) + 4|0);
 $645 = HEAP32[$arrayidx1059>>2]|0;
 $xor1060 = $644 ^ $645;
 $arrayidx1061 = ((($x)) + 28|0);
 $646 = HEAP32[$arrayidx1061>>2]|0;
 $xor1062 = $xor1060 ^ $646;
 $arrayidx1063 = ((($x)) + 48|0);
 $647 = HEAP32[$arrayidx1063>>2]|0;
 $xor1064 = $xor1062 ^ $647;
 $tm = $xor1064;
 $648 = $tm;
 $shl1065 = $648 << 1;
 $649 = $tm;
 $shr1066 = $649 >>> 31;
 $or1067 = $shl1065 | $shr1066;
 $arrayidx1068 = ((($x)) + 60|0);
 HEAP32[$arrayidx1068>>2] = $or1067;
 $add1069 = (($add1057) + ($or1067))|0;
 $650 = $c;
 $add1070 = (($650) + ($add1069))|0;
 $c = $add1070;
 $651 = $e;
 $shl1071 = $651 << 30;
 $652 = $e;
 $shr1072 = $652 >>> 2;
 $or1073 = $shl1071 | $shr1072;
 $e = $or1073;
 $653 = $c;
 $shl1076 = $653 << 5;
 $654 = $c;
 $shr1077 = $654 >>> 27;
 $or1078 = $shl1076 | $shr1077;
 $655 = $d;
 $656 = $e;
 $and1079 = $655 & $656;
 $657 = $a;
 $658 = $d;
 $659 = $e;
 $or1080 = $658 | $659;
 $and1081 = $657 & $or1080;
 $or1082 = $and1079 | $and1081;
 $add1083 = (($or1078) + ($or1082))|0;
 $add1084 = (($add1083) + -1894007588)|0;
 $660 = HEAP32[$x>>2]|0;
 $arrayidx1086 = ((($x)) + 8|0);
 $661 = HEAP32[$arrayidx1086>>2]|0;
 $xor1087 = $660 ^ $661;
 $arrayidx1088 = ((($x)) + 32|0);
 $662 = HEAP32[$arrayidx1088>>2]|0;
 $xor1089 = $xor1087 ^ $662;
 $arrayidx1090 = ((($x)) + 52|0);
 $663 = HEAP32[$arrayidx1090>>2]|0;
 $xor1091 = $xor1089 ^ $663;
 $tm = $xor1091;
 $664 = $tm;
 $shl1092 = $664 << 1;
 $665 = $tm;
 $shr1093 = $665 >>> 31;
 $or1094 = $shl1092 | $shr1093;
 HEAP32[$x>>2] = $or1094;
 $add1096 = (($add1084) + ($or1094))|0;
 $666 = $b;
 $add1097 = (($666) + ($add1096))|0;
 $b = $add1097;
 $667 = $d;
 $shl1098 = $667 << 30;
 $668 = $d;
 $shr1099 = $668 >>> 2;
 $or1100 = $shl1098 | $shr1099;
 $d = $or1100;
 $669 = $b;
 $shl1103 = $669 << 5;
 $670 = $b;
 $shr1104 = $670 >>> 27;
 $or1105 = $shl1103 | $shr1104;
 $671 = $c;
 $672 = $d;
 $and1106 = $671 & $672;
 $673 = $e;
 $674 = $c;
 $675 = $d;
 $or1107 = $674 | $675;
 $and1108 = $673 & $or1107;
 $or1109 = $and1106 | $and1108;
 $add1110 = (($or1105) + ($or1109))|0;
 $add1111 = (($add1110) + -1894007588)|0;
 $arrayidx1112 = ((($x)) + 4|0);
 $676 = HEAP32[$arrayidx1112>>2]|0;
 $arrayidx1113 = ((($x)) + 12|0);
 $677 = HEAP32[$arrayidx1113>>2]|0;
 $xor1114 = $676 ^ $677;
 $arrayidx1115 = ((($x)) + 36|0);
 $678 = HEAP32[$arrayidx1115>>2]|0;
 $xor1116 = $xor1114 ^ $678;
 $arrayidx1117 = ((($x)) + 56|0);
 $679 = HEAP32[$arrayidx1117>>2]|0;
 $xor1118 = $xor1116 ^ $679;
 $tm = $xor1118;
 $680 = $tm;
 $shl1119 = $680 << 1;
 $681 = $tm;
 $shr1120 = $681 >>> 31;
 $or1121 = $shl1119 | $shr1120;
 $arrayidx1122 = ((($x)) + 4|0);
 HEAP32[$arrayidx1122>>2] = $or1121;
 $add1123 = (($add1111) + ($or1121))|0;
 $682 = $a;
 $add1124 = (($682) + ($add1123))|0;
 $a = $add1124;
 $683 = $c;
 $shl1125 = $683 << 30;
 $684 = $c;
 $shr1126 = $684 >>> 2;
 $or1127 = $shl1125 | $shr1126;
 $c = $or1127;
 $685 = $a;
 $shl1130 = $685 << 5;
 $686 = $a;
 $shr1131 = $686 >>> 27;
 $or1132 = $shl1130 | $shr1131;
 $687 = $b;
 $688 = $c;
 $and1133 = $687 & $688;
 $689 = $d;
 $690 = $b;
 $691 = $c;
 $or1134 = $690 | $691;
 $and1135 = $689 & $or1134;
 $or1136 = $and1133 | $and1135;
 $add1137 = (($or1132) + ($or1136))|0;
 $add1138 = (($add1137) + -1894007588)|0;
 $arrayidx1139 = ((($x)) + 8|0);
 $692 = HEAP32[$arrayidx1139>>2]|0;
 $arrayidx1140 = ((($x)) + 16|0);
 $693 = HEAP32[$arrayidx1140>>2]|0;
 $xor1141 = $692 ^ $693;
 $arrayidx1142 = ((($x)) + 40|0);
 $694 = HEAP32[$arrayidx1142>>2]|0;
 $xor1143 = $xor1141 ^ $694;
 $arrayidx1144 = ((($x)) + 60|0);
 $695 = HEAP32[$arrayidx1144>>2]|0;
 $xor1145 = $xor1143 ^ $695;
 $tm = $xor1145;
 $696 = $tm;
 $shl1146 = $696 << 1;
 $697 = $tm;
 $shr1147 = $697 >>> 31;
 $or1148 = $shl1146 | $shr1147;
 $arrayidx1149 = ((($x)) + 8|0);
 HEAP32[$arrayidx1149>>2] = $or1148;
 $add1150 = (($add1138) + ($or1148))|0;
 $698 = $e;
 $add1151 = (($698) + ($add1150))|0;
 $e = $add1151;
 $699 = $b;
 $shl1152 = $699 << 30;
 $700 = $b;
 $shr1153 = $700 >>> 2;
 $or1154 = $shl1152 | $shr1153;
 $b = $or1154;
 $701 = $e;
 $shl1157 = $701 << 5;
 $702 = $e;
 $shr1158 = $702 >>> 27;
 $or1159 = $shl1157 | $shr1158;
 $703 = $a;
 $704 = $b;
 $and1160 = $703 & $704;
 $705 = $c;
 $706 = $a;
 $707 = $b;
 $or1161 = $706 | $707;
 $and1162 = $705 & $or1161;
 $or1163 = $and1160 | $and1162;
 $add1164 = (($or1159) + ($or1163))|0;
 $add1165 = (($add1164) + -1894007588)|0;
 $arrayidx1166 = ((($x)) + 12|0);
 $708 = HEAP32[$arrayidx1166>>2]|0;
 $arrayidx1167 = ((($x)) + 20|0);
 $709 = HEAP32[$arrayidx1167>>2]|0;
 $xor1168 = $708 ^ $709;
 $arrayidx1169 = ((($x)) + 44|0);
 $710 = HEAP32[$arrayidx1169>>2]|0;
 $xor1170 = $xor1168 ^ $710;
 $711 = HEAP32[$x>>2]|0;
 $xor1172 = $xor1170 ^ $711;
 $tm = $xor1172;
 $712 = $tm;
 $shl1173 = $712 << 1;
 $713 = $tm;
 $shr1174 = $713 >>> 31;
 $or1175 = $shl1173 | $shr1174;
 $arrayidx1176 = ((($x)) + 12|0);
 HEAP32[$arrayidx1176>>2] = $or1175;
 $add1177 = (($add1165) + ($or1175))|0;
 $714 = $d;
 $add1178 = (($714) + ($add1177))|0;
 $d = $add1178;
 $715 = $a;
 $shl1179 = $715 << 30;
 $716 = $a;
 $shr1180 = $716 >>> 2;
 $or1181 = $shl1179 | $shr1180;
 $a = $or1181;
 $717 = $d;
 $shl1184 = $717 << 5;
 $718 = $d;
 $shr1185 = $718 >>> 27;
 $or1186 = $shl1184 | $shr1185;
 $719 = $e;
 $720 = $a;
 $and1187 = $719 & $720;
 $721 = $b;
 $722 = $e;
 $723 = $a;
 $or1188 = $722 | $723;
 $and1189 = $721 & $or1188;
 $or1190 = $and1187 | $and1189;
 $add1191 = (($or1186) + ($or1190))|0;
 $add1192 = (($add1191) + -1894007588)|0;
 $arrayidx1193 = ((($x)) + 16|0);
 $724 = HEAP32[$arrayidx1193>>2]|0;
 $arrayidx1194 = ((($x)) + 24|0);
 $725 = HEAP32[$arrayidx1194>>2]|0;
 $xor1195 = $724 ^ $725;
 $arrayidx1196 = ((($x)) + 48|0);
 $726 = HEAP32[$arrayidx1196>>2]|0;
 $xor1197 = $xor1195 ^ $726;
 $arrayidx1198 = ((($x)) + 4|0);
 $727 = HEAP32[$arrayidx1198>>2]|0;
 $xor1199 = $xor1197 ^ $727;
 $tm = $xor1199;
 $728 = $tm;
 $shl1200 = $728 << 1;
 $729 = $tm;
 $shr1201 = $729 >>> 31;
 $or1202 = $shl1200 | $shr1201;
 $arrayidx1203 = ((($x)) + 16|0);
 HEAP32[$arrayidx1203>>2] = $or1202;
 $add1204 = (($add1192) + ($or1202))|0;
 $730 = $c;
 $add1205 = (($730) + ($add1204))|0;
 $c = $add1205;
 $731 = $e;
 $shl1206 = $731 << 30;
 $732 = $e;
 $shr1207 = $732 >>> 2;
 $or1208 = $shl1206 | $shr1207;
 $e = $or1208;
 $733 = $c;
 $shl1211 = $733 << 5;
 $734 = $c;
 $shr1212 = $734 >>> 27;
 $or1213 = $shl1211 | $shr1212;
 $735 = $d;
 $736 = $e;
 $and1214 = $735 & $736;
 $737 = $a;
 $738 = $d;
 $739 = $e;
 $or1215 = $738 | $739;
 $and1216 = $737 & $or1215;
 $or1217 = $and1214 | $and1216;
 $add1218 = (($or1213) + ($or1217))|0;
 $add1219 = (($add1218) + -1894007588)|0;
 $arrayidx1220 = ((($x)) + 20|0);
 $740 = HEAP32[$arrayidx1220>>2]|0;
 $arrayidx1221 = ((($x)) + 28|0);
 $741 = HEAP32[$arrayidx1221>>2]|0;
 $xor1222 = $740 ^ $741;
 $arrayidx1223 = ((($x)) + 52|0);
 $742 = HEAP32[$arrayidx1223>>2]|0;
 $xor1224 = $xor1222 ^ $742;
 $arrayidx1225 = ((($x)) + 8|0);
 $743 = HEAP32[$arrayidx1225>>2]|0;
 $xor1226 = $xor1224 ^ $743;
 $tm = $xor1226;
 $744 = $tm;
 $shl1227 = $744 << 1;
 $745 = $tm;
 $shr1228 = $745 >>> 31;
 $or1229 = $shl1227 | $shr1228;
 $arrayidx1230 = ((($x)) + 20|0);
 HEAP32[$arrayidx1230>>2] = $or1229;
 $add1231 = (($add1219) + ($or1229))|0;
 $746 = $b;
 $add1232 = (($746) + ($add1231))|0;
 $b = $add1232;
 $747 = $d;
 $shl1233 = $747 << 30;
 $748 = $d;
 $shr1234 = $748 >>> 2;
 $or1235 = $shl1233 | $shr1234;
 $d = $or1235;
 $749 = $b;
 $shl1238 = $749 << 5;
 $750 = $b;
 $shr1239 = $750 >>> 27;
 $or1240 = $shl1238 | $shr1239;
 $751 = $c;
 $752 = $d;
 $and1241 = $751 & $752;
 $753 = $e;
 $754 = $c;
 $755 = $d;
 $or1242 = $754 | $755;
 $and1243 = $753 & $or1242;
 $or1244 = $and1241 | $and1243;
 $add1245 = (($or1240) + ($or1244))|0;
 $add1246 = (($add1245) + -1894007588)|0;
 $arrayidx1247 = ((($x)) + 24|0);
 $756 = HEAP32[$arrayidx1247>>2]|0;
 $arrayidx1248 = ((($x)) + 32|0);
 $757 = HEAP32[$arrayidx1248>>2]|0;
 $xor1249 = $756 ^ $757;
 $arrayidx1250 = ((($x)) + 56|0);
 $758 = HEAP32[$arrayidx1250>>2]|0;
 $xor1251 = $xor1249 ^ $758;
 $arrayidx1252 = ((($x)) + 12|0);
 $759 = HEAP32[$arrayidx1252>>2]|0;
 $xor1253 = $xor1251 ^ $759;
 $tm = $xor1253;
 $760 = $tm;
 $shl1254 = $760 << 1;
 $761 = $tm;
 $shr1255 = $761 >>> 31;
 $or1256 = $shl1254 | $shr1255;
 $arrayidx1257 = ((($x)) + 24|0);
 HEAP32[$arrayidx1257>>2] = $or1256;
 $add1258 = (($add1246) + ($or1256))|0;
 $762 = $a;
 $add1259 = (($762) + ($add1258))|0;
 $a = $add1259;
 $763 = $c;
 $shl1260 = $763 << 30;
 $764 = $c;
 $shr1261 = $764 >>> 2;
 $or1262 = $shl1260 | $shr1261;
 $c = $or1262;
 $765 = $a;
 $shl1265 = $765 << 5;
 $766 = $a;
 $shr1266 = $766 >>> 27;
 $or1267 = $shl1265 | $shr1266;
 $767 = $b;
 $768 = $c;
 $and1268 = $767 & $768;
 $769 = $d;
 $770 = $b;
 $771 = $c;
 $or1269 = $770 | $771;
 $and1270 = $769 & $or1269;
 $or1271 = $and1268 | $and1270;
 $add1272 = (($or1267) + ($or1271))|0;
 $add1273 = (($add1272) + -1894007588)|0;
 $arrayidx1274 = ((($x)) + 28|0);
 $772 = HEAP32[$arrayidx1274>>2]|0;
 $arrayidx1275 = ((($x)) + 36|0);
 $773 = HEAP32[$arrayidx1275>>2]|0;
 $xor1276 = $772 ^ $773;
 $arrayidx1277 = ((($x)) + 60|0);
 $774 = HEAP32[$arrayidx1277>>2]|0;
 $xor1278 = $xor1276 ^ $774;
 $arrayidx1279 = ((($x)) + 16|0);
 $775 = HEAP32[$arrayidx1279>>2]|0;
 $xor1280 = $xor1278 ^ $775;
 $tm = $xor1280;
 $776 = $tm;
 $shl1281 = $776 << 1;
 $777 = $tm;
 $shr1282 = $777 >>> 31;
 $or1283 = $shl1281 | $shr1282;
 $arrayidx1284 = ((($x)) + 28|0);
 HEAP32[$arrayidx1284>>2] = $or1283;
 $add1285 = (($add1273) + ($or1283))|0;
 $778 = $e;
 $add1286 = (($778) + ($add1285))|0;
 $e = $add1286;
 $779 = $b;
 $shl1287 = $779 << 30;
 $780 = $b;
 $shr1288 = $780 >>> 2;
 $or1289 = $shl1287 | $shr1288;
 $b = $or1289;
 $781 = $e;
 $shl1292 = $781 << 5;
 $782 = $e;
 $shr1293 = $782 >>> 27;
 $or1294 = $shl1292 | $shr1293;
 $783 = $a;
 $784 = $b;
 $and1295 = $783 & $784;
 $785 = $c;
 $786 = $a;
 $787 = $b;
 $or1296 = $786 | $787;
 $and1297 = $785 & $or1296;
 $or1298 = $and1295 | $and1297;
 $add1299 = (($or1294) + ($or1298))|0;
 $add1300 = (($add1299) + -1894007588)|0;
 $arrayidx1301 = ((($x)) + 32|0);
 $788 = HEAP32[$arrayidx1301>>2]|0;
 $arrayidx1302 = ((($x)) + 40|0);
 $789 = HEAP32[$arrayidx1302>>2]|0;
 $xor1303 = $788 ^ $789;
 $790 = HEAP32[$x>>2]|0;
 $xor1305 = $xor1303 ^ $790;
 $arrayidx1306 = ((($x)) + 20|0);
 $791 = HEAP32[$arrayidx1306>>2]|0;
 $xor1307 = $xor1305 ^ $791;
 $tm = $xor1307;
 $792 = $tm;
 $shl1308 = $792 << 1;
 $793 = $tm;
 $shr1309 = $793 >>> 31;
 $or1310 = $shl1308 | $shr1309;
 $arrayidx1311 = ((($x)) + 32|0);
 HEAP32[$arrayidx1311>>2] = $or1310;
 $add1312 = (($add1300) + ($or1310))|0;
 $794 = $d;
 $add1313 = (($794) + ($add1312))|0;
 $d = $add1313;
 $795 = $a;
 $shl1314 = $795 << 30;
 $796 = $a;
 $shr1315 = $796 >>> 2;
 $or1316 = $shl1314 | $shr1315;
 $a = $or1316;
 $797 = $d;
 $shl1319 = $797 << 5;
 $798 = $d;
 $shr1320 = $798 >>> 27;
 $or1321 = $shl1319 | $shr1320;
 $799 = $e;
 $800 = $a;
 $and1322 = $799 & $800;
 $801 = $b;
 $802 = $e;
 $803 = $a;
 $or1323 = $802 | $803;
 $and1324 = $801 & $or1323;
 $or1325 = $and1322 | $and1324;
 $add1326 = (($or1321) + ($or1325))|0;
 $add1327 = (($add1326) + -1894007588)|0;
 $arrayidx1328 = ((($x)) + 36|0);
 $804 = HEAP32[$arrayidx1328>>2]|0;
 $arrayidx1329 = ((($x)) + 44|0);
 $805 = HEAP32[$arrayidx1329>>2]|0;
 $xor1330 = $804 ^ $805;
 $arrayidx1331 = ((($x)) + 4|0);
 $806 = HEAP32[$arrayidx1331>>2]|0;
 $xor1332 = $xor1330 ^ $806;
 $arrayidx1333 = ((($x)) + 24|0);
 $807 = HEAP32[$arrayidx1333>>2]|0;
 $xor1334 = $xor1332 ^ $807;
 $tm = $xor1334;
 $808 = $tm;
 $shl1335 = $808 << 1;
 $809 = $tm;
 $shr1336 = $809 >>> 31;
 $or1337 = $shl1335 | $shr1336;
 $arrayidx1338 = ((($x)) + 36|0);
 HEAP32[$arrayidx1338>>2] = $or1337;
 $add1339 = (($add1327) + ($or1337))|0;
 $810 = $c;
 $add1340 = (($810) + ($add1339))|0;
 $c = $add1340;
 $811 = $e;
 $shl1341 = $811 << 30;
 $812 = $e;
 $shr1342 = $812 >>> 2;
 $or1343 = $shl1341 | $shr1342;
 $e = $or1343;
 $813 = $c;
 $shl1346 = $813 << 5;
 $814 = $c;
 $shr1347 = $814 >>> 27;
 $or1348 = $shl1346 | $shr1347;
 $815 = $d;
 $816 = $e;
 $and1349 = $815 & $816;
 $817 = $a;
 $818 = $d;
 $819 = $e;
 $or1350 = $818 | $819;
 $and1351 = $817 & $or1350;
 $or1352 = $and1349 | $and1351;
 $add1353 = (($or1348) + ($or1352))|0;
 $add1354 = (($add1353) + -1894007588)|0;
 $arrayidx1355 = ((($x)) + 40|0);
 $820 = HEAP32[$arrayidx1355>>2]|0;
 $arrayidx1356 = ((($x)) + 48|0);
 $821 = HEAP32[$arrayidx1356>>2]|0;
 $xor1357 = $820 ^ $821;
 $arrayidx1358 = ((($x)) + 8|0);
 $822 = HEAP32[$arrayidx1358>>2]|0;
 $xor1359 = $xor1357 ^ $822;
 $arrayidx1360 = ((($x)) + 28|0);
 $823 = HEAP32[$arrayidx1360>>2]|0;
 $xor1361 = $xor1359 ^ $823;
 $tm = $xor1361;
 $824 = $tm;
 $shl1362 = $824 << 1;
 $825 = $tm;
 $shr1363 = $825 >>> 31;
 $or1364 = $shl1362 | $shr1363;
 $arrayidx1365 = ((($x)) + 40|0);
 HEAP32[$arrayidx1365>>2] = $or1364;
 $add1366 = (($add1354) + ($or1364))|0;
 $826 = $b;
 $add1367 = (($826) + ($add1366))|0;
 $b = $add1367;
 $827 = $d;
 $shl1368 = $827 << 30;
 $828 = $d;
 $shr1369 = $828 >>> 2;
 $or1370 = $shl1368 | $shr1369;
 $d = $or1370;
 $829 = $b;
 $shl1373 = $829 << 5;
 $830 = $b;
 $shr1374 = $830 >>> 27;
 $or1375 = $shl1373 | $shr1374;
 $831 = $c;
 $832 = $d;
 $and1376 = $831 & $832;
 $833 = $e;
 $834 = $c;
 $835 = $d;
 $or1377 = $834 | $835;
 $and1378 = $833 & $or1377;
 $or1379 = $and1376 | $and1378;
 $add1380 = (($or1375) + ($or1379))|0;
 $add1381 = (($add1380) + -1894007588)|0;
 $arrayidx1382 = ((($x)) + 44|0);
 $836 = HEAP32[$arrayidx1382>>2]|0;
 $arrayidx1383 = ((($x)) + 52|0);
 $837 = HEAP32[$arrayidx1383>>2]|0;
 $xor1384 = $836 ^ $837;
 $arrayidx1385 = ((($x)) + 12|0);
 $838 = HEAP32[$arrayidx1385>>2]|0;
 $xor1386 = $xor1384 ^ $838;
 $arrayidx1387 = ((($x)) + 32|0);
 $839 = HEAP32[$arrayidx1387>>2]|0;
 $xor1388 = $xor1386 ^ $839;
 $tm = $xor1388;
 $840 = $tm;
 $shl1389 = $840 << 1;
 $841 = $tm;
 $shr1390 = $841 >>> 31;
 $or1391 = $shl1389 | $shr1390;
 $arrayidx1392 = ((($x)) + 44|0);
 HEAP32[$arrayidx1392>>2] = $or1391;
 $add1393 = (($add1381) + ($or1391))|0;
 $842 = $a;
 $add1394 = (($842) + ($add1393))|0;
 $a = $add1394;
 $843 = $c;
 $shl1395 = $843 << 30;
 $844 = $c;
 $shr1396 = $844 >>> 2;
 $or1397 = $shl1395 | $shr1396;
 $c = $or1397;
 $845 = $a;
 $shl1400 = $845 << 5;
 $846 = $a;
 $shr1401 = $846 >>> 27;
 $or1402 = $shl1400 | $shr1401;
 $847 = $b;
 $848 = $c;
 $xor1403 = $847 ^ $848;
 $849 = $d;
 $xor1404 = $xor1403 ^ $849;
 $add1405 = (($or1402) + ($xor1404))|0;
 $add1406 = (($add1405) + -899497514)|0;
 $arrayidx1407 = ((($x)) + 48|0);
 $850 = HEAP32[$arrayidx1407>>2]|0;
 $arrayidx1408 = ((($x)) + 56|0);
 $851 = HEAP32[$arrayidx1408>>2]|0;
 $xor1409 = $850 ^ $851;
 $arrayidx1410 = ((($x)) + 16|0);
 $852 = HEAP32[$arrayidx1410>>2]|0;
 $xor1411 = $xor1409 ^ $852;
 $arrayidx1412 = ((($x)) + 36|0);
 $853 = HEAP32[$arrayidx1412>>2]|0;
 $xor1413 = $xor1411 ^ $853;
 $tm = $xor1413;
 $854 = $tm;
 $shl1414 = $854 << 1;
 $855 = $tm;
 $shr1415 = $855 >>> 31;
 $or1416 = $shl1414 | $shr1415;
 $arrayidx1417 = ((($x)) + 48|0);
 HEAP32[$arrayidx1417>>2] = $or1416;
 $add1418 = (($add1406) + ($or1416))|0;
 $856 = $e;
 $add1419 = (($856) + ($add1418))|0;
 $e = $add1419;
 $857 = $b;
 $shl1420 = $857 << 30;
 $858 = $b;
 $shr1421 = $858 >>> 2;
 $or1422 = $shl1420 | $shr1421;
 $b = $or1422;
 $859 = $e;
 $shl1425 = $859 << 5;
 $860 = $e;
 $shr1426 = $860 >>> 27;
 $or1427 = $shl1425 | $shr1426;
 $861 = $a;
 $862 = $b;
 $xor1428 = $861 ^ $862;
 $863 = $c;
 $xor1429 = $xor1428 ^ $863;
 $add1430 = (($or1427) + ($xor1429))|0;
 $add1431 = (($add1430) + -899497514)|0;
 $arrayidx1432 = ((($x)) + 52|0);
 $864 = HEAP32[$arrayidx1432>>2]|0;
 $arrayidx1433 = ((($x)) + 60|0);
 $865 = HEAP32[$arrayidx1433>>2]|0;
 $xor1434 = $864 ^ $865;
 $arrayidx1435 = ((($x)) + 20|0);
 $866 = HEAP32[$arrayidx1435>>2]|0;
 $xor1436 = $xor1434 ^ $866;
 $arrayidx1437 = ((($x)) + 40|0);
 $867 = HEAP32[$arrayidx1437>>2]|0;
 $xor1438 = $xor1436 ^ $867;
 $tm = $xor1438;
 $868 = $tm;
 $shl1439 = $868 << 1;
 $869 = $tm;
 $shr1440 = $869 >>> 31;
 $or1441 = $shl1439 | $shr1440;
 $arrayidx1442 = ((($x)) + 52|0);
 HEAP32[$arrayidx1442>>2] = $or1441;
 $add1443 = (($add1431) + ($or1441))|0;
 $870 = $d;
 $add1444 = (($870) + ($add1443))|0;
 $d = $add1444;
 $871 = $a;
 $shl1445 = $871 << 30;
 $872 = $a;
 $shr1446 = $872 >>> 2;
 $or1447 = $shl1445 | $shr1446;
 $a = $or1447;
 $873 = $d;
 $shl1450 = $873 << 5;
 $874 = $d;
 $shr1451 = $874 >>> 27;
 $or1452 = $shl1450 | $shr1451;
 $875 = $e;
 $876 = $a;
 $xor1453 = $875 ^ $876;
 $877 = $b;
 $xor1454 = $xor1453 ^ $877;
 $add1455 = (($or1452) + ($xor1454))|0;
 $add1456 = (($add1455) + -899497514)|0;
 $arrayidx1457 = ((($x)) + 56|0);
 $878 = HEAP32[$arrayidx1457>>2]|0;
 $879 = HEAP32[$x>>2]|0;
 $xor1459 = $878 ^ $879;
 $arrayidx1460 = ((($x)) + 24|0);
 $880 = HEAP32[$arrayidx1460>>2]|0;
 $xor1461 = $xor1459 ^ $880;
 $arrayidx1462 = ((($x)) + 44|0);
 $881 = HEAP32[$arrayidx1462>>2]|0;
 $xor1463 = $xor1461 ^ $881;
 $tm = $xor1463;
 $882 = $tm;
 $shl1464 = $882 << 1;
 $883 = $tm;
 $shr1465 = $883 >>> 31;
 $or1466 = $shl1464 | $shr1465;
 $arrayidx1467 = ((($x)) + 56|0);
 HEAP32[$arrayidx1467>>2] = $or1466;
 $add1468 = (($add1456) + ($or1466))|0;
 $884 = $c;
 $add1469 = (($884) + ($add1468))|0;
 $c = $add1469;
 $885 = $e;
 $shl1470 = $885 << 30;
 $886 = $e;
 $shr1471 = $886 >>> 2;
 $or1472 = $shl1470 | $shr1471;
 $e = $or1472;
 $887 = $c;
 $shl1475 = $887 << 5;
 $888 = $c;
 $shr1476 = $888 >>> 27;
 $or1477 = $shl1475 | $shr1476;
 $889 = $d;
 $890 = $e;
 $xor1478 = $889 ^ $890;
 $891 = $a;
 $xor1479 = $xor1478 ^ $891;
 $add1480 = (($or1477) + ($xor1479))|0;
 $add1481 = (($add1480) + -899497514)|0;
 $arrayidx1482 = ((($x)) + 60|0);
 $892 = HEAP32[$arrayidx1482>>2]|0;
 $arrayidx1483 = ((($x)) + 4|0);
 $893 = HEAP32[$arrayidx1483>>2]|0;
 $xor1484 = $892 ^ $893;
 $arrayidx1485 = ((($x)) + 28|0);
 $894 = HEAP32[$arrayidx1485>>2]|0;
 $xor1486 = $xor1484 ^ $894;
 $arrayidx1487 = ((($x)) + 48|0);
 $895 = HEAP32[$arrayidx1487>>2]|0;
 $xor1488 = $xor1486 ^ $895;
 $tm = $xor1488;
 $896 = $tm;
 $shl1489 = $896 << 1;
 $897 = $tm;
 $shr1490 = $897 >>> 31;
 $or1491 = $shl1489 | $shr1490;
 $arrayidx1492 = ((($x)) + 60|0);
 HEAP32[$arrayidx1492>>2] = $or1491;
 $add1493 = (($add1481) + ($or1491))|0;
 $898 = $b;
 $add1494 = (($898) + ($add1493))|0;
 $b = $add1494;
 $899 = $d;
 $shl1495 = $899 << 30;
 $900 = $d;
 $shr1496 = $900 >>> 2;
 $or1497 = $shl1495 | $shr1496;
 $d = $or1497;
 $901 = $b;
 $shl1500 = $901 << 5;
 $902 = $b;
 $shr1501 = $902 >>> 27;
 $or1502 = $shl1500 | $shr1501;
 $903 = $c;
 $904 = $d;
 $xor1503 = $903 ^ $904;
 $905 = $e;
 $xor1504 = $xor1503 ^ $905;
 $add1505 = (($or1502) + ($xor1504))|0;
 $add1506 = (($add1505) + -899497514)|0;
 $906 = HEAP32[$x>>2]|0;
 $arrayidx1508 = ((($x)) + 8|0);
 $907 = HEAP32[$arrayidx1508>>2]|0;
 $xor1509 = $906 ^ $907;
 $arrayidx1510 = ((($x)) + 32|0);
 $908 = HEAP32[$arrayidx1510>>2]|0;
 $xor1511 = $xor1509 ^ $908;
 $arrayidx1512 = ((($x)) + 52|0);
 $909 = HEAP32[$arrayidx1512>>2]|0;
 $xor1513 = $xor1511 ^ $909;
 $tm = $xor1513;
 $910 = $tm;
 $shl1514 = $910 << 1;
 $911 = $tm;
 $shr1515 = $911 >>> 31;
 $or1516 = $shl1514 | $shr1515;
 HEAP32[$x>>2] = $or1516;
 $add1518 = (($add1506) + ($or1516))|0;
 $912 = $a;
 $add1519 = (($912) + ($add1518))|0;
 $a = $add1519;
 $913 = $c;
 $shl1520 = $913 << 30;
 $914 = $c;
 $shr1521 = $914 >>> 2;
 $or1522 = $shl1520 | $shr1521;
 $c = $or1522;
 $915 = $a;
 $shl1525 = $915 << 5;
 $916 = $a;
 $shr1526 = $916 >>> 27;
 $or1527 = $shl1525 | $shr1526;
 $917 = $b;
 $918 = $c;
 $xor1528 = $917 ^ $918;
 $919 = $d;
 $xor1529 = $xor1528 ^ $919;
 $add1530 = (($or1527) + ($xor1529))|0;
 $add1531 = (($add1530) + -899497514)|0;
 $arrayidx1532 = ((($x)) + 4|0);
 $920 = HEAP32[$arrayidx1532>>2]|0;
 $arrayidx1533 = ((($x)) + 12|0);
 $921 = HEAP32[$arrayidx1533>>2]|0;
 $xor1534 = $920 ^ $921;
 $arrayidx1535 = ((($x)) + 36|0);
 $922 = HEAP32[$arrayidx1535>>2]|0;
 $xor1536 = $xor1534 ^ $922;
 $arrayidx1537 = ((($x)) + 56|0);
 $923 = HEAP32[$arrayidx1537>>2]|0;
 $xor1538 = $xor1536 ^ $923;
 $tm = $xor1538;
 $924 = $tm;
 $shl1539 = $924 << 1;
 $925 = $tm;
 $shr1540 = $925 >>> 31;
 $or1541 = $shl1539 | $shr1540;
 $arrayidx1542 = ((($x)) + 4|0);
 HEAP32[$arrayidx1542>>2] = $or1541;
 $add1543 = (($add1531) + ($or1541))|0;
 $926 = $e;
 $add1544 = (($926) + ($add1543))|0;
 $e = $add1544;
 $927 = $b;
 $shl1545 = $927 << 30;
 $928 = $b;
 $shr1546 = $928 >>> 2;
 $or1547 = $shl1545 | $shr1546;
 $b = $or1547;
 $929 = $e;
 $shl1550 = $929 << 5;
 $930 = $e;
 $shr1551 = $930 >>> 27;
 $or1552 = $shl1550 | $shr1551;
 $931 = $a;
 $932 = $b;
 $xor1553 = $931 ^ $932;
 $933 = $c;
 $xor1554 = $xor1553 ^ $933;
 $add1555 = (($or1552) + ($xor1554))|0;
 $add1556 = (($add1555) + -899497514)|0;
 $arrayidx1557 = ((($x)) + 8|0);
 $934 = HEAP32[$arrayidx1557>>2]|0;
 $arrayidx1558 = ((($x)) + 16|0);
 $935 = HEAP32[$arrayidx1558>>2]|0;
 $xor1559 = $934 ^ $935;
 $arrayidx1560 = ((($x)) + 40|0);
 $936 = HEAP32[$arrayidx1560>>2]|0;
 $xor1561 = $xor1559 ^ $936;
 $arrayidx1562 = ((($x)) + 60|0);
 $937 = HEAP32[$arrayidx1562>>2]|0;
 $xor1563 = $xor1561 ^ $937;
 $tm = $xor1563;
 $938 = $tm;
 $shl1564 = $938 << 1;
 $939 = $tm;
 $shr1565 = $939 >>> 31;
 $or1566 = $shl1564 | $shr1565;
 $arrayidx1567 = ((($x)) + 8|0);
 HEAP32[$arrayidx1567>>2] = $or1566;
 $add1568 = (($add1556) + ($or1566))|0;
 $940 = $d;
 $add1569 = (($940) + ($add1568))|0;
 $d = $add1569;
 $941 = $a;
 $shl1570 = $941 << 30;
 $942 = $a;
 $shr1571 = $942 >>> 2;
 $or1572 = $shl1570 | $shr1571;
 $a = $or1572;
 $943 = $d;
 $shl1575 = $943 << 5;
 $944 = $d;
 $shr1576 = $944 >>> 27;
 $or1577 = $shl1575 | $shr1576;
 $945 = $e;
 $946 = $a;
 $xor1578 = $945 ^ $946;
 $947 = $b;
 $xor1579 = $xor1578 ^ $947;
 $add1580 = (($or1577) + ($xor1579))|0;
 $add1581 = (($add1580) + -899497514)|0;
 $arrayidx1582 = ((($x)) + 12|0);
 $948 = HEAP32[$arrayidx1582>>2]|0;
 $arrayidx1583 = ((($x)) + 20|0);
 $949 = HEAP32[$arrayidx1583>>2]|0;
 $xor1584 = $948 ^ $949;
 $arrayidx1585 = ((($x)) + 44|0);
 $950 = HEAP32[$arrayidx1585>>2]|0;
 $xor1586 = $xor1584 ^ $950;
 $951 = HEAP32[$x>>2]|0;
 $xor1588 = $xor1586 ^ $951;
 $tm = $xor1588;
 $952 = $tm;
 $shl1589 = $952 << 1;
 $953 = $tm;
 $shr1590 = $953 >>> 31;
 $or1591 = $shl1589 | $shr1590;
 $arrayidx1592 = ((($x)) + 12|0);
 HEAP32[$arrayidx1592>>2] = $or1591;
 $add1593 = (($add1581) + ($or1591))|0;
 $954 = $c;
 $add1594 = (($954) + ($add1593))|0;
 $c = $add1594;
 $955 = $e;
 $shl1595 = $955 << 30;
 $956 = $e;
 $shr1596 = $956 >>> 2;
 $or1597 = $shl1595 | $shr1596;
 $e = $or1597;
 $957 = $c;
 $shl1600 = $957 << 5;
 $958 = $c;
 $shr1601 = $958 >>> 27;
 $or1602 = $shl1600 | $shr1601;
 $959 = $d;
 $960 = $e;
 $xor1603 = $959 ^ $960;
 $961 = $a;
 $xor1604 = $xor1603 ^ $961;
 $add1605 = (($or1602) + ($xor1604))|0;
 $add1606 = (($add1605) + -899497514)|0;
 $arrayidx1607 = ((($x)) + 16|0);
 $962 = HEAP32[$arrayidx1607>>2]|0;
 $arrayidx1608 = ((($x)) + 24|0);
 $963 = HEAP32[$arrayidx1608>>2]|0;
 $xor1609 = $962 ^ $963;
 $arrayidx1610 = ((($x)) + 48|0);
 $964 = HEAP32[$arrayidx1610>>2]|0;
 $xor1611 = $xor1609 ^ $964;
 $arrayidx1612 = ((($x)) + 4|0);
 $965 = HEAP32[$arrayidx1612>>2]|0;
 $xor1613 = $xor1611 ^ $965;
 $tm = $xor1613;
 $966 = $tm;
 $shl1614 = $966 << 1;
 $967 = $tm;
 $shr1615 = $967 >>> 31;
 $or1616 = $shl1614 | $shr1615;
 $arrayidx1617 = ((($x)) + 16|0);
 HEAP32[$arrayidx1617>>2] = $or1616;
 $add1618 = (($add1606) + ($or1616))|0;
 $968 = $b;
 $add1619 = (($968) + ($add1618))|0;
 $b = $add1619;
 $969 = $d;
 $shl1620 = $969 << 30;
 $970 = $d;
 $shr1621 = $970 >>> 2;
 $or1622 = $shl1620 | $shr1621;
 $d = $or1622;
 $971 = $b;
 $shl1625 = $971 << 5;
 $972 = $b;
 $shr1626 = $972 >>> 27;
 $or1627 = $shl1625 | $shr1626;
 $973 = $c;
 $974 = $d;
 $xor1628 = $973 ^ $974;
 $975 = $e;
 $xor1629 = $xor1628 ^ $975;
 $add1630 = (($or1627) + ($xor1629))|0;
 $add1631 = (($add1630) + -899497514)|0;
 $arrayidx1632 = ((($x)) + 20|0);
 $976 = HEAP32[$arrayidx1632>>2]|0;
 $arrayidx1633 = ((($x)) + 28|0);
 $977 = HEAP32[$arrayidx1633>>2]|0;
 $xor1634 = $976 ^ $977;
 $arrayidx1635 = ((($x)) + 52|0);
 $978 = HEAP32[$arrayidx1635>>2]|0;
 $xor1636 = $xor1634 ^ $978;
 $arrayidx1637 = ((($x)) + 8|0);
 $979 = HEAP32[$arrayidx1637>>2]|0;
 $xor1638 = $xor1636 ^ $979;
 $tm = $xor1638;
 $980 = $tm;
 $shl1639 = $980 << 1;
 $981 = $tm;
 $shr1640 = $981 >>> 31;
 $or1641 = $shl1639 | $shr1640;
 $arrayidx1642 = ((($x)) + 20|0);
 HEAP32[$arrayidx1642>>2] = $or1641;
 $add1643 = (($add1631) + ($or1641))|0;
 $982 = $a;
 $add1644 = (($982) + ($add1643))|0;
 $a = $add1644;
 $983 = $c;
 $shl1645 = $983 << 30;
 $984 = $c;
 $shr1646 = $984 >>> 2;
 $or1647 = $shl1645 | $shr1646;
 $c = $or1647;
 $985 = $a;
 $shl1650 = $985 << 5;
 $986 = $a;
 $shr1651 = $986 >>> 27;
 $or1652 = $shl1650 | $shr1651;
 $987 = $b;
 $988 = $c;
 $xor1653 = $987 ^ $988;
 $989 = $d;
 $xor1654 = $xor1653 ^ $989;
 $add1655 = (($or1652) + ($xor1654))|0;
 $add1656 = (($add1655) + -899497514)|0;
 $arrayidx1657 = ((($x)) + 24|0);
 $990 = HEAP32[$arrayidx1657>>2]|0;
 $arrayidx1658 = ((($x)) + 32|0);
 $991 = HEAP32[$arrayidx1658>>2]|0;
 $xor1659 = $990 ^ $991;
 $arrayidx1660 = ((($x)) + 56|0);
 $992 = HEAP32[$arrayidx1660>>2]|0;
 $xor1661 = $xor1659 ^ $992;
 $arrayidx1662 = ((($x)) + 12|0);
 $993 = HEAP32[$arrayidx1662>>2]|0;
 $xor1663 = $xor1661 ^ $993;
 $tm = $xor1663;
 $994 = $tm;
 $shl1664 = $994 << 1;
 $995 = $tm;
 $shr1665 = $995 >>> 31;
 $or1666 = $shl1664 | $shr1665;
 $arrayidx1667 = ((($x)) + 24|0);
 HEAP32[$arrayidx1667>>2] = $or1666;
 $add1668 = (($add1656) + ($or1666))|0;
 $996 = $e;
 $add1669 = (($996) + ($add1668))|0;
 $e = $add1669;
 $997 = $b;
 $shl1670 = $997 << 30;
 $998 = $b;
 $shr1671 = $998 >>> 2;
 $or1672 = $shl1670 | $shr1671;
 $b = $or1672;
 $999 = $e;
 $shl1675 = $999 << 5;
 $1000 = $e;
 $shr1676 = $1000 >>> 27;
 $or1677 = $shl1675 | $shr1676;
 $1001 = $a;
 $1002 = $b;
 $xor1678 = $1001 ^ $1002;
 $1003 = $c;
 $xor1679 = $xor1678 ^ $1003;
 $add1680 = (($or1677) + ($xor1679))|0;
 $add1681 = (($add1680) + -899497514)|0;
 $arrayidx1682 = ((($x)) + 28|0);
 $1004 = HEAP32[$arrayidx1682>>2]|0;
 $arrayidx1683 = ((($x)) + 36|0);
 $1005 = HEAP32[$arrayidx1683>>2]|0;
 $xor1684 = $1004 ^ $1005;
 $arrayidx1685 = ((($x)) + 60|0);
 $1006 = HEAP32[$arrayidx1685>>2]|0;
 $xor1686 = $xor1684 ^ $1006;
 $arrayidx1687 = ((($x)) + 16|0);
 $1007 = HEAP32[$arrayidx1687>>2]|0;
 $xor1688 = $xor1686 ^ $1007;
 $tm = $xor1688;
 $1008 = $tm;
 $shl1689 = $1008 << 1;
 $1009 = $tm;
 $shr1690 = $1009 >>> 31;
 $or1691 = $shl1689 | $shr1690;
 $arrayidx1692 = ((($x)) + 28|0);
 HEAP32[$arrayidx1692>>2] = $or1691;
 $add1693 = (($add1681) + ($or1691))|0;
 $1010 = $d;
 $add1694 = (($1010) + ($add1693))|0;
 $d = $add1694;
 $1011 = $a;
 $shl1695 = $1011 << 30;
 $1012 = $a;
 $shr1696 = $1012 >>> 2;
 $or1697 = $shl1695 | $shr1696;
 $a = $or1697;
 $1013 = $d;
 $shl1700 = $1013 << 5;
 $1014 = $d;
 $shr1701 = $1014 >>> 27;
 $or1702 = $shl1700 | $shr1701;
 $1015 = $e;
 $1016 = $a;
 $xor1703 = $1015 ^ $1016;
 $1017 = $b;
 $xor1704 = $xor1703 ^ $1017;
 $add1705 = (($or1702) + ($xor1704))|0;
 $add1706 = (($add1705) + -899497514)|0;
 $arrayidx1707 = ((($x)) + 32|0);
 $1018 = HEAP32[$arrayidx1707>>2]|0;
 $arrayidx1708 = ((($x)) + 40|0);
 $1019 = HEAP32[$arrayidx1708>>2]|0;
 $xor1709 = $1018 ^ $1019;
 $1020 = HEAP32[$x>>2]|0;
 $xor1711 = $xor1709 ^ $1020;
 $arrayidx1712 = ((($x)) + 20|0);
 $1021 = HEAP32[$arrayidx1712>>2]|0;
 $xor1713 = $xor1711 ^ $1021;
 $tm = $xor1713;
 $1022 = $tm;
 $shl1714 = $1022 << 1;
 $1023 = $tm;
 $shr1715 = $1023 >>> 31;
 $or1716 = $shl1714 | $shr1715;
 $arrayidx1717 = ((($x)) + 32|0);
 HEAP32[$arrayidx1717>>2] = $or1716;
 $add1718 = (($add1706) + ($or1716))|0;
 $1024 = $c;
 $add1719 = (($1024) + ($add1718))|0;
 $c = $add1719;
 $1025 = $e;
 $shl1720 = $1025 << 30;
 $1026 = $e;
 $shr1721 = $1026 >>> 2;
 $or1722 = $shl1720 | $shr1721;
 $e = $or1722;
 $1027 = $c;
 $shl1725 = $1027 << 5;
 $1028 = $c;
 $shr1726 = $1028 >>> 27;
 $or1727 = $shl1725 | $shr1726;
 $1029 = $d;
 $1030 = $e;
 $xor1728 = $1029 ^ $1030;
 $1031 = $a;
 $xor1729 = $xor1728 ^ $1031;
 $add1730 = (($or1727) + ($xor1729))|0;
 $add1731 = (($add1730) + -899497514)|0;
 $arrayidx1732 = ((($x)) + 36|0);
 $1032 = HEAP32[$arrayidx1732>>2]|0;
 $arrayidx1733 = ((($x)) + 44|0);
 $1033 = HEAP32[$arrayidx1733>>2]|0;
 $xor1734 = $1032 ^ $1033;
 $arrayidx1735 = ((($x)) + 4|0);
 $1034 = HEAP32[$arrayidx1735>>2]|0;
 $xor1736 = $xor1734 ^ $1034;
 $arrayidx1737 = ((($x)) + 24|0);
 $1035 = HEAP32[$arrayidx1737>>2]|0;
 $xor1738 = $xor1736 ^ $1035;
 $tm = $xor1738;
 $1036 = $tm;
 $shl1739 = $1036 << 1;
 $1037 = $tm;
 $shr1740 = $1037 >>> 31;
 $or1741 = $shl1739 | $shr1740;
 $arrayidx1742 = ((($x)) + 36|0);
 HEAP32[$arrayidx1742>>2] = $or1741;
 $add1743 = (($add1731) + ($or1741))|0;
 $1038 = $b;
 $add1744 = (($1038) + ($add1743))|0;
 $b = $add1744;
 $1039 = $d;
 $shl1745 = $1039 << 30;
 $1040 = $d;
 $shr1746 = $1040 >>> 2;
 $or1747 = $shl1745 | $shr1746;
 $d = $or1747;
 $1041 = $b;
 $shl1750 = $1041 << 5;
 $1042 = $b;
 $shr1751 = $1042 >>> 27;
 $or1752 = $shl1750 | $shr1751;
 $1043 = $c;
 $1044 = $d;
 $xor1753 = $1043 ^ $1044;
 $1045 = $e;
 $xor1754 = $xor1753 ^ $1045;
 $add1755 = (($or1752) + ($xor1754))|0;
 $add1756 = (($add1755) + -899497514)|0;
 $arrayidx1757 = ((($x)) + 40|0);
 $1046 = HEAP32[$arrayidx1757>>2]|0;
 $arrayidx1758 = ((($x)) + 48|0);
 $1047 = HEAP32[$arrayidx1758>>2]|0;
 $xor1759 = $1046 ^ $1047;
 $arrayidx1760 = ((($x)) + 8|0);
 $1048 = HEAP32[$arrayidx1760>>2]|0;
 $xor1761 = $xor1759 ^ $1048;
 $arrayidx1762 = ((($x)) + 28|0);
 $1049 = HEAP32[$arrayidx1762>>2]|0;
 $xor1763 = $xor1761 ^ $1049;
 $tm = $xor1763;
 $1050 = $tm;
 $shl1764 = $1050 << 1;
 $1051 = $tm;
 $shr1765 = $1051 >>> 31;
 $or1766 = $shl1764 | $shr1765;
 $arrayidx1767 = ((($x)) + 40|0);
 HEAP32[$arrayidx1767>>2] = $or1766;
 $add1768 = (($add1756) + ($or1766))|0;
 $1052 = $a;
 $add1769 = (($1052) + ($add1768))|0;
 $a = $add1769;
 $1053 = $c;
 $shl1770 = $1053 << 30;
 $1054 = $c;
 $shr1771 = $1054 >>> 2;
 $or1772 = $shl1770 | $shr1771;
 $c = $or1772;
 $1055 = $a;
 $shl1775 = $1055 << 5;
 $1056 = $a;
 $shr1776 = $1056 >>> 27;
 $or1777 = $shl1775 | $shr1776;
 $1057 = $b;
 $1058 = $c;
 $xor1778 = $1057 ^ $1058;
 $1059 = $d;
 $xor1779 = $xor1778 ^ $1059;
 $add1780 = (($or1777) + ($xor1779))|0;
 $add1781 = (($add1780) + -899497514)|0;
 $arrayidx1782 = ((($x)) + 44|0);
 $1060 = HEAP32[$arrayidx1782>>2]|0;
 $arrayidx1783 = ((($x)) + 52|0);
 $1061 = HEAP32[$arrayidx1783>>2]|0;
 $xor1784 = $1060 ^ $1061;
 $arrayidx1785 = ((($x)) + 12|0);
 $1062 = HEAP32[$arrayidx1785>>2]|0;
 $xor1786 = $xor1784 ^ $1062;
 $arrayidx1787 = ((($x)) + 32|0);
 $1063 = HEAP32[$arrayidx1787>>2]|0;
 $xor1788 = $xor1786 ^ $1063;
 $tm = $xor1788;
 $1064 = $tm;
 $shl1789 = $1064 << 1;
 $1065 = $tm;
 $shr1790 = $1065 >>> 31;
 $or1791 = $shl1789 | $shr1790;
 $arrayidx1792 = ((($x)) + 44|0);
 HEAP32[$arrayidx1792>>2] = $or1791;
 $add1793 = (($add1781) + ($or1791))|0;
 $1066 = $e;
 $add1794 = (($1066) + ($add1793))|0;
 $e = $add1794;
 $1067 = $b;
 $shl1795 = $1067 << 30;
 $1068 = $b;
 $shr1796 = $1068 >>> 2;
 $or1797 = $shl1795 | $shr1796;
 $b = $or1797;
 $1069 = $e;
 $shl1800 = $1069 << 5;
 $1070 = $e;
 $shr1801 = $1070 >>> 27;
 $or1802 = $shl1800 | $shr1801;
 $1071 = $a;
 $1072 = $b;
 $xor1803 = $1071 ^ $1072;
 $1073 = $c;
 $xor1804 = $xor1803 ^ $1073;
 $add1805 = (($or1802) + ($xor1804))|0;
 $add1806 = (($add1805) + -899497514)|0;
 $arrayidx1807 = ((($x)) + 48|0);
 $1074 = HEAP32[$arrayidx1807>>2]|0;
 $arrayidx1808 = ((($x)) + 56|0);
 $1075 = HEAP32[$arrayidx1808>>2]|0;
 $xor1809 = $1074 ^ $1075;
 $arrayidx1810 = ((($x)) + 16|0);
 $1076 = HEAP32[$arrayidx1810>>2]|0;
 $xor1811 = $xor1809 ^ $1076;
 $arrayidx1812 = ((($x)) + 36|0);
 $1077 = HEAP32[$arrayidx1812>>2]|0;
 $xor1813 = $xor1811 ^ $1077;
 $tm = $xor1813;
 $1078 = $tm;
 $shl1814 = $1078 << 1;
 $1079 = $tm;
 $shr1815 = $1079 >>> 31;
 $or1816 = $shl1814 | $shr1815;
 $arrayidx1817 = ((($x)) + 48|0);
 HEAP32[$arrayidx1817>>2] = $or1816;
 $add1818 = (($add1806) + ($or1816))|0;
 $1080 = $d;
 $add1819 = (($1080) + ($add1818))|0;
 $d = $add1819;
 $1081 = $a;
 $shl1820 = $1081 << 30;
 $1082 = $a;
 $shr1821 = $1082 >>> 2;
 $or1822 = $shl1820 | $shr1821;
 $a = $or1822;
 $1083 = $d;
 $shl1825 = $1083 << 5;
 $1084 = $d;
 $shr1826 = $1084 >>> 27;
 $or1827 = $shl1825 | $shr1826;
 $1085 = $e;
 $1086 = $a;
 $xor1828 = $1085 ^ $1086;
 $1087 = $b;
 $xor1829 = $xor1828 ^ $1087;
 $add1830 = (($or1827) + ($xor1829))|0;
 $add1831 = (($add1830) + -899497514)|0;
 $arrayidx1832 = ((($x)) + 52|0);
 $1088 = HEAP32[$arrayidx1832>>2]|0;
 $arrayidx1833 = ((($x)) + 60|0);
 $1089 = HEAP32[$arrayidx1833>>2]|0;
 $xor1834 = $1088 ^ $1089;
 $arrayidx1835 = ((($x)) + 20|0);
 $1090 = HEAP32[$arrayidx1835>>2]|0;
 $xor1836 = $xor1834 ^ $1090;
 $arrayidx1837 = ((($x)) + 40|0);
 $1091 = HEAP32[$arrayidx1837>>2]|0;
 $xor1838 = $xor1836 ^ $1091;
 $tm = $xor1838;
 $1092 = $tm;
 $shl1839 = $1092 << 1;
 $1093 = $tm;
 $shr1840 = $1093 >>> 31;
 $or1841 = $shl1839 | $shr1840;
 $arrayidx1842 = ((($x)) + 52|0);
 HEAP32[$arrayidx1842>>2] = $or1841;
 $add1843 = (($add1831) + ($or1841))|0;
 $1094 = $c;
 $add1844 = (($1094) + ($add1843))|0;
 $c = $add1844;
 $1095 = $e;
 $shl1845 = $1095 << 30;
 $1096 = $e;
 $shr1846 = $1096 >>> 2;
 $or1847 = $shl1845 | $shr1846;
 $e = $or1847;
 $1097 = $c;
 $shl1850 = $1097 << 5;
 $1098 = $c;
 $shr1851 = $1098 >>> 27;
 $or1852 = $shl1850 | $shr1851;
 $1099 = $d;
 $1100 = $e;
 $xor1853 = $1099 ^ $1100;
 $1101 = $a;
 $xor1854 = $xor1853 ^ $1101;
 $add1855 = (($or1852) + ($xor1854))|0;
 $add1856 = (($add1855) + -899497514)|0;
 $arrayidx1857 = ((($x)) + 56|0);
 $1102 = HEAP32[$arrayidx1857>>2]|0;
 $1103 = HEAP32[$x>>2]|0;
 $xor1859 = $1102 ^ $1103;
 $arrayidx1860 = ((($x)) + 24|0);
 $1104 = HEAP32[$arrayidx1860>>2]|0;
 $xor1861 = $xor1859 ^ $1104;
 $arrayidx1862 = ((($x)) + 44|0);
 $1105 = HEAP32[$arrayidx1862>>2]|0;
 $xor1863 = $xor1861 ^ $1105;
 $tm = $xor1863;
 $1106 = $tm;
 $shl1864 = $1106 << 1;
 $1107 = $tm;
 $shr1865 = $1107 >>> 31;
 $or1866 = $shl1864 | $shr1865;
 $arrayidx1867 = ((($x)) + 56|0);
 HEAP32[$arrayidx1867>>2] = $or1866;
 $add1868 = (($add1856) + ($or1866))|0;
 $1108 = $b;
 $add1869 = (($1108) + ($add1868))|0;
 $b = $add1869;
 $1109 = $d;
 $shl1870 = $1109 << 30;
 $1110 = $d;
 $shr1871 = $1110 >>> 2;
 $or1872 = $shl1870 | $shr1871;
 $d = $or1872;
 $1111 = $b;
 $shl1875 = $1111 << 5;
 $1112 = $b;
 $shr1876 = $1112 >>> 27;
 $or1877 = $shl1875 | $shr1876;
 $1113 = $c;
 $1114 = $d;
 $xor1878 = $1113 ^ $1114;
 $1115 = $e;
 $xor1879 = $xor1878 ^ $1115;
 $add1880 = (($or1877) + ($xor1879))|0;
 $add1881 = (($add1880) + -899497514)|0;
 $arrayidx1882 = ((($x)) + 60|0);
 $1116 = HEAP32[$arrayidx1882>>2]|0;
 $arrayidx1883 = ((($x)) + 4|0);
 $1117 = HEAP32[$arrayidx1883>>2]|0;
 $xor1884 = $1116 ^ $1117;
 $arrayidx1885 = ((($x)) + 28|0);
 $1118 = HEAP32[$arrayidx1885>>2]|0;
 $xor1886 = $xor1884 ^ $1118;
 $arrayidx1887 = ((($x)) + 48|0);
 $1119 = HEAP32[$arrayidx1887>>2]|0;
 $xor1888 = $xor1886 ^ $1119;
 $tm = $xor1888;
 $1120 = $tm;
 $shl1889 = $1120 << 1;
 $1121 = $tm;
 $shr1890 = $1121 >>> 31;
 $or1891 = $shl1889 | $shr1890;
 $arrayidx1892 = ((($x)) + 60|0);
 HEAP32[$arrayidx1892>>2] = $or1891;
 $add1893 = (($add1881) + ($or1891))|0;
 $1122 = $a;
 $add1894 = (($1122) + ($add1893))|0;
 $a = $add1894;
 $1123 = $c;
 $shl1895 = $1123 << 30;
 $1124 = $c;
 $shr1896 = $1124 >>> 2;
 $or1897 = $shl1895 | $shr1896;
 $c = $or1897;
 $1125 = $a;
 $1126 = $hd$addr;
 $1127 = HEAP32[$1126>>2]|0;
 $add1900 = (($1127) + ($1125))|0;
 HEAP32[$1126>>2] = $add1900;
 $1128 = $b;
 $1129 = $hd$addr;
 $h11901 = ((($1129)) + 4|0);
 $1130 = HEAP32[$h11901>>2]|0;
 $add1902 = (($1130) + ($1128))|0;
 HEAP32[$h11901>>2] = $add1902;
 $1131 = $c;
 $1132 = $hd$addr;
 $h21903 = ((($1132)) + 8|0);
 $1133 = HEAP32[$h21903>>2]|0;
 $add1904 = (($1133) + ($1131))|0;
 HEAP32[$h21903>>2] = $add1904;
 $1134 = $d;
 $1135 = $hd$addr;
 $h31905 = ((($1135)) + 12|0);
 $1136 = HEAP32[$h31905>>2]|0;
 $add1906 = (($1136) + ($1134))|0;
 HEAP32[$h31905>>2] = $add1906;
 $1137 = $e;
 $1138 = $hd$addr;
 $h41907 = ((($1138)) + 16|0);
 $1139 = HEAP32[$h41907>>2]|0;
 $add1908 = (($1139) + ($1137))|0;
 HEAP32[$h41907>>2] = $add1908;
 STACKTOP = sp;return;
}
function _SHA1_Final($digest,$hd) {
 $digest = $digest|0;
 $hd = $hd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx26 = 0, $arrayidx32 = 0, $arrayidx36 = 0, $arrayidx40 = 0;
 var $arrayidx43 = 0, $arrayidx47 = 0, $arrayidx51 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $buf = 0, $buf11 = 0, $buf140 = 0, $buf23 = 0, $buf28 = 0, $buf31 = 0, $buf35 = 0, $buf39 = 0, $buf42 = 0, $buf46 = 0, $buf50 = 0, $buf54 = 0, $buf57 = 0, $buf59 = 0, $buf61 = 0;
 var $cmp = 0, $cmp10 = 0, $cmp21 = 0, $cmp5 = 0, $conv = 0, $conv102 = 0, $conv105 = 0, $conv110 = 0, $conv114 = 0, $conv118 = 0, $conv121 = 0, $conv126 = 0, $conv130 = 0, $conv134 = 0, $conv137 = 0, $conv34 = 0, $conv38 = 0, $conv41 = 0, $conv45 = 0, $conv49 = 0;
 var $conv53 = 0, $conv56 = 0, $conv64 = 0, $conv67 = 0, $conv71 = 0, $conv74 = 0, $conv78 = 0, $conv82 = 0, $conv86 = 0, $conv89 = 0, $conv94 = 0, $conv98 = 0, $count = 0, $count12 = 0, $count20 = 0, $count24 = 0, $count4 = 0, $count7 = 0, $count9 = 0, $digest$addr = 0;
 var $h1 = 0, $h180 = 0, $h184 = 0, $h188 = 0, $h2 = 0, $h2100 = 0, $h2104 = 0, $h296 = 0, $h3 = 0, $h3112 = 0, $h3116 = 0, $h3120 = 0, $h4 = 0, $h4128 = 0, $h4132 = 0, $h4136 = 0, $hd$addr = 0, $inc = 0, $inc13 = 0, $inc25 = 0;
 var $inc8 = 0, $incdec$ptr = 0, $incdec$ptr103 = 0, $incdec$ptr106 = 0, $incdec$ptr111 = 0, $incdec$ptr115 = 0, $incdec$ptr119 = 0, $incdec$ptr122 = 0, $incdec$ptr127 = 0, $incdec$ptr131 = 0, $incdec$ptr135 = 0, $incdec$ptr138 = 0, $incdec$ptr68 = 0, $incdec$ptr72 = 0, $incdec$ptr75 = 0, $incdec$ptr79 = 0, $incdec$ptr83 = 0, $incdec$ptr87 = 0, $incdec$ptr90 = 0, $incdec$ptr95 = 0;
 var $incdec$ptr99 = 0, $lsb = 0, $msb = 0, $nblocks = 0, $or = 0, $p = 0, $shl = 0, $shl1 = 0, $shl2 = 0, $shr = 0, $shr101 = 0, $shr109 = 0, $shr113 = 0, $shr117 = 0, $shr125 = 0, $shr129 = 0, $shr133 = 0, $shr3 = 0, $shr30 = 0, $shr33 = 0;
 var $shr37 = 0, $shr44 = 0, $shr48 = 0, $shr52 = 0, $shr63 = 0, $shr66 = 0, $shr70 = 0, $shr77 = 0, $shr81 = 0, $shr85 = 0, $shr93 = 0, $shr97 = 0, $t = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $digest$addr = $digest;
 $hd$addr = $hd;
 $0 = $hd$addr;
 _SHA1_Update($0,0,0);
 $1 = $hd$addr;
 $nblocks = ((($1)) + 20|0);
 $2 = HEAP32[$nblocks>>2]|0;
 $t = $2;
 $3 = $t;
 $shl = $3 << 6;
 $lsb = $shl;
 $4 = $t;
 $shr = $4 >>> 26;
 $msb = $shr;
 $5 = $lsb;
 $t = $5;
 $6 = $hd$addr;
 $count = ((($6)) + 88|0);
 $7 = HEAP32[$count>>2]|0;
 $8 = $lsb;
 $add = (($8) + ($7))|0;
 $lsb = $add;
 $9 = $t;
 $cmp = ($add>>>0)<($9>>>0);
 if ($cmp) {
  $10 = $msb;
  $inc = (($10) + 1)|0;
  $msb = $inc;
 }
 $11 = $lsb;
 $t = $11;
 $12 = $lsb;
 $shl1 = $12 << 3;
 $lsb = $shl1;
 $13 = $msb;
 $shl2 = $13 << 3;
 $msb = $shl2;
 $14 = $t;
 $shr3 = $14 >>> 29;
 $15 = $msb;
 $or = $15 | $shr3;
 $msb = $or;
 $16 = $hd$addr;
 $count4 = ((($16)) + 88|0);
 $17 = HEAP32[$count4>>2]|0;
 $cmp5 = ($17|0)<(56);
 $18 = $hd$addr;
 $buf = ((($18)) + 24|0);
 $19 = $hd$addr;
 $count7 = ((($19)) + 88|0);
 $20 = HEAP32[$count7>>2]|0;
 $inc8 = (($20) + 1)|0;
 HEAP32[$count7>>2] = $inc8;
 $arrayidx = (($buf) + ($20)|0);
 HEAP8[$arrayidx>>0] = -128;
 L4: do {
  if ($cmp5) {
   while(1) {
    $21 = $hd$addr;
    $count9 = ((($21)) + 88|0);
    $22 = HEAP32[$count9>>2]|0;
    $cmp10 = ($22|0)<(56);
    if (!($cmp10)) {
     break L4;
    }
    $23 = $hd$addr;
    $buf11 = ((($23)) + 24|0);
    $24 = $hd$addr;
    $count12 = ((($24)) + 88|0);
    $25 = HEAP32[$count12>>2]|0;
    $inc13 = (($25) + 1)|0;
    HEAP32[$count12>>2] = $inc13;
    $arrayidx14 = (($buf11) + ($25)|0);
    HEAP8[$arrayidx14>>0] = 0;
   }
  } else {
   while(1) {
    $26 = $hd$addr;
    $count20 = ((($26)) + 88|0);
    $27 = HEAP32[$count20>>2]|0;
    $cmp21 = ($27|0)<(64);
    $28 = $hd$addr;
    if (!($cmp21)) {
     break;
    }
    $buf23 = ((($28)) + 24|0);
    $29 = $hd$addr;
    $count24 = ((($29)) + 88|0);
    $30 = HEAP32[$count24>>2]|0;
    $inc25 = (($30) + 1)|0;
    HEAP32[$count24>>2] = $inc25;
    $arrayidx26 = (($buf23) + ($30)|0);
    HEAP8[$arrayidx26>>0] = 0;
   }
   _SHA1_Update($28,0,0);
   $31 = $hd$addr;
   $buf28 = ((($31)) + 24|0);
   dest=$buf28; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  }
 } while(0);
 $32 = $msb;
 $shr30 = $32 >>> 24;
 $conv = $shr30&255;
 $33 = $hd$addr;
 $buf31 = ((($33)) + 24|0);
 $arrayidx32 = ((($buf31)) + 56|0);
 HEAP8[$arrayidx32>>0] = $conv;
 $34 = $msb;
 $shr33 = $34 >>> 16;
 $conv34 = $shr33&255;
 $35 = $hd$addr;
 $buf35 = ((($35)) + 24|0);
 $arrayidx36 = ((($buf35)) + 57|0);
 HEAP8[$arrayidx36>>0] = $conv34;
 $36 = $msb;
 $shr37 = $36 >>> 8;
 $conv38 = $shr37&255;
 $37 = $hd$addr;
 $buf39 = ((($37)) + 24|0);
 $arrayidx40 = ((($buf39)) + 58|0);
 HEAP8[$arrayidx40>>0] = $conv38;
 $38 = $msb;
 $conv41 = $38&255;
 $39 = $hd$addr;
 $buf42 = ((($39)) + 24|0);
 $arrayidx43 = ((($buf42)) + 59|0);
 HEAP8[$arrayidx43>>0] = $conv41;
 $40 = $lsb;
 $shr44 = $40 >>> 24;
 $conv45 = $shr44&255;
 $41 = $hd$addr;
 $buf46 = ((($41)) + 24|0);
 $arrayidx47 = ((($buf46)) + 60|0);
 HEAP8[$arrayidx47>>0] = $conv45;
 $42 = $lsb;
 $shr48 = $42 >>> 16;
 $conv49 = $shr48&255;
 $43 = $hd$addr;
 $buf50 = ((($43)) + 24|0);
 $arrayidx51 = ((($buf50)) + 61|0);
 HEAP8[$arrayidx51>>0] = $conv49;
 $44 = $lsb;
 $shr52 = $44 >>> 8;
 $conv53 = $shr52&255;
 $45 = $hd$addr;
 $buf54 = ((($45)) + 24|0);
 $arrayidx55 = ((($buf54)) + 62|0);
 HEAP8[$arrayidx55>>0] = $conv53;
 $46 = $lsb;
 $conv56 = $46&255;
 $47 = $hd$addr;
 $buf57 = ((($47)) + 24|0);
 $arrayidx58 = ((($buf57)) + 63|0);
 HEAP8[$arrayidx58>>0] = $conv56;
 $48 = $hd$addr;
 $49 = $hd$addr;
 $buf59 = ((($49)) + 24|0);
 _Transform($48,$buf59);
 $50 = $hd$addr;
 $buf61 = ((($50)) + 24|0);
 $p = $buf61;
 $51 = $hd$addr;
 $52 = HEAP32[$51>>2]|0;
 $shr63 = $52 >>> 24;
 $conv64 = $shr63&255;
 $53 = $p;
 $incdec$ptr = ((($53)) + 1|0);
 $p = $incdec$ptr;
 HEAP8[$53>>0] = $conv64;
 $54 = $hd$addr;
 $55 = HEAP32[$54>>2]|0;
 $shr66 = $55 >>> 16;
 $conv67 = $shr66&255;
 $56 = $p;
 $incdec$ptr68 = ((($56)) + 1|0);
 $p = $incdec$ptr68;
 HEAP8[$56>>0] = $conv67;
 $57 = $hd$addr;
 $58 = HEAP32[$57>>2]|0;
 $shr70 = $58 >>> 8;
 $conv71 = $shr70&255;
 $59 = $p;
 $incdec$ptr72 = ((($59)) + 1|0);
 $p = $incdec$ptr72;
 HEAP8[$59>>0] = $conv71;
 $60 = $hd$addr;
 $61 = HEAP32[$60>>2]|0;
 $conv74 = $61&255;
 $62 = $p;
 $incdec$ptr75 = ((($62)) + 1|0);
 $p = $incdec$ptr75;
 HEAP8[$62>>0] = $conv74;
 $63 = $hd$addr;
 $h1 = ((($63)) + 4|0);
 $64 = HEAP32[$h1>>2]|0;
 $shr77 = $64 >>> 24;
 $conv78 = $shr77&255;
 $65 = $p;
 $incdec$ptr79 = ((($65)) + 1|0);
 $p = $incdec$ptr79;
 HEAP8[$65>>0] = $conv78;
 $66 = $hd$addr;
 $h180 = ((($66)) + 4|0);
 $67 = HEAP32[$h180>>2]|0;
 $shr81 = $67 >>> 16;
 $conv82 = $shr81&255;
 $68 = $p;
 $incdec$ptr83 = ((($68)) + 1|0);
 $p = $incdec$ptr83;
 HEAP8[$68>>0] = $conv82;
 $69 = $hd$addr;
 $h184 = ((($69)) + 4|0);
 $70 = HEAP32[$h184>>2]|0;
 $shr85 = $70 >>> 8;
 $conv86 = $shr85&255;
 $71 = $p;
 $incdec$ptr87 = ((($71)) + 1|0);
 $p = $incdec$ptr87;
 HEAP8[$71>>0] = $conv86;
 $72 = $hd$addr;
 $h188 = ((($72)) + 4|0);
 $73 = HEAP32[$h188>>2]|0;
 $conv89 = $73&255;
 $74 = $p;
 $incdec$ptr90 = ((($74)) + 1|0);
 $p = $incdec$ptr90;
 HEAP8[$74>>0] = $conv89;
 $75 = $hd$addr;
 $h2 = ((($75)) + 8|0);
 $76 = HEAP32[$h2>>2]|0;
 $shr93 = $76 >>> 24;
 $conv94 = $shr93&255;
 $77 = $p;
 $incdec$ptr95 = ((($77)) + 1|0);
 $p = $incdec$ptr95;
 HEAP8[$77>>0] = $conv94;
 $78 = $hd$addr;
 $h296 = ((($78)) + 8|0);
 $79 = HEAP32[$h296>>2]|0;
 $shr97 = $79 >>> 16;
 $conv98 = $shr97&255;
 $80 = $p;
 $incdec$ptr99 = ((($80)) + 1|0);
 $p = $incdec$ptr99;
 HEAP8[$80>>0] = $conv98;
 $81 = $hd$addr;
 $h2100 = ((($81)) + 8|0);
 $82 = HEAP32[$h2100>>2]|0;
 $shr101 = $82 >>> 8;
 $conv102 = $shr101&255;
 $83 = $p;
 $incdec$ptr103 = ((($83)) + 1|0);
 $p = $incdec$ptr103;
 HEAP8[$83>>0] = $conv102;
 $84 = $hd$addr;
 $h2104 = ((($84)) + 8|0);
 $85 = HEAP32[$h2104>>2]|0;
 $conv105 = $85&255;
 $86 = $p;
 $incdec$ptr106 = ((($86)) + 1|0);
 $p = $incdec$ptr106;
 HEAP8[$86>>0] = $conv105;
 $87 = $hd$addr;
 $h3 = ((($87)) + 12|0);
 $88 = HEAP32[$h3>>2]|0;
 $shr109 = $88 >>> 24;
 $conv110 = $shr109&255;
 $89 = $p;
 $incdec$ptr111 = ((($89)) + 1|0);
 $p = $incdec$ptr111;
 HEAP8[$89>>0] = $conv110;
 $90 = $hd$addr;
 $h3112 = ((($90)) + 12|0);
 $91 = HEAP32[$h3112>>2]|0;
 $shr113 = $91 >>> 16;
 $conv114 = $shr113&255;
 $92 = $p;
 $incdec$ptr115 = ((($92)) + 1|0);
 $p = $incdec$ptr115;
 HEAP8[$92>>0] = $conv114;
 $93 = $hd$addr;
 $h3116 = ((($93)) + 12|0);
 $94 = HEAP32[$h3116>>2]|0;
 $shr117 = $94 >>> 8;
 $conv118 = $shr117&255;
 $95 = $p;
 $incdec$ptr119 = ((($95)) + 1|0);
 $p = $incdec$ptr119;
 HEAP8[$95>>0] = $conv118;
 $96 = $hd$addr;
 $h3120 = ((($96)) + 12|0);
 $97 = HEAP32[$h3120>>2]|0;
 $conv121 = $97&255;
 $98 = $p;
 $incdec$ptr122 = ((($98)) + 1|0);
 $p = $incdec$ptr122;
 HEAP8[$98>>0] = $conv121;
 $99 = $hd$addr;
 $h4 = ((($99)) + 16|0);
 $100 = HEAP32[$h4>>2]|0;
 $shr125 = $100 >>> 24;
 $conv126 = $shr125&255;
 $101 = $p;
 $incdec$ptr127 = ((($101)) + 1|0);
 $p = $incdec$ptr127;
 HEAP8[$101>>0] = $conv126;
 $102 = $hd$addr;
 $h4128 = ((($102)) + 16|0);
 $103 = HEAP32[$h4128>>2]|0;
 $shr129 = $103 >>> 16;
 $conv130 = $shr129&255;
 $104 = $p;
 $incdec$ptr131 = ((($104)) + 1|0);
 $p = $incdec$ptr131;
 HEAP8[$104>>0] = $conv130;
 $105 = $hd$addr;
 $h4132 = ((($105)) + 16|0);
 $106 = HEAP32[$h4132>>2]|0;
 $shr133 = $106 >>> 8;
 $conv134 = $shr133&255;
 $107 = $p;
 $incdec$ptr135 = ((($107)) + 1|0);
 $p = $incdec$ptr135;
 HEAP8[$107>>0] = $conv134;
 $108 = $hd$addr;
 $h4136 = ((($108)) + 16|0);
 $109 = HEAP32[$h4136>>2]|0;
 $conv137 = $109&255;
 $110 = $p;
 $incdec$ptr138 = ((($110)) + 1|0);
 $p = $incdec$ptr138;
 HEAP8[$110>>0] = $conv137;
 $111 = $digest$addr;
 $112 = $hd$addr;
 $buf140 = ((($112)) + 24|0);
 dest=$111; src=$buf140; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _SHA1_UpdateInt32($context,$val) {
 $context = $context|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $and2 = 0, $and6 = 0, $and9 = 0, $arrayidx11 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $buf = 0, $context$addr = 0, $conv = 0, $conv10 = 0, $conv3 = 0, $conv7 = 0, $shr = 0, $shr1 = 0;
 var $shr5 = 0, $val$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf = sp + 8|0;
 $context$addr = $context;
 $val$addr = $val;
 $0 = $val$addr;
 $shr = $0 >>> 24;
 $and = $shr & 255;
 $conv = $and&255;
 HEAP8[$buf>>0] = $conv;
 $1 = $val$addr;
 $shr1 = $1 >>> 16;
 $and2 = $shr1 & 255;
 $conv3 = $and2&255;
 $arrayidx4 = ((($buf)) + 1|0);
 HEAP8[$arrayidx4>>0] = $conv3;
 $2 = $val$addr;
 $shr5 = $2 >>> 8;
 $and6 = $shr5 & 255;
 $conv7 = $and6&255;
 $arrayidx8 = ((($buf)) + 2|0);
 HEAP8[$arrayidx8>>0] = $conv7;
 $3 = $val$addr;
 $and9 = $3 & 255;
 $conv10 = $and9&255;
 $arrayidx11 = ((($buf)) + 3|0);
 HEAP8[$arrayidx11>>0] = $conv10;
 $4 = $context$addr;
 _SHA1_Update($4,$buf,4);
 STACKTOP = sp;return;
}
function _SHA1_UpdateString($context,$str) {
 $context = $context|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $call = 0, $context$addr = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $context$addr = $context;
 $str$addr = $str;
 $0 = $context$addr;
 $1 = $str$addr;
 $2 = $str$addr;
 $call = (_strlen($2)|0);
 $add = (($call) + 1)|0;
 _SHA1_Update($0,$1,$add);
 STACKTOP = sp;return;
}
function _StatCopy($stats) {
 $stats = $stats|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $inc = 0, $or$cond = 0, $stats$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $stats$addr = $stats;
 $call = (_M_ParmExists(157181)|0);
 $tobool = ($call|0)!=(0);
 $0 = HEAP32[100076]|0;
 $cmp = ($0|0)<(32);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[100076]|0;
 $arrayidx = (387568 + (($1*200)|0)|0);
 $2 = $stats$addr;
 _memcpy(($arrayidx|0),($2|0),200)|0;
 $3 = HEAP32[100076]|0;
 $inc = (($3) + 1)|0;
 HEAP32[100076] = $inc;
 STACKTOP = sp;return;
}
function _StatDump() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _STlib_init() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_CacheLumpName(157191,1)|0);
 HEAP32[100077] = $call;
 return;
}
function _STlib_initNum($n,$x,$y,$pl,$num,$on,$width) {
 $n = $n|0;
 $x = $x|0;
 $y = $y|0;
 $pl = $pl|0;
 $num = $num|0;
 $on = $on|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$addr = 0, $num$addr = 0, $num4 = 0, $oldnum = 0, $on$addr = 0, $on5 = 0, $p = 0;
 var $pl$addr = 0, $width$addr = 0, $width3 = 0, $x$addr = 0, $y$addr = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $n$addr = $n;
 $x$addr = $x;
 $y$addr = $y;
 $pl$addr = $pl;
 $num$addr = $num;
 $on$addr = $on;
 $width$addr = $width;
 $0 = $x$addr;
 $1 = $n$addr;
 HEAP32[$1>>2] = $0;
 $2 = $y$addr;
 $3 = $n$addr;
 $y2 = ((($3)) + 4|0);
 HEAP32[$y2>>2] = $2;
 $4 = $n$addr;
 $oldnum = ((($4)) + 12|0);
 HEAP32[$oldnum>>2] = 0;
 $5 = $width$addr;
 $6 = $n$addr;
 $width3 = ((($6)) + 8|0);
 HEAP32[$width3>>2] = $5;
 $7 = $num$addr;
 $8 = $n$addr;
 $num4 = ((($8)) + 16|0);
 HEAP32[$num4>>2] = $7;
 $9 = $on$addr;
 $10 = $n$addr;
 $on5 = ((($10)) + 20|0);
 HEAP32[$on5>>2] = $9;
 $11 = $pl$addr;
 $12 = $n$addr;
 $p = ((($12)) + 24|0);
 HEAP32[$p>>2] = $11;
 STACKTOP = sp;return;
}
function _STlib_drawNum($n,$refresh) {
 $n = $n|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx50 = 0, $cmp = 0, $cmp11 = 0, $cmp14 = 0, $cmp17 = 0, $cmp25 = 0, $cmp33 = 0, $cmp9 = 0, $conv = 0, $conv5 = 0;
 var $conv8 = 0, $dec = 0, $div = 0, $h = 0, $height = 0, $mul = 0, $mul31 = 0, $n$addr = 0, $neg = 0, $num = 0, $num1 = 0, $num7 = 0, $numdigits = 0, $oldnum = 0, $or$cond = 0, $or$cond1 = 0, $p = 0, $p3 = 0, $p42 = 0, $p49 = 0;
 var $refresh$addr = 0, $rem = 0, $sub = 0, $sub23 = 0, $sub24 = 0, $sub30 = 0, $sub40 = 0, $sub47 = 0, $sub53 = 0, $tobool = 0, $tobool38 = 0, $tobool45 = 0, $tobool46 = 0, $tobool51 = 0, $vararg_buffer = 0, $w = 0, $width = 0, $x = 0, $y = 0, $y29 = 0;
 var $y32 = 0, $y41 = 0, $y48 = 0, $y54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $n$addr = $n;
 $refresh$addr = $refresh;
 $0 = $n$addr;
 $width = ((($0)) + 8|0);
 $1 = HEAP32[$width>>2]|0;
 $numdigits = $1;
 $2 = $n$addr;
 $num1 = ((($2)) + 16|0);
 $3 = HEAP32[$num1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $num = $4;
 $5 = $n$addr;
 $p = ((($5)) + 24|0);
 $6 = HEAP32[$p>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
 $conv = $8 << 16 >> 16;
 $w = $conv;
 $9 = $n$addr;
 $p3 = ((($9)) + 24|0);
 $10 = HEAP32[$p3>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $height = ((($11)) + 2|0);
 $12 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv5 = $12 << 16 >> 16;
 $h = $conv5;
 $13 = $n$addr;
 $14 = HEAP32[$13>>2]|0;
 $x = $14;
 $15 = $n$addr;
 $num7 = ((($15)) + 16|0);
 $16 = HEAP32[$num7>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $n$addr;
 $oldnum = ((($18)) + 12|0);
 HEAP32[$oldnum>>2] = $17;
 $19 = $num;
 $cmp = ($19|0)<(0);
 $conv8 = $cmp&1;
 $neg = $conv8;
 $20 = $neg;
 $tobool = ($20|0)!=(0);
 if ($tobool) {
  $21 = $numdigits;
  $cmp9 = ($21|0)==(2);
  $22 = $num;
  $cmp11 = ($22|0)<(-9);
  $or$cond = $cmp9 & $cmp11;
  if ($or$cond) {
   $num = -9;
  } else {
   $23 = $numdigits;
   $cmp14 = ($23|0)==(3);
   $24 = $num;
   $cmp17 = ($24|0)<(-99);
   $or$cond1 = $cmp14 & $cmp17;
   if ($or$cond1) {
    $num = -99;
   }
  }
  $25 = $num;
  $sub = (0 - ($25))|0;
  $num = $sub;
 }
 $26 = $n$addr;
 $27 = HEAP32[$26>>2]|0;
 $28 = $numdigits;
 $29 = $w;
 $mul = Math_imul($28, $29)|0;
 $sub23 = (($27) - ($mul))|0;
 $x = $sub23;
 $30 = $n$addr;
 $y = ((($30)) + 4|0);
 $31 = HEAP32[$y>>2]|0;
 $sub24 = (($31) - 168)|0;
 $cmp25 = ($sub24|0)<(0);
 if ($cmp25) {
  _I_Error(157200,$vararg_buffer);
 }
 $32 = $x;
 $33 = $n$addr;
 $y29 = ((($33)) + 4|0);
 $34 = HEAP32[$y29>>2]|0;
 $sub30 = (($34) - 168)|0;
 $35 = HEAP32[100078]|0;
 $36 = $w;
 $37 = $numdigits;
 $mul31 = Math_imul($36, $37)|0;
 $38 = $h;
 $39 = $x;
 $40 = $n$addr;
 $y32 = ((($40)) + 4|0);
 $41 = HEAP32[$y32>>2]|0;
 _V_CopyRect($32,$sub30,$35,$mul31,$38,$39,$41);
 $42 = $num;
 $cmp33 = ($42|0)==(1994);
 if ($cmp33) {
  STACKTOP = sp;return;
 }
 $43 = $n$addr;
 $44 = HEAP32[$43>>2]|0;
 $x = $44;
 $45 = $num;
 $tobool38 = ($45|0)!=(0);
 if (!($tobool38)) {
  $46 = $x;
  $47 = $w;
  $sub40 = (($46) - ($47))|0;
  $48 = $n$addr;
  $y41 = ((($48)) + 4|0);
  $49 = HEAP32[$y41>>2]|0;
  $50 = $n$addr;
  $p42 = ((($50)) + 24|0);
  $51 = HEAP32[$p42>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  _V_DrawPatch($sub40,$49,$52);
 }
 while(1) {
  $53 = $num;
  $tobool45 = ($53|0)!=(0);
  if (!($tobool45)) {
   break;
  }
  $54 = $numdigits;
  $dec = (($54) + -1)|0;
  $numdigits = $dec;
  $tobool46 = ($54|0)!=(0);
  if (!($tobool46)) {
   break;
  }
  $55 = $w;
  $56 = $x;
  $sub47 = (($56) - ($55))|0;
  $x = $sub47;
  $57 = $x;
  $58 = $n$addr;
  $y48 = ((($58)) + 4|0);
  $59 = HEAP32[$y48>>2]|0;
  $60 = $n$addr;
  $p49 = ((($60)) + 24|0);
  $61 = HEAP32[$p49>>2]|0;
  $62 = $num;
  $rem = (($62|0) % 10)&-1;
  $arrayidx50 = (($61) + ($rem<<2)|0);
  $63 = HEAP32[$arrayidx50>>2]|0;
  _V_DrawPatch($57,$59,$63);
  $64 = $num;
  $div = (($64|0) / 10)&-1;
  $num = $div;
 }
 $65 = $neg;
 $tobool51 = ($65|0)!=(0);
 if (!($tobool51)) {
  STACKTOP = sp;return;
 }
 $66 = $x;
 $sub53 = (($66) - 8)|0;
 $67 = $n$addr;
 $y54 = ((($67)) + 4|0);
 $68 = HEAP32[$y54>>2]|0;
 $69 = HEAP32[100077]|0;
 _V_DrawPatch($sub53,$68,$69);
 STACKTOP = sp;return;
}
function _STlib_updateNum($n,$refresh) {
 $n = $n|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $n$addr = 0, $on = 0, $refresh$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $n$addr = $n;
 $refresh$addr = $refresh;
 $0 = $n$addr;
 $on = ((($0)) + 20|0);
 $1 = HEAP32[$on>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $3 = $n$addr;
 $4 = $refresh$addr;
 _STlib_drawNum($3,$4);
 STACKTOP = sp;return;
}
function _STlib_initPercent($p,$x,$y,$pl,$num,$on,$percent) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $pl = $pl|0;
 $num = $num|0;
 $on = $on|0;
 $percent = $percent|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $num$addr = 0, $on$addr = 0, $p$addr = 0, $p1 = 0, $percent$addr = 0, $pl$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $p$addr = $p;
 $x$addr = $x;
 $y$addr = $y;
 $pl$addr = $pl;
 $num$addr = $num;
 $on$addr = $on;
 $percent$addr = $percent;
 $0 = $p$addr;
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $pl$addr;
 $4 = $num$addr;
 $5 = $on$addr;
 _STlib_initNum($0,$1,$2,$3,$4,$5,3);
 $6 = $percent$addr;
 $7 = $p$addr;
 $p1 = ((($7)) + 32|0);
 HEAP32[$p1>>2] = $6;
 STACKTOP = sp;return;
}
function _STlib_updatePercent($per,$refresh) {
 $per = $per|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $on = 0, $p = 0, $per$addr = 0, $refresh$addr = 0, $tobool = 0, $tobool1 = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $per$addr = $per;
 $refresh$addr = $refresh;
 $0 = $refresh$addr;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = $per$addr;
  $on = ((($1)) + 20|0);
  $2 = HEAP32[$on>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $tobool1 = ($3|0)!=(0);
  if ($tobool1) {
   $4 = $per$addr;
   $5 = HEAP32[$4>>2]|0;
   $6 = $per$addr;
   $y = ((($6)) + 4|0);
   $7 = HEAP32[$y>>2]|0;
   $8 = $per$addr;
   $p = ((($8)) + 32|0);
   $9 = HEAP32[$p>>2]|0;
   _V_DrawPatch($5,$7,$9);
  }
 }
 $10 = $per$addr;
 $11 = $refresh$addr;
 _STlib_updateNum($10,$11);
 STACKTOP = sp;return;
}
function _STlib_initMultIcon($i,$x,$y,$il,$inum,$on) {
 $i = $i|0;
 $x = $x|0;
 $y = $y|0;
 $il = $il|0;
 $inum = $inum|0;
 $on = $on|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$addr = 0, $il$addr = 0, $inum$addr = 0, $inum3 = 0, $oldinum = 0, $on$addr = 0, $on4 = 0, $p = 0, $x$addr = 0;
 var $y$addr = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $i$addr = $i;
 $x$addr = $x;
 $y$addr = $y;
 $il$addr = $il;
 $inum$addr = $inum;
 $on$addr = $on;
 $0 = $x$addr;
 $1 = $i$addr;
 HEAP32[$1>>2] = $0;
 $2 = $y$addr;
 $3 = $i$addr;
 $y2 = ((($3)) + 4|0);
 HEAP32[$y2>>2] = $2;
 $4 = $i$addr;
 $oldinum = ((($4)) + 8|0);
 HEAP32[$oldinum>>2] = -1;
 $5 = $inum$addr;
 $6 = $i$addr;
 $inum3 = ((($6)) + 12|0);
 HEAP32[$inum3>>2] = $5;
 $7 = $on$addr;
 $8 = $i$addr;
 $on4 = ((($8)) + 16|0);
 HEAP32[$on4>>2] = $7;
 $9 = $il$addr;
 $10 = $i$addr;
 $p = ((($10)) + 20|0);
 HEAP32[$p>>2] = $9;
 STACKTOP = sp;return;
}
function _STlib_updateMultIcon($mi,$refresh) {
 $mi = $mi|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx18 = 0, $arrayidx22 = 0, $arrayidx34 = 0, $cmp = 0, $cmp25 = 0, $cmp4 = 0, $cmp6 = 0, $conv = 0, $conv14 = 0, $conv19 = 0, $conv23 = 0, $h = 0, $height = 0, $inum = 0;
 var $inum3 = 0, $inum33 = 0, $inum35 = 0, $leftoffset = 0, $mi$addr = 0, $oldinum = 0, $oldinum12 = 0, $oldinum17 = 0, $oldinum21 = 0, $oldinum36 = 0, $oldinum5 = 0, $oldinum9 = 0, $on = 0, $or$cond = 0, $p = 0, $p11 = 0, $p16 = 0, $p20 = 0, $p32 = 0, $refresh$addr = 0;
 var $sub = 0, $sub15 = 0, $sub24 = 0, $sub28 = 0, $tobool = 0, $tobool1 = 0, $topoffset = 0, $vararg_buffer = 0, $w = 0, $x = 0, $y = 0, $y10 = 0, $y31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $mi$addr = $mi;
 $refresh$addr = $refresh;
 $0 = $mi$addr;
 $on = ((($0)) + 16|0);
 $1 = HEAP32[$on>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $3 = $mi$addr;
 $oldinum = ((($3)) + 8|0);
 $4 = HEAP32[$oldinum>>2]|0;
 $5 = $mi$addr;
 $inum = ((($5)) + 12|0);
 $6 = HEAP32[$inum>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $cmp = ($4|0)!=($7|0);
 $8 = $refresh$addr;
 $tobool1 = ($8|0)!=(0);
 $or$cond = $cmp | $tobool1;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $9 = $mi$addr;
 $inum3 = ((($9)) + 12|0);
 $10 = HEAP32[$inum3>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $cmp4 = ($11|0)!=(-1);
 if (!($cmp4)) {
  STACKTOP = sp;return;
 }
 $12 = $mi$addr;
 $oldinum5 = ((($12)) + 8|0);
 $13 = HEAP32[$oldinum5>>2]|0;
 $cmp6 = ($13|0)!=(-1);
 if ($cmp6) {
  $14 = $mi$addr;
  $15 = HEAP32[$14>>2]|0;
  $16 = $mi$addr;
  $p = ((($16)) + 20|0);
  $17 = HEAP32[$p>>2]|0;
  $18 = $mi$addr;
  $oldinum9 = ((($18)) + 8|0);
  $19 = HEAP32[$oldinum9>>2]|0;
  $arrayidx = (($17) + ($19<<2)|0);
  $20 = HEAP32[$arrayidx>>2]|0;
  $leftoffset = ((($20)) + 4|0);
  $21 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
  $conv = $21 << 16 >> 16;
  $sub = (($15) - ($conv))|0;
  $x = $sub;
  $22 = $mi$addr;
  $y10 = ((($22)) + 4|0);
  $23 = HEAP32[$y10>>2]|0;
  $24 = $mi$addr;
  $p11 = ((($24)) + 20|0);
  $25 = HEAP32[$p11>>2]|0;
  $26 = $mi$addr;
  $oldinum12 = ((($26)) + 8|0);
  $27 = HEAP32[$oldinum12>>2]|0;
  $arrayidx13 = (($25) + ($27<<2)|0);
  $28 = HEAP32[$arrayidx13>>2]|0;
  $topoffset = ((($28)) + 6|0);
  $29 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
  $conv14 = $29 << 16 >> 16;
  $sub15 = (($23) - ($conv14))|0;
  $y = $sub15;
  $30 = $mi$addr;
  $p16 = ((($30)) + 20|0);
  $31 = HEAP32[$p16>>2]|0;
  $32 = $mi$addr;
  $oldinum17 = ((($32)) + 8|0);
  $33 = HEAP32[$oldinum17>>2]|0;
  $arrayidx18 = (($31) + ($33<<2)|0);
  $34 = HEAP32[$arrayidx18>>2]|0;
  $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8);
  $conv19 = $35 << 16 >> 16;
  $w = $conv19;
  $36 = $mi$addr;
  $p20 = ((($36)) + 20|0);
  $37 = HEAP32[$p20>>2]|0;
  $38 = $mi$addr;
  $oldinum21 = ((($38)) + 8|0);
  $39 = HEAP32[$oldinum21>>2]|0;
  $arrayidx22 = (($37) + ($39<<2)|0);
  $40 = HEAP32[$arrayidx22>>2]|0;
  $height = ((($40)) + 2|0);
  $41 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv23 = $41 << 16 >> 16;
  $h = $conv23;
  $42 = $y;
  $sub24 = (($42) - 168)|0;
  $cmp25 = ($sub24|0)<(0);
  if ($cmp25) {
   _I_Error(157225,$vararg_buffer);
  }
  $43 = $x;
  $44 = $y;
  $sub28 = (($44) - 168)|0;
  $45 = HEAP32[100078]|0;
  $46 = $w;
  $47 = $h;
  $48 = $x;
  $49 = $y;
  _V_CopyRect($43,$sub28,$45,$46,$47,$48,$49);
 }
 $50 = $mi$addr;
 $51 = HEAP32[$50>>2]|0;
 $52 = $mi$addr;
 $y31 = ((($52)) + 4|0);
 $53 = HEAP32[$y31>>2]|0;
 $54 = $mi$addr;
 $p32 = ((($54)) + 20|0);
 $55 = HEAP32[$p32>>2]|0;
 $56 = $mi$addr;
 $inum33 = ((($56)) + 12|0);
 $57 = HEAP32[$inum33>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $arrayidx34 = (($55) + ($58<<2)|0);
 $59 = HEAP32[$arrayidx34>>2]|0;
 _V_DrawPatch($51,$53,$59);
 $60 = $mi$addr;
 $inum35 = ((($60)) + 12|0);
 $61 = HEAP32[$inum35>>2]|0;
 $62 = HEAP32[$61>>2]|0;
 $63 = $mi$addr;
 $oldinum36 = ((($63)) + 8|0);
 HEAP32[$oldinum36>>2] = $62;
 STACKTOP = sp;return;
}
function _STlib_initBinIcon($b,$x,$y,$i,$val,$on) {
 $b = $b|0;
 $x = $x|0;
 $y = $y|0;
 $i = $i|0;
 $val = $val|0;
 $on = $on|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$addr = 0, $i$addr = 0, $oldval = 0, $on$addr = 0, $on4 = 0, $p = 0, $val$addr = 0, $val3 = 0, $x$addr = 0;
 var $y$addr = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $b$addr = $b;
 $x$addr = $x;
 $y$addr = $y;
 $i$addr = $i;
 $val$addr = $val;
 $on$addr = $on;
 $0 = $x$addr;
 $1 = $b$addr;
 HEAP32[$1>>2] = $0;
 $2 = $y$addr;
 $3 = $b$addr;
 $y2 = ((($3)) + 4|0);
 HEAP32[$y2>>2] = $2;
 $4 = $b$addr;
 $oldval = ((($4)) + 8|0);
 HEAP32[$oldval>>2] = 0;
 $5 = $val$addr;
 $6 = $b$addr;
 $val3 = ((($6)) + 12|0);
 HEAP32[$val3>>2] = $5;
 $7 = $on$addr;
 $8 = $b$addr;
 $on4 = ((($8)) + 16|0);
 HEAP32[$on4>>2] = $7;
 $9 = $i$addr;
 $10 = $b$addr;
 $p = ((($10)) + 20|0);
 HEAP32[$p>>2] = $9;
 STACKTOP = sp;return;
}
function _STlib_updateBinIcon($bi,$refresh) {
 $bi = $bi|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bi$addr = 0, $cmp = 0, $cmp12 = 0, $conv = 0, $conv10 = 0, $conv5 = 0, $conv8 = 0, $h = 0, $height = 0, $leftoffset = 0, $oldval = 0, $oldval24 = 0, $on = 0, $or$cond = 0;
 var $p = 0, $p20 = 0, $p4 = 0, $p7 = 0, $p9 = 0, $refresh$addr = 0, $sub = 0, $sub11 = 0, $sub21 = 0, $sub6 = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $topoffset = 0, $val = 0, $val15 = 0, $val23 = 0, $vararg_buffer = 0, $w = 0, $x = 0;
 var $y = 0, $y19 = 0, $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $bi$addr = $bi;
 $refresh$addr = $refresh;
 $0 = $bi$addr;
 $on = ((($0)) + 16|0);
 $1 = HEAP32[$on>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $tobool = ($2|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $3 = $bi$addr;
 $oldval = ((($3)) + 8|0);
 $4 = HEAP32[$oldval>>2]|0;
 $5 = $bi$addr;
 $val = ((($5)) + 12|0);
 $6 = HEAP32[$val>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $cmp = ($4|0)!=($7|0);
 $8 = $refresh$addr;
 $tobool1 = ($8|0)!=(0);
 $or$cond = $cmp | $tobool1;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $9 = $bi$addr;
 $10 = HEAP32[$9>>2]|0;
 $11 = $bi$addr;
 $p = ((($11)) + 20|0);
 $12 = HEAP32[$p>>2]|0;
 $leftoffset = ((($12)) + 4|0);
 $13 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv = $13 << 16 >> 16;
 $sub = (($10) - ($conv))|0;
 $x = $sub;
 $14 = $bi$addr;
 $y3 = ((($14)) + 4|0);
 $15 = HEAP32[$y3>>2]|0;
 $16 = $bi$addr;
 $p4 = ((($16)) + 20|0);
 $17 = HEAP32[$p4>>2]|0;
 $topoffset = ((($17)) + 6|0);
 $18 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv5 = $18 << 16 >> 16;
 $sub6 = (($15) - ($conv5))|0;
 $y = $sub6;
 $19 = $bi$addr;
 $p7 = ((($19)) + 20|0);
 $20 = HEAP32[$p7>>2]|0;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8);
 $conv8 = $21 << 16 >> 16;
 $w = $conv8;
 $22 = $bi$addr;
 $p9 = ((($22)) + 20|0);
 $23 = HEAP32[$p9>>2]|0;
 $height = ((($23)) + 2|0);
 $24 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv10 = $24 << 16 >> 16;
 $h = $conv10;
 $25 = $y;
 $sub11 = (($25) - 168)|0;
 $cmp12 = ($sub11|0)<(0);
 if ($cmp12) {
  _I_Error(157254,$vararg_buffer);
 }
 $26 = $bi$addr;
 $val15 = ((($26)) + 12|0);
 $27 = HEAP32[$val15>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $tobool16 = ($28|0)!=(0);
 if ($tobool16) {
  $29 = $bi$addr;
  $30 = HEAP32[$29>>2]|0;
  $31 = $bi$addr;
  $y19 = ((($31)) + 4|0);
  $32 = HEAP32[$y19>>2]|0;
  $33 = $bi$addr;
  $p20 = ((($33)) + 20|0);
  $34 = HEAP32[$p20>>2]|0;
  _V_DrawPatch($30,$32,$34);
 } else {
  $35 = $x;
  $36 = $y;
  $sub21 = (($36) - 168)|0;
  $37 = HEAP32[100078]|0;
  $38 = $w;
  $39 = $h;
  $40 = $x;
  $41 = $y;
  _V_CopyRect($35,$sub21,$37,$38,$39,$40,$41);
 }
 $42 = $bi$addr;
 $val23 = ((($42)) + 12|0);
 $43 = HEAP32[$val23>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = $bi$addr;
 $oldval24 = ((($45)) + 8|0);
 HEAP32[$oldval24>>2] = $44;
 STACKTOP = sp;return;
}
function _ST_refreshBackground() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100079]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  return;
 }
 $1 = HEAP32[100078]|0;
 _V_UseBuffer($1);
 $2 = HEAP32[100080]|0;
 _V_DrawPatch(0,0,$2);
 $3 = HEAP32[99433]|0;
 $tobool1 = ($3|0)!=(0);
 if ($tobool1) {
  $4 = HEAP32[100081]|0;
  _V_DrawPatch(143,0,$4);
 }
 _V_RestoreBuffer();
 $5 = HEAP32[100078]|0;
 _V_CopyRect(0,0,$5,320,32,0,168);
 return;
}
function _ST_Responder($ev) {
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add103 = 0, $add116 = 0, $add120 = 0, $add127 = 0, $add271 = 0, $add94 = 0, $ammo = 0, $ammo64 = 0, $and = 0, $and13 = 0;
 var $and176 = 0, $angle = 0, $armorpoints = 0, $armorpoints47 = 0, $armortype = 0, $armortype48 = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx117 = 0, $arrayidx125 = 0, $arrayidx192 = 0, $arrayidx198 = 0, $arrayidx207 = 0, $arrayidx231 = 0, $arrayidx241 = 0, $arrayidx243 = 0, $arrayidx245 = 0, $arrayidx269 = 0, $arrayidx277 = 0, $arrayidx35 = 0;
 var $arrayidx36 = 0, $arrayidx54 = 0, $arrayidx63 = 0, $arrayidx65 = 0, $arrayidx73 = 0, $arrayidx92 = 0, $buf = 0, $buf260 = 0, $call = 0, $call150 = 0, $call170 = 0, $call195 = 0, $call220 = 0, $call227 = 0, $call238 = 0, $call257 = 0, $call26 = 0, $call44 = 0, $call81 = 0, $cards = 0;
 var $cheats = 0, $cheats12 = 0, $cheats173 = 0, $cheats175 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp129 = 0, $cmp137 = 0, $cmp139 = 0, $cmp145 = 0, $cmp153 = 0, $cmp157 = 0, $cmp165 = 0, $cmp189 = 0, $cmp203 = 0, $cmp262 = 0, $cmp281 = 0, $cmp285 = 0, $cmp289 = 0;
 var $cmp29 = 0, $cmp293 = 0, $cmp296 = 0, $cmp299 = 0, $cmp303 = 0, $cmp306 = 0, $cmp309 = 0, $cmp313 = 0, $cmp316 = 0, $cmp319 = 0, $cmp32 = 0, $cmp323 = 0, $cmp326 = 0, $cmp329 = 0, $cmp5 = 0, $cmp50 = 0, $cmp59 = 0, $cmp70 = 0, $cmp8 = 0, $cmp85 = 0;
 var $cmp87 = 0, $cond = 0, $cond144 = 0, $cond162 = 0, $cond164 = 0, $cond6 = 0, $conv = 0, $conv102 = 0, $conv118 = 0, $conv122 = 0, $conv126 = 0, $conv149 = 0, $conv169 = 0, $conv194 = 0, $conv219 = 0, $conv226 = 0, $conv237 = 0, $conv25 = 0, $conv256 = 0, $conv266 = 0;
 var $conv270 = 0, $conv275 = 0, $conv278 = 0, $conv43 = 0, $conv80 = 0, $conv91 = 0, $conv93 = 0, $conv98 = 0, $data1 = 0, $data12 = 0, $data2 = 0, $data2148 = 0, $data2168 = 0, $data2193 = 0, $data2218 = 0, $data2225 = 0, $data2236 = 0, $data224 = 0, $data2255 = 0, $data242 = 0;
 var $data279 = 0, $epsd = 0, $ev$addr = 0, $health = 0, $health19 = 0, $i = 0, $inc = 0, $inc216 = 0, $inc38 = 0, $inc56 = 0, $inc67 = 0, $inc75 = 0, $map = 0, $maxammo = 0, $maxammo62 = 0, $message = 0, $message108 = 0, $message132 = 0, $message179 = 0, $message21 = 0;
 var $message213 = 0, $message223 = 0, $message234 = 0, $message248 = 0, $message333 = 0, $message40 = 0, $message77 = 0, $message84 = 0, $mul = 0, $mul100 = 0, $mul115 = 0, $mul124 = 0, $mul268 = 0, $musnum = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0;
 var $powers = 0, $powers206 = 0, $powers232 = 0, $retval = 0, $sub = 0, $sub104 = 0, $sub114 = 0, $sub119 = 0, $sub123 = 0, $sub128 = 0, $sub267 = 0, $sub272 = 0, $sub276 = 0, $sub279 = 0, $sub95 = 0, $sub96 = 0, $sub99 = 0, $tobool = 0, $tobool10 = 0, $tobool14 = 0;
 var $tobool151 = 0, $tobool16 = 0, $tobool171 = 0, $tobool177 = 0, $tobool196 = 0, $tobool199 = 0, $tobool221 = 0, $tobool228 = 0, $tobool239 = 0, $tobool253 = 0, $tobool258 = 0, $tobool27 = 0, $tobool45 = 0, $tobool82 = 0, $vararg_buffer = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $weaponowned = 0, $weaponowned230 = 0, $weaponowned53 = 0;
 var $x = 0, $xor = 0, $xor174 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $buf = sp + 39|0;
 $buf260 = sp + 36|0;
 $ev$addr = $ev;
 $0 = $ev$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(1);
 if ($cmp) {
  $2 = $ev$addr;
  $data1 = ((($2)) + 4|0);
  $3 = HEAP32[$data1>>2]|0;
  $and = $3 & -65536;
  $cmp1 = ($and|0)==(1634533376);
  if ($cmp1) {
   $4 = $ev$addr;
   $data12 = ((($4)) + 4|0);
   $5 = HEAP32[$data12>>2]|0;
   $cond6 = ($5|0)==(1634559232);
   if ($cond6) {
    HEAP32[100082] = 1;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $6 = $ev$addr;
  $7 = HEAP32[$6>>2]|0;
  $cmp5 = ($7|0)==(0);
  if ($cmp5) {
   $8 = HEAP32[99433]|0;
   $tobool = ($8|0)==(0);
   $9 = HEAP32[99425]|0;
   $cmp8 = ($9|0)!=(4);
   $or$cond = $tobool & $cmp8;
   do {
    if ($or$cond) {
     $10 = $ev$addr;
     $data2 = ((($10)) + 8|0);
     $11 = HEAP32[$data2>>2]|0;
     $conv = $11&255;
     $call = (_cht_CheckCheat(129440,$conv)|0);
     $tobool10 = ($call|0)!=(0);
     do {
      if ($tobool10) {
       $12 = HEAP32[100083]|0;
       $cheats = ((($12)) + 204|0);
       $13 = HEAP32[$cheats>>2]|0;
       $xor = $13 ^ 2;
       HEAP32[$cheats>>2] = $xor;
       $14 = HEAP32[100083]|0;
       $cheats12 = ((($14)) + 204|0);
       $15 = HEAP32[$cheats12>>2]|0;
       $and13 = $15 & 2;
       $tobool14 = ($and13|0)!=(0);
       $16 = HEAP32[100083]|0;
       if (!($tobool14)) {
        $message21 = ((($16)) + 224|0);
        HEAP32[$message21>>2] = 157305;
        break;
       }
       $17 = HEAP32[$16>>2]|0;
       $tobool16 = ($17|0)!=(0|0);
       if ($tobool16) {
        $18 = HEAP32[100083]|0;
        $19 = HEAP32[$18>>2]|0;
        $health = ((($19)) + 108|0);
        HEAP32[$health>>2] = 100;
       }
       $20 = HEAP32[100083]|0;
       $health19 = ((($20)) + 40|0);
       HEAP32[$health19>>2] = 100;
       $21 = HEAP32[100083]|0;
       $message = ((($21)) + 224|0);
       HEAP32[$message>>2] = 157282;
      } else {
       $22 = $ev$addr;
       $data224 = ((($22)) + 8|0);
       $23 = HEAP32[$data224>>2]|0;
       $conv25 = $23&255;
       $call26 = (_cht_CheckCheat(129544,$conv25)|0);
       $tobool27 = ($call26|0)!=(0);
       if ($tobool27) {
        $24 = HEAP32[100083]|0;
        $armorpoints = ((($24)) + 44|0);
        HEAP32[$armorpoints>>2] = 200;
        $25 = HEAP32[100083]|0;
        $armortype = ((($25)) + 48|0);
        HEAP32[$armortype>>2] = 2;
        $i = 0;
        while(1) {
         $26 = $i;
         $cmp29 = ($26|0)<(9);
         if (!($cmp29)) {
          break;
         }
         $27 = HEAP32[100083]|0;
         $weaponowned = ((($27)) + 128|0);
         $28 = $i;
         $arrayidx = (($weaponowned) + ($28<<2)|0);
         HEAP32[$arrayidx>>2] = 1;
         $29 = $i;
         $inc = (($29) + 1)|0;
         $i = $inc;
        }
        $i = 0;
        while(1) {
         $30 = $i;
         $cmp32 = ($30|0)<(4);
         $31 = HEAP32[100083]|0;
         if (!($cmp32)) {
          break;
         }
         $maxammo = ((($31)) + 180|0);
         $32 = $i;
         $arrayidx35 = (($maxammo) + ($32<<2)|0);
         $33 = HEAP32[$arrayidx35>>2]|0;
         $34 = HEAP32[100083]|0;
         $ammo = ((($34)) + 164|0);
         $35 = $i;
         $arrayidx36 = (($ammo) + ($35<<2)|0);
         HEAP32[$arrayidx36>>2] = $33;
         $36 = $i;
         $inc38 = (($36) + 1)|0;
         $i = $inc38;
        }
        $message40 = ((($31)) + 224|0);
        HEAP32[$message40>>2] = 157329;
        break;
       }
       $37 = $ev$addr;
       $data242 = ((($37)) + 8|0);
       $38 = HEAP32[$data242>>2]|0;
       $conv43 = $38&255;
       $call44 = (_cht_CheckCheat(129492,$conv43)|0);
       $tobool45 = ($call44|0)!=(0);
       if ($tobool45) {
        $39 = HEAP32[100083]|0;
        $armorpoints47 = ((($39)) + 44|0);
        HEAP32[$armorpoints47>>2] = 200;
        $40 = HEAP32[100083]|0;
        $armortype48 = ((($40)) + 48|0);
        HEAP32[$armortype48>>2] = 2;
        $i = 0;
        while(1) {
         $41 = $i;
         $cmp50 = ($41|0)<(9);
         if (!($cmp50)) {
          break;
         }
         $42 = HEAP32[100083]|0;
         $weaponowned53 = ((($42)) + 128|0);
         $43 = $i;
         $arrayidx54 = (($weaponowned53) + ($43<<2)|0);
         HEAP32[$arrayidx54>>2] = 1;
         $44 = $i;
         $inc56 = (($44) + 1)|0;
         $i = $inc56;
        }
        $i = 0;
        while(1) {
         $45 = $i;
         $cmp59 = ($45|0)<(4);
         if (!($cmp59)) {
          break;
         }
         $46 = HEAP32[100083]|0;
         $maxammo62 = ((($46)) + 180|0);
         $47 = $i;
         $arrayidx63 = (($maxammo62) + ($47<<2)|0);
         $48 = HEAP32[$arrayidx63>>2]|0;
         $49 = HEAP32[100083]|0;
         $ammo64 = ((($49)) + 164|0);
         $50 = $i;
         $arrayidx65 = (($ammo64) + ($50<<2)|0);
         HEAP32[$arrayidx65>>2] = $48;
         $51 = $i;
         $inc67 = (($51) + 1)|0;
         $i = $inc67;
        }
        $i = 0;
        while(1) {
         $52 = $i;
         $cmp70 = ($52|0)<(6);
         $53 = HEAP32[100083]|0;
         if (!($cmp70)) {
          break;
         }
         $cards = ((($53)) + 76|0);
         $54 = $i;
         $arrayidx73 = (($cards) + ($54<<2)|0);
         HEAP32[$arrayidx73>>2] = 1;
         $55 = $i;
         $inc75 = (($55) + 1)|0;
         $i = $inc75;
        }
        $message77 = ((($53)) + 224|0);
        HEAP32[$message77>>2] = 157350;
        break;
       }
       $56 = $ev$addr;
       $data279 = ((($56)) + 8|0);
       $57 = HEAP32[$data279>>2]|0;
       $conv80 = $57&255;
       $call81 = (_cht_CheckCheat(129388,$conv80)|0);
       $tobool82 = ($call81|0)!=(0);
       if ($tobool82) {
        $58 = HEAP32[100083]|0;
        $message84 = ((($58)) + 224|0);
        HEAP32[$message84>>2] = 157372;
        _cht_GetParam(129388,$buf);
        $59 = HEAP32[32168]|0;
        $cmp85 = ($59|0)==(2);
        $60 = HEAP32[32169]|0;
        $cmp87 = ($60>>>0)<(6);
        $or$cond1 = $cmp85 | $cmp87;
        $61 = HEAP8[$buf>>0]|0;
        $conv91 = $61 << 24 >> 24;
        if ($or$cond1) {
         $sub = (($conv91) - 48)|0;
         $mul = ($sub*10)|0;
         $add = (33 + ($mul))|0;
         $arrayidx92 = ((($buf)) + 1|0);
         $62 = HEAP8[$arrayidx92>>0]|0;
         $conv93 = $62 << 24 >> 24;
         $add94 = (($add) + ($conv93))|0;
         $sub95 = (($add94) - 48)|0;
         $sub96 = (($sub95) - 1)|0;
         $musnum = $sub96;
         $63 = HEAP8[$buf>>0]|0;
         $conv98 = $63 << 24 >> 24;
         $sub99 = (($conv98) - 48)|0;
         $mul100 = ($sub99*10)|0;
         $arrayidx101 = ((($buf)) + 1|0);
         $64 = HEAP8[$arrayidx101>>0]|0;
         $conv102 = $64 << 24 >> 24;
         $add103 = (($mul100) + ($conv102))|0;
         $sub104 = (($add103) - 48)|0;
         $cmp105 = ($sub104|0)>(35);
         if ($cmp105) {
          $65 = HEAP32[100083]|0;
          $message108 = ((($65)) + 224|0);
          HEAP32[$message108>>2] = 157385;
          break;
         } else {
          $66 = $musnum;
          _S_ChangeMusic($66,1);
          break;
         }
        } else {
         $sub114 = (($conv91) - 49)|0;
         $mul115 = ($sub114*9)|0;
         $add116 = (1 + ($mul115))|0;
         $arrayidx117 = ((($buf)) + 1|0);
         $67 = HEAP8[$arrayidx117>>0]|0;
         $conv118 = $67 << 24 >> 24;
         $sub119 = (($conv118) - 49)|0;
         $add120 = (($add116) + ($sub119))|0;
         $musnum = $add120;
         $68 = HEAP8[$buf>>0]|0;
         $conv122 = $68 << 24 >> 24;
         $sub123 = (($conv122) - 49)|0;
         $mul124 = ($sub123*9)|0;
         $arrayidx125 = ((($buf)) + 1|0);
         $69 = HEAP8[$arrayidx125>>0]|0;
         $conv126 = $69 << 24 >> 24;
         $add127 = (($mul124) + ($conv126))|0;
         $sub128 = (($add127) - 49)|0;
         $cmp129 = ($sub128|0)>(31);
         if ($cmp129) {
          $70 = HEAP32[100083]|0;
          $message132 = ((($70)) + 224|0);
          HEAP32[$message132>>2] = 157385;
          break;
         } else {
          $71 = $musnum;
          _S_ChangeMusic($71,1);
          break;
         }
        }
       }
       $72 = HEAP32[99356]|0;
       $cmp137 = ($72|0)==(4);
       if ($cmp137) {
        $cond144 = 0;
       } else {
        $73 = HEAP32[99356]|0;
        $cmp139 = ($73|0)==(5);
        $74 = HEAP32[99356]|0;
        $cond = $cmp139 ? 1 : $74;
        $cond144 = $cond;
       }
       $cmp145 = ($cond144|0)==(0);
       if ($cmp145) {
        $75 = $ev$addr;
        $data2148 = ((($75)) + 8|0);
        $76 = HEAP32[$data2148>>2]|0;
        $conv149 = $76&255;
        $call150 = (_cht_CheckCheat(129596,$conv149)|0);
        $tobool151 = ($call150|0)!=(0);
        if (!($tobool151)) {
         label = 44;
        }
       } else {
        label = 44;
       }
       if ((label|0) == 44) {
        $77 = HEAP32[99356]|0;
        $cmp153 = ($77|0)==(4);
        if ($cmp153) {
         $cond164 = 0;
        } else {
         $78 = HEAP32[99356]|0;
         $cmp157 = ($78|0)==(5);
         $79 = HEAP32[99356]|0;
         $cond162 = $cmp157 ? 1 : $79;
         $cond164 = $cond162;
        }
        $cmp165 = ($cond164|0)!=(0);
        if (!($cmp165)) {
         break;
        }
        $80 = $ev$addr;
        $data2168 = ((($80)) + 8|0);
        $81 = HEAP32[$data2168>>2]|0;
        $conv169 = $81&255;
        $call170 = (_cht_CheckCheat(129648,$conv169)|0);
        $tobool171 = ($call170|0)!=(0);
        if (!($tobool171)) {
         break;
        }
       }
       $82 = HEAP32[100083]|0;
       $cheats173 = ((($82)) + 204|0);
       $83 = HEAP32[$cheats173>>2]|0;
       $xor174 = $83 ^ 1;
       HEAP32[$cheats173>>2] = $xor174;
       $84 = HEAP32[100083]|0;
       $cheats175 = ((($84)) + 204|0);
       $85 = HEAP32[$cheats175>>2]|0;
       $and176 = $85 & 1;
       $tobool177 = ($and176|0)!=(0);
       $86 = HEAP32[100083]|0;
       $message179 = ((($86)) + 224|0);
       if ($tobool177) {
        HEAP32[$message179>>2] = 157406;
        break;
       } else {
        HEAP32[$message179>>2] = 157426;
        break;
       }
      }
     } while(0);
     $i = 0;
     while(1) {
      $87 = $i;
      $cmp189 = ($87|0)<(6);
      if (!($cmp189)) {
       break;
      }
      $88 = $i;
      $arrayidx192 = (58000 + (($88*52)|0)|0);
      $89 = $ev$addr;
      $data2193 = ((($89)) + 8|0);
      $90 = HEAP32[$data2193>>2]|0;
      $conv194 = $90&255;
      $call195 = (_cht_CheckCheat($arrayidx192,$conv194)|0);
      $tobool196 = ($call195|0)!=(0);
      if ($tobool196) {
       $91 = HEAP32[100083]|0;
       $powers = ((($91)) + 52|0);
       $92 = $i;
       $arrayidx198 = (($powers) + ($92<<2)|0);
       $93 = HEAP32[$arrayidx198>>2]|0;
       $tobool199 = ($93|0)!=(0);
       do {
        if ($tobool199) {
         $96 = $i;
         $cmp203 = ($96|0)!=(1);
         $97 = HEAP32[100083]|0;
         $powers206 = ((($97)) + 52|0);
         $98 = $i;
         $arrayidx207 = (($powers206) + ($98<<2)|0);
         if ($cmp203) {
          HEAP32[$arrayidx207>>2] = 1;
          break;
         } else {
          HEAP32[$arrayidx207>>2] = 0;
          break;
         }
        } else {
         $94 = HEAP32[100083]|0;
         $95 = $i;
         (_P_GivePower($94,$95)|0);
        }
       } while(0);
       $99 = HEAP32[100083]|0;
       $message213 = ((($99)) + 224|0);
       HEAP32[$message213>>2] = 157447;
      }
      $100 = $i;
      $inc216 = (($100) + 1)|0;
      $i = $inc216;
     }
     $101 = $ev$addr;
     $data2218 = ((($101)) + 8|0);
     $102 = HEAP32[$data2218>>2]|0;
     $conv219 = $102&255;
     $call220 = (_cht_CheckCheat((58312),$conv219)|0);
     $tobool221 = ($call220|0)!=(0);
     if ($tobool221) {
      $103 = HEAP32[100083]|0;
      $message223 = ((($103)) + 224|0);
      HEAP32[$message223>>2] = 157464;
      break;
     }
     $104 = $ev$addr;
     $data2225 = ((($104)) + 8|0);
     $105 = HEAP32[$data2225>>2]|0;
     $conv226 = $105&255;
     $call227 = (_cht_CheckCheat(129700,$conv226)|0);
     $tobool228 = ($call227|0)!=(0);
     if ($tobool228) {
      $106 = HEAP32[100083]|0;
      $weaponowned230 = ((($106)) + 128|0);
      $arrayidx231 = ((($weaponowned230)) + 28|0);
      HEAP32[$arrayidx231>>2] = 1;
      $107 = HEAP32[100083]|0;
      $powers232 = ((($107)) + 52|0);
      HEAP32[$powers232>>2] = 1;
      $108 = HEAP32[100083]|0;
      $message234 = ((($108)) + 224|0);
      HEAP32[$message234>>2] = 157510;
      break;
     }
     $109 = $ev$addr;
     $data2236 = ((($109)) + 8|0);
     $110 = HEAP32[$data2236>>2]|0;
     $conv237 = $110&255;
     $call238 = (_cht_CheckCheat(129804,$conv237)|0);
     $tobool239 = ($call238|0)!=(0);
     if ($tobool239) {
      $111 = HEAP32[99415]|0;
      $arrayidx241 = (183056 + (($111*288)|0)|0);
      $112 = HEAP32[$arrayidx241>>2]|0;
      $angle = ((($112)) + 32|0);
      $113 = HEAP32[$angle>>2]|0;
      $114 = HEAP32[99415]|0;
      $arrayidx243 = (183056 + (($114*288)|0)|0);
      $115 = HEAP32[$arrayidx243>>2]|0;
      $x = ((($115)) + 12|0);
      $116 = HEAP32[$x>>2]|0;
      $117 = HEAP32[99415]|0;
      $arrayidx245 = (183056 + (($117*288)|0)|0);
      $118 = HEAP32[$arrayidx245>>2]|0;
      $y = ((($118)) + 16|0);
      $119 = HEAP32[$y>>2]|0;
      HEAP32[$vararg_buffer>>2] = $113;
      $vararg_ptr7 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $116;
      $vararg_ptr8 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr8>>2] = $119;
      (_M_snprintf(393968,52,157532,$vararg_buffer)|0);
      $120 = HEAP32[100083]|0;
      $message248 = ((($120)) + 224|0);
      HEAP32[$message248>>2] = 393968;
     }
    }
   } while(0);
   $121 = HEAP32[99433]|0;
   $tobool253 = ($121|0)!=(0);
   if (!($tobool253)) {
    $122 = $ev$addr;
    $data2255 = ((($122)) + 8|0);
    $123 = HEAP32[$data2255>>2]|0;
    $conv256 = $123&255;
    $call257 = (_cht_CheckCheat(129752,$conv256)|0);
    $tobool258 = ($call257|0)!=(0);
    if ($tobool258) {
     _cht_GetParam(129752,$buf260);
     $124 = HEAP32[32168]|0;
     $cmp262 = ($124|0)==(2);
     if ($cmp262) {
      $epsd = 1;
      $125 = HEAP8[$buf260>>0]|0;
      $conv266 = $125 << 24 >> 24;
      $sub267 = (($conv266) - 48)|0;
      $mul268 = ($sub267*10)|0;
      $arrayidx269 = ((($buf260)) + 1|0);
      $126 = HEAP8[$arrayidx269>>0]|0;
      $conv270 = $126 << 24 >> 24;
      $add271 = (($mul268) + ($conv270))|0;
      $sub272 = (($add271) - 48)|0;
      $map = $sub272;
     } else {
      $127 = HEAP8[$buf260>>0]|0;
      $conv275 = $127 << 24 >> 24;
      $sub276 = (($conv275) - 48)|0;
      $epsd = $sub276;
      $arrayidx277 = ((($buf260)) + 1|0);
      $128 = HEAP8[$arrayidx277>>0]|0;
      $conv278 = $128 << 24 >> 24;
      $sub279 = (($conv278) - 48)|0;
      $map = $sub279;
     }
     $129 = HEAP32[32169]|0;
     $cmp281 = ($129|0)==(9);
     if ($cmp281) {
      $epsd = 1;
     }
     $130 = $epsd;
     $cmp285 = ($130|0)<(1);
     if ($cmp285) {
      $retval = 0;
      $148 = $retval;
      STACKTOP = sp;return ($148|0);
     }
     $131 = $map;
     $cmp289 = ($131|0)<(1);
     if ($cmp289) {
      $retval = 0;
      $148 = $retval;
      STACKTOP = sp;return ($148|0);
     }
     $132 = HEAP32[32168]|0;
     $cmp293 = ($132|0)==(3);
     if ($cmp293) {
      $133 = $epsd;
      $cmp296 = ($133|0)>(4);
      $134 = $map;
      $cmp299 = ($134|0)>(9);
      $or$cond2 = $cmp296 | $cmp299;
      if ($or$cond2) {
       $retval = 0;
       $148 = $retval;
       STACKTOP = sp;return ($148|0);
      }
     }
     $135 = HEAP32[32168]|0;
     $cmp303 = ($135|0)==(1);
     if ($cmp303) {
      $136 = $epsd;
      $cmp306 = ($136|0)>(3);
      $137 = $map;
      $cmp309 = ($137|0)>(9);
      $or$cond3 = $cmp306 | $cmp309;
      if ($or$cond3) {
       $retval = 0;
       $148 = $retval;
       STACKTOP = sp;return ($148|0);
      }
     }
     $138 = HEAP32[32168]|0;
     $cmp313 = ($138|0)==(0);
     if ($cmp313) {
      $139 = $epsd;
      $cmp316 = ($139|0)>(1);
      $140 = $map;
      $cmp319 = ($140|0)>(9);
      $or$cond4 = $cmp316 | $cmp319;
      if ($or$cond4) {
       $retval = 0;
       $148 = $retval;
       STACKTOP = sp;return ($148|0);
      }
     }
     $141 = HEAP32[32168]|0;
     $cmp323 = ($141|0)==(2);
     if ($cmp323) {
      $142 = $epsd;
      $cmp326 = ($142|0)>(1);
      $143 = $map;
      $cmp329 = ($143|0)>(40);
      $or$cond5 = $cmp326 | $cmp329;
      if ($or$cond5) {
       $retval = 0;
       $148 = $retval;
       STACKTOP = sp;return ($148|0);
      }
     }
     $144 = HEAP32[100083]|0;
     $message333 = ((($144)) + 224|0);
     HEAP32[$message333>>2] = 157557;
     $145 = HEAP32[99425]|0;
     $146 = $epsd;
     $147 = $map;
     _G_DeferedInitNew($145,$146,$147);
    }
   }
  }
 }
 $retval = 0;
 $148 = $retval;
 STACKTOP = sp;return ($148|0);
}
function _ST_calcPainOffset() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp = 0, $cmp3 = 0, $cond = 0, $div = 0, $health = 0, $health1 = 0, $health2 = 0, $mul = 0, $mul4 = 0, $sub = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100083]|0;
 $health1 = ((($0)) + 40|0);
 $1 = HEAP32[$health1>>2]|0;
 $cmp = ($1|0)>(100);
 if ($cmp) {
  $cond = 100;
 } else {
  $2 = HEAP32[100083]|0;
  $health2 = ((($2)) + 40|0);
  $3 = HEAP32[$health2>>2]|0;
  $cond = $3;
 }
 $health = $cond;
 $4 = $health;
 $5 = HEAP32[32464]|0;
 $cmp3 = ($4|0)!=($5|0);
 if (!($cmp3)) {
  $8 = HEAP32[100084]|0;
  STACKTOP = sp;return ($8|0);
 }
 $6 = $health;
 $sub = (100 - ($6))|0;
 $mul = ($sub*5)|0;
 $div = (($mul|0) / 101)&-1;
 $mul4 = $div<<3;
 HEAP32[100084] = $mul4;
 $7 = $health;
 HEAP32[32464] = $7;
 $8 = HEAP32[100084]|0;
 STACKTOP = sp;return ($8|0);
}
function _ST_updateFaceWidget() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add101 = 0, $add119 = 0, $add32 = 0, $add58 = 0, $add62 = 0, $add64 = 0, $add82 = 0, $add85 = 0, $and = 0, $angle = 0, $angle44 = 0, $angle49 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx8 = 0, $attackdown = 0, $attacker = 0, $attacker25 = 0, $attacker35 = 0;
 var $attacker37 = 0, $badguyangle = 0, $bonuscount = 0, $call = 0, $call100 = 0, $call118 = 0, $call31 = 0, $call39 = 0, $call54 = 0, $call81 = 0, $call84 = 0, $cheats = 0, $cmp = 0, $cmp107 = 0, $cmp20 = 0, $cmp26 = 0, $cmp29 = 0, $cmp3 = 0, $cmp41 = 0, $cmp46 = 0;
 var $cmp51 = 0, $cmp55 = 0, $cmp7 = 0, $cmp70 = 0, $cmp78 = 0, $cmp89 = 0, $cmp9 = 0, $cmp94 = 0, $conv = 0, $conv52 = 0, $damagecount = 0, $damagecount73 = 0, $dec = 0, $dec121 = 0, $diffang = 0, $doevilgrin = 0, $health = 0, $health28 = 0, $health76 = 0, $i = 0;
 var $inc = 0, $powers = 0, $rem = 0, $sub = 0, $sub45 = 0, $sub50 = 0, $sub77 = 0, $tobool = 0, $tobool110 = 0, $tobool112 = 0, $tobool116 = 0, $tobool15 = 0, $tobool22 = 0, $tobool23 = 0, $tobool5 = 0, $tobool60 = 0, $tobool74 = 0, $tobool92 = 0, $tobool98 = 0, $weaponowned = 0;
 var $weaponowned11 = 0, $x = 0, $x36 = 0, $y = 0, $y38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100085]|0;
 $cmp = ($0|0)<(10);
 if ($cmp) {
  $1 = HEAP32[100083]|0;
  $health = ((($1)) + 40|0);
  $2 = HEAP32[$health>>2]|0;
  $tobool = ($2|0)!=(0);
  if (!($tobool)) {
   HEAP32[100085] = 9;
   HEAP32[100086] = 41;
   HEAP32[100087] = 1;
  }
 }
 $3 = HEAP32[100085]|0;
 $cmp3 = ($3|0)<(9);
 if ($cmp3) {
  $4 = HEAP32[100083]|0;
  $bonuscount = ((($4)) + 232|0);
  $5 = HEAP32[$bonuscount>>2]|0;
  $tobool5 = ($5|0)!=(0);
  if ($tobool5) {
   $doevilgrin = 0;
   $i = 0;
   while(1) {
    $6 = $i;
    $cmp7 = ($6|0)<(9);
    if (!($cmp7)) {
     break;
    }
    $7 = $i;
    $arrayidx = (394032 + ($7<<2)|0);
    $8 = HEAP32[$arrayidx>>2]|0;
    $9 = HEAP32[100083]|0;
    $weaponowned = ((($9)) + 128|0);
    $10 = $i;
    $arrayidx8 = (($weaponowned) + ($10<<2)|0);
    $11 = HEAP32[$arrayidx8>>2]|0;
    $cmp9 = ($8|0)!=($11|0);
    if ($cmp9) {
     $doevilgrin = 1;
     $12 = HEAP32[100083]|0;
     $weaponowned11 = ((($12)) + 128|0);
     $13 = $i;
     $arrayidx12 = (($weaponowned11) + ($13<<2)|0);
     $14 = HEAP32[$arrayidx12>>2]|0;
     $15 = $i;
     $arrayidx13 = (394032 + ($15<<2)|0);
     HEAP32[$arrayidx13>>2] = $14;
    }
    $16 = $i;
    $inc = (($16) + 1)|0;
    $i = $inc;
   }
   $17 = $doevilgrin;
   $tobool15 = ($17|0)!=(0);
   if ($tobool15) {
    HEAP32[100085] = 8;
    HEAP32[100087] = 70;
    $call = (_ST_calcPainOffset()|0);
    $add = (($call) + 6)|0;
    HEAP32[100086] = $add;
   }
  }
 }
 $18 = HEAP32[100085]|0;
 $cmp20 = ($18|0)<(8);
 do {
  if ($cmp20) {
   $19 = HEAP32[100083]|0;
   $damagecount = ((($19)) + 228|0);
   $20 = HEAP32[$damagecount>>2]|0;
   $tobool22 = ($20|0)!=(0);
   if ($tobool22) {
    $21 = HEAP32[100083]|0;
    $attacker = ((($21)) + 236|0);
    $22 = HEAP32[$attacker>>2]|0;
    $tobool23 = ($22|0)!=(0|0);
    if ($tobool23) {
     $23 = HEAP32[100083]|0;
     $attacker25 = ((($23)) + 236|0);
     $24 = HEAP32[$attacker25>>2]|0;
     $25 = HEAP32[100083]|0;
     $26 = HEAP32[$25>>2]|0;
     $cmp26 = ($24|0)!=($26|0);
     if ($cmp26) {
      HEAP32[100085] = 7;
      $27 = HEAP32[100083]|0;
      $health28 = ((($27)) + 40|0);
      $28 = HEAP32[$health28>>2]|0;
      $29 = HEAP32[32465]|0;
      $sub = (($28) - ($29))|0;
      $cmp29 = ($sub|0)>(20);
      if ($cmp29) {
       HEAP32[100087] = 35;
       $call31 = (_ST_calcPainOffset()|0);
       $add32 = (($call31) + 5)|0;
       HEAP32[100086] = $add32;
       break;
      }
      $30 = HEAP32[100083]|0;
      $31 = HEAP32[$30>>2]|0;
      $x = ((($31)) + 12|0);
      $32 = HEAP32[$x>>2]|0;
      $33 = HEAP32[100083]|0;
      $34 = HEAP32[$33>>2]|0;
      $y = ((($34)) + 16|0);
      $35 = HEAP32[$y>>2]|0;
      $36 = HEAP32[100083]|0;
      $attacker35 = ((($36)) + 236|0);
      $37 = HEAP32[$attacker35>>2]|0;
      $x36 = ((($37)) + 12|0);
      $38 = HEAP32[$x36>>2]|0;
      $39 = HEAP32[100083]|0;
      $attacker37 = ((($39)) + 236|0);
      $40 = HEAP32[$attacker37>>2]|0;
      $y38 = ((($40)) + 16|0);
      $41 = HEAP32[$y38>>2]|0;
      $call39 = (_R_PointToAngle2($32,$35,$38,$41)|0);
      $badguyangle = $call39;
      $42 = $badguyangle;
      $43 = HEAP32[100083]|0;
      $44 = HEAP32[$43>>2]|0;
      $angle = ((($44)) + 32|0);
      $45 = HEAP32[$angle>>2]|0;
      $cmp41 = ($42>>>0)>($45>>>0);
      if ($cmp41) {
       $46 = $badguyangle;
       $47 = HEAP32[100083]|0;
       $48 = HEAP32[$47>>2]|0;
       $angle44 = ((($48)) + 32|0);
       $49 = HEAP32[$angle44>>2]|0;
       $sub45 = (($46) - ($49))|0;
       $diffang = $sub45;
       $50 = $diffang;
       $cmp46 = ($50>>>0)>(2147483648);
       $conv = $cmp46&1;
       $i = $conv;
      } else {
       $51 = HEAP32[100083]|0;
       $52 = HEAP32[$51>>2]|0;
       $angle49 = ((($52)) + 32|0);
       $53 = HEAP32[$angle49>>2]|0;
       $54 = $badguyangle;
       $sub50 = (($53) - ($54))|0;
       $diffang = $sub50;
       $55 = $diffang;
       $cmp51 = ($55>>>0)<=(2147483648);
       $conv52 = $cmp51&1;
       $i = $conv52;
      }
      HEAP32[100087] = 35;
      $call54 = (_ST_calcPainOffset()|0);
      HEAP32[100086] = $call54;
      $56 = $diffang;
      $cmp55 = ($56>>>0)<(536870912);
      if ($cmp55) {
       $57 = HEAP32[100086]|0;
       $add58 = (($57) + 7)|0;
       HEAP32[100086] = $add58;
       break;
      }
      $58 = $i;
      $tobool60 = ($58|0)!=(0);
      $59 = HEAP32[100086]|0;
      if ($tobool60) {
       $add62 = (($59) + 3)|0;
       HEAP32[100086] = $add62;
       break;
      } else {
       $add64 = (($59) + 4)|0;
       HEAP32[100086] = $add64;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $60 = HEAP32[100085]|0;
 $cmp70 = ($60|0)<(7);
 do {
  if ($cmp70) {
   $61 = HEAP32[100083]|0;
   $damagecount73 = ((($61)) + 228|0);
   $62 = HEAP32[$damagecount73>>2]|0;
   $tobool74 = ($62|0)!=(0);
   if ($tobool74) {
    $63 = HEAP32[100083]|0;
    $health76 = ((($63)) + 40|0);
    $64 = HEAP32[$health76>>2]|0;
    $65 = HEAP32[32465]|0;
    $sub77 = (($64) - ($65))|0;
    $cmp78 = ($sub77|0)>(20);
    if ($cmp78) {
     HEAP32[100085] = 7;
     HEAP32[100087] = 35;
     $call81 = (_ST_calcPainOffset()|0);
     $add82 = (($call81) + 5)|0;
     HEAP32[100086] = $add82;
     break;
    } else {
     HEAP32[100085] = 6;
     HEAP32[100087] = 35;
     $call84 = (_ST_calcPainOffset()|0);
     $add85 = (($call84) + 7)|0;
     HEAP32[100086] = $add85;
     break;
    }
   }
  }
 } while(0);
 $66 = HEAP32[100085]|0;
 $cmp89 = ($66|0)<(6);
 do {
  if ($cmp89) {
   $67 = HEAP32[100083]|0;
   $attackdown = ((($67)) + 196|0);
   $68 = HEAP32[$attackdown>>2]|0;
   $tobool92 = ($68|0)!=(0);
   if (!($tobool92)) {
    HEAP32[32466] = -1;
    break;
   }
   $69 = HEAP32[32466]|0;
   $cmp94 = ($69|0)==(-1);
   if ($cmp94) {
    HEAP32[32466] = 70;
    break;
   }
   $70 = HEAP32[32466]|0;
   $dec = (($70) + -1)|0;
   HEAP32[32466] = $dec;
   $tobool98 = ($dec|0)!=(0);
   if (!($tobool98)) {
    HEAP32[100085] = 5;
    $call100 = (_ST_calcPainOffset()|0);
    $add101 = (($call100) + 7)|0;
    HEAP32[100086] = $add101;
    HEAP32[100087] = 1;
    HEAP32[32466] = 1;
   }
  }
 } while(0);
 $71 = HEAP32[100085]|0;
 $cmp107 = ($71|0)<(5);
 do {
  if ($cmp107) {
   $72 = HEAP32[100083]|0;
   $cheats = ((($72)) + 204|0);
   $73 = HEAP32[$cheats>>2]|0;
   $and = $73 & 2;
   $tobool110 = ($and|0)!=(0);
   if (!($tobool110)) {
    $74 = HEAP32[100083]|0;
    $powers = ((($74)) + 52|0);
    $75 = HEAP32[$powers>>2]|0;
    $tobool112 = ($75|0)!=(0);
    if (!($tobool112)) {
     break;
    }
   }
   HEAP32[100085] = 4;
   HEAP32[100086] = 40;
   HEAP32[100087] = 1;
  }
 } while(0);
 $76 = HEAP32[100087]|0;
 $tobool116 = ($76|0)!=(0);
 if ($tobool116) {
  $78 = HEAP32[100087]|0;
  $dec121 = (($78) + -1)|0;
  HEAP32[100087] = $dec121;
  STACKTOP = sp;return;
 }
 $call118 = (_ST_calcPainOffset()|0);
 $77 = HEAP32[100088]|0;
 $rem = (($77|0) % 3)&-1;
 $add119 = (($call118) + ($rem))|0;
 HEAP32[100086] = $add119;
 HEAP32[100087] = 17;
 HEAP32[100085] = 0;
 $78 = HEAP32[100087]|0;
 $dec121 = (($78) + -1)|0;
 HEAP32[100087] = $dec121;
 STACKTOP = sp;return;
}
function _ST_updateWidgets() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add14 = 0, $add33 = 0;
 var $ammo1 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx15 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx5 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cards = 0, $cards10 = 0, $cmp = 0, $cmp28 = 0, $cmp30 = 0, $cmp7 = 0, $cond = 0, $dec = 0, $frags = 0, $i = 0, $inc = 0;
 var $inc39 = 0, $land$ext = 0, $land$ext26 = 0, $lnot = 0, $lnot$ext = 0, $lnot20 = 0, $readyweapon = 0, $readyweapon2 = 0, $readyweapon6 = 0, $sub = 0, $tobool = 0, $tobool12 = 0, $tobool17 = 0, $tobool18 = 0, $tobool19 = 0, $tobool22 = 0, $tobool24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100083]|0;
 $readyweapon = ((($0)) + 120|0);
 $1 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($1*24)|0)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($2|0)==(5);
 if ($cmp) {
  HEAP32[(400372)>>2] = 129868;
 } else {
  $3 = HEAP32[100083]|0;
  $ammo1 = ((($3)) + 164|0);
  $4 = HEAP32[100083]|0;
  $readyweapon2 = ((($4)) + 120|0);
  $5 = HEAP32[$readyweapon2>>2]|0;
  $arrayidx3 = (512 + (($5*24)|0)|0);
  $6 = HEAP32[$arrayidx3>>2]|0;
  $arrayidx5 = (($ammo1) + ($6<<2)|0);
  HEAP32[(400372)>>2] = $arrayidx5;
 }
 $7 = HEAP32[100083]|0;
 $readyweapon6 = ((($7)) + 120|0);
 $8 = HEAP32[$readyweapon6>>2]|0;
 HEAP32[(400384)>>2] = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $cmp7 = ($9|0)<(3);
  if (!($cmp7)) {
   break;
  }
  $10 = HEAP32[100083]|0;
  $cards = ((($10)) + 76|0);
  $11 = $i;
  $arrayidx8 = (($cards) + ($11<<2)|0);
  $12 = HEAP32[$arrayidx8>>2]|0;
  $tobool = ($12|0)!=(0);
  $13 = $i;
  $cond = $tobool ? $13 : -1;
  $14 = $i;
  $arrayidx9 = (400388 + ($14<<2)|0);
  HEAP32[$arrayidx9>>2] = $cond;
  $15 = HEAP32[100083]|0;
  $cards10 = ((($15)) + 76|0);
  $16 = $i;
  $add = (($16) + 3)|0;
  $arrayidx11 = (($cards10) + ($add<<2)|0);
  $17 = HEAP32[$arrayidx11>>2]|0;
  $tobool12 = ($17|0)!=(0);
  if ($tobool12) {
   $18 = $i;
   $add14 = (($18) + 3)|0;
   $19 = $i;
   $arrayidx15 = (400388 + ($19<<2)|0);
   HEAP32[$arrayidx15>>2] = $add14;
  }
  $20 = $i;
  $inc = (($20) + 1)|0;
  $i = $inc;
 }
 _ST_updateFaceWidget();
 $21 = HEAP32[99430]|0;
 $tobool17 = ($21|0)!=(0);
 $lnot = $tobool17 ^ 1;
 $lnot$ext = $lnot&1;
 HEAP32[100100] = $lnot$ext;
 $22 = HEAP32[100079]|0;
 $tobool18 = ($22|0)!=(0);
 if ($tobool18) {
  $23 = HEAP32[99430]|0;
  $tobool19 = ($23|0)!=(0);
  $lnot20 = $tobool19 ^ 1;
  $24 = $lnot20;
 } else {
  $24 = 0;
 }
 $land$ext = $24&1;
 HEAP32[100101] = $land$ext;
 $25 = HEAP32[99430]|0;
 $tobool22 = ($25|0)!=(0);
 $26 = HEAP32[100079]|0;
 $tobool24 = ($26|0)!=(0);
 $27 = $tobool22 ? $tobool24 : 0;
 $land$ext26 = $27&1;
 HEAP32[100102] = $land$ext26;
 HEAP32[100103] = 0;
 $i = 0;
 while(1) {
  $28 = $i;
  $cmp28 = ($28|0)<(4);
  if (!($cmp28)) {
   break;
  }
  $29 = $i;
  $30 = HEAP32[99415]|0;
  $cmp30 = ($29|0)!=($30|0);
  $31 = HEAP32[100083]|0;
  $frags = ((($31)) + 104|0);
  $32 = $i;
  $arrayidx32 = (($frags) + ($32<<2)|0);
  $33 = HEAP32[$arrayidx32>>2]|0;
  $34 = HEAP32[100103]|0;
  if ($cmp30) {
   $add33 = (($34) + ($33))|0;
   HEAP32[100103] = $add33;
  } else {
   $sub = (($34) - ($33))|0;
   HEAP32[100103] = $sub;
  }
  $35 = $i;
  $inc39 = (($35) + 1)|0;
  $i = $inc39;
 }
 $36 = HEAP32[100104]|0;
 $dec = (($36) + -1)|0;
 HEAP32[100104] = $dec;
 STACKTOP = sp;return;
}
function _ST_Ticker() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $health = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100105]|0;
 $inc = (($0) + 1)|0;
 HEAP32[100105] = $inc;
 $call = (_M_Random()|0);
 HEAP32[100088] = $call;
 _ST_updateWidgets();
 $1 = HEAP32[100083]|0;
 $health = ((($1)) + 40|0);
 $2 = HEAP32[$health>>2]|0;
 HEAP32[32465] = $2;
 return;
}
function _ST_doPaletteStuff() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add11 = 0, $add15 = 0, $add20 = 0, $and = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx23 = 0;
 var $arrayidx26 = 0, $bonuscount = 0, $bonuscount14 = 0, $bzc = 0, $call = 0, $cmp = 0, $cmp17 = 0, $cmp24 = 0, $cmp33 = 0, $cmp34 = 0, $cmp36 = 0, $cmp39 = 0, $cmp8 = 0, $cnt = 0, $damagecount = 0, $mul = 0, $or$cond = 0, $or$cond2 = 0, $pal = 0, $palette = 0;
 var $powers = 0, $powers1 = 0, $powers22 = 0, $powers25 = 0, $shr = 0, $shr16 = 0, $shr7 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $tobool = 0, $tobool12 = 0, $tobool27 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100083]|0;
 $damagecount = ((($0)) + 228|0);
 $1 = HEAP32[$damagecount>>2]|0;
 $cnt = $1;
 $2 = HEAP32[100083]|0;
 $powers = ((($2)) + 52|0);
 $arrayidx = ((($powers)) + 4|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $tobool = ($3|0)!=(0);
 if ($tobool) {
  $4 = HEAP32[100083]|0;
  $powers1 = ((($4)) + 52|0);
  $arrayidx2 = ((($powers1)) + 4|0);
  $5 = HEAP32[$arrayidx2>>2]|0;
  $shr = $5 >> 6;
  $sub = (12 - ($shr))|0;
  $bzc = $sub;
  $6 = $bzc;
  $7 = $cnt;
  $cmp = ($6|0)>($7|0);
  if ($cmp) {
   $8 = $bzc;
   $cnt = $8;
  }
 }
 $9 = $cnt;
 $tobool5 = ($9|0)!=(0);
 do {
  if ($tobool5) {
   $10 = $cnt;
   $add = (($10) + 7)|0;
   $shr7 = $add >> 3;
   $palette = $shr7;
   $11 = $palette;
   $cmp8 = ($11|0)>=(8);
   $spec$store$select = $cmp8 ? 7 : $shr7;
   $palette = $spec$store$select;
   $12 = $palette;
   $add11 = (($12) + 1)|0;
   $palette = $add11;
  } else {
   $13 = HEAP32[100083]|0;
   $bonuscount = ((($13)) + 232|0);
   $14 = HEAP32[$bonuscount>>2]|0;
   $tobool12 = ($14|0)!=(0);
   $15 = HEAP32[100083]|0;
   if ($tobool12) {
    $bonuscount14 = ((($15)) + 232|0);
    $16 = HEAP32[$bonuscount14>>2]|0;
    $add15 = (($16) + 7)|0;
    $shr16 = $add15 >> 3;
    $palette = $shr16;
    $17 = $palette;
    $cmp17 = ($17|0)>=(4);
    $spec$store$select1 = $cmp17 ? 3 : $shr16;
    $palette = $spec$store$select1;
    $18 = $palette;
    $add20 = (($18) + 9)|0;
    $palette = $add20;
    break;
   }
   $powers22 = ((($15)) + 52|0);
   $arrayidx23 = ((($powers22)) + 12|0);
   $19 = HEAP32[$arrayidx23>>2]|0;
   $cmp24 = ($19|0)>(128);
   if (!($cmp24)) {
    $20 = HEAP32[100083]|0;
    $powers25 = ((($20)) + 52|0);
    $arrayidx26 = ((($powers25)) + 12|0);
    $21 = HEAP32[$arrayidx26>>2]|0;
    $and = $21 & 8;
    $tobool27 = ($and|0)!=(0);
    if (!($tobool27)) {
     $palette = 0;
     break;
    }
   }
   $palette = 13;
  }
 } while(0);
 $22 = HEAP32[32169]|0;
 $cmp33 = ($22|0)==(9);
 $23 = $palette;
 $cmp34 = ($23|0)>=(1);
 $or$cond = $cmp33 & $cmp34;
 $24 = $palette;
 $cmp36 = ($24|0)<(9);
 $or$cond2 = $or$cond & $cmp36;
 if ($or$cond2) {
  $palette = 13;
 }
 $25 = $palette;
 $26 = HEAP32[100106]|0;
 $cmp39 = ($25|0)!=($26|0);
 if (!($cmp39)) {
  STACKTOP = sp;return;
 }
 $27 = $palette;
 HEAP32[100106] = $27;
 $28 = HEAP32[100107]|0;
 $call = (_W_CacheLumpNum($28,8)|0);
 $29 = $palette;
 $mul = ($29*768)|0;
 $add$ptr = (($call) + ($mul)|0);
 $pal = $add$ptr;
 $30 = $pal;
 _I_SetPalette($30);
 STACKTOP = sp;return;
}
function _ST_drawWidgets($refresh) {
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx18 = 0, $arrayidx7 = 0, $cmp = 0, $cmp16 = 0, $cmp9 = 0, $i = 0, $inc = 0, $inc13 = 0, $inc20 = 0, $land$ext = 0, $land$ext6 = 0, $lnot = 0;
 var $refresh$addr = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $refresh$addr = $refresh;
 $0 = HEAP32[100079]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = HEAP32[99430]|0;
  $tobool1 = ($1|0)!=(0);
  $lnot = $tobool1 ^ 1;
  $2 = $lnot;
 } else {
  $2 = 0;
 }
 $land$ext = $2&1;
 HEAP32[100101] = $land$ext;
 $3 = HEAP32[99430]|0;
 $tobool2 = ($3|0)!=(0);
 $4 = HEAP32[100079]|0;
 $tobool4 = ($4|0)!=(0);
 $5 = $tobool2 ? $tobool4 : 0;
 $land$ext6 = $5&1;
 HEAP32[100102] = $land$ext6;
 $6 = $refresh$addr;
 _STlib_updateNum(400356,$6);
 $i = 0;
 while(1) {
  $7 = $i;
  $cmp = ($7|0)<(4);
  if (!($cmp)) {
   break;
  }
  $8 = $i;
  $arrayidx = (394080 + ($8<<5)|0);
  $9 = $refresh$addr;
  _STlib_updateNum($arrayidx,$9);
  $10 = $i;
  $arrayidx7 = (394208 + ($10<<5)|0);
  $11 = $refresh$addr;
  _STlib_updateNum($arrayidx7,$11);
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $13 = $refresh$addr;
 _STlib_updatePercent(400432,$13);
 $14 = $refresh$addr;
 _STlib_updatePercent(400468,$14);
 $15 = $refresh$addr;
 _STlib_updateBinIcon(400504,$15);
 $i = 0;
 while(1) {
  $16 = $i;
  $cmp9 = ($16|0)<(6);
  if (!($cmp9)) {
   break;
  }
  $17 = $i;
  $arrayidx11 = (394336 + (($17*28)|0)|0);
  $18 = $refresh$addr;
  _STlib_updateMultIcon($arrayidx11,$18);
  $19 = $i;
  $inc13 = (($19) + 1)|0;
  $i = $inc13;
 }
 $20 = $refresh$addr;
 _STlib_updateMultIcon(400532,$20);
 $i = 0;
 while(1) {
  $21 = $i;
  $cmp16 = ($21|0)<(3);
  if (!($cmp16)) {
   break;
  }
  $22 = $i;
  $arrayidx18 = (394512 + (($22*28)|0)|0);
  $23 = $refresh$addr;
  _STlib_updateMultIcon($arrayidx18,$23);
  $24 = $i;
  $inc20 = (($24) + 1)|0;
  $i = $inc20;
 }
 $25 = $refresh$addr;
 _STlib_updateNum(400560,$25);
 STACKTOP = sp;return;
}
function _ST_doRefresh() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100082] = 0;
 _ST_refreshBackground();
 _ST_drawWidgets(1);
 return;
}
function _ST_diffDraw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ST_drawWidgets(0);
 return;
}
function _ST_Drawer($fullscreen,$refresh) {
 $fullscreen = $fullscreen|0;
 $refresh = $refresh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $fullscreen$addr = 0, $lor$ext = 0, $lor$ext6 = 0, $refresh$addr = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool4 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fullscreen$addr = $fullscreen;
 $refresh$addr = $refresh;
 $0 = $fullscreen$addr;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[99316]|0;
 $tobool1 = ($1|0)!=(0);
 $2 = $tobool ? $tobool1 : 1;
 $lor$ext = $2&1;
 HEAP32[100079] = $lor$ext;
 $3 = HEAP32[100082]|0;
 $tobool2 = ($3|0)!=(0);
 $4 = $refresh$addr;
 $tobool4 = ($4|0)!=(0);
 $5 = $tobool2 ? 1 : $tobool4;
 $lor$ext6 = $5&1;
 HEAP32[100082] = $lor$ext6;
 _ST_doPaletteStuff();
 $6 = HEAP32[100082]|0;
 $tobool7 = ($6|0)!=(0);
 if ($tobool7) {
  _ST_doRefresh();
  STACKTOP = sp;return;
 } else {
  _ST_diffDraw();
  STACKTOP = sp;return;
 }
}
function _ST_loadGraphics() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ST_loadUnloadGraphics(162);
 return;
}
function _ST_loadCallback($lumpname,$variable) {
 $lumpname = $lumpname|0;
 $variable = $variable|0;
 var $0 = 0, $1 = 0, $call = 0, $lumpname$addr = 0, $variable$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lumpname$addr = $lumpname;
 $variable$addr = $variable;
 $0 = $lumpname$addr;
 $call = (_W_CacheLumpName($0,1)|0);
 $1 = $variable$addr;
 HEAP32[$1>>2] = $call;
 STACKTOP = sp;return;
}
function _ST_loadUnloadGraphics($callback) {
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add24 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx22 = 0, $arrayidx25 = 0, $arrayidx26 = 0, $arrayidx27 = 0, $arrayidx43 = 0, $arrayidx5 = 0, $arrayidx51 = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx66 = 0, $arrayidx71 = 0, $arrayidx76 = 0, $arrayidx78 = 0, $callback$addr = 0, $cmp = 0, $cmp17 = 0;
 var $cmp35 = 0, $cmp38 = 0, $cmp7 = 0, $facenum = 0, $i = 0, $inc = 0, $inc14 = 0, $inc29 = 0, $inc44 = 0, $inc46 = 0, $inc52 = 0, $inc57 = 0, $inc62 = 0, $inc67 = 0, $inc72 = 0, $inc74 = 0, $inc77 = 0, $inc79 = 0, $j = 0, $namebuf = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $namebuf = sp + 100|0;
 $callback$addr = $callback;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(10);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  HEAP32[$vararg_buffer>>2] = $1;
  (_snprintf($namebuf,9,157575,$vararg_buffer)|0);
  $2 = $callback$addr;
  $3 = $i;
  $arrayidx = (394608 + ($3<<2)|0);
  FUNCTION_TABLE_vii[$2 & 255]($namebuf,$arrayidx);
  $4 = $i;
  HEAP32[$vararg_buffer1>>2] = $4;
  (_snprintf($namebuf,9,157584,$vararg_buffer1)|0);
  $5 = $callback$addr;
  $6 = $i;
  $arrayidx5 = (394656 + ($6<<2)|0);
  FUNCTION_TABLE_vii[$5 & 255]($namebuf,$arrayidx5);
  $7 = $i;
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 $8 = $callback$addr;
 FUNCTION_TABLE_vii[$8 & 255](157594,400592);
 $i = 0;
 while(1) {
  $9 = $i;
  $cmp7 = ($9|0)<(6);
  if (!($cmp7)) {
   break;
  }
  $10 = $i;
  HEAP32[$vararg_buffer4>>2] = $10;
  (_snprintf($namebuf,9,157603,$vararg_buffer4)|0);
  $11 = $callback$addr;
  $12 = $i;
  $arrayidx12 = (394704 + ($12<<2)|0);
  FUNCTION_TABLE_vii[$11 & 255]($namebuf,$arrayidx12);
  $13 = $i;
  $inc14 = (($13) + 1)|0;
  $i = $inc14;
 }
 $14 = $callback$addr;
 FUNCTION_TABLE_vii[$14 & 255](157612,400596);
 $i = 0;
 while(1) {
  $15 = $i;
  $cmp17 = ($15|0)<(6);
  if (!($cmp17)) {
   break;
  }
  $16 = $i;
  $add = (($16) + 2)|0;
  HEAP32[$vararg_buffer7>>2] = $add;
  (_snprintf($namebuf,9,157619,$vararg_buffer7)|0);
  $17 = $callback$addr;
  $18 = $i;
  $arrayidx22 = (394736 + ($18<<3)|0);
  FUNCTION_TABLE_vii[$17 & 255]($namebuf,$arrayidx22);
  $19 = $i;
  $add24 = (($19) + 2)|0;
  $arrayidx25 = (394656 + ($add24<<2)|0);
  $20 = HEAP32[$arrayidx25>>2]|0;
  $21 = $i;
  $arrayidx26 = (394736 + ($21<<3)|0);
  $arrayidx27 = ((($arrayidx26)) + 4|0);
  HEAP32[$arrayidx27>>2] = $20;
  $22 = $i;
  $inc29 = (($22) + 1)|0;
  $i = $inc29;
 }
 $23 = HEAP32[99415]|0;
 HEAP32[$vararg_buffer10>>2] = $23;
 (_snprintf($namebuf,9,157628,$vararg_buffer10)|0);
 $24 = $callback$addr;
 FUNCTION_TABLE_vii[$24 & 255]($namebuf,400324);
 $25 = $callback$addr;
 FUNCTION_TABLE_vii[$25 & 255](157635,400320);
 $facenum = 0;
 $i = 0;
 while(1) {
  $26 = $i;
  $cmp35 = ($26|0)<(5);
  if (!($cmp35)) {
   break;
  }
  $j = 0;
  while(1) {
   $27 = $j;
   $cmp38 = ($27|0)<(3);
   $28 = $i;
   if (!($cmp38)) {
    break;
   }
   $29 = $j;
   HEAP32[$vararg_buffer13>>2] = $28;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $29;
   (_snprintf($namebuf,9,157641,$vararg_buffer13)|0);
   $30 = $callback$addr;
   $31 = $facenum;
   $arrayidx43 = (394784 + ($31<<2)|0);
   FUNCTION_TABLE_vii[$30 & 255]($namebuf,$arrayidx43);
   $32 = $facenum;
   $inc44 = (($32) + 1)|0;
   $facenum = $inc44;
   $33 = $j;
   $inc46 = (($33) + 1)|0;
   $j = $inc46;
  }
  HEAP32[$vararg_buffer17>>2] = $28;
  (_snprintf($namebuf,9,157651,$vararg_buffer17)|0);
  $34 = $callback$addr;
  $35 = $facenum;
  $arrayidx51 = (394784 + ($35<<2)|0);
  FUNCTION_TABLE_vii[$34 & 255]($namebuf,$arrayidx51);
  $36 = $facenum;
  $inc52 = (($36) + 1)|0;
  $facenum = $inc52;
  $37 = $i;
  HEAP32[$vararg_buffer20>>2] = $37;
  (_snprintf($namebuf,9,157660,$vararg_buffer20)|0);
  $38 = $callback$addr;
  $39 = $facenum;
  $arrayidx56 = (394784 + ($39<<2)|0);
  FUNCTION_TABLE_vii[$38 & 255]($namebuf,$arrayidx56);
  $40 = $facenum;
  $inc57 = (($40) + 1)|0;
  $facenum = $inc57;
  $41 = $i;
  HEAP32[$vararg_buffer23>>2] = $41;
  (_snprintf($namebuf,9,157669,$vararg_buffer23)|0);
  $42 = $callback$addr;
  $43 = $facenum;
  $arrayidx61 = (394784 + ($43<<2)|0);
  FUNCTION_TABLE_vii[$42 & 255]($namebuf,$arrayidx61);
  $44 = $facenum;
  $inc62 = (($44) + 1)|0;
  $facenum = $inc62;
  $45 = $i;
  HEAP32[$vararg_buffer26>>2] = $45;
  (_snprintf($namebuf,9,157679,$vararg_buffer26)|0);
  $46 = $callback$addr;
  $47 = $facenum;
  $arrayidx66 = (394784 + ($47<<2)|0);
  FUNCTION_TABLE_vii[$46 & 255]($namebuf,$arrayidx66);
  $48 = $facenum;
  $inc67 = (($48) + 1)|0;
  $facenum = $inc67;
  $49 = $i;
  HEAP32[$vararg_buffer29>>2] = $49;
  (_snprintf($namebuf,9,157688,$vararg_buffer29)|0);
  $50 = $callback$addr;
  $51 = $facenum;
  $arrayidx71 = (394784 + ($51<<2)|0);
  FUNCTION_TABLE_vii[$50 & 255]($namebuf,$arrayidx71);
  $52 = $facenum;
  $inc72 = (($52) + 1)|0;
  $facenum = $inc72;
  $53 = $i;
  $inc74 = (($53) + 1)|0;
  $i = $inc74;
 }
 $54 = $callback$addr;
 $55 = $facenum;
 $arrayidx76 = (394784 + ($55<<2)|0);
 FUNCTION_TABLE_vii[$54 & 255](157698,$arrayidx76);
 $56 = $facenum;
 $inc77 = (($56) + 1)|0;
 $facenum = $inc77;
 $57 = $callback$addr;
 $58 = $facenum;
 $arrayidx78 = (394784 + ($58<<2)|0);
 FUNCTION_TABLE_vii[$57 & 255](158255,$arrayidx78);
 $59 = $facenum;
 $inc79 = (($59) + 1)|0;
 $facenum = $inc79;
 STACKTOP = sp;return;
}
function _ST_loadData() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_W_GetNumForName(157989)|0);
 HEAP32[100107] = $call;
 _ST_loadGraphics();
 return;
}
function _ST_initData() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx6 = 0, $cmp = 0, $cmp4 = 0, $i = 0, $inc = 0, $inc8 = 0, $weaponowned = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[100082] = 1;
 $0 = HEAP32[99415]|0;
 $arrayidx = (183056 + (($0*288)|0)|0);
 HEAP32[100083] = $arrayidx;
 HEAP32[100105] = 0;
 HEAP32[100079] = 1;
 HEAP32[100086] = 0;
 HEAP32[100106] = -1;
 HEAP32[32465] = -1;
 $i = 0;
 while(1) {
  $1 = $i;
  $cmp = ($1|0)<(9);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[100083]|0;
  $weaponowned = ((($2)) + 128|0);
  $3 = $i;
  $arrayidx1 = (($weaponowned) + ($3<<2)|0);
  $4 = HEAP32[$arrayidx1>>2]|0;
  $5 = $i;
  $arrayidx2 = (394032 + ($5<<2)|0);
  HEAP32[$arrayidx2>>2] = $4;
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $cmp4 = ($7|0)<(3);
  if (!($cmp4)) {
   break;
  }
  $8 = $i;
  $arrayidx6 = (400388 + ($8<<2)|0);
  HEAP32[$arrayidx6>>2] = -1;
  $9 = $i;
  $inc8 = (($9) + 1)|0;
  $i = $inc8;
 }
 _STlib_init();
 STACKTOP = sp;return;
}
function _ST_createWidgets() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add6 = 0, $add8 = 0, $ammo = 0, $ammo10 = 0, $ammo12 = 0, $ammo14 = 0, $ammo16 = 0, $armorpoints = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx15 = 0, $arrayidx17 = 0;
 var $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $div = 0, $health = 0, $i = 0, $inc = 0, $maxammo = 0, $maxammo19 = 0, $maxammo21 = 0, $maxammo23 = 0, $mul = 0, $mul5 = 0, $readyweapon = 0, $readyweapon3 = 0;
 var $rem = 0, $weaponowned = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100083]|0;
 $ammo = ((($0)) + 164|0);
 $1 = HEAP32[100083]|0;
 $readyweapon = ((($1)) + 120|0);
 $2 = HEAP32[$readyweapon>>2]|0;
 $arrayidx = (512 + (($2*24)|0)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 $arrayidx2 = (($ammo) + ($3<<2)|0);
 _STlib_initNum(400356,44,171,394608,$arrayidx2,400316,3);
 $4 = HEAP32[100083]|0;
 $readyweapon3 = ((($4)) + 120|0);
 $5 = HEAP32[$readyweapon3>>2]|0;
 HEAP32[(400384)>>2] = $5;
 $6 = HEAP32[100083]|0;
 $health = ((($6)) + 40|0);
 $7 = HEAP32[100148]|0;
 _STlib_initPercent(400432,90,171,394608,$health,400316,$7);
 $8 = HEAP32[100149]|0;
 _STlib_initBinIcon(400504,104,168,$8,400400,400316);
 $i = 0;
 while(1) {
  $9 = $i;
  $cmp = ($9|0)<(6);
  if (!($cmp)) {
   break;
  }
  $10 = $i;
  $arrayidx4 = (394336 + (($10*28)|0)|0);
  $11 = $i;
  $rem = (($11|0) % 3)&-1;
  $mul = ($rem*12)|0;
  $add = (111 + ($mul))|0;
  $12 = $i;
  $div = (($12|0) / 3)&-1;
  $mul5 = ($div*10)|0;
  $add6 = (172 + ($mul5))|0;
  $13 = $i;
  $arrayidx7 = (394736 + ($13<<3)|0);
  $14 = HEAP32[100083]|0;
  $weaponowned = ((($14)) + 128|0);
  $15 = $i;
  $add8 = (($15) + 1)|0;
  $arrayidx9 = (($weaponowned) + ($add8<<2)|0);
  _STlib_initMultIcon($arrayidx4,$add,$add6,$arrayidx7,$arrayidx9,400404);
  $16 = $i;
  $inc = (($16) + 1)|0;
  $i = $inc;
 }
 _STlib_initNum(400560,138,171,394608,400412,400408,2);
 _STlib_initMultIcon(400532,143,168,394784,400344,400316);
 $17 = HEAP32[100083]|0;
 $armorpoints = ((($17)) + 44|0);
 $18 = HEAP32[100148]|0;
 _STlib_initPercent(400468,221,171,394608,$armorpoints,400316,$18);
 _STlib_initMultIcon(394512,239,171,394704,400388,400316);
 _STlib_initMultIcon((394540),239,181,394704,(400392),400316);
 _STlib_initMultIcon((394568),239,191,394704,(400396),400316);
 $19 = HEAP32[100083]|0;
 $ammo10 = ((($19)) + 164|0);
 _STlib_initNum(394080,288,173,394656,$ammo10,400316,3);
 $20 = HEAP32[100083]|0;
 $ammo12 = ((($20)) + 164|0);
 $arrayidx13 = ((($ammo12)) + 4|0);
 _STlib_initNum((394112),288,179,394656,$arrayidx13,400316,3);
 $21 = HEAP32[100083]|0;
 $ammo14 = ((($21)) + 164|0);
 $arrayidx15 = ((($ammo14)) + 8|0);
 _STlib_initNum((394144),288,191,394656,$arrayidx15,400316,3);
 $22 = HEAP32[100083]|0;
 $ammo16 = ((($22)) + 164|0);
 $arrayidx17 = ((($ammo16)) + 12|0);
 _STlib_initNum((394176),288,185,394656,$arrayidx17,400316,3);
 $23 = HEAP32[100083]|0;
 $maxammo = ((($23)) + 180|0);
 _STlib_initNum(394208,314,173,394656,$maxammo,400316,3);
 $24 = HEAP32[100083]|0;
 $maxammo19 = ((($24)) + 180|0);
 $arrayidx20 = ((($maxammo19)) + 4|0);
 _STlib_initNum((394240),314,179,394656,$arrayidx20,400316,3);
 $25 = HEAP32[100083]|0;
 $maxammo21 = ((($25)) + 180|0);
 $arrayidx22 = ((($maxammo21)) + 8|0);
 _STlib_initNum((394272),314,191,394656,$arrayidx22,400316,3);
 $26 = HEAP32[100083]|0;
 $maxammo23 = ((($26)) + 180|0);
 $arrayidx24 = ((($maxammo23)) + 12|0);
 _STlib_initNum((394304),314,185,394656,$arrayidx24,400316,3);
 STACKTOP = sp;return;
}
function _ST_Start() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32468]|0;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  _ST_Stop();
 }
 _ST_initData();
 _ST_createWidgets();
 HEAP32[32468] = 0;
 return;
}
function _ST_Stop() {
 var $0 = 0, $1 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32468]|0;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  return;
 }
 $1 = HEAP32[100107]|0;
 $call = (_W_CacheLumpNum($1,8)|0);
 _I_SetPalette($call);
 HEAP32[32468] = 1;
 return;
}
function _ST_Init() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ST_loadData();
 $call = (_Z_Malloc(10240,1,0)|0);
 HEAP32[100078] = $call;
 return;
}
function _S_Init($sfxVolume,$musicVolume) {
 $sfxVolume = $sfxVolume|0;
 $musicVolume = $musicVolume|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx5 = 0, $call = 0, $cmp = 0, $cmp2 = 0, $i = 0, $inc = 0;
 var $inc7 = 0, $lumpnum = 0, $mul = 0, $musicVolume$addr = 0, $sfxVolume$addr = 0, $usefulness = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sfxVolume$addr = $sfxVolume;
 $musicVolume$addr = $musicVolume;
 _I_PrecacheSounds(52768,109);
 $0 = $sfxVolume$addr;
 _S_SetSfxVolume($0);
 $1 = $musicVolume$addr;
 _S_SetMusicVolume($1);
 $2 = HEAP32[32471]|0;
 $mul = ($2*12)|0;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[100150] = $call;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[32471]|0;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = HEAP32[100150]|0;
  $6 = $i;
  $arrayidx = (($5) + (($6*12)|0)|0);
  HEAP32[$arrayidx>>2] = 0;
  $7 = $i;
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 HEAP32[100151] = 0;
 $i = 1;
 while(1) {
  $8 = $i;
  $cmp2 = ($8|0)<(109);
  if (!($cmp2)) {
   break;
  }
  $9 = $i;
  $arrayidx4 = (52768 + (($9*48)|0)|0);
  $usefulness = ((($arrayidx4)) + 32|0);
  HEAP32[$usefulness>>2] = -1;
  $10 = $i;
  $arrayidx5 = (52768 + (($10*48)|0)|0);
  $lumpnum = ((($arrayidx5)) + 36|0);
  HEAP32[$lumpnum>>2] = -1;
  $11 = $i;
  $inc7 = (($11) + 1)|0;
  $i = $inc7;
 }
 _I_AtExit(163,1);
 STACKTOP = sp;return;
}
function _S_SetSfxVolume($volume) {
 $volume = $volume|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp1 = 0, $or$cond = 0, $vararg_buffer = 0, $volume$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $volume$addr = $volume;
 $0 = $volume$addr;
 $cmp = ($0|0)<(0);
 $1 = $volume$addr;
 $cmp1 = ($1|0)>(127);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $2 = $volume$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(157740,$vararg_buffer);
 }
 $3 = $volume$addr;
 HEAP32[100152] = $3;
 STACKTOP = sp;return;
}
function _S_SetMusicVolume($volume) {
 $volume = $volume|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp1 = 0, $or$cond = 0, $vararg_buffer = 0, $volume$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $volume$addr = $volume;
 $0 = $volume$addr;
 $cmp = ($0|0)<(0);
 $1 = $volume$addr;
 $cmp1 = ($1|0)>(127);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $2 = $volume$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(157706,$vararg_buffer);
 }
 $3 = $volume$addr;
 _I_SetMusicVolume($3);
 STACKTOP = sp;return;
}
function _S_Shutdown() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _I_ShutdownSound();
 _I_ShutdownMusic();
 return;
}
function _S_Start() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add6 = 0, $add7 = 0, $arrayidx = 0, $arrayidx11 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cnum = 0, $inc = 0, $mnum = 0, $mul = 0, $spmus = 0, $sub = 0, $sub10 = 0, $sub5 = 0, $sub8 = 0, $tobool = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $spmus = sp;
 $cnum = 0;
 while(1) {
  $0 = $cnum;
  $1 = HEAP32[32471]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[100150]|0;
  $3 = $cnum;
  $arrayidx = (($2) + (($3*12)|0)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($4|0)!=(0|0);
  if ($tobool) {
   $5 = $cnum;
   _S_StopChannel($5);
  }
  $6 = $cnum;
  $inc = (($6) + 1)|0;
  $cnum = $inc;
 }
 HEAP32[100151] = 0;
 $7 = HEAP32[32168]|0;
 $cmp1 = ($7|0)==(2);
 if ($cmp1) {
  $8 = HEAP32[99423]|0;
  $add = (33 + ($8))|0;
  $sub = (($add) - 1)|0;
  $mnum = $sub;
  $14 = $mnum;
  _S_ChangeMusic($14,1);
  STACKTOP = sp;return;
 }
 dest=$spmus; src=58368; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = HEAP32[99424]|0;
 $cmp3 = ($9|0)<(4);
 if ($cmp3) {
  $10 = HEAP32[99424]|0;
  $sub5 = (($10) - 1)|0;
  $mul = ($sub5*9)|0;
  $add6 = (1 + ($mul))|0;
  $11 = HEAP32[99423]|0;
  $add7 = (($add6) + ($11))|0;
  $sub8 = (($add7) - 1)|0;
  $mnum = $sub8;
  $14 = $mnum;
  _S_ChangeMusic($14,1);
  STACKTOP = sp;return;
 } else {
  $12 = HEAP32[99423]|0;
  $sub10 = (($12) - 1)|0;
  $arrayidx11 = (($spmus) + ($sub10<<2)|0);
  $13 = HEAP32[$arrayidx11>>2]|0;
  $mnum = $13;
  $14 = $mnum;
  _S_ChangeMusic($14,1);
  STACKTOP = sp;return;
 }
}
function _S_StopChannel($cnum) {
 $cnum = $cnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx6 = 0, $c = 0, $call = 0, $cmp = 0, $cmp4 = 0, $cmp8 = 0, $cnum$addr = 0, $dec = 0, $handle = 0, $handle3 = 0, $i = 0, $inc = 0, $tobool = 0, $tobool1 = 0, $usefulness = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cnum$addr = $cnum;
 $0 = HEAP32[100150]|0;
 $1 = $cnum$addr;
 $arrayidx = (($0) + (($1*12)|0)|0);
 $c = $arrayidx;
 $2 = $c;
 $3 = HEAP32[$2>>2]|0;
 $tobool = ($3|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $4 = $c;
 $handle = ((($4)) + 8|0);
 $5 = HEAP32[$handle>>2]|0;
 $call = (_I_SoundIsPlaying($5)|0);
 $tobool1 = ($call|0)!=(0);
 if ($tobool1) {
  $6 = $c;
  $handle3 = ((($6)) + 8|0);
  $7 = HEAP32[$handle3>>2]|0;
  _I_StopSound($7);
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = HEAP32[32471]|0;
  $cmp = ($8|0)<($9|0);
  if (!($cmp)) {
   break;
  }
  $10 = $cnum$addr;
  $11 = $i;
  $cmp4 = ($10|0)!=($11|0);
  if ($cmp4) {
   $12 = $c;
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[100150]|0;
   $15 = $i;
   $arrayidx6 = (($14) + (($15*12)|0)|0);
   $16 = HEAP32[$arrayidx6>>2]|0;
   $cmp8 = ($13|0)==($16|0);
   if ($cmp8) {
    break;
   }
  }
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 $18 = $c;
 $19 = HEAP32[$18>>2]|0;
 $usefulness = ((($19)) + 32|0);
 $20 = HEAP32[$usefulness>>2]|0;
 $dec = (($20) + -1)|0;
 HEAP32[$usefulness>>2] = $dec;
 $21 = $c;
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function _S_ChangeMusic($musicnum,$looping) {
 $musicnum = $musicnum|0;
 $looping = $looping|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call13 = 0, $call17 = 0, $call20 = 0, $call21 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $data = 0, $data18 = 0, $handle = 0, $handle22 = 0;
 var $looping$addr = 0, $lumpnum = 0, $lumpnum14 = 0, $lumpnum16 = 0, $lumpnum19 = 0, $music = 0, $musicnum$addr = 0, $namebuf = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $namebuf = sp + 28|0;
 $musicnum$addr = $musicnum;
 $looping$addr = $looping;
 $music = 0;
 $0 = $musicnum$addr;
 $cmp = ($0|0)==(29);
 if ($cmp) {
  $1 = HEAP32[32198]|0;
  $cmp1 = ($1|0)==(2);
  $2 = HEAP32[32198]|0;
  $cmp2 = ($2|0)==(3);
  $or$cond = $cmp1 | $cmp2;
  if ($or$cond) {
   $musicnum$addr = 32;
  }
 }
 $3 = $musicnum$addr;
 $cmp3 = ($3|0)<=(0);
 $4 = $musicnum$addr;
 $cmp5 = ($4|0)>=(68);
 $or$cond1 = $cmp3 | $cmp5;
 $5 = $musicnum$addr;
 if ($or$cond1) {
  HEAP32[$vararg_buffer>>2] = $5;
  _I_Error(157772,$vararg_buffer);
 } else {
  $arrayidx = (51680 + ($5<<4)|0);
  $music = $arrayidx;
 }
 $6 = HEAP32[100153]|0;
 $7 = $music;
 $cmp8 = ($6|0)==($7|0);
 if ($cmp8) {
  STACKTOP = sp;return;
 }
 _S_StopMusic();
 $8 = $music;
 $lumpnum = ((($8)) + 4|0);
 $9 = HEAP32[$lumpnum>>2]|0;
 $tobool = ($9|0)!=(0);
 if (!($tobool)) {
  $10 = $music;
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $11;
  (_M_snprintf($namebuf,9,157792,$vararg_buffer2)|0);
  $call13 = (_W_GetNumForName($namebuf)|0);
  $12 = $music;
  $lumpnum14 = ((($12)) + 4|0);
  HEAP32[$lumpnum14>>2] = $call13;
 }
 $13 = $music;
 $lumpnum16 = ((($13)) + 4|0);
 $14 = HEAP32[$lumpnum16>>2]|0;
 $call17 = (_W_CacheLumpNum($14,1)|0);
 $15 = $music;
 $data = ((($15)) + 8|0);
 HEAP32[$data>>2] = $call17;
 $16 = $music;
 $data18 = ((($16)) + 8|0);
 $17 = HEAP32[$data18>>2]|0;
 $18 = $music;
 $lumpnum19 = ((($18)) + 4|0);
 $19 = HEAP32[$lumpnum19>>2]|0;
 $call20 = (_W_LumpLength($19)|0);
 $call21 = (_I_RegisterSong($17,$call20)|0);
 $handle = $call21;
 $20 = $handle;
 $21 = $music;
 $handle22 = ((($21)) + 12|0);
 HEAP32[$handle22>>2] = $20;
 $22 = $handle;
 $23 = $looping$addr;
 _I_PlaySong($22,$23);
 $24 = $music;
 HEAP32[100153] = $24;
 STACKTOP = sp;return;
}
function _S_StopMusic() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $data = 0, $handle = 0, $lumpnum = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100153]|0;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  return;
 }
 $1 = HEAP32[100151]|0;
 $tobool1 = ($1|0)!=(0);
 if ($tobool1) {
  _I_ResumeSong();
 }
 _I_StopSong();
 $2 = HEAP32[100153]|0;
 $handle = ((($2)) + 12|0);
 $3 = HEAP32[$handle>>2]|0;
 _I_UnRegisterSong($3);
 $4 = HEAP32[100153]|0;
 $lumpnum = ((($4)) + 4|0);
 $5 = HEAP32[$lumpnum>>2]|0;
 _W_ReleaseLumpNum($5);
 $6 = HEAP32[100153]|0;
 $data = ((($6)) + 8|0);
 HEAP32[$data>>2] = 0;
 HEAP32[100153] = 0;
 return;
}
function _S_StopSound($origin) {
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $cmp3 = 0, $cnum = 0, $inc = 0, $origin$addr = 0, $origin2 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $origin$addr = $origin;
 $cnum = 0;
 while(1) {
  $0 = $cnum;
  $1 = HEAP32[32471]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = HEAP32[100150]|0;
  $3 = $cnum;
  $arrayidx = (($2) + (($3*12)|0)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($4|0)!=(0|0);
  if ($tobool) {
   $5 = HEAP32[100150]|0;
   $6 = $cnum;
   $arrayidx1 = (($5) + (($6*12)|0)|0);
   $origin2 = ((($arrayidx1)) + 4|0);
   $7 = HEAP32[$origin2>>2]|0;
   $8 = $origin$addr;
   $cmp3 = ($7|0)==($8|0);
   if ($cmp3) {
    break;
   }
  }
  $10 = $cnum;
  $inc = (($10) + 1)|0;
  $cnum = $inc;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $9 = $cnum;
 _S_StopChannel($9);
 STACKTOP = sp;return;
}
function _S_StartSound($origin_p,$sfx_id) {
 $origin_p = $origin_p|0;
 $sfx_id = $sfx_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx22 = 0, $arrayidx46 = 0, $call = 0, $call32 = 0, $call42 = 0;
 var $call45 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp20 = 0, $cmp25 = 0, $cmp33 = 0, $cmp36 = 0, $cmp4 = 0, $cmp40 = 0, $cmp7 = 0, $cnum = 0, $handle = 0, $inc = 0, $link = 0, $lumpnum = 0, $lumpnum43 = 0, $or$cond = 0, $origin = 0, $origin_p$addr = 0;
 var $rc = 0, $sep = 0, $sfx = 0, $sfx_id$addr = 0, $tobool = 0, $tobool11 = 0, $tobool28 = 0, $usefulness = 0, $usefulness38 = 0, $vararg_buffer = 0, $volume = 0, $volume3 = 0, $x = 0, $x19 = 0, $y = 0, $y24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $sep = sp + 12|0;
 $volume = sp + 4|0;
 $origin_p$addr = $origin_p;
 $sfx_id$addr = $sfx_id;
 $0 = $origin_p$addr;
 $origin = $0;
 $1 = HEAP32[100152]|0;
 HEAP32[$volume>>2] = $1;
 $2 = $sfx_id$addr;
 $cmp = ($2|0)<(1);
 $3 = $sfx_id$addr;
 $cmp1 = ($3|0)>(109);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $4 = $sfx_id$addr;
  HEAP32[$vararg_buffer>>2] = $4;
  _I_Error(157797,$vararg_buffer);
 }
 $5 = $sfx_id$addr;
 $arrayidx = (52768 + (($5*48)|0)|0);
 $sfx = $arrayidx;
 $6 = $sfx;
 $link = ((($6)) + 20|0);
 $7 = HEAP32[$link>>2]|0;
 $tobool = ($7|0)!=(0|0);
 if ($tobool) {
  $8 = $sfx;
  $volume3 = ((($8)) + 28|0);
  $9 = HEAP32[$volume3>>2]|0;
  $10 = HEAP32[$volume>>2]|0;
  $add = (($10) + ($9))|0;
  HEAP32[$volume>>2] = $add;
  $11 = HEAP32[$volume>>2]|0;
  $cmp4 = ($11|0)<(1);
  if ($cmp4) {
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$volume>>2]|0;
  $13 = HEAP32[100152]|0;
  $cmp7 = ($12|0)>($13|0);
  if ($cmp7) {
   $14 = HEAP32[100152]|0;
   HEAP32[$volume>>2] = $14;
  }
 }
 $15 = $origin;
 $tobool11 = ($15|0)!=(0|0);
 if ($tobool11) {
  $16 = $origin;
  $17 = HEAP32[99415]|0;
  $arrayidx12 = (183056 + (($17*288)|0)|0);
  $18 = HEAP32[$arrayidx12>>2]|0;
  $cmp13 = ($16|0)!=($18|0);
  if ($cmp13) {
   $19 = HEAP32[99415]|0;
   $arrayidx15 = (183056 + (($19*288)|0)|0);
   $20 = HEAP32[$arrayidx15>>2]|0;
   $21 = $origin;
   $call = (_S_AdjustSoundParams($20,$21,$volume,$sep)|0);
   $rc = $call;
   $22 = $origin;
   $x = ((($22)) + 12|0);
   $23 = HEAP32[$x>>2]|0;
   $24 = HEAP32[99415]|0;
   $arrayidx17 = (183056 + (($24*288)|0)|0);
   $25 = HEAP32[$arrayidx17>>2]|0;
   $x19 = ((($25)) + 12|0);
   $26 = HEAP32[$x19>>2]|0;
   $cmp20 = ($23|0)==($26|0);
   if ($cmp20) {
    $27 = $origin;
    $y = ((($27)) + 16|0);
    $28 = HEAP32[$y>>2]|0;
    $29 = HEAP32[99415]|0;
    $arrayidx22 = (183056 + (($29*288)|0)|0);
    $30 = HEAP32[$arrayidx22>>2]|0;
    $y24 = ((($30)) + 16|0);
    $31 = HEAP32[$y24>>2]|0;
    $cmp25 = ($28|0)==($31|0);
    if ($cmp25) {
     HEAP32[$sep>>2] = 128;
    }
   }
   $32 = $rc;
   $tobool28 = ($32|0)!=(0);
   if (!($tobool28)) {
    STACKTOP = sp;return;
   }
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 if ((label|0) == 13) {
  HEAP32[$sep>>2] = 128;
 }
 $33 = $origin;
 _S_StopSound($33);
 $34 = $origin;
 $35 = $sfx;
 $call32 = (_S_GetChannel($34,$35)|0);
 $cnum = $call32;
 $36 = $cnum;
 $cmp33 = ($36|0)<(0);
 if ($cmp33) {
  STACKTOP = sp;return;
 }
 $37 = $sfx;
 $usefulness = ((($37)) + 32|0);
 $38 = HEAP32[$usefulness>>2]|0;
 $inc = (($38) + 1)|0;
 HEAP32[$usefulness>>2] = $inc;
 $cmp36 = ($38|0)<(0);
 if ($cmp36) {
  $39 = $sfx;
  $usefulness38 = ((($39)) + 32|0);
  HEAP32[$usefulness38>>2] = 1;
 }
 $40 = $sfx;
 $lumpnum = ((($40)) + 36|0);
 $41 = HEAP32[$lumpnum>>2]|0;
 $cmp40 = ($41|0)<(0);
 if ($cmp40) {
  $42 = $sfx;
  $call42 = (_I_GetSfxLumpNum($42)|0);
  $43 = $sfx;
  $lumpnum43 = ((($43)) + 36|0);
  HEAP32[$lumpnum43>>2] = $call42;
 }
 $44 = $sfx;
 $45 = $cnum;
 $46 = HEAP32[$volume>>2]|0;
 $47 = HEAP32[$sep>>2]|0;
 $call45 = (_I_StartSound($44,$45,$46,$47)|0);
 $48 = HEAP32[100150]|0;
 $49 = $cnum;
 $arrayidx46 = (($48) + (($49*12)|0)|0);
 $handle = ((($arrayidx46)) + 8|0);
 HEAP32[$handle>>2] = $call45;
 STACKTOP = sp;return;
}
function _S_AdjustSoundParams($listener,$source,$vol,$sep) {
 $listener = $listener|0;
 $source = $source|0;
 $vol = $vol|0;
 $sep = $sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add20 = 0, $add37 = 0, $adx = 0, $ady = 0, $angle = 0, $angle13 = 0, $angle16 = 0, $approx_dist = 0, $arrayidx = 0, $call = 0, $call12 = 0;
 var $call23 = 0, $call4 = 0, $cmp = 0, $cmp14 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp45 = 0, $cmp6 = 0, $cmp7 = 0, $cond = 0, $conv = 0, $div = 0, $div42 = 0, $listener$addr = 0, $mul = 0, $mul41 = 0, $or$cond = 0, $retval = 0, $sep$addr = 0;
 var $shr = 0, $shr22 = 0, $shr24 = 0, $shr36 = 0, $shr40 = 0, $source$addr = 0, $sub = 0, $sub17 = 0, $sub19 = 0, $sub25 = 0, $sub3 = 0, $sub34 = 0, $sub35 = 0, $sub39 = 0, $sub5 = 0, $vol$addr = 0, $x = 0, $x1 = 0, $x10 = 0, $x8 = 0;
 var $y = 0, $y11 = 0, $y2 = 0, $y9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $listener$addr = $listener;
 $source$addr = $source;
 $vol$addr = $vol;
 $sep$addr = $sep;
 $0 = $listener$addr;
 $x = ((($0)) + 12|0);
 $1 = HEAP32[$x>>2]|0;
 $2 = $source$addr;
 $x1 = ((($2)) + 12|0);
 $3 = HEAP32[$x1>>2]|0;
 $sub = (($1) - ($3))|0;
 $call = (Math_abs(($sub|0))|0);
 $adx = $call;
 $4 = $listener$addr;
 $y = ((($4)) + 16|0);
 $5 = HEAP32[$y>>2]|0;
 $6 = $source$addr;
 $y2 = ((($6)) + 16|0);
 $7 = HEAP32[$y2>>2]|0;
 $sub3 = (($5) - ($7))|0;
 $call4 = (Math_abs(($sub3|0))|0);
 $ady = $call4;
 $8 = $adx;
 $9 = $ady;
 $add = (($8) + ($9))|0;
 $10 = $adx;
 $11 = $ady;
 $cmp = ($10|0)<($11|0);
 $12 = $adx;
 $13 = $ady;
 $cond = $cmp ? $12 : $13;
 $shr = $cond >> 1;
 $sub5 = (($add) - ($shr))|0;
 $approx_dist = $sub5;
 $14 = HEAP32[99423]|0;
 $cmp6 = ($14|0)!=(8);
 $15 = $approx_dist;
 $cmp7 = ($15|0)>(78643200);
 $or$cond = $cmp6 & $cmp7;
 if ($or$cond) {
  $retval = 0;
  $47 = $retval;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $listener$addr;
 $x8 = ((($16)) + 12|0);
 $17 = HEAP32[$x8>>2]|0;
 $18 = $listener$addr;
 $y9 = ((($18)) + 16|0);
 $19 = HEAP32[$y9>>2]|0;
 $20 = $source$addr;
 $x10 = ((($20)) + 12|0);
 $21 = HEAP32[$x10>>2]|0;
 $22 = $source$addr;
 $y11 = ((($22)) + 16|0);
 $23 = HEAP32[$y11>>2]|0;
 $call12 = (_R_PointToAngle2($17,$19,$21,$23)|0);
 $angle = $call12;
 $24 = $angle;
 $25 = $listener$addr;
 $angle13 = ((($25)) + 32|0);
 $26 = HEAP32[$angle13>>2]|0;
 $cmp14 = ($24>>>0)>($26>>>0);
 $27 = $angle;
 $28 = $listener$addr;
 $angle16 = ((($28)) + 32|0);
 $29 = HEAP32[$angle16>>2]|0;
 if ($cmp14) {
  $sub17 = (($27) - ($29))|0;
  $angle = $sub17;
 } else {
  $sub19 = (-1 - ($29))|0;
  $add20 = (($27) + ($sub19))|0;
  $angle = $add20;
 }
 $30 = $angle;
 $shr22 = $30 >>> 19;
 $angle = $shr22;
 $31 = $angle;
 $arrayidx = (74800 + ($31<<2)|0);
 $32 = HEAP32[$arrayidx>>2]|0;
 $call23 = (_FixedMul(6291456,$32)|0);
 $shr24 = $call23 >> 16;
 $sub25 = (128 - ($shr24))|0;
 $33 = $sep$addr;
 HEAP32[$33>>2] = $sub25;
 $34 = $approx_dist;
 $cmp26 = ($34|0)<(13107200);
 do {
  if ($cmp26) {
   $35 = HEAP32[100152]|0;
   $36 = $vol$addr;
   HEAP32[$36>>2] = $35;
  } else {
   $37 = HEAP32[99423]|0;
   $cmp29 = ($37|0)==(8);
   if (!($cmp29)) {
    $42 = HEAP32[100152]|0;
    $43 = $approx_dist;
    $sub39 = (78643200 - ($43))|0;
    $shr40 = $sub39 >> 16;
    $mul41 = Math_imul($42, $shr40)|0;
    $div42 = (($mul41|0) / 1000)&-1;
    $44 = $vol$addr;
    HEAP32[$44>>2] = $div42;
    break;
   }
   $38 = $approx_dist;
   $cmp31 = ($38|0)>(78643200);
   if ($cmp31) {
    $approx_dist = 78643200;
   }
   $39 = HEAP32[100152]|0;
   $sub34 = (($39) - 15)|0;
   $40 = $approx_dist;
   $sub35 = (78643200 - ($40))|0;
   $shr36 = $sub35 >> 16;
   $mul = Math_imul($sub34, $shr36)|0;
   $div = (($mul|0) / 1000)&-1;
   $add37 = (15 + ($div))|0;
   $41 = $vol$addr;
   HEAP32[$41>>2] = $add37;
  }
 } while(0);
 $45 = $vol$addr;
 $46 = HEAP32[$45>>2]|0;
 $cmp45 = ($46|0)>(0);
 $conv = $cmp45&1;
 $retval = $conv;
 $47 = $retval;
 STACKTOP = sp;return ($47|0);
}
function _S_GetChannel($origin,$sfxinfo) {
 $origin = $origin|0;
 $sfxinfo = $sfxinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx27 = 0, $arrayidx3 = 0, $c = 0, $cmp = 0;
 var $cmp11 = 0, $cmp16 = 0, $cmp22 = 0, $cmp5 = 0, $cmp8 = 0, $cnum = 0, $inc = 0, $inc20 = 0, $origin$addr = 0, $origin29 = 0, $origin4 = 0, $priority = 0, $priority15 = 0, $retval = 0, $sfxinfo$addr = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $origin$addr = $origin;
 $sfxinfo$addr = $sfxinfo;
 $cnum = 0;
 while(1) {
  $0 = $cnum;
  $1 = HEAP32[32471]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[100150]|0;
  $3 = $cnum;
  $arrayidx = (($2) + (($3*12)|0)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($4|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $5 = $origin$addr;
  $tobool2 = ($5|0)!=(0|0);
  if ($tobool2) {
   $6 = HEAP32[100150]|0;
   $7 = $cnum;
   $arrayidx3 = (($6) + (($7*12)|0)|0);
   $origin4 = ((($arrayidx3)) + 4|0);
   $8 = HEAP32[$origin4>>2]|0;
   $9 = $origin$addr;
   $cmp5 = ($8|0)==($9|0);
   if ($cmp5) {
    label = 6;
    break;
   }
  }
  $11 = $cnum;
  $inc = (($11) + 1)|0;
  $cnum = $inc;
 }
 if ((label|0) == 6) {
  $10 = $cnum;
  _S_StopChannel($10);
 }
 $12 = $cnum;
 $13 = HEAP32[32471]|0;
 $cmp8 = ($12|0)==($13|0);
 do {
  if ($cmp8) {
   $cnum = 0;
   while(1) {
    $14 = $cnum;
    $15 = HEAP32[32471]|0;
    $cmp11 = ($14|0)<($15|0);
    if (!($cmp11)) {
     break;
    }
    $16 = HEAP32[100150]|0;
    $17 = $cnum;
    $arrayidx13 = (($16) + (($17*12)|0)|0);
    $18 = HEAP32[$arrayidx13>>2]|0;
    $priority = ((($18)) + 16|0);
    $19 = HEAP32[$priority>>2]|0;
    $20 = $sfxinfo$addr;
    $priority15 = ((($20)) + 16|0);
    $21 = HEAP32[$priority15>>2]|0;
    $cmp16 = ($19|0)>=($21|0);
    if ($cmp16) {
     break;
    }
    $22 = $cnum;
    $inc20 = (($22) + 1)|0;
    $cnum = $inc20;
   }
   $23 = $cnum;
   $24 = HEAP32[32471]|0;
   $cmp22 = ($23|0)==($24|0);
   if (!($cmp22)) {
    $25 = $cnum;
    _S_StopChannel($25);
    break;
   }
   $retval = -1;
   $33 = $retval;
   STACKTOP = sp;return ($33|0);
  }
 } while(0);
 $26 = HEAP32[100150]|0;
 $27 = $cnum;
 $arrayidx27 = (($26) + (($27*12)|0)|0);
 $c = $arrayidx27;
 $28 = $sfxinfo$addr;
 $29 = $c;
 HEAP32[$29>>2] = $28;
 $30 = $origin$addr;
 $31 = $c;
 $origin29 = ((($31)) + 4|0);
 HEAP32[$origin29>>2] = $30;
 $32 = $cnum;
 $retval = $32;
 $33 = $retval;
 STACKTOP = sp;return ($33|0);
}
function _S_PauseSound() {
 var $0 = 0, $1 = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100153]|0;
 $tobool = ($0|0)==(0|0);
 $1 = HEAP32[100151]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool | $tobool1;
 if ($or$cond) {
  return;
 }
 _I_PauseSong();
 HEAP32[100151] = 1;
 return;
}
function _S_ResumeSound() {
 var $0 = 0, $1 = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100153]|0;
 $tobool = ($0|0)!=(0|0);
 $1 = HEAP32[100151]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  return;
 }
 _I_ResumeSong();
 HEAP32[100151] = 0;
 return;
}
function _S_UpdateSounds($listener) {
 $listener = $listener|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $audible = 0;
 var $c = 0, $call = 0, $call18 = 0, $cmp = 0, $cmp15 = 0, $cmp7 = 0, $cmp9 = 0, $cnum = 0, $handle = 0, $handle22 = 0, $inc = 0, $link = 0, $listener$addr = 0, $origin = 0, $origin14 = 0, $origin17 = 0, $sep = 0, $sfx = 0, $tobool = 0, $tobool13 = 0;
 var $tobool19 = 0, $tobool2 = 0, $tobool4 = 0, $volume = 0, $volume6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $volume = sp + 12|0;
 $sep = sp + 8|0;
 $listener$addr = $listener;
 _I_UpdateSound();
 $cnum = 0;
 while(1) {
  $0 = $cnum;
  $1 = HEAP32[32471]|0;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[100150]|0;
  $3 = $cnum;
  $arrayidx = (($2) + (($3*12)|0)|0);
  $c = $arrayidx;
  $4 = $c;
  $5 = HEAP32[$4>>2]|0;
  $sfx = $5;
  $6 = $c;
  $7 = HEAP32[$6>>2]|0;
  $tobool = ($7|0)!=(0|0);
  do {
   if ($tobool) {
    $8 = $c;
    $handle = ((($8)) + 8|0);
    $9 = HEAP32[$handle>>2]|0;
    $call = (_I_SoundIsPlaying($9)|0);
    $tobool2 = ($call|0)!=(0);
    if (!($tobool2)) {
     $35 = $cnum;
     _S_StopChannel($35);
     break;
    }
    $10 = HEAP32[100152]|0;
    HEAP32[$volume>>2] = $10;
    HEAP32[$sep>>2] = 128;
    $11 = $sfx;
    $link = ((($11)) + 20|0);
    $12 = HEAP32[$link>>2]|0;
    $tobool4 = ($12|0)!=(0|0);
    if ($tobool4) {
     $13 = $sfx;
     $volume6 = ((($13)) + 28|0);
     $14 = HEAP32[$volume6>>2]|0;
     $15 = HEAP32[$volume>>2]|0;
     $add = (($15) + ($14))|0;
     HEAP32[$volume>>2] = $add;
     $16 = HEAP32[$volume>>2]|0;
     $cmp7 = ($16|0)<(1);
     if ($cmp7) {
      $17 = $cnum;
      _S_StopChannel($17);
      break;
     }
     $18 = HEAP32[$volume>>2]|0;
     $19 = HEAP32[100152]|0;
     $cmp9 = ($18|0)>($19|0);
     if ($cmp9) {
      $20 = HEAP32[100152]|0;
      HEAP32[$volume>>2] = $20;
     }
    }
    $21 = $c;
    $origin = ((($21)) + 4|0);
    $22 = HEAP32[$origin>>2]|0;
    $tobool13 = ($22|0)!=(0|0);
    if ($tobool13) {
     $23 = $listener$addr;
     $24 = $c;
     $origin14 = ((($24)) + 4|0);
     $25 = HEAP32[$origin14>>2]|0;
     $cmp15 = ($23|0)!=($25|0);
     if ($cmp15) {
      $26 = $listener$addr;
      $27 = $c;
      $origin17 = ((($27)) + 4|0);
      $28 = HEAP32[$origin17>>2]|0;
      $call18 = (_S_AdjustSoundParams($26,$28,$volume,$sep)|0);
      $audible = $call18;
      $29 = $audible;
      $tobool19 = ($29|0)!=(0);
      if ($tobool19) {
       $31 = $c;
       $handle22 = ((($31)) + 8|0);
       $32 = HEAP32[$handle22>>2]|0;
       $33 = HEAP32[$volume>>2]|0;
       $34 = HEAP32[$sep>>2]|0;
       _I_UpdateSoundParams($32,$33,$34);
       break;
      } else {
       $30 = $cnum;
       _S_StopChannel($30);
       break;
      }
     }
    }
   }
  } while(0);
  $36 = $cnum;
  $inc = (($36) + 1)|0;
  $cnum = $inc;
 }
 STACKTOP = sp;return;
}
function _S_StartMusic($m_id) {
 $m_id = $m_id|0;
 var $0 = 0, $m_id$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $m_id$addr = $m_id;
 $0 = $m_id$addr;
 _S_ChangeMusic($0,0);
 STACKTOP = sp;return;
}
function _SlopeDiv($num,$den) {
 $num = $num|0;
 $den = $den|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ans = 0, $cmp = 0, $cmp1 = 0, $den$addr = 0, $div = 0, $num$addr = 0, $retval = 0, $shl = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $num$addr = $num;
 $den$addr = $den;
 $0 = $den$addr;
 $cmp = ($0>>>0)<(512);
 do {
  if ($cmp) {
   $retval = 2048;
  } else {
   $1 = $num$addr;
   $shl = $1 << 3;
   $2 = $den$addr;
   $shr = $2 >>> 8;
   $div = (($shl>>>0) / ($shr>>>0))&-1;
   $ans = $div;
   $3 = $ans;
   $cmp1 = ($3>>>0)<=(2048);
   if ($cmp1) {
    $4 = $ans;
    $retval = $4;
    break;
   } else {
    $retval = 2048;
    break;
   }
  }
 } while(0);
 $5 = $retval;
 STACKTOP = sp;return ($5|0);
}
function _V_MarkRect($x,$y,$width,$height) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add1 = 0, $cmp = 0, $height$addr = 0, $sub = 0, $sub2 = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $0 = HEAP32[100154]|0;
 $1 = HEAP32[100203]|0;
 $cmp = ($0|0)==($1|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $x$addr;
 $3 = $y$addr;
 _M_AddToBox(394960,$2,$3);
 $4 = $x$addr;
 $5 = $width$addr;
 $add = (($4) + ($5))|0;
 $sub = (($add) - 1)|0;
 $6 = $y$addr;
 $7 = $height$addr;
 $add1 = (($6) + ($7))|0;
 $sub2 = (($add1) - 1)|0;
 _M_AddToBox(394960,$sub,$sub2);
 STACKTOP = sp;return;
}
function _V_CopyRect($srcx,$srcy,$source,$width,$height,$destx,$desty) {
 $srcx = $srcx|0;
 $srcy = $srcy|0;
 $source = $source|0;
 $width = $width|0;
 $height = $height|0;
 $destx = $destx|0;
 $desty = $desty|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr19 = 0, $add$ptr20 = 0, $add$ptr22 = 0, $add$ptr23 = 0, $add10 = 0, $add15 = 0, $add5 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp16 = 0, $cmp21 = 0, $cmp3 = 0, $cmp6 = 0, $cmp8 = 0, $dec = 0, $dest = 0, $destx$addr = 0, $desty$addr = 0, $height$addr = 0, $mul = 0, $mul18 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $source$addr = 0, $src = 0;
 var $srcx$addr = 0, $srcy$addr = 0, $vararg_buffer = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $srcx$addr = $srcx;
 $srcy$addr = $srcy;
 $source$addr = $source;
 $width$addr = $width;
 $height$addr = $height;
 $destx$addr = $destx;
 $desty$addr = $desty;
 $0 = $srcx$addr;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 6;
 } else {
  $1 = $srcx$addr;
  $2 = $width$addr;
  $add = (($1) + ($2))|0;
  $cmp1 = ($add|0)>(320);
  $3 = $srcy$addr;
  $cmp3 = ($3|0)<(0);
  $or$cond = $cmp1 | $cmp3;
  if ($or$cond) {
   label = 6;
  } else {
   $4 = $srcy$addr;
   $5 = $height$addr;
   $add5 = (($4) + ($5))|0;
   $cmp6 = ($add5|0)>(200);
   $6 = $destx$addr;
   $cmp8 = ($6|0)<(0);
   $or$cond1 = $cmp6 | $cmp8;
   if ($or$cond1) {
    label = 6;
   } else {
    $7 = $destx$addr;
    $8 = $width$addr;
    $add10 = (($7) + ($8))|0;
    $cmp11 = ($add10|0)>(320);
    $9 = $desty$addr;
    $cmp13 = ($9|0)<(0);
    $or$cond2 = $cmp11 | $cmp13;
    if ($or$cond2) {
     label = 6;
    } else {
     $10 = $desty$addr;
     $11 = $height$addr;
     $add15 = (($10) + ($11))|0;
     $cmp16 = ($add15|0)>(200);
     if ($cmp16) {
      label = 6;
     }
    }
   }
  }
 }
 if ((label|0) == 6) {
  _I_Error(157811,$vararg_buffer);
 }
 $12 = $destx$addr;
 $13 = $desty$addr;
 $14 = $width$addr;
 $15 = $height$addr;
 _V_MarkRect($12,$13,$14,$15);
 $16 = $source$addr;
 $17 = $srcy$addr;
 $mul = ($17*320)|0;
 $add$ptr = (($16) + ($mul)|0);
 $18 = $srcx$addr;
 $add$ptr17 = (($add$ptr) + ($18)|0);
 $src = $add$ptr17;
 $19 = HEAP32[100154]|0;
 $20 = $desty$addr;
 $mul18 = ($20*320)|0;
 $add$ptr19 = (($19) + ($mul18)|0);
 $21 = $destx$addr;
 $add$ptr20 = (($add$ptr19) + ($21)|0);
 $dest = $add$ptr20;
 while(1) {
  $22 = $height$addr;
  $cmp21 = ($22|0)>(0);
  if (!($cmp21)) {
   break;
  }
  $23 = $dest;
  $24 = $src;
  $25 = $width$addr;
  _memcpy(($23|0),($24|0),($25|0))|0;
  $26 = $src;
  $add$ptr22 = ((($26)) + 320|0);
  $src = $add$ptr22;
  $27 = $dest;
  $add$ptr23 = ((($27)) + 320|0);
  $dest = $add$ptr23;
  $28 = $height$addr;
  $dec = (($28) + -1)|0;
  $height$addr = $dec;
 }
 STACKTOP = sp;return;
}
function _V_DrawPatch($x,$y,$patch) {
 $x = $x|0;
 $y = $y|0;
 $patch = $patch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr32 = 0, $add$ptr37 = 0, $add$ptr41 = 0, $add$ptr45 = 0, $add$ptr50 = 0, $add$ptr53 = 0, $add$ptr54 = 0, $add15 = 0, $arrayidx = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp35 = 0, $cmp39 = 0, $cmp8 = 0, $col = 0, $column = 0, $columnofs = 0;
 var $conv = 0, $conv1 = 0, $conv14 = 0, $conv20 = 0, $conv22 = 0, $conv24 = 0, $conv26 = 0, $conv29 = 0, $conv31 = 0, $conv34 = 0, $conv38 = 0, $conv43 = 0, $conv46 = 0, $conv52 = 0, $conv7 = 0, $count = 0, $dec = 0, $dest = 0, $desttop = 0, $height = 0;
 var $height21 = 0, $height30 = 0, $inc = 0, $inc56 = 0, $incdec$ptr = 0, $incdec$ptr57 = 0, $leftoffset = 0, $leftoffset25 = 0, $length = 0, $length51 = 0, $mul = 0, $mul44 = 0, $or$cond = 0, $patch$addr = 0, $source = 0, $sub = 0, $sub2 = 0, $tobool48 = 0, $topoffset = 0, $topoffset23 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $w = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $y$addr = $y;
 $patch$addr = $patch;
 $0 = $patch$addr;
 $topoffset = ((($0)) + 6|0);
 $1 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $2 = $y$addr;
 $sub = (($2) - ($conv))|0;
 $y$addr = $sub;
 $3 = $patch$addr;
 $leftoffset = ((($3)) + 4|0);
 $4 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv1 = $4 << 16 >> 16;
 $5 = $x$addr;
 $sub2 = (($5) - ($conv1))|0;
 $x$addr = $sub2;
 $6 = $x$addr;
 $cmp = ($6|0)<(0);
 if ($cmp) {
  label = 4;
 } else {
  $7 = $x$addr;
  $8 = $patch$addr;
  $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8);
  $conv7 = $9 << 16 >> 16;
  $add = (($7) + ($conv7))|0;
  $cmp8 = ($add|0)>(320);
  $10 = $y$addr;
  $cmp11 = ($10|0)<(0);
  $or$cond = $cmp8 | $cmp11;
  if ($or$cond) {
   label = 4;
  } else {
   $11 = $y$addr;
   $12 = $patch$addr;
   $height = ((($12)) + 2|0);
   $13 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
   $conv14 = $13 << 16 >> 16;
   $add15 = (($11) + ($conv14))|0;
   $cmp16 = ($add15|0)>(200);
   if ($cmp16) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $14 = $x$addr;
  $15 = $y$addr;
  $16 = $patch$addr;
  $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
  $conv20 = $17 << 16 >> 16;
  $18 = $patch$addr;
  $height21 = ((($18)) + 2|0);
  $19 = HEAPU8[$height21>>0]|(HEAPU8[$height21+1>>0]<<8);
  $conv22 = $19 << 16 >> 16;
  $20 = $patch$addr;
  $topoffset23 = ((($20)) + 6|0);
  $21 = HEAPU8[$topoffset23>>0]|(HEAPU8[$topoffset23+1>>0]<<8);
  $conv24 = $21 << 16 >> 16;
  $22 = $patch$addr;
  $leftoffset25 = ((($22)) + 4|0);
  $23 = HEAPU8[$leftoffset25>>0]|(HEAPU8[$leftoffset25+1>>0]<<8);
  $conv26 = $23 << 16 >> 16;
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $conv20;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $conv22;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $conv24;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $conv26;
  _I_Error(157826,$vararg_buffer);
 }
 $24 = $x$addr;
 $25 = $y$addr;
 $26 = $patch$addr;
 $27 = HEAPU8[$26>>0]|(HEAPU8[$26+1>>0]<<8);
 $conv29 = $27 << 16 >> 16;
 $28 = $patch$addr;
 $height30 = ((($28)) + 2|0);
 $29 = HEAPU8[$height30>>0]|(HEAPU8[$height30+1>>0]<<8);
 $conv31 = $29 << 16 >> 16;
 _V_MarkRect($24,$25,$conv29,$conv31);
 $col = 0;
 $30 = HEAP32[100154]|0;
 $31 = $y$addr;
 $mul = ($31*320)|0;
 $add$ptr = (($30) + ($mul)|0);
 $32 = $x$addr;
 $add$ptr32 = (($add$ptr) + ($32)|0);
 $desttop = $add$ptr32;
 $33 = $patch$addr;
 $34 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
 $conv34 = $34 << 16 >> 16;
 $w = $conv34;
 while(1) {
  $35 = $col;
  $36 = $w;
  $cmp35 = ($35|0)<($36|0);
  if (!($cmp35)) {
   break;
  }
  $37 = $patch$addr;
  $38 = $patch$addr;
  $columnofs = ((($38)) + 8|0);
  $39 = $col;
  $arrayidx = (($columnofs) + ($39<<2)|0);
  $40 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
  $add$ptr37 = (($37) + ($40)|0);
  $column = $add$ptr37;
  while(1) {
   $41 = $column;
   $42 = HEAP8[$41>>0]|0;
   $conv38 = $42&255;
   $cmp39 = ($conv38|0)!=(255);
   if (!($cmp39)) {
    break;
   }
   $43 = $column;
   $add$ptr41 = ((($43)) + 3|0);
   $source = $add$ptr41;
   $44 = $desttop;
   $45 = $column;
   $46 = HEAP8[$45>>0]|0;
   $conv43 = $46&255;
   $mul44 = ($conv43*320)|0;
   $add$ptr45 = (($44) + ($mul44)|0);
   $dest = $add$ptr45;
   $47 = $column;
   $length = ((($47)) + 1|0);
   $48 = HEAP8[$length>>0]|0;
   $conv46 = $48&255;
   $count = $conv46;
   while(1) {
    $49 = $count;
    $dec = (($49) + -1)|0;
    $count = $dec;
    $tobool48 = ($49|0)!=(0);
    if (!($tobool48)) {
     break;
    }
    $50 = $source;
    $incdec$ptr = ((($50)) + 1|0);
    $source = $incdec$ptr;
    $51 = HEAP8[$50>>0]|0;
    $52 = $dest;
    HEAP8[$52>>0] = $51;
    $53 = $dest;
    $add$ptr50 = ((($53)) + 320|0);
    $dest = $add$ptr50;
   }
   $54 = $column;
   $55 = $column;
   $length51 = ((($55)) + 1|0);
   $56 = HEAP8[$length51>>0]|0;
   $conv52 = $56&255;
   $add$ptr53 = (($54) + ($conv52)|0);
   $add$ptr54 = ((($add$ptr53)) + 4|0);
   $column = $add$ptr54;
  }
  $57 = $x$addr;
  $inc = (($57) + 1)|0;
  $x$addr = $inc;
  $58 = $col;
  $inc56 = (($58) + 1)|0;
  $col = $inc56;
  $59 = $desttop;
  $incdec$ptr57 = ((($59)) + 1|0);
  $desttop = $incdec$ptr57;
 }
 STACKTOP = sp;return;
}
function _V_DrawPatchFlipped($x,$y,$patch) {
 $x = $x|0;
 $y = $y|0;
 $patch = $patch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr24 = 0, $add$ptr31 = 0, $add$ptr35 = 0, $add$ptr39 = 0, $add$ptr44 = 0, $add$ptr47 = 0, $add$ptr48 = 0;
 var $add15 = 0, $arrayidx = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp27 = 0, $cmp33 = 0, $cmp8 = 0, $col = 0, $column = 0, $columnofs = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv21 = 0, $conv23 = 0, $conv26 = 0, $conv32 = 0, $conv37 = 0, $conv40 = 0;
 var $conv46 = 0, $conv7 = 0, $count = 0, $dec = 0, $dest = 0, $desttop = 0, $height = 0, $height22 = 0, $inc = 0, $inc50 = 0, $incdec$ptr = 0, $incdec$ptr51 = 0, $leftoffset = 0, $length = 0, $length45 = 0, $mul = 0, $mul38 = 0, $or$cond = 0, $patch$addr = 0, $source = 0;
 var $sub = 0, $sub2 = 0, $sub29 = 0, $sub30 = 0, $tobool42 = 0, $topoffset = 0, $vararg_buffer = 0, $w = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $y$addr = $y;
 $patch$addr = $patch;
 $0 = $patch$addr;
 $topoffset = ((($0)) + 6|0);
 $1 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $2 = $y$addr;
 $sub = (($2) - ($conv))|0;
 $y$addr = $sub;
 $3 = $patch$addr;
 $leftoffset = ((($3)) + 4|0);
 $4 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
 $conv1 = $4 << 16 >> 16;
 $5 = $x$addr;
 $sub2 = (($5) - ($conv1))|0;
 $x$addr = $sub2;
 $6 = $x$addr;
 $cmp = ($6|0)<(0);
 if ($cmp) {
  label = 4;
 } else {
  $7 = $x$addr;
  $8 = $patch$addr;
  $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8);
  $conv7 = $9 << 16 >> 16;
  $add = (($7) + ($conv7))|0;
  $cmp8 = ($add|0)>(320);
  $10 = $y$addr;
  $cmp11 = ($10|0)<(0);
  $or$cond = $cmp8 | $cmp11;
  if ($or$cond) {
   label = 4;
  } else {
   $11 = $y$addr;
   $12 = $patch$addr;
   $height = ((($12)) + 2|0);
   $13 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
   $conv14 = $13 << 16 >> 16;
   $add15 = (($11) + ($conv14))|0;
   $cmp16 = ($add15|0)>(200);
   if ($cmp16) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  _I_Error(157910,$vararg_buffer);
 }
 $14 = $x$addr;
 $15 = $y$addr;
 $16 = $patch$addr;
 $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
 $conv21 = $17 << 16 >> 16;
 $18 = $patch$addr;
 $height22 = ((($18)) + 2|0);
 $19 = HEAPU8[$height22>>0]|(HEAPU8[$height22+1>>0]<<8);
 $conv23 = $19 << 16 >> 16;
 _V_MarkRect($14,$15,$conv21,$conv23);
 $col = 0;
 $20 = HEAP32[100154]|0;
 $21 = $y$addr;
 $mul = ($21*320)|0;
 $add$ptr = (($20) + ($mul)|0);
 $22 = $x$addr;
 $add$ptr24 = (($add$ptr) + ($22)|0);
 $desttop = $add$ptr24;
 $23 = $patch$addr;
 $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
 $conv26 = $24 << 16 >> 16;
 $w = $conv26;
 while(1) {
  $25 = $col;
  $26 = $w;
  $cmp27 = ($25|0)<($26|0);
  if (!($cmp27)) {
   break;
  }
  $27 = $patch$addr;
  $28 = $patch$addr;
  $columnofs = ((($28)) + 8|0);
  $29 = $w;
  $sub29 = (($29) - 1)|0;
  $30 = $col;
  $sub30 = (($sub29) - ($30))|0;
  $arrayidx = (($columnofs) + ($sub30<<2)|0);
  $31 = HEAPU8[$arrayidx>>0]|(HEAPU8[$arrayidx+1>>0]<<8)|(HEAPU8[$arrayidx+2>>0]<<16)|(HEAPU8[$arrayidx+3>>0]<<24);
  $add$ptr31 = (($27) + ($31)|0);
  $column = $add$ptr31;
  while(1) {
   $32 = $column;
   $33 = HEAP8[$32>>0]|0;
   $conv32 = $33&255;
   $cmp33 = ($conv32|0)!=(255);
   if (!($cmp33)) {
    break;
   }
   $34 = $column;
   $add$ptr35 = ((($34)) + 3|0);
   $source = $add$ptr35;
   $35 = $desttop;
   $36 = $column;
   $37 = HEAP8[$36>>0]|0;
   $conv37 = $37&255;
   $mul38 = ($conv37*320)|0;
   $add$ptr39 = (($35) + ($mul38)|0);
   $dest = $add$ptr39;
   $38 = $column;
   $length = ((($38)) + 1|0);
   $39 = HEAP8[$length>>0]|0;
   $conv40 = $39&255;
   $count = $conv40;
   while(1) {
    $40 = $count;
    $dec = (($40) + -1)|0;
    $count = $dec;
    $tobool42 = ($40|0)!=(0);
    if (!($tobool42)) {
     break;
    }
    $41 = $source;
    $incdec$ptr = ((($41)) + 1|0);
    $source = $incdec$ptr;
    $42 = HEAP8[$41>>0]|0;
    $43 = $dest;
    HEAP8[$43>>0] = $42;
    $44 = $dest;
    $add$ptr44 = ((($44)) + 320|0);
    $dest = $add$ptr44;
   }
   $45 = $column;
   $46 = $column;
   $length45 = ((($46)) + 1|0);
   $47 = HEAP8[$length45>>0]|0;
   $conv46 = $47&255;
   $add$ptr47 = (($45) + ($conv46)|0);
   $add$ptr48 = ((($add$ptr47)) + 4|0);
   $column = $add$ptr48;
  }
  $48 = $x$addr;
  $inc = (($48) + 1)|0;
  $x$addr = $inc;
  $49 = $col;
  $inc50 = (($49) + 1)|0;
  $col = $inc50;
  $50 = $desttop;
  $incdec$ptr51 = ((($50)) + 1|0);
  $desttop = $incdec$ptr51;
 }
 STACKTOP = sp;return;
}
function _V_DrawPatchDirect($x,$y,$patch) {
 $x = $x|0;
 $y = $y|0;
 $patch = $patch|0;
 var $0 = 0, $1 = 0, $2 = 0, $patch$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $patch$addr = $patch;
 $0 = $x$addr;
 $1 = $y$addr;
 $2 = $patch$addr;
 _V_DrawPatch($0,$1,$2);
 STACKTOP = sp;return;
}
function _V_DrawBlock($x,$y,$width,$height,$src) {
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr7 = 0, $add$ptr8 = 0, $add$ptr9 = 0, $add5 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp6 = 0, $dec = 0, $dest = 0, $height$addr = 0, $mul = 0, $or$cond = 0, $src$addr = 0, $tobool = 0, $vararg_buffer = 0, $width$addr = 0, $x$addr = 0;
 var $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $src$addr = $src;
 $0 = $x$addr;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 4;
 } else {
  $1 = $x$addr;
  $2 = $width$addr;
  $add = (($1) + ($2))|0;
  $cmp1 = ($add|0)>(320);
  $3 = $y$addr;
  $cmp3 = ($3|0)<(0);
  $or$cond = $cmp1 | $cmp3;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = $y$addr;
   $5 = $height$addr;
   $add5 = (($4) + ($5))|0;
   $cmp6 = ($add5|0)>(200);
   if ($cmp6) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  _I_Error(157933,$vararg_buffer);
 }
 $6 = $x$addr;
 $7 = $y$addr;
 $8 = $width$addr;
 $9 = $height$addr;
 _V_MarkRect($6,$7,$8,$9);
 $10 = HEAP32[100154]|0;
 $11 = $y$addr;
 $mul = ($11*320)|0;
 $add$ptr = (($10) + ($mul)|0);
 $12 = $x$addr;
 $add$ptr7 = (($add$ptr) + ($12)|0);
 $dest = $add$ptr7;
 while(1) {
  $13 = $height$addr;
  $dec = (($13) + -1)|0;
  $height$addr = $dec;
  $tobool = ($13|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $14 = $dest;
  $15 = $src$addr;
  $16 = $width$addr;
  _memcpy(($14|0),($15|0),($16|0))|0;
  $17 = $width$addr;
  $18 = $src$addr;
  $add$ptr8 = (($18) + ($17)|0);
  $src$addr = $add$ptr8;
  $19 = $dest;
  $add$ptr9 = ((($19)) + 320|0);
  $dest = $add$ptr9;
 }
 STACKTOP = sp;return;
}
function _V_DrawFilledBox($x,$y,$w,$h,$c) {
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr1 = 0, $add$ptr5 = 0, $buf = 0, $buf1 = 0, $c$addr = 0, $cmp = 0;
 var $cmp3 = 0, $conv = 0, $h$addr = 0, $inc = 0, $inc7 = 0, $incdec$ptr = 0, $mul = 0, $w$addr = 0, $x$addr = 0, $x1 = 0, $y$addr = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$addr = $x;
 $y$addr = $y;
 $w$addr = $w;
 $h$addr = $h;
 $c$addr = $c;
 $0 = HEAP32[100203]|0;
 $1 = $y$addr;
 $mul = ($1*320)|0;
 $add$ptr = (($0) + ($mul)|0);
 $2 = $x$addr;
 $add$ptr1 = (($add$ptr) + ($2)|0);
 $buf = $add$ptr1;
 $y1 = 0;
 while(1) {
  $3 = $y1;
  $4 = $h$addr;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $buf;
  $buf1 = $5;
  $x1 = 0;
  while(1) {
   $6 = $x1;
   $7 = $w$addr;
   $cmp3 = ($6|0)<($7|0);
   if (!($cmp3)) {
    break;
   }
   $8 = $c$addr;
   $conv = $8&255;
   $9 = $buf1;
   $incdec$ptr = ((($9)) + 1|0);
   $buf1 = $incdec$ptr;
   HEAP8[$9>>0] = $conv;
   $10 = $x1;
   $inc = (($10) + 1)|0;
   $x1 = $inc;
  }
  $11 = $buf;
  $add$ptr5 = ((($11)) + 320|0);
  $buf = $add$ptr5;
  $12 = $y1;
  $inc7 = (($12) + 1)|0;
  $y1 = $inc7;
 }
 STACKTOP = sp;return;
}
function _V_DrawHorizLine($x,$y,$w,$c) {
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $add$ptr1 = 0, $buf = 0, $c$addr = 0, $cmp = 0, $conv = 0, $inc = 0, $incdec$ptr = 0, $mul = 0, $w$addr = 0, $x$addr = 0, $x1 = 0;
 var $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $w$addr = $w;
 $c$addr = $c;
 $0 = HEAP32[100203]|0;
 $1 = $y$addr;
 $mul = ($1*320)|0;
 $add$ptr = (($0) + ($mul)|0);
 $2 = $x$addr;
 $add$ptr1 = (($add$ptr) + ($2)|0);
 $buf = $add$ptr1;
 $x1 = 0;
 while(1) {
  $3 = $x1;
  $4 = $w$addr;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $c$addr;
  $conv = $5&255;
  $6 = $buf;
  $incdec$ptr = ((($6)) + 1|0);
  $buf = $incdec$ptr;
  HEAP8[$6>>0] = $conv;
  $7 = $x1;
  $inc = (($7) + 1)|0;
  $x1 = $inc;
 }
 STACKTOP = sp;return;
}
function _V_DrawVertLine($x,$y,$h,$c) {
 $x = $x|0;
 $y = $y|0;
 $h = $h|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $add$ptr1 = 0, $add$ptr2 = 0, $buf = 0, $c$addr = 0, $cmp = 0, $conv = 0, $h$addr = 0, $inc = 0, $mul = 0, $x$addr = 0;
 var $y$addr = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $h$addr = $h;
 $c$addr = $c;
 $0 = HEAP32[100203]|0;
 $1 = $y$addr;
 $mul = ($1*320)|0;
 $add$ptr = (($0) + ($mul)|0);
 $2 = $x$addr;
 $add$ptr1 = (($add$ptr) + ($2)|0);
 $buf = $add$ptr1;
 $y1 = 0;
 while(1) {
  $3 = $y1;
  $4 = $h$addr;
  $cmp = ($3|0)<($4|0);
  if (!($cmp)) {
   break;
  }
  $5 = $c$addr;
  $conv = $5&255;
  $6 = $buf;
  HEAP8[$6>>0] = $conv;
  $7 = $buf;
  $add$ptr2 = ((($7)) + 320|0);
  $buf = $add$ptr2;
  $8 = $y1;
  $inc = (($8) + 1)|0;
  $y1 = $inc;
 }
 STACKTOP = sp;return;
}
function _V_DrawBox($x,$y,$w,$h,$c) {
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add1 = 0;
 var $c$addr = 0, $h$addr = 0, $sub = 0, $sub2 = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $w$addr = $w;
 $h$addr = $h;
 $c$addr = $c;
 $0 = $x$addr;
 $1 = $y$addr;
 $2 = $w$addr;
 $3 = $c$addr;
 _V_DrawHorizLine($0,$1,$2,$3);
 $4 = $x$addr;
 $5 = $y$addr;
 $6 = $h$addr;
 $add = (($5) + ($6))|0;
 $sub = (($add) - 1)|0;
 $7 = $w$addr;
 $8 = $c$addr;
 _V_DrawHorizLine($4,$sub,$7,$8);
 $9 = $x$addr;
 $10 = $y$addr;
 $11 = $h$addr;
 $12 = $c$addr;
 _V_DrawVertLine($9,$10,$11,$12);
 $13 = $x$addr;
 $14 = $w$addr;
 $add1 = (($13) + ($14))|0;
 $sub2 = (($add1) - 1)|0;
 $15 = $y$addr;
 $16 = $h$addr;
 $17 = $c$addr;
 _V_DrawVertLine($sub2,$15,$16,$17);
 STACKTOP = sp;return;
}
function _V_Init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _V_UseBuffer($buffer) {
 $buffer = $buffer|0;
 var $0 = 0, $buffer$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buffer$addr = $buffer;
 $0 = $buffer$addr;
 HEAP32[100154] = $0;
 STACKTOP = sp;return;
}
function _V_RestoreBuffer() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100203]|0;
 HEAP32[100154] = $0;
 return;
}
function _WritePCXfile($filename,$data,$width,$height,$palette) {
 $filename = $filename|0;
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $bits_per_pixel = 0, $bytes_per_line = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp21 = 0, $color_planes = 0, $conv = 0, $conv12 = 0, $conv3 = 0;
 var $conv4 = 0, $conv5 = 0, $conv7 = 0, $data$addr = 0, $data9 = 0, $encoding = 0, $filename$addr = 0, $filler = 0, $height$addr = 0, $hres = 0, $i = 0, $inc = 0, $inc27 = 0, $incdec$ptr = 0, $incdec$ptr15 = 0, $incdec$ptr16 = 0, $incdec$ptr17 = 0, $incdec$ptr18 = 0, $incdec$ptr19 = 0, $incdec$ptr24 = 0;
 var $incdec$ptr25 = 0, $length = 0, $mul = 0, $mul1 = 0, $mul10 = 0, $pack = 0, $palette$addr = 0, $palette6 = 0, $palette_type = 0, $pcx = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub2 = 0, $version = 0, $vres = 0, $width$addr = 0, $xmax = 0, $xmin = 0;
 var $ymax = 0, $ymin = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $filename$addr = $filename;
 $data$addr = $data;
 $width$addr = $width;
 $height$addr = $height;
 $palette$addr = $palette;
 $0 = $width$addr;
 $1 = $height$addr;
 $mul = Math_imul($0, $1)|0;
 $mul1 = $mul<<1;
 $add = (($mul1) + 1000)|0;
 $call = (_Z_Malloc($add,1,0)|0);
 $pcx = $call;
 $2 = $pcx;
 HEAP8[$2>>0] = 10;
 $3 = $pcx;
 $version = ((($3)) + 1|0);
 HEAP8[$version>>0] = 5;
 $4 = $pcx;
 $encoding = ((($4)) + 2|0);
 HEAP8[$encoding>>0] = 1;
 $5 = $pcx;
 $bits_per_pixel = ((($5)) + 3|0);
 HEAP8[$bits_per_pixel>>0] = 8;
 $6 = $pcx;
 $xmin = ((($6)) + 4|0);
 HEAP8[$xmin>>0]=0&255;HEAP8[$xmin+1>>0]=0>>8;
 $7 = $pcx;
 $ymin = ((($7)) + 6|0);
 HEAP8[$ymin>>0]=0&255;HEAP8[$ymin+1>>0]=0>>8;
 $8 = $width$addr;
 $sub = (($8) - 1)|0;
 $conv = $sub&65535;
 $9 = $pcx;
 $xmax = ((($9)) + 8|0);
 HEAP8[$xmax>>0]=$conv&255;HEAP8[$xmax+1>>0]=$conv>>8;
 $10 = $height$addr;
 $sub2 = (($10) - 1)|0;
 $conv3 = $sub2&65535;
 $11 = $pcx;
 $ymax = ((($11)) + 10|0);
 HEAP8[$ymax>>0]=$conv3&255;HEAP8[$ymax+1>>0]=$conv3>>8;
 $12 = $width$addr;
 $conv4 = $12&65535;
 $13 = $pcx;
 $hres = ((($13)) + 12|0);
 HEAP8[$hres>>0]=$conv4&255;HEAP8[$hres+1>>0]=$conv4>>8;
 $14 = $height$addr;
 $conv5 = $14&65535;
 $15 = $pcx;
 $vres = ((($15)) + 14|0);
 HEAP8[$vres>>0]=$conv5&255;HEAP8[$vres+1>>0]=$conv5>>8;
 $16 = $pcx;
 $palette6 = ((($16)) + 16|0);
 dest=$palette6; stop=dest+48|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $17 = $pcx;
 $color_planes = ((($17)) + 65|0);
 HEAP8[$color_planes>>0] = 1;
 $18 = $width$addr;
 $conv7 = $18&65535;
 $19 = $pcx;
 $bytes_per_line = ((($19)) + 66|0);
 HEAP8[$bytes_per_line>>0]=$conv7&255;HEAP8[$bytes_per_line+1>>0]=$conv7>>8;
 $20 = $pcx;
 $palette_type = ((($20)) + 68|0);
 HEAP8[$palette_type>>0]=2&255;HEAP8[$palette_type+1>>0]=2>>8;
 $21 = $pcx;
 $filler = ((($21)) + 70|0);
 dest=$filler; stop=dest+58|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $22 = $pcx;
 $data9 = ((($22)) + 128|0);
 $pack = $data9;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $width$addr;
  $25 = $height$addr;
  $mul10 = Math_imul($24, $25)|0;
  $cmp = ($23|0)<($mul10|0);
  if (!($cmp)) {
   break;
  }
  $26 = $data$addr;
  $27 = HEAP8[$26>>0]|0;
  $conv12 = $27&255;
  $and = $conv12 & 192;
  $cmp13 = ($and|0)!=(192);
  if ($cmp13) {
   $28 = $data$addr;
   $incdec$ptr = ((($28)) + 1|0);
   $data$addr = $incdec$ptr;
   $29 = HEAP8[$28>>0]|0;
   $30 = $pack;
   $incdec$ptr15 = ((($30)) + 1|0);
   $pack = $incdec$ptr15;
   HEAP8[$30>>0] = $29;
  } else {
   $31 = $pack;
   $incdec$ptr16 = ((($31)) + 1|0);
   $pack = $incdec$ptr16;
   HEAP8[$31>>0] = -63;
   $32 = $data$addr;
   $incdec$ptr17 = ((($32)) + 1|0);
   $data$addr = $incdec$ptr17;
   $33 = HEAP8[$32>>0]|0;
   $34 = $pack;
   $incdec$ptr18 = ((($34)) + 1|0);
   $pack = $incdec$ptr18;
   HEAP8[$34>>0] = $33;
  }
  $35 = $i;
  $inc = (($35) + 1)|0;
  $i = $inc;
 }
 $36 = $pack;
 $incdec$ptr19 = ((($36)) + 1|0);
 $pack = $incdec$ptr19;
 HEAP8[$36>>0] = 12;
 $i = 0;
 while(1) {
  $37 = $i;
  $cmp21 = ($37|0)<(768);
  if (!($cmp21)) {
   break;
  }
  $38 = $palette$addr;
  $incdec$ptr24 = ((($38)) + 1|0);
  $palette$addr = $incdec$ptr24;
  $39 = HEAP8[$38>>0]|0;
  $40 = $pack;
  $incdec$ptr25 = ((($40)) + 1|0);
  $pack = $incdec$ptr25;
  HEAP8[$40>>0] = $39;
  $41 = $i;
  $inc27 = (($41) + 1)|0;
  $i = $inc27;
 }
 $42 = $pack;
 $43 = $pcx;
 $sub$ptr$lhs$cast = $42;
 $sub$ptr$rhs$cast = $43;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $length = $sub$ptr$sub;
 $44 = $filename$addr;
 $45 = $pcx;
 $46 = $length;
 (_M_WriteFile($44,$45,$46)|0);
 $47 = $pcx;
 _Z_Free($47);
 STACKTOP = sp;return;
}
function _V_ScreenShot($format) {
 $format = $format|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call2 = 0, $call7 = 0, $cmp = 0, $cmp3 = 0, $ext = 0, $format$addr = 0, $i = 0, $inc = 0, $lbmname = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $lbmname = sp;
 $format$addr = $format;
 $ext = 157949;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<=(99);
  if (!($cmp)) {
   break;
  }
  $1 = $format$addr;
  $2 = $i;
  $3 = $ext;
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  (_M_snprintf($lbmname,16,$1,$vararg_buffer)|0);
  $call2 = (_M_FileExists($lbmname)|0);
  $tobool = ($call2|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 $5 = $i;
 $cmp3 = ($5|0)==(100);
 if ($cmp3) {
  _I_Error(157953,$vararg_buffer2);
 }
 $6 = HEAP32[100203]|0;
 $call7 = (_W_CacheLumpName(157989,8)|0);
 _WritePCXfile($lbmname,$6,320,200,$call7);
 STACKTOP = sp;return;
}
function _V_DrawMouseSpeedBox($speed) {
 $speed = $speed|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add19 = 0, $add20 = 0, $add24 = 0, $add25 = 0;
 var $add29 = 0, $add30 = 0, $add33 = 0, $add34 = 0, $bgcolor = 0, $black = 0, $bordercolor = 0, $box_x = 0, $box_y = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp7 = 0, $conv = 0.0;
 var $conv11 = 0.0, $conv12 = 0, $div = 0.0, $div14 = 0, $linelen = 0, $mul = 0, $original_speed = 0, $red = 0, $redline_x = 0, $spec$store$select = 0, $speed$addr = 0, $sub = 0.0, $sub10 = 0, $sub31 = 0, $tobool = 0, $white = 0, $yellow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $speed$addr = $speed;
 $call = (_I_GetPaletteIndex(119,119,119)|0);
 $bgcolor = $call;
 $call1 = (_I_GetPaletteIndex(85,85,85)|0);
 $bordercolor = $call1;
 $call2 = (_I_GetPaletteIndex(255,0,0)|0);
 $red = $call2;
 $call3 = (_I_GetPaletteIndex(0,0,0)|0);
 $black = $call3;
 $call4 = (_I_GetPaletteIndex(255,255,0)|0);
 $yellow = $call4;
 $call5 = (_I_GetPaletteIndex(255,255,255)|0);
 $white = $call5;
 $tobool = (0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $sub = 2.0 - 1.0;
 $conv = $sub;
 $0 = (+Math_abs((+$conv)));
 $cmp = $0 < 0.01;
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $box_x = 190;
 $box_y = 15;
 $1 = $box_x;
 $2 = $box_y;
 $3 = $bgcolor;
 _V_DrawFilledBox($1,$2,120,9,$3);
 $4 = $box_x;
 $5 = $box_y;
 $6 = $bordercolor;
 _V_DrawBox($4,$5,120,9,$6);
 $redline_x = 40;
 $7 = $speed$addr;
 $cmp7 = ($7|0)<(10);
 $8 = $speed$addr;
 if ($cmp7) {
  $original_speed = $8;
 } else {
  $sub10 = (($8) - 10)|0;
  $original_speed = $sub10;
  $9 = $original_speed;
  $conv11 = (+($9|0));
  $div = $conv11 / 2.0;
  $conv12 = (~~(($div)));
  $original_speed = $conv12;
  $10 = $original_speed;
  $add = (($10) + 10)|0;
  $original_speed = $add;
 }
 $11 = $original_speed;
 $12 = $redline_x;
 $mul = Math_imul($11, $12)|0;
 $div14 = (($mul|0) / 10)&-1;
 $linelen = $div14;
 $13 = $linelen;
 $cmp15 = ($13|0)>(119);
 $spec$store$select = $cmp15 ? 119 : $div14;
 $linelen = $spec$store$select;
 $14 = $box_x;
 $add19 = (($14) + 1)|0;
 $15 = $box_y;
 $add20 = (($15) + 4)|0;
 $16 = $black;
 _V_DrawHorizLine($add19,$add20,118,$16);
 $17 = $linelen;
 $18 = $redline_x;
 $cmp21 = ($17|0)<($18|0);
 $19 = $box_x;
 $add24 = (($19) + 1)|0;
 $20 = $box_y;
 $add25 = (($20) + 4)|0;
 if ($cmp21) {
  $21 = $linelen;
  $22 = $white;
  _V_DrawHorizLine($add24,$add25,$21,$22);
 } else {
  $23 = $redline_x;
  $24 = $white;
  _V_DrawHorizLine($add24,$add25,$23,$24);
  $25 = $box_x;
  $26 = $redline_x;
  $add29 = (($25) + ($26))|0;
  $27 = $box_y;
  $add30 = (($27) + 4)|0;
  $28 = $linelen;
  $29 = $redline_x;
  $sub31 = (($28) - ($29))|0;
  $30 = $yellow;
  _V_DrawHorizLine($add29,$add30,$sub31,$30);
 }
 $31 = $box_x;
 $32 = $redline_x;
 $add33 = (($31) + ($32))|0;
 $33 = $box_y;
 $add34 = (($33) + 1)|0;
 $34 = $red;
 _V_DrawVertLine($add33,$add34,7,$34);
 STACKTOP = sp;return;
}
function _WI_slamBackground() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100155]|0;
 _V_DrawPatch(0,0,$0);
 return;
}
function _WI_drawLF() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx6 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp14 = 0, $cmp19 = 0, $conv = 0, $conv10 = 0, $conv7 = 0, $div = 0, $div12 = 0, $div8 = 0, $height = 0, $last = 0, $last13 = 0, $last18 = 0, $last2 = 0, $last3 = 0, $last5 = 0, $mul = 0, $sub = 0, $sub11 = 0, $tmp = 0, $y = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp = sp + 8|0;
 $y = 2;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)!=(2);
 if (!($cmp)) {
  $1 = HEAP32[100156]|0;
  $last = ((($1)) + 8|0);
  $2 = HEAP32[$last>>2]|0;
  $3 = HEAP32[100157]|0;
  $cmp1 = ($2|0)<($3|0);
  if (!($cmp1)) {
   $24 = HEAP32[100156]|0;
   $last13 = ((($24)) + 8|0);
   $25 = HEAP32[$last13>>2]|0;
   $26 = HEAP32[100157]|0;
   $cmp14 = ($25|0)==($26|0);
   if ($cmp14) {
    STACKTOP = sp;return;
   }
   $27 = HEAP32[100156]|0;
   $last18 = ((($27)) + 8|0);
   $28 = HEAP32[$last18>>2]|0;
   $29 = HEAP32[100157]|0;
   $cmp19 = ($28|0)>($29|0);
   if (!($cmp19)) {
    STACKTOP = sp;return;
   }
   dest=$tmp; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   HEAP16[$tmp>>1] = 320;
   $30 = ((($tmp)) + 2|0);
   HEAP16[$30>>1] = 200;
   $31 = ((($tmp)) + 4|0);
   HEAP16[$31>>1] = 1;
   $32 = ((($tmp)) + 6|0);
   HEAP16[$32>>1] = 1;
   $33 = $y;
   _V_DrawPatch(0,$33,$tmp);
   STACKTOP = sp;return;
  }
 }
 $4 = HEAP32[100158]|0;
 $5 = HEAP32[100156]|0;
 $last2 = ((($5)) + 8|0);
 $6 = HEAP32[$last2>>2]|0;
 $arrayidx = (($4) + ($6<<2)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
 $conv = $8 << 16 >> 16;
 $sub = (320 - ($conv))|0;
 $div = (($sub|0) / 2)&-1;
 $9 = $y;
 $10 = HEAP32[100158]|0;
 $11 = HEAP32[100156]|0;
 $last3 = ((($11)) + 8|0);
 $12 = HEAP32[$last3>>2]|0;
 $arrayidx4 = (($10) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx4>>2]|0;
 _V_DrawPatch($div,$9,$13);
 $14 = HEAP32[100158]|0;
 $15 = HEAP32[100156]|0;
 $last5 = ((($15)) + 8|0);
 $16 = HEAP32[$last5>>2]|0;
 $arrayidx6 = (($14) + ($16<<2)|0);
 $17 = HEAP32[$arrayidx6>>2]|0;
 $height = ((($17)) + 2|0);
 $18 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv7 = $18 << 16 >> 16;
 $mul = ($conv7*5)|0;
 $div8 = (($mul|0) / 4)&-1;
 $19 = $y;
 $add = (($19) + ($div8))|0;
 $y = $add;
 $20 = HEAP32[100159]|0;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8);
 $conv10 = $21 << 16 >> 16;
 $sub11 = (320 - ($conv10))|0;
 $div12 = (($sub11|0) / 2)&-1;
 $22 = $y;
 $23 = HEAP32[100159]|0;
 _V_DrawPatch($div12,$22,$23);
 STACKTOP = sp;return;
}
function _WI_drawEL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx4 = 0, $conv = 0, $conv1 = 0, $conv6 = 0, $div = 0, $div2 = 0, $div8 = 0, $height = 0, $mul = 0, $next = 0, $next3 = 0, $next9 = 0, $sub = 0, $sub7 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $y = 2;
 $0 = HEAP32[100160]|0;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $sub = (320 - ($conv))|0;
 $div = (($sub|0) / 2)&-1;
 $2 = $y;
 $3 = HEAP32[100160]|0;
 _V_DrawPatch($div,$2,$3);
 $4 = HEAP32[100158]|0;
 $5 = HEAP32[100156]|0;
 $next = ((($5)) + 12|0);
 $6 = HEAP32[$next>>2]|0;
 $arrayidx = (($4) + ($6<<2)|0);
 $7 = HEAP32[$arrayidx>>2]|0;
 $height = ((($7)) + 2|0);
 $8 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv1 = $8 << 16 >> 16;
 $mul = ($conv1*5)|0;
 $div2 = (($mul|0) / 4)&-1;
 $9 = $y;
 $add = (($9) + ($div2))|0;
 $y = $add;
 $10 = HEAP32[100158]|0;
 $11 = HEAP32[100156]|0;
 $next3 = ((($11)) + 12|0);
 $12 = HEAP32[$next3>>2]|0;
 $arrayidx4 = (($10) + ($12<<2)|0);
 $13 = HEAP32[$arrayidx4>>2]|0;
 $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
 $conv6 = $14 << 16 >> 16;
 $sub7 = (320 - ($conv6))|0;
 $div8 = (($sub7|0) / 2)&-1;
 $15 = $y;
 $16 = HEAP32[100158]|0;
 $17 = HEAP32[100156]|0;
 $next9 = ((($17)) + 12|0);
 $18 = HEAP32[$next9>>2]|0;
 $arrayidx10 = (($16) + ($18<<2)|0);
 $19 = HEAP32[$arrayidx10>>2]|0;
 _V_DrawPatch($div8,$15,$19);
 STACKTOP = sp;return;
}
function _WI_drawOnLnode($n,$c) {
 $n = $n|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add13 = 0, $add44 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx2 = 0, $arrayidx26 = 0, $arrayidx35 = 0, $arrayidx36 = 0;
 var $arrayidx39 = 0, $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx42 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx9 = 0, $bottom = 0, $c$addr = 0, $cmp = 0, $cmp15 = 0, $cmp18 = 0, $cmp21 = 0, $cmp24 = 0, $cmp27 = 0, $cmp31 = 0, $conv = 0, $conv10 = 0, $conv12 = 0, $conv7 = 0;
 var $fits = 0, $height = 0, $i = 0, $inc = 0, $left = 0, $leftoffset = 0, $n$addr = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $right = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool29 = 0, $top = 0, $topoffset = 0, $vararg_buffer = 0;
 var $y = 0, $y41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $n$addr = $n;
 $c$addr = $c;
 $fits = 0;
 $i = 0;
 while(1) {
  $0 = HEAP32[100156]|0;
  $1 = HEAP32[$0>>2]|0;
  $arrayidx = (125248 + (($1*72)|0)|0);
  $2 = $n$addr;
  $arrayidx1 = (($arrayidx) + ($2<<3)|0);
  $3 = HEAP32[$arrayidx1>>2]|0;
  $4 = $c$addr;
  $5 = $i;
  $arrayidx2 = (($4) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx2>>2]|0;
  $leftoffset = ((($6)) + 4|0);
  $7 = HEAPU8[$leftoffset>>0]|(HEAPU8[$leftoffset+1>>0]<<8);
  $conv = $7 << 16 >> 16;
  $sub = (($3) - ($conv))|0;
  $left = $sub;
  $8 = HEAP32[100156]|0;
  $9 = HEAP32[$8>>2]|0;
  $arrayidx4 = (125248 + (($9*72)|0)|0);
  $10 = $n$addr;
  $arrayidx5 = (($arrayidx4) + ($10<<3)|0);
  $y = ((($arrayidx5)) + 4|0);
  $11 = HEAP32[$y>>2]|0;
  $12 = $c$addr;
  $13 = $i;
  $arrayidx6 = (($12) + ($13<<2)|0);
  $14 = HEAP32[$arrayidx6>>2]|0;
  $topoffset = ((($14)) + 6|0);
  $15 = HEAPU8[$topoffset>>0]|(HEAPU8[$topoffset+1>>0]<<8);
  $conv7 = $15 << 16 >> 16;
  $sub8 = (($11) - ($conv7))|0;
  $top = $sub8;
  $16 = $left;
  $17 = $c$addr;
  $18 = $i;
  $arrayidx9 = (($17) + ($18<<2)|0);
  $19 = HEAP32[$arrayidx9>>2]|0;
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
  $conv10 = $20 << 16 >> 16;
  $add = (($16) + ($conv10))|0;
  $right = $add;
  $21 = $top;
  $22 = $c$addr;
  $23 = $i;
  $arrayidx11 = (($22) + ($23<<2)|0);
  $24 = HEAP32[$arrayidx11>>2]|0;
  $height = ((($24)) + 2|0);
  $25 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
  $conv12 = $25 << 16 >> 16;
  $add13 = (($21) + ($conv12))|0;
  $bottom = $add13;
  $26 = $left;
  $cmp = ($26|0)>=(0);
  $27 = $right;
  $cmp15 = ($27|0)<(320);
  $or$cond = $cmp & $cmp15;
  $28 = $top;
  $cmp18 = ($28|0)>=(0);
  $or$cond1 = $or$cond & $cmp18;
  $29 = $bottom;
  $cmp21 = ($29|0)<(200);
  $or$cond2 = $or$cond1 & $cmp21;
  if ($or$cond2) {
   $fits = 1;
  } else {
   $30 = $i;
   $inc = (($30) + 1)|0;
   $i = $inc;
  }
  $31 = $fits;
  $tobool = ($31|0)==(0);
  $32 = $i;
  $cmp24 = ($32|0)!=(2);
  $or$cond3 = $tobool & $cmp24;
  if (!($or$cond3)) {
   break;
  }
  $33 = $c$addr;
  $34 = $i;
  $arrayidx26 = (($33) + ($34<<2)|0);
  $35 = HEAP32[$arrayidx26>>2]|0;
  $cmp27 = ($35|0)!=(0|0);
  if (!($cmp27)) {
   break;
  }
 }
 $36 = $fits;
 $tobool29 = ($36|0)!=(0);
 $37 = $i;
 $cmp31 = ($37|0)<(2);
 $or$cond4 = $tobool29 & $cmp31;
 if ($or$cond4) {
  $38 = HEAP32[100156]|0;
  $39 = HEAP32[$38>>2]|0;
  $arrayidx35 = (125248 + (($39*72)|0)|0);
  $40 = $n$addr;
  $arrayidx36 = (($arrayidx35) + ($40<<3)|0);
  $41 = HEAP32[$arrayidx36>>2]|0;
  $42 = HEAP32[100156]|0;
  $43 = HEAP32[$42>>2]|0;
  $arrayidx39 = (125248 + (($43*72)|0)|0);
  $44 = $n$addr;
  $arrayidx40 = (($arrayidx39) + ($44<<3)|0);
  $y41 = ((($arrayidx40)) + 4|0);
  $45 = HEAP32[$y41>>2]|0;
  $46 = $c$addr;
  $47 = $i;
  $arrayidx42 = (($46) + ($47<<2)|0);
  $48 = HEAP32[$arrayidx42>>2]|0;
  _V_DrawPatch($41,$45,$48);
  STACKTOP = sp;return;
 } else {
  $49 = $n$addr;
  $add44 = (($49) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $add44;
  (_printf(157997,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _WI_initAnimatedBack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $add = 0, $add11 = 0, $add15 = 0, $add16 = 0, $add19 = 0, $add25 = 0, $arrayidx = 0, $arrayidx7 = 0;
 var $arrayidx8 = 0, $call = 0, $call17 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp23 = 0, $cmp5 = 0, $cmp9 = 0, $ctr = 0, $data1 = 0, $data2 = 0, $i = 0, $inc = 0, $nexttic = 0, $nexttic20 = 0, $nexttic26 = 0, $period = 0, $rem = 0, $rem18 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[100156]|0;
 $2 = HEAP32[$1>>2]|0;
 $cmp1 = ($2|0)>(2);
 if ($cmp1) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[100156]|0;
  $5 = HEAP32[$4>>2]|0;
  $arrayidx = (125536 + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $cmp5 = ($3|0)<($6|0);
  if (!($cmp5)) {
   break;
  }
  $7 = HEAP32[100156]|0;
  $8 = HEAP32[$7>>2]|0;
  $arrayidx7 = (125552 + ($8<<2)|0);
  $9 = HEAP32[$arrayidx7>>2]|0;
  $10 = $i;
  $arrayidx8 = (($9) + (($10*56)|0)|0);
  $a = $arrayidx8;
  $11 = $a;
  $ctr = ((($11)) + 48|0);
  HEAP32[$ctr>>2] = -1;
  $12 = $a;
  $13 = HEAP32[$12>>2]|0;
  $cmp9 = ($13|0)==(0);
  do {
   if ($cmp9) {
    $14 = HEAP32[100161]|0;
    $add = (($14) + 1)|0;
    $call = (_M_Random()|0);
    $15 = $a;
    $period = ((($15)) + 4|0);
    $16 = HEAP32[$period>>2]|0;
    $rem = (($call|0) % ($16|0))&-1;
    $add11 = (($add) + ($rem))|0;
    $17 = $a;
    $nexttic = ((($17)) + 40|0);
    HEAP32[$nexttic>>2] = $add11;
   } else {
    $18 = $a;
    $19 = HEAP32[$18>>2]|0;
    $cmp13 = ($19|0)==(1);
    if ($cmp13) {
     $20 = HEAP32[100161]|0;
     $add15 = (($20) + 1)|0;
     $21 = $a;
     $data2 = ((($21)) + 24|0);
     $22 = HEAP32[$data2>>2]|0;
     $add16 = (($add15) + ($22))|0;
     $call17 = (_M_Random()|0);
     $23 = $a;
     $data1 = ((($23)) + 20|0);
     $24 = HEAP32[$data1>>2]|0;
     $rem18 = (($call17|0) % ($24|0))&-1;
     $add19 = (($add16) + ($rem18))|0;
     $25 = $a;
     $nexttic20 = ((($25)) + 40|0);
     HEAP32[$nexttic20>>2] = $add19;
     break;
    }
    $26 = $a;
    $27 = HEAP32[$26>>2]|0;
    $cmp23 = ($27|0)==(2);
    if ($cmp23) {
     $28 = HEAP32[100161]|0;
     $add25 = (($28) + 1)|0;
     $29 = $a;
     $nexttic26 = ((($29)) + 40|0);
     HEAP32[$nexttic26>>2] = $add25;
    }
   }
  } while(0);
  $30 = $i;
  $inc = (($30) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _WI_updateAnimatedBack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a = 0, $add = 0, $add24 = 0, $add25 = 0, $add28 = 0, $add47 = 0, $arrayidx = 0, $arrayidx7 = 0, $arrayidx8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp21 = 0, $cmp32 = 0, $cmp33 = 0, $cmp36 = 0, $cmp42 = 0, $cmp5 = 0;
 var $cmp9 = 0, $ctr = 0, $ctr13 = 0, $ctr17 = 0, $ctr19 = 0, $ctr23 = 0, $ctr38 = 0, $ctr40 = 0, $ctr44 = 0, $data1 = 0, $data135 = 0, $data2 = 0, $dec = 0, $i = 0, $inc = 0, $inc18 = 0, $inc39 = 0, $inc51 = 0, $nanims = 0, $nanims20 = 0;
 var $nanims41 = 0, $next = 0, $nexttic = 0, $nexttic15 = 0, $nexttic26 = 0, $nexttic29 = 0, $nexttic48 = 0, $or$cond = 0, $period = 0, $period27 = 0, $period46 = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[100156]|0;
 $2 = HEAP32[$1>>2]|0;
 $cmp1 = ($2|0)>(2);
 if ($cmp1) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[100156]|0;
  $5 = HEAP32[$4>>2]|0;
  $arrayidx = (125536 + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $cmp5 = ($3|0)<($6|0);
  if (!($cmp5)) {
   break;
  }
  $7 = HEAP32[100156]|0;
  $8 = HEAP32[$7>>2]|0;
  $arrayidx7 = (125552 + ($8<<2)|0);
  $9 = HEAP32[$arrayidx7>>2]|0;
  $10 = $i;
  $arrayidx8 = (($9) + (($10*56)|0)|0);
  $a = $arrayidx8;
  $11 = HEAP32[100161]|0;
  $12 = $a;
  $nexttic = ((($12)) + 40|0);
  $13 = HEAP32[$nexttic>>2]|0;
  $cmp9 = ($11|0)==($13|0);
  L10: do {
   if ($cmp9) {
    $14 = $a;
    $15 = HEAP32[$14>>2]|0;
    switch ($15|0) {
    case 0:  {
     $16 = $a;
     $ctr = ((($16)) + 48|0);
     $17 = HEAP32[$ctr>>2]|0;
     $inc = (($17) + 1)|0;
     HEAP32[$ctr>>2] = $inc;
     $18 = $a;
     $nanims = ((($18)) + 8|0);
     $19 = HEAP32[$nanims>>2]|0;
     $cmp11 = ($inc|0)>=($19|0);
     if ($cmp11) {
      $20 = $a;
      $ctr13 = ((($20)) + 48|0);
      HEAP32[$ctr13>>2] = 0;
     }
     $21 = HEAP32[100161]|0;
     $22 = $a;
     $period = ((($22)) + 4|0);
     $23 = HEAP32[$period>>2]|0;
     $add = (($21) + ($23))|0;
     $24 = $a;
     $nexttic15 = ((($24)) + 40|0);
     HEAP32[$nexttic15>>2] = $add;
     break L10;
     break;
    }
    case 1:  {
     $25 = $a;
     $ctr17 = ((($25)) + 48|0);
     $26 = HEAP32[$ctr17>>2]|0;
     $inc18 = (($26) + 1)|0;
     HEAP32[$ctr17>>2] = $inc18;
     $27 = $a;
     $ctr19 = ((($27)) + 48|0);
     $28 = HEAP32[$ctr19>>2]|0;
     $29 = $a;
     $nanims20 = ((($29)) + 8|0);
     $30 = HEAP32[$nanims20>>2]|0;
     $cmp21 = ($28|0)==($30|0);
     if ($cmp21) {
      $31 = $a;
      $ctr23 = ((($31)) + 48|0);
      HEAP32[$ctr23>>2] = -1;
      $32 = HEAP32[100161]|0;
      $33 = $a;
      $data2 = ((($33)) + 24|0);
      $34 = HEAP32[$data2>>2]|0;
      $add24 = (($32) + ($34))|0;
      $call = (_M_Random()|0);
      $35 = $a;
      $data1 = ((($35)) + 20|0);
      $36 = HEAP32[$data1>>2]|0;
      $rem = (($call|0) % ($36|0))&-1;
      $add25 = (($add24) + ($rem))|0;
      $37 = $a;
      $nexttic26 = ((($37)) + 40|0);
      HEAP32[$nexttic26>>2] = $add25;
      break L10;
     } else {
      $38 = HEAP32[100161]|0;
      $39 = $a;
      $period27 = ((($39)) + 4|0);
      $40 = HEAP32[$period27>>2]|0;
      $add28 = (($38) + ($40))|0;
      $41 = $a;
      $nexttic29 = ((($41)) + 40|0);
      HEAP32[$nexttic29>>2] = $add28;
      break L10;
     }
     break;
    }
    case 2:  {
     $42 = HEAP32[100162]|0;
     $cmp32 = ($42|0)==(0);
     $43 = $i;
     $cmp33 = ($43|0)==(7);
     $or$cond = $cmp32 & $cmp33;
     if ($or$cond) {
      break L10;
     }
     $44 = HEAP32[100156]|0;
     $next = ((($44)) + 12|0);
     $45 = HEAP32[$next>>2]|0;
     $46 = $a;
     $data135 = ((($46)) + 20|0);
     $47 = HEAP32[$data135>>2]|0;
     $cmp36 = ($45|0)==($47|0);
     if (!($cmp36)) {
      break L10;
     }
     $48 = $a;
     $ctr38 = ((($48)) + 48|0);
     $49 = HEAP32[$ctr38>>2]|0;
     $inc39 = (($49) + 1)|0;
     HEAP32[$ctr38>>2] = $inc39;
     $50 = $a;
     $ctr40 = ((($50)) + 48|0);
     $51 = HEAP32[$ctr40>>2]|0;
     $52 = $a;
     $nanims41 = ((($52)) + 8|0);
     $53 = HEAP32[$nanims41>>2]|0;
     $cmp42 = ($51|0)==($53|0);
     if ($cmp42) {
      $54 = $a;
      $ctr44 = ((($54)) + 48|0);
      $55 = HEAP32[$ctr44>>2]|0;
      $dec = (($55) + -1)|0;
      HEAP32[$ctr44>>2] = $dec;
     }
     $56 = HEAP32[100161]|0;
     $57 = $a;
     $period46 = ((($57)) + 4|0);
     $58 = HEAP32[$period46>>2]|0;
     $add47 = (($56) + ($58))|0;
     $59 = $a;
     $nexttic48 = ((($59)) + 40|0);
     HEAP32[$nexttic48>>2] = $add47;
     break L10;
     break;
    }
    default: {
     break L10;
    }
    }
   }
  } while(0);
  $60 = $i;
  $inc51 = (($60) + 1)|0;
  $i = $inc51;
 }
 STACKTOP = sp;return;
}
function _WI_drawAnimatedBack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $cmp9 = 0, $ctr = 0, $ctr12 = 0, $i = 0, $inc = 0, $loc = 0, $loc11 = 0, $p = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[100156]|0;
 $2 = HEAP32[$1>>2]|0;
 $cmp1 = ($2|0)>(2);
 if ($cmp1) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = HEAP32[100156]|0;
  $5 = HEAP32[$4>>2]|0;
  $arrayidx = (125536 + ($5<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $cmp5 = ($3|0)<($6|0);
  if (!($cmp5)) {
   break;
  }
  $7 = HEAP32[100156]|0;
  $8 = HEAP32[$7>>2]|0;
  $arrayidx7 = (125552 + ($8<<2)|0);
  $9 = HEAP32[$arrayidx7>>2]|0;
  $10 = $i;
  $arrayidx8 = (($9) + (($10*56)|0)|0);
  $a = $arrayidx8;
  $11 = $a;
  $ctr = ((($11)) + 48|0);
  $12 = HEAP32[$ctr>>2]|0;
  $cmp9 = ($12|0)>=(0);
  if ($cmp9) {
   $13 = $a;
   $loc = ((($13)) + 12|0);
   $14 = HEAP32[$loc>>2]|0;
   $15 = $a;
   $loc11 = ((($15)) + 12|0);
   $y = ((($loc11)) + 4|0);
   $16 = HEAP32[$y>>2]|0;
   $17 = $a;
   $p = ((($17)) + 28|0);
   $18 = $a;
   $ctr12 = ((($18)) + 48|0);
   $19 = HEAP32[$ctr12>>2]|0;
   $arrayidx13 = (($p) + ($19<<2)|0);
   $20 = HEAP32[$arrayidx13>>2]|0;
   _V_DrawPatch($14,$16,$20);
  }
  $21 = $i;
  $inc = (($21) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _WI_drawNum($x,$y,$n,$digits) {
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $digits = $digits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $conv = 0, $conv6 = 0, $dec = 0, $digits$addr = 0, $div = 0, $div18 = 0, $fontwidth = 0, $inc = 0, $n$addr = 0, $neg = 0;
 var $rem = 0, $retval = 0, $sub = 0, $sub17 = 0, $sub22 = 0, $temp = 0, $tobool = 0, $tobool15 = 0, $tobool20 = 0, $tobool3 = 0, $tobool7 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $n$addr = $n;
 $digits$addr = $digits;
 $0 = HEAP32[98744]|0;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $fontwidth = $conv;
 $2 = $digits$addr;
 $cmp = ($2|0)<(0);
 L1: do {
  if ($cmp) {
   $3 = $n$addr;
   $tobool = ($3|0)!=(0);
   if (!($tobool)) {
    $digits$addr = 1;
    break;
   }
   $digits$addr = 0;
   $4 = $n$addr;
   $temp = $4;
   while(1) {
    $5 = $temp;
    $tobool3 = ($5|0)!=(0);
    if (!($tobool3)) {
     break L1;
    }
    $6 = $temp;
    $div = (($6|0) / 10)&-1;
    $temp = $div;
    $7 = $digits$addr;
    $inc = (($7) + 1)|0;
    $digits$addr = $inc;
   }
  }
 } while(0);
 $8 = $n$addr;
 $cmp5 = ($8|0)<(0);
 $conv6 = $cmp5&1;
 $neg = $conv6;
 $9 = $neg;
 $tobool7 = ($9|0)!=(0);
 if ($tobool7) {
  $10 = $n$addr;
  $sub = (0 - ($10))|0;
  $n$addr = $sub;
 }
 $11 = $n$addr;
 $cmp10 = ($11|0)==(1994);
 if ($cmp10) {
  $retval = 0;
  $25 = $retval;
  STACKTOP = sp;return ($25|0);
 }
 while(1) {
  $12 = $digits$addr;
  $dec = (($12) + -1)|0;
  $digits$addr = $dec;
  $tobool15 = ($12|0)!=(0);
  if (!($tobool15)) {
   break;
  }
  $13 = $fontwidth;
  $14 = $x$addr;
  $sub17 = (($14) - ($13))|0;
  $x$addr = $sub17;
  $15 = $x$addr;
  $16 = $y$addr;
  $17 = $n$addr;
  $rem = (($17|0) % 10)&-1;
  $arrayidx = (394976 + ($rem<<2)|0);
  $18 = HEAP32[$arrayidx>>2]|0;
  _V_DrawPatch($15,$16,$18);
  $19 = $n$addr;
  $div18 = (($19|0) / 10)&-1;
  $n$addr = $div18;
 }
 $20 = $neg;
 $tobool20 = ($20|0)!=(0);
 if ($tobool20) {
  $21 = $x$addr;
  $sub22 = (($21) - 8)|0;
  $x$addr = $sub22;
  $22 = $y$addr;
  $23 = HEAP32[100163]|0;
  _V_DrawPatch($sub22,$22,$23);
 }
 $24 = $x$addr;
 $retval = $24;
 $25 = $retval;
 STACKTOP = sp;return ($25|0);
}
function _WI_drawPercent($x,$y,$p) {
 $x = $x|0;
 $y = $y|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $p$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $p$addr = $p;
 $0 = $p$addr;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = HEAP32[100164]|0;
 _V_DrawPatch($1,$2,$3);
 $4 = $x$addr;
 $5 = $y$addr;
 $6 = $p$addr;
 (_WI_drawNum($4,$5,$6,-1)|0);
 STACKTOP = sp;return;
}
function _WI_drawTime($x,$y,$t) {
 $x = $x|0;
 $y = $y|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $conv = 0, $conv12 = 0, $div = 0, $div3 = 0, $div6 = 0, $div9 = 0, $mul = 0, $n = 0, $rem = 0, $sub = 0, $sub13 = 0, $t$addr = 0, $tobool = 0;
 var $tobool10 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$addr = $x;
 $y$addr = $y;
 $t$addr = $t;
 $0 = $t$addr;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $1 = $t$addr;
 $cmp1 = ($1|0)<=(3599);
 if (!($cmp1)) {
  $18 = $x$addr;
  $19 = HEAP32[100166]|0;
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
  $conv12 = $20 << 16 >> 16;
  $sub13 = (($18) - ($conv12))|0;
  $21 = $y$addr;
  $22 = HEAP32[100166]|0;
  _V_DrawPatch($sub13,$21,$22);
  STACKTOP = sp;return;
 }
 $div = 1;
 while(1) {
  $2 = $t$addr;
  $3 = $div;
  $div3 = (($2|0) / ($3|0))&-1;
  $rem = (($div3|0) % 60)&-1;
  $n = $rem;
  $4 = $x$addr;
  $5 = $y$addr;
  $6 = $n;
  $call = (_WI_drawNum($4,$5,$6,2)|0);
  $7 = HEAP32[100165]|0;
  $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8);
  $conv = $8 << 16 >> 16;
  $sub = (($call) - ($conv))|0;
  $x$addr = $sub;
  $9 = $div;
  $mul = ($9*60)|0;
  $div = $mul;
  $10 = $div;
  $cmp4 = ($10|0)==(60);
  if ($cmp4) {
   label = 6;
  } else {
   $11 = $t$addr;
   $12 = $div;
   $div6 = (($11|0) / ($12|0))&-1;
   $tobool = ($div6|0)!=(0);
   if ($tobool) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $13 = $x$addr;
   $14 = $y$addr;
   $15 = HEAP32[100165]|0;
   _V_DrawPatch($13,$14,$15);
  }
  $16 = $t$addr;
  $17 = $div;
  $div9 = (($16|0) / ($17|0))&-1;
  $tobool10 = ($div9|0)!=(0);
  if (!($tobool10)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _WI_End() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _WI_unloadData();
 return;
}
function _WI_unloadData() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _WI_loadUnloadData(164);
 return;
}
function _WI_unloadCallback($name,$variable) {
 $name = $name|0;
 $variable = $variable|0;
 var $0 = 0, $1 = 0, $name$addr = 0, $variable$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $variable$addr = $variable;
 $0 = $name$addr;
 _W_ReleaseLumpName($0);
 $1 = $variable$addr;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function _WI_loadUnloadData($callback) {
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $a = 0, $add = 0, $arrayidx = 0, $arrayidx18 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx35 = 0, $arrayidx37 = 0, $arrayidx39 = 0, $arrayidx41 = 0, $arrayidx56 = 0, $arrayidx75 = 0, $arrayidx79 = 0;
 var $arrayidx9 = 0, $call60 = 0, $callback$addr = 0, $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp19 = 0, $cmp25 = 0, $cmp28 = 0, $cmp29 = 0, $cmp4 = 0, $cmp51 = 0, $cmp61 = 0, $cmp70 = 0, $cmp83 = 0, $cmp88 = 0, $cmp91 = 0, $i = 0, $inc = 0, $inc11 = 0;
 var $inc43 = 0, $inc46 = 0, $inc58 = 0, $inc81 = 0, $j = 0, $name = 0, $nanims = 0, $or$cond = 0, $or$cond1 = 0, $p = 0, $p38 = 0, $p40 = 0, $tobool = 0, $tobool63 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 76|0;
 $callback$addr = $callback;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 $i = 0;
 L1: do {
  if ($cmp) {
   while(1) {
    $1 = $i;
    $2 = HEAP32[100157]|0;
    $cmp1 = ($1|0)<($2|0);
    if (!($cmp1)) {
     break L1;
    }
    $3 = $i;
    HEAP32[$vararg_buffer>>2] = $3;
    (_snprintf($name,9,158031,$vararg_buffer)|0);
    $4 = $callback$addr;
    $5 = HEAP32[100158]|0;
    $6 = $i;
    $arrayidx = (($5) + ($6<<2)|0);
    FUNCTION_TABLE_vii[$4 & 255]($name,$arrayidx);
    $7 = $i;
    $inc = (($7) + 1)|0;
    $i = $inc;
   }
  } else {
   while(1) {
    $8 = $i;
    $cmp4 = ($8|0)<(9);
    if (!($cmp4)) {
     break;
    }
    $9 = HEAP32[100156]|0;
    $10 = HEAP32[$9>>2]|0;
    $11 = $i;
    HEAP32[$vararg_buffer2>>2] = $10;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $11;
    (_snprintf($name,9,158042,$vararg_buffer2)|0);
    $12 = $callback$addr;
    $13 = HEAP32[100158]|0;
    $14 = $i;
    $arrayidx9 = (($13) + ($14<<2)|0);
    FUNCTION_TABLE_vii[$12 & 255]($name,$arrayidx9);
    $15 = $i;
    $inc11 = (($15) + 1)|0;
    $i = $inc11;
   }
   $16 = $callback$addr;
   FUNCTION_TABLE_vii[$16 & 255](158051,400668);
   $17 = $callback$addr;
   FUNCTION_TABLE_vii[$17 & 255](158058,(400672));
   $18 = $callback$addr;
   FUNCTION_TABLE_vii[$18 & 255](158065,400680);
   $19 = HEAP32[100156]|0;
   $20 = HEAP32[$19>>2]|0;
   $cmp14 = ($20|0)<(3);
   if ($cmp14) {
    $j = 0;
    while(1) {
     $21 = $j;
     $22 = HEAP32[100156]|0;
     $23 = HEAP32[$22>>2]|0;
     $arrayidx18 = (125536 + ($23<<2)|0);
     $24 = HEAP32[$arrayidx18>>2]|0;
     $cmp19 = ($21|0)<($24|0);
     if (!($cmp19)) {
      break L1;
     }
     $25 = HEAP32[100156]|0;
     $26 = HEAP32[$25>>2]|0;
     $arrayidx22 = (125552 + ($26<<2)|0);
     $27 = HEAP32[$arrayidx22>>2]|0;
     $28 = $j;
     $arrayidx23 = (($27) + (($28*56)|0)|0);
     $a = $arrayidx23;
     $i = 0;
     while(1) {
      $29 = $i;
      $30 = $a;
      $nanims = ((($30)) + 8|0);
      $31 = HEAP32[$nanims>>2]|0;
      $cmp25 = ($29|0)<($31|0);
      if (!($cmp25)) {
       break;
      }
      $32 = HEAP32[100156]|0;
      $33 = HEAP32[$32>>2]|0;
      $cmp28 = ($33|0)!=(1);
      $34 = $j;
      $cmp29 = ($34|0)!=(8);
      $or$cond = $cmp28 | $cmp29;
      if ($or$cond) {
       $35 = HEAP32[100156]|0;
       $36 = HEAP32[$35>>2]|0;
       $37 = $j;
       $38 = $i;
       HEAP32[$vararg_buffer6>>2] = $36;
       $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
       HEAP32[$vararg_ptr9>>2] = $37;
       $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
       HEAP32[$vararg_ptr10>>2] = $38;
       (_snprintf($name,9,158073,$vararg_buffer6)|0);
       $39 = $callback$addr;
       $40 = $a;
       $p = ((($40)) + 28|0);
       $41 = $i;
       $arrayidx35 = (($p) + ($41<<2)|0);
       FUNCTION_TABLE_vii[$39 & 255]($name,$arrayidx35);
      } else {
       $arrayidx37 = 126352;
       $p38 = ((($arrayidx37)) + 28|0);
       $42 = $i;
       $arrayidx39 = (($p38) + ($42<<2)|0);
       $43 = HEAP32[$arrayidx39>>2]|0;
       $44 = $a;
       $p40 = ((($44)) + 28|0);
       $45 = $i;
       $arrayidx41 = (($p40) + ($45<<2)|0);
       HEAP32[$arrayidx41>>2] = $43;
      }
      $46 = $i;
      $inc43 = (($46) + 1)|0;
      $i = $inc43;
     }
     $47 = $j;
     $inc46 = (($47) + 1)|0;
     $j = $inc46;
    }
   }
  }
 } while(0);
 $48 = $callback$addr;
 FUNCTION_TABLE_vii[$48 & 255](158087,400652);
 $i = 0;
 while(1) {
  $49 = $i;
  $cmp51 = ($49|0)<(10);
  if (!($cmp51)) {
   break;
  }
  $50 = $i;
  HEAP32[$vararg_buffer11>>2] = $50;
  (_snprintf($name,9,158095,$vararg_buffer11)|0);
  $51 = $callback$addr;
  $52 = $i;
  $arrayidx56 = (394976 + ($52<<2)|0);
  FUNCTION_TABLE_vii[$51 & 255]($name,$arrayidx56);
  $53 = $i;
  $inc58 = (($53) + 1)|0;
  $i = $inc58;
 }
 $54 = $callback$addr;
 FUNCTION_TABLE_vii[$54 & 255](158103,400656);
 $55 = $callback$addr;
 FUNCTION_TABLE_vii[$55 & 255](158110,400636);
 $56 = $callback$addr;
 FUNCTION_TABLE_vii[$56 & 255](158114,400640);
 $57 = $callback$addr;
 FUNCTION_TABLE_vii[$57 & 255](158122,400688);
 $58 = $callback$addr;
 FUNCTION_TABLE_vii[$58 & 255](158129,400692);
 $59 = $callback$addr;
 FUNCTION_TABLE_vii[$59 & 255](158136,400696);
 $call60 = (_W_CheckNumForName(158144)|0);
 $cmp61 = ($call60|0)>=(0);
 do {
  if ($cmp61) {
   $60 = HEAP32[99433]|0;
   $tobool = ($60|0)==(0);
   $61 = HEAP32[99430]|0;
   $tobool63 = ($61|0)!=(0);
   $or$cond1 = $tobool | $tobool63;
   $62 = $callback$addr;
   if ($or$cond1) {
    FUNCTION_TABLE_vii[$62 & 255](158150,400700);
    break;
   } else {
    FUNCTION_TABLE_vii[$62 & 255](158144,400700);
    break;
   }
  } else {
   $63 = $callback$addr;
   FUNCTION_TABLE_vii[$63 & 255](158150,400700);
  }
 } while(0);
 $64 = $callback$addr;
 FUNCTION_TABLE_vii[$64 & 255](158157,400704);
 $65 = $callback$addr;
 FUNCTION_TABLE_vii[$65 & 255](158164,400660);
 $66 = $callback$addr;
 FUNCTION_TABLE_vii[$66 & 255](158172,400708);
 $67 = $callback$addr;
 FUNCTION_TABLE_vii[$67 & 255](158179,400664);
 $68 = $callback$addr;
 FUNCTION_TABLE_vii[$68 & 255](158187,400712);
 $69 = $callback$addr;
 FUNCTION_TABLE_vii[$69 & 255](158193,400716);
 $70 = $callback$addr;
 FUNCTION_TABLE_vii[$70 & 255](158201,400720);
 $71 = $callback$addr;
 FUNCTION_TABLE_vii[$71 & 255](158209,400724);
 $i = 0;
 while(1) {
  $72 = $i;
  $cmp70 = ($72|0)<(4);
  if (!($cmp70)) {
   break;
  }
  $73 = $i;
  HEAP32[$vararg_buffer14>>2] = $73;
  (_snprintf($name,9,158216,$vararg_buffer14)|0);
  $74 = $callback$addr;
  $75 = $i;
  $arrayidx75 = (395024 + ($75<<2)|0);
  FUNCTION_TABLE_vii[$74 & 255]($name,$arrayidx75);
  $76 = $i;
  $add = (($76) + 1)|0;
  HEAP32[$vararg_buffer17>>2] = $add;
  (_snprintf($name,9,158223,$vararg_buffer17)|0);
  $77 = $callback$addr;
  $78 = $i;
  $arrayidx79 = (395040 + ($78<<2)|0);
  FUNCTION_TABLE_vii[$77 & 255]($name,$arrayidx79);
  $79 = $i;
  $inc81 = (($79) + 1)|0;
  $i = $inc81;
 }
 $80 = HEAP32[32168]|0;
 $cmp83 = ($80|0)==(2);
 if ($cmp83) {
  (_M_StringCopy($name,158230,9)|0);
  $86 = $callback$addr;
  FUNCTION_TABLE_vii[$86 & 255]($name,400620);
  STACKTOP = sp;return;
 }
 $81 = HEAP32[32168]|0;
 $cmp88 = ($81|0)==(3);
 if ($cmp88) {
  $82 = HEAP32[100156]|0;
  $83 = HEAP32[$82>>2]|0;
  $cmp91 = ($83|0)==(3);
  if ($cmp91) {
   (_M_StringCopy($name,158230,9)|0);
   $86 = $callback$addr;
   FUNCTION_TABLE_vii[$86 & 255]($name,400620);
   STACKTOP = sp;return;
  }
 }
 $84 = HEAP32[100156]|0;
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$vararg_buffer20>>2] = $85;
 (_snprintf($name,9,158239,$vararg_buffer20)|0);
 $86 = $callback$addr;
 FUNCTION_TABLE_vii[$86 & 255]($name,400620);
 STACKTOP = sp;return;
}
function _WI_initNoState() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100162] = -1;
 HEAP32[100182] = 0;
 HEAP32[100183] = 10;
 return;
}
function _WI_updateNoState() {
 var $0 = 0, $dec = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WI_updateAnimatedBack();
 $0 = HEAP32[100183]|0;
 $dec = (($0) + -1)|0;
 HEAP32[100183] = $dec;
 $tobool = ($dec|0)!=(0);
 if ($tobool) {
  return;
 }
 _G_WorldDone();
 return;
}
function _WI_initShowNextLoc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100162] = 1;
 HEAP32[100182] = 0;
 HEAP32[100183] = 140;
 _WI_initAnimatedBack();
 return;
}
function _WI_updateShowNextLoc() {
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $conv = 0, $dec = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WI_updateAnimatedBack();
 $0 = HEAP32[100183]|0;
 $dec = (($0) + -1)|0;
 HEAP32[100183] = $dec;
 $tobool = ($dec|0)==(0);
 $1 = HEAP32[100182]|0;
 $tobool1 = ($1|0)!=(0);
 $or$cond = $tobool | $tobool1;
 if ($or$cond) {
  _WI_initNoState();
  return;
 } else {
  $2 = HEAP32[100183]|0;
  $and = $2 & 31;
  $cmp = ($and|0)<(20);
  $conv = $cmp&1;
  HEAP32[100184] = $conv;
  return;
 }
}
function _WI_drawShowNextLoc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp16 = 0, $cmp4 = 0, $cmp6 = 0, $cond = 0, $didsecret = 0, $i = 0, $inc = 0, $last = 0, $last3 = 0, $last5 = 0, $next = 0, $next11 = 0, $next15 = 0, $sub = 0, $tobool = 0, $tobool9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 _WI_slamBackground();
 _WI_drawAnimatedBack();
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)!=(2);
 if ($cmp) {
  $1 = HEAP32[100156]|0;
  $2 = HEAP32[$1>>2]|0;
  $cmp1 = ($2|0)>(2);
  if ($cmp1) {
   _WI_drawEL();
   STACKTOP = sp;return;
  }
  $3 = HEAP32[100156]|0;
  $last3 = ((($3)) + 8|0);
  $4 = HEAP32[$last3>>2]|0;
  $cmp4 = ($4|0)==(8);
  $5 = HEAP32[100156]|0;
  if ($cmp4) {
   $next = ((($5)) + 12|0);
   $6 = HEAP32[$next>>2]|0;
   $sub = (($6) - 1)|0;
   $cond = $sub;
  } else {
   $last5 = ((($5)) + 8|0);
   $7 = HEAP32[$last5>>2]|0;
   $cond = $7;
  }
  $last = $cond;
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = $last;
   $cmp6 = ($8|0)<=($9|0);
   if (!($cmp6)) {
    break;
   }
   $10 = $i;
   _WI_drawOnLnode($10,400680);
   $11 = $i;
   $inc = (($11) + 1)|0;
   $i = $inc;
  }
  $12 = HEAP32[100156]|0;
  $didsecret = ((($12)) + 4|0);
  $13 = HEAP32[$didsecret>>2]|0;
  $tobool = ($13|0)!=(0);
  if ($tobool) {
   _WI_drawOnLnode(8,400680);
  }
  $14 = HEAP32[100184]|0;
  $tobool9 = ($14|0)!=(0);
  if ($tobool9) {
   $15 = HEAP32[100156]|0;
   $next11 = ((($15)) + 12|0);
   $16 = HEAP32[$next11>>2]|0;
   _WI_drawOnLnode($16,400668);
  }
 }
 $17 = HEAP32[32168]|0;
 $cmp14 = ($17|0)!=(2);
 if (!($cmp14)) {
  $18 = HEAP32[100156]|0;
  $next15 = ((($18)) + 12|0);
  $19 = HEAP32[$next15>>2]|0;
  $cmp16 = ($19|0)!=(30);
  if (!($cmp16)) {
   STACKTOP = sp;return;
  }
 }
 _WI_drawEL();
 STACKTOP = sp;return;
}
function _WI_drawNoState() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100184] = 1;
 _WI_drawShowNextLoc();
 return;
}
function _WI_fragSum($playernum) {
 $playernum = $playernum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx2 = 0;
 var $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $frags = 0, $frags3 = 0, $frags6 = 0, $i = 0, $inc = 0, $playernum$addr = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $playernum$addr = $playernum;
 $frags = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   $3 = $i;
   $4 = $playernum$addr;
   $cmp1 = ($3|0)!=($4|0);
   if ($cmp1) {
    $5 = HEAP32[100185]|0;
    $6 = $playernum$addr;
    $arrayidx2 = (($5) + (($6*40)|0)|0);
    $frags3 = ((($arrayidx2)) + 20|0);
    $7 = $i;
    $arrayidx4 = (($frags3) + ($7<<2)|0);
    $8 = HEAP32[$arrayidx4>>2]|0;
    $9 = $frags;
    $add = (($9) + ($8))|0;
    $frags = $add;
   }
  }
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 $11 = HEAP32[100185]|0;
 $12 = $playernum$addr;
 $arrayidx5 = (($11) + (($12*40)|0)|0);
 $frags6 = ((($arrayidx5)) + 20|0);
 $13 = $playernum$addr;
 $arrayidx7 = (($frags6) + ($13<<2)|0);
 $14 = HEAP32[$arrayidx7>>2]|0;
 $15 = $frags;
 $sub = (($15) - ($14))|0;
 $frags = $sub;
 $16 = $frags;
 STACKTOP = sp;return ($16|0);
}
function _WI_initDeathmatchStats() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cmp = 0, $cmp2 = 0, $i = 0, $inc = 0;
 var $inc12 = 0, $j = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[100162] = 0;
 HEAP32[100182] = 0;
 HEAP32[100186] = 1;
 HEAP32[100187] = 35;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   $j = 0;
   while(1) {
    $3 = $j;
    $cmp2 = ($3|0)<(4);
    if (!($cmp2)) {
     break;
    }
    $4 = $j;
    $arrayidx4 = (183040 + ($4<<2)|0);
    $5 = HEAP32[$arrayidx4>>2]|0;
    $tobool5 = ($5|0)!=(0);
    if ($tobool5) {
     $6 = $i;
     $arrayidx7 = (395056 + ($6<<4)|0);
     $7 = $j;
     $arrayidx8 = (($arrayidx7) + ($7<<2)|0);
     HEAP32[$arrayidx8>>2] = 0;
    }
    $8 = $j;
    $inc = (($8) + 1)|0;
    $j = $inc;
   }
   $9 = $i;
   $arrayidx9 = (395120 + ($9<<2)|0);
   HEAP32[$arrayidx9>>2] = 0;
  }
  $10 = $i;
  $inc12 = (($10) + 1)|0;
  $i = $inc12;
 }
 _WI_initAnimatedBack();
 STACKTOP = sp;return;
}
function _WI_updateDeathmatchStats() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and104 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx28 = 0, $arrayidx34 = 0, $arrayidx37 = 0, $arrayidx38 = 0;
 var $arrayidx39 = 0, $arrayidx41 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx49 = 0, $arrayidx50 = 0, $arrayidx55 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx60 = 0, $arrayidx62 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx67 = 0, $arrayidx7 = 0, $arrayidx74 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx80 = 0, $arrayidx83 = 0;
 var $call = 0, $call73 = 0, $cmp = 0, $cmp1 = 0, $cmp20 = 0, $cmp26 = 0, $cmp32 = 0, $cmp42 = 0, $cmp47 = 0, $cmp5 = 0, $cmp57 = 0, $cmp64 = 0, $cmp76 = 0, $cmp81 = 0, $cmp94 = 0, $cmp98 = 0, $dec = 0, $dec107 = 0, $frags = 0, $frags40 = 0;
 var $frags45 = 0, $i = 0, $inc = 0, $inc110 = 0, $inc17 = 0, $inc53 = 0, $inc71 = 0, $inc87 = 0, $inc91 = 0, $j = 0, $or$cond = 0, $stillticking = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool2 = 0, $tobool22 = 0, $tobool29 = 0, $tobool35 = 0, $tobool8 = 0;
 var $tobool89 = 0, $tobool96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 _WI_updateAnimatedBack();
 $0 = HEAP32[100182]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[100186]|0;
 $cmp = ($1|0)!=(4);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[100182] = 0;
  $i = 0;
  while(1) {
   $2 = $i;
   $cmp1 = ($2|0)<(4);
   if (!($cmp1)) {
    break;
   }
   $3 = $i;
   $arrayidx = (183040 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx>>2]|0;
   $tobool2 = ($4|0)!=(0);
   if ($tobool2) {
    $j = 0;
    while(1) {
     $5 = $j;
     $cmp5 = ($5|0)<(4);
     if (!($cmp5)) {
      break;
     }
     $6 = $j;
     $arrayidx7 = (183040 + ($6<<2)|0);
     $7 = HEAP32[$arrayidx7>>2]|0;
     $tobool8 = ($7|0)!=(0);
     if ($tobool8) {
      $8 = HEAP32[100185]|0;
      $9 = $i;
      $arrayidx10 = (($8) + (($9*40)|0)|0);
      $frags = ((($arrayidx10)) + 20|0);
      $10 = $j;
      $arrayidx11 = (($frags) + ($10<<2)|0);
      $11 = HEAP32[$arrayidx11>>2]|0;
      $12 = $i;
      $arrayidx12 = (395056 + ($12<<4)|0);
      $13 = $j;
      $arrayidx13 = (($arrayidx12) + ($13<<2)|0);
      HEAP32[$arrayidx13>>2] = $11;
     }
     $14 = $j;
     $inc = (($14) + 1)|0;
     $j = $inc;
    }
    $15 = $i;
    $call = (_WI_fragSum($15)|0);
    $16 = $i;
    $arrayidx14 = (395120 + ($16<<2)|0);
    HEAP32[$arrayidx14>>2] = $call;
   }
   $17 = $i;
   $inc17 = (($17) + 1)|0;
   $i = $inc17;
  }
  _S_StartSound(0,82);
  HEAP32[100186] = 4;
 }
 $18 = HEAP32[100186]|0;
 $cmp20 = ($18|0)==(2);
 if (!($cmp20)) {
  $62 = HEAP32[100186]|0;
  $cmp94 = ($62|0)==(4);
  if (!($cmp94)) {
   $65 = HEAP32[100186]|0;
   $and104 = $65 & 1;
   $tobool105 = ($and104|0)!=(0);
   if (!($tobool105)) {
    STACKTOP = sp;return;
   }
   $66 = HEAP32[100187]|0;
   $dec107 = (($66) + -1)|0;
   HEAP32[100187] = $dec107;
   $tobool108 = ($dec107|0)!=(0);
   if ($tobool108) {
    STACKTOP = sp;return;
   }
   $67 = HEAP32[100186]|0;
   $inc110 = (($67) + 1)|0;
   HEAP32[100186] = $inc110;
   HEAP32[100187] = 35;
   STACKTOP = sp;return;
  }
  $63 = HEAP32[100182]|0;
  $tobool96 = ($63|0)!=(0);
  if (!($tobool96)) {
   STACKTOP = sp;return;
  }
  _S_StartSound(0,31);
  $64 = HEAP32[32168]|0;
  $cmp98 = ($64|0)==(2);
  if ($cmp98) {
   _WI_initNoState();
   STACKTOP = sp;return;
  } else {
   _WI_initShowNextLoc();
   STACKTOP = sp;return;
  }
 }
 $19 = HEAP32[100161]|0;
 $and = $19 & 3;
 $tobool22 = ($and|0)!=(0);
 if (!($tobool22)) {
  _S_StartSound(0,1);
 }
 $stillticking = 0;
 $i = 0;
 while(1) {
  $20 = $i;
  $cmp26 = ($20|0)<(4);
  if (!($cmp26)) {
   break;
  }
  $21 = $i;
  $arrayidx28 = (183040 + ($21<<2)|0);
  $22 = HEAP32[$arrayidx28>>2]|0;
  $tobool29 = ($22|0)!=(0);
  if ($tobool29) {
   $j = 0;
   while(1) {
    $23 = $j;
    $cmp32 = ($23|0)<(4);
    if (!($cmp32)) {
     break;
    }
    $24 = $j;
    $arrayidx34 = (183040 + ($24<<2)|0);
    $25 = HEAP32[$arrayidx34>>2]|0;
    $tobool35 = ($25|0)!=(0);
    if ($tobool35) {
     $26 = $i;
     $arrayidx37 = (395056 + ($26<<4)|0);
     $27 = $j;
     $arrayidx38 = (($arrayidx37) + ($27<<2)|0);
     $28 = HEAP32[$arrayidx38>>2]|0;
     $29 = HEAP32[100185]|0;
     $30 = $i;
     $arrayidx39 = (($29) + (($30*40)|0)|0);
     $frags40 = ((($arrayidx39)) + 20|0);
     $31 = $j;
     $arrayidx41 = (($frags40) + ($31<<2)|0);
     $32 = HEAP32[$arrayidx41>>2]|0;
     $cmp42 = ($28|0)!=($32|0);
     if ($cmp42) {
      $33 = HEAP32[100185]|0;
      $34 = $i;
      $arrayidx44 = (($33) + (($34*40)|0)|0);
      $frags45 = ((($arrayidx44)) + 20|0);
      $35 = $j;
      $arrayidx46 = (($frags45) + ($35<<2)|0);
      $36 = HEAP32[$arrayidx46>>2]|0;
      $cmp47 = ($36|0)<(0);
      $37 = $i;
      $arrayidx49 = (395056 + ($37<<4)|0);
      $38 = $j;
      $arrayidx50 = (($arrayidx49) + ($38<<2)|0);
      $39 = HEAP32[$arrayidx50>>2]|0;
      if ($cmp47) {
       $dec = (($39) + -1)|0;
       HEAP32[$arrayidx50>>2] = $dec;
      } else {
       $inc53 = (($39) + 1)|0;
       HEAP32[$arrayidx50>>2] = $inc53;
      }
      $40 = $i;
      $arrayidx55 = (395056 + ($40<<4)|0);
      $41 = $j;
      $arrayidx56 = (($arrayidx55) + ($41<<2)|0);
      $42 = HEAP32[$arrayidx56>>2]|0;
      $cmp57 = ($42|0)>(99);
      if ($cmp57) {
       $43 = $i;
       $arrayidx59 = (395056 + ($43<<4)|0);
       $44 = $j;
       $arrayidx60 = (($arrayidx59) + ($44<<2)|0);
       HEAP32[$arrayidx60>>2] = 99;
      }
      $45 = $i;
      $arrayidx62 = (395056 + ($45<<4)|0);
      $46 = $j;
      $arrayidx63 = (($arrayidx62) + ($46<<2)|0);
      $47 = HEAP32[$arrayidx63>>2]|0;
      $cmp64 = ($47|0)<(-99);
      if ($cmp64) {
       $48 = $i;
       $arrayidx66 = (395056 + ($48<<4)|0);
       $49 = $j;
       $arrayidx67 = (($arrayidx66) + ($49<<2)|0);
       HEAP32[$arrayidx67>>2] = -99;
      }
      $stillticking = 1;
     }
    }
    $50 = $j;
    $inc71 = (($50) + 1)|0;
    $j = $inc71;
   }
   $51 = $i;
   $call73 = (_WI_fragSum($51)|0);
   $52 = $i;
   $arrayidx74 = (395120 + ($52<<2)|0);
   HEAP32[$arrayidx74>>2] = $call73;
   $53 = $i;
   $arrayidx75 = (395120 + ($53<<2)|0);
   $54 = HEAP32[$arrayidx75>>2]|0;
   $cmp76 = ($54|0)>(99);
   if ($cmp76) {
    $55 = $i;
    $arrayidx78 = (395120 + ($55<<2)|0);
    HEAP32[$arrayidx78>>2] = 99;
   }
   $56 = $i;
   $arrayidx80 = (395120 + ($56<<2)|0);
   $57 = HEAP32[$arrayidx80>>2]|0;
   $cmp81 = ($57|0)<(-99);
   if ($cmp81) {
    $58 = $i;
    $arrayidx83 = (395120 + ($58<<2)|0);
    HEAP32[$arrayidx83>>2] = -99;
   }
  }
  $59 = $i;
  $inc87 = (($59) + 1)|0;
  $i = $inc87;
 }
 $60 = $stillticking;
 $tobool89 = ($60|0)!=(0);
 if ($tobool89) {
  STACKTOP = sp;return;
 }
 _S_StartSound(0,82);
 $61 = HEAP32[100186]|0;
 $inc91 = (($61) + 1)|0;
 HEAP32[100186] = $inc91;
 STACKTOP = sp;return;
}
function _WI_drawDeathmatchStats() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add28 = 0, $add45 = 0;
 var $add49 = 0, $add53 = 0, $add57 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx2 = 0, $arrayidx22 = 0, $arrayidx35 = 0, $arrayidx42 = 0, $arrayidx46 = 0, $arrayidx47 = 0, $arrayidx54 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $cmp = 0, $cmp14 = 0, $cmp32 = 0, $cmp39 = 0, $conv = 0;
 var $conv10 = 0, $conv19 = 0, $conv24 = 0, $conv30 = 0, $conv4 = 0, $div = 0, $div11 = 0, $div20 = 0, $div25 = 0, $div5 = 0, $i = 0, $inc = 0, $inc51 = 0, $inc59 = 0, $j = 0, $sub = 0, $sub12 = 0, $sub21 = 0, $sub26 = 0, $sub6 = 0;
 var $tobool = 0, $tobool36 = 0, $tobool43 = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 _WI_slamBackground();
 _WI_drawAnimatedBack();
 _WI_drawLF();
 $0 = HEAP32[100181]|0;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $div = (($conv|0) / 2)&-1;
 $sub = (269 - ($div))|0;
 $2 = HEAP32[100181]|0;
 _V_DrawPatch($sub,45,$2);
 $3 = HEAP32[100179]|0;
 _V_DrawPatch(10,100,$3);
 $4 = HEAP32[100180]|0;
 _V_DrawPatch(5,50,$4);
 $x = 82;
 $y = 68;
 $i = 0;
 while(1) {
  $5 = $i;
  $cmp = ($5|0)<(4);
  if (!($cmp)) {
   break;
  }
  $6 = $i;
  $arrayidx = (183040 + ($6<<2)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($7|0)!=(0);
  if ($tobool) {
   $8 = $x;
   $9 = $i;
   $arrayidx2 = (395024 + ($9<<2)|0);
   $10 = HEAP32[$arrayidx2>>2]|0;
   $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8);
   $conv4 = $11 << 16 >> 16;
   $div5 = (($conv4|0) / 2)&-1;
   $sub6 = (($8) - ($div5))|0;
   $12 = $i;
   $arrayidx7 = (395024 + ($12<<2)|0);
   $13 = HEAP32[$arrayidx7>>2]|0;
   _V_DrawPatch($sub6,35,$13);
   $14 = $i;
   $arrayidx8 = (395024 + ($14<<2)|0);
   $15 = HEAP32[$arrayidx8>>2]|0;
   $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8);
   $conv10 = $16 << 16 >> 16;
   $div11 = (($conv10|0) / 2)&-1;
   $sub12 = (42 - ($div11))|0;
   $17 = $y;
   $18 = $i;
   $arrayidx13 = (395024 + ($18<<2)|0);
   $19 = HEAP32[$arrayidx13>>2]|0;
   _V_DrawPatch($sub12,$17,$19);
   $20 = $i;
   $21 = HEAP32[100188]|0;
   $cmp14 = ($20|0)==($21|0);
   if ($cmp14) {
    $22 = $x;
    $23 = $i;
    $arrayidx17 = (395024 + ($23<<2)|0);
    $24 = HEAP32[$arrayidx17>>2]|0;
    $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8);
    $conv19 = $25 << 16 >> 16;
    $div20 = (($conv19|0) / 2)&-1;
    $sub21 = (($22) - ($div20))|0;
    $26 = HEAP32[100189]|0;
    _V_DrawPatch($sub21,35,$26);
    $27 = $i;
    $arrayidx22 = (395024 + ($27<<2)|0);
    $28 = HEAP32[$arrayidx22>>2]|0;
    $29 = HEAPU8[$28>>0]|(HEAPU8[$28+1>>0]<<8);
    $conv24 = $29 << 16 >> 16;
    $div25 = (($conv24|0) / 2)&-1;
    $sub26 = (42 - ($div25))|0;
    $30 = $y;
    $31 = HEAP32[100190]|0;
    _V_DrawPatch($sub26,$30,$31);
   }
  }
  $32 = $x;
  $add = (($32) + 40)|0;
  $x = $add;
  $33 = $y;
  $add28 = (($33) + 33)|0;
  $y = $add28;
  $34 = $i;
  $inc = (($34) + 1)|0;
  $i = $inc;
 }
 $y = 78;
 $35 = HEAP32[98744]|0;
 $36 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
 $conv30 = $36 << 16 >> 16;
 $w = $conv30;
 $i = 0;
 while(1) {
  $37 = $i;
  $cmp32 = ($37|0)<(4);
  if (!($cmp32)) {
   break;
  }
  $x = 82;
  $38 = $i;
  $arrayidx35 = (183040 + ($38<<2)|0);
  $39 = HEAP32[$arrayidx35>>2]|0;
  $tobool36 = ($39|0)!=(0);
  if ($tobool36) {
   $j = 0;
   while(1) {
    $40 = $j;
    $cmp39 = ($40|0)<(4);
    if (!($cmp39)) {
     break;
    }
    $41 = $j;
    $arrayidx42 = (183040 + ($41<<2)|0);
    $42 = HEAP32[$arrayidx42>>2]|0;
    $tobool43 = ($42|0)!=(0);
    if ($tobool43) {
     $43 = $x;
     $44 = $w;
     $add45 = (($43) + ($44))|0;
     $45 = $y;
     $46 = $i;
     $arrayidx46 = (395056 + ($46<<4)|0);
     $47 = $j;
     $arrayidx47 = (($arrayidx46) + ($47<<2)|0);
     $48 = HEAP32[$arrayidx47>>2]|0;
     (_WI_drawNum($add45,$45,$48,2)|0);
    }
    $49 = $x;
    $add49 = (($49) + 40)|0;
    $x = $add49;
    $50 = $j;
    $inc51 = (($50) + 1)|0;
    $j = $inc51;
   }
   $51 = $w;
   $add53 = (269 + ($51))|0;
   $52 = $y;
   $53 = $i;
   $arrayidx54 = (395120 + ($53<<2)|0);
   $54 = HEAP32[$arrayidx54>>2]|0;
   (_WI_drawNum($add53,$52,$54,2)|0);
  }
  $55 = $y;
  $add57 = (($55) + 33)|0;
  $y = $add57;
  $56 = $i;
  $inc59 = (($56) + 1)|0;
  $i = $inc59;
 }
 STACKTOP = sp;return;
}
function _WI_initNetgameStats() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $call = 0, $cmp = 0, $i = 0;
 var $inc = 0, $lnot = 0, $lnot$ext = 0, $lnot6 = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[100162] = 0;
 HEAP32[100182] = 0;
 HEAP32[100191] = 1;
 HEAP32[100187] = 35;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  if ($tobool) {
   $3 = $i;
   $arrayidx1 = (395136 + ($3<<2)|0);
   HEAP32[$arrayidx1>>2] = 0;
   $4 = $i;
   $arrayidx2 = (395152 + ($4<<2)|0);
   HEAP32[$arrayidx2>>2] = 0;
   $5 = $i;
   $arrayidx3 = (395168 + ($5<<2)|0);
   HEAP32[$arrayidx3>>2] = 0;
   $6 = $i;
   $arrayidx4 = (395184 + ($6<<2)|0);
   HEAP32[$arrayidx4>>2] = 0;
   $7 = $i;
   $call = (_WI_fragSum($7)|0);
   $8 = HEAP32[100192]|0;
   $add = (($8) + ($call))|0;
   HEAP32[100192] = $add;
  }
  $9 = $i;
  $inc = (($9) + 1)|0;
  $i = $inc;
 }
 $10 = HEAP32[100192]|0;
 $tobool5 = ($10|0)!=(0);
 $lnot = $tobool5 ^ 1;
 $lnot6 = $lnot ^ 1;
 $lnot$ext = $lnot6&1;
 HEAP32[100192] = $lnot$ext;
 _WI_initAnimatedBack();
 STACKTOP = sp;return;
}
function _WI_updateNetgameStats() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add108 = 0;
 var $add132 = 0, $add133 = 0, $add150 = 0, $add69 = 0, $and = 0, $and138 = 0, $and176 = 0, $and57 = 0, $and96 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx103 = 0, $arrayidx107 = 0, $arrayidx109 = 0, $arrayidx110 = 0, $arrayidx117 = 0, $arrayidx122 = 0, $arrayidx13 = 0, $arrayidx145 = 0, $arrayidx149 = 0;
 var $arrayidx151 = 0, $arrayidx155 = 0, $arrayidx16 = 0, $arrayidx27 = 0, $arrayidx31 = 0, $arrayidx32 = 0, $arrayidx33 = 0, $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx45 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx64 = 0, $arrayidx68 = 0, $arrayidx70 = 0, $arrayidx71 = 0, $arrayidx78 = 0, $arrayidx83 = 0, $arrayidx9 = 0, $call = 0;
 var $call152 = 0, $cmp = 0, $cmp1 = 0, $cmp101 = 0, $cmp115 = 0, $cmp136 = 0, $cmp143 = 0, $cmp153 = 0, $cmp166 = 0, $cmp170 = 0, $cmp19 = 0, $cmp25 = 0, $cmp38 = 0, $cmp55 = 0, $cmp62 = 0, $cmp76 = 0, $cmp94 = 0, $dec = 0, $div = 0, $div114 = 0;
 var $div12 = 0, $div121 = 0, $div37 = 0, $div44 = 0, $div75 = 0, $div8 = 0, $div82 = 0, $fsum = 0, $i = 0, $inc = 0, $inc126 = 0, $inc159 = 0, $inc163 = 0, $inc181 = 0, $inc48 = 0, $inc52 = 0, $inc87 = 0, $inc91 = 0, $lnot = 0, $lnot$ext = 0;
 var $maxitems = 0, $maxitems74 = 0, $maxitems81 = 0, $maxkills = 0, $maxkills36 = 0, $maxkills43 = 0, $maxsecret = 0, $maxsecret113 = 0, $maxsecret120 = 0, $mul = 0, $mul11 = 0, $mul112 = 0, $mul119 = 0, $mul131 = 0, $mul35 = 0, $mul42 = 0, $mul7 = 0, $mul73 = 0, $mul80 = 0, $or$cond = 0;
 var $sitems = 0, $sitems72 = 0, $sitems79 = 0, $skills = 0, $skills34 = 0, $skills41 = 0, $ssecret = 0, $ssecret111 = 0, $ssecret118 = 0, $stillticking = 0, $tobool = 0, $tobool104 = 0, $tobool128 = 0, $tobool130 = 0, $tobool139 = 0, $tobool14 = 0, $tobool146 = 0, $tobool161 = 0, $tobool168 = 0, $tobool177 = 0;
 var $tobool179 = 0, $tobool2 = 0, $tobool21 = 0, $tobool28 = 0, $tobool50 = 0, $tobool58 = 0, $tobool65 = 0, $tobool89 = 0, $tobool97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 _WI_updateAnimatedBack();
 $0 = HEAP32[100182]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[100191]|0;
 $cmp = ($1|0)!=(10);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[100182] = 0;
  $i = 0;
  while(1) {
   $2 = $i;
   $cmp1 = ($2|0)<(4);
   if (!($cmp1)) {
    break;
   }
   $3 = $i;
   $arrayidx = (183040 + ($3<<2)|0);
   $4 = HEAP32[$arrayidx>>2]|0;
   $tobool2 = ($4|0)!=(0);
   if ($tobool2) {
    $5 = HEAP32[100185]|0;
    $6 = $i;
    $arrayidx4 = (($5) + (($6*40)|0)|0);
    $skills = ((($arrayidx4)) + 4|0);
    $7 = HEAP32[$skills>>2]|0;
    $mul = ($7*100)|0;
    $8 = HEAP32[100156]|0;
    $maxkills = ((($8)) + 16|0);
    $9 = HEAP32[$maxkills>>2]|0;
    $div = (($mul|0) / ($9|0))&-1;
    $10 = $i;
    $arrayidx5 = (395184 + ($10<<2)|0);
    HEAP32[$arrayidx5>>2] = $div;
    $11 = HEAP32[100185]|0;
    $12 = $i;
    $arrayidx6 = (($11) + (($12*40)|0)|0);
    $sitems = ((($arrayidx6)) + 8|0);
    $13 = HEAP32[$sitems>>2]|0;
    $mul7 = ($13*100)|0;
    $14 = HEAP32[100156]|0;
    $maxitems = ((($14)) + 20|0);
    $15 = HEAP32[$maxitems>>2]|0;
    $div8 = (($mul7|0) / ($15|0))&-1;
    $16 = $i;
    $arrayidx9 = (395168 + ($16<<2)|0);
    HEAP32[$arrayidx9>>2] = $div8;
    $17 = HEAP32[100185]|0;
    $18 = $i;
    $arrayidx10 = (($17) + (($18*40)|0)|0);
    $ssecret = ((($arrayidx10)) + 12|0);
    $19 = HEAP32[$ssecret>>2]|0;
    $mul11 = ($19*100)|0;
    $20 = HEAP32[100156]|0;
    $maxsecret = ((($20)) + 24|0);
    $21 = HEAP32[$maxsecret>>2]|0;
    $div12 = (($mul11|0) / ($21|0))&-1;
    $22 = $i;
    $arrayidx13 = (395152 + ($22<<2)|0);
    HEAP32[$arrayidx13>>2] = $div12;
    $23 = HEAP32[100192]|0;
    $tobool14 = ($23|0)!=(0);
    if ($tobool14) {
     $24 = $i;
     $call = (_WI_fragSum($24)|0);
     $25 = $i;
     $arrayidx16 = (395136 + ($25<<2)|0);
     HEAP32[$arrayidx16>>2] = $call;
    }
   }
   $26 = $i;
   $inc = (($26) + 1)|0;
   $i = $inc;
  }
  _S_StartSound(0,82);
  HEAP32[100191] = 10;
 }
 $27 = HEAP32[100191]|0;
 $cmp19 = ($27|0)==(2);
 if ($cmp19) {
  $28 = HEAP32[100161]|0;
  $and = $28 & 3;
  $tobool21 = ($and|0)!=(0);
  if (!($tobool21)) {
   _S_StartSound(0,1);
  }
  $stillticking = 0;
  $i = 0;
  while(1) {
   $29 = $i;
   $cmp25 = ($29|0)<(4);
   if (!($cmp25)) {
    break;
   }
   $30 = $i;
   $arrayidx27 = (183040 + ($30<<2)|0);
   $31 = HEAP32[$arrayidx27>>2]|0;
   $tobool28 = ($31|0)!=(0);
   do {
    if ($tobool28) {
     $32 = $i;
     $arrayidx31 = (395184 + ($32<<2)|0);
     $33 = HEAP32[$arrayidx31>>2]|0;
     $add = (($33) + 2)|0;
     HEAP32[$arrayidx31>>2] = $add;
     $34 = $i;
     $arrayidx32 = (395184 + ($34<<2)|0);
     $35 = HEAP32[$arrayidx32>>2]|0;
     $36 = HEAP32[100185]|0;
     $37 = $i;
     $arrayidx33 = (($36) + (($37*40)|0)|0);
     $skills34 = ((($arrayidx33)) + 4|0);
     $38 = HEAP32[$skills34>>2]|0;
     $mul35 = ($38*100)|0;
     $39 = HEAP32[100156]|0;
     $maxkills36 = ((($39)) + 16|0);
     $40 = HEAP32[$maxkills36>>2]|0;
     $div37 = (($mul35|0) / ($40|0))&-1;
     $cmp38 = ($35|0)>=($div37|0);
     if ($cmp38) {
      $41 = HEAP32[100185]|0;
      $42 = $i;
      $arrayidx40 = (($41) + (($42*40)|0)|0);
      $skills41 = ((($arrayidx40)) + 4|0);
      $43 = HEAP32[$skills41>>2]|0;
      $mul42 = ($43*100)|0;
      $44 = HEAP32[100156]|0;
      $maxkills43 = ((($44)) + 16|0);
      $45 = HEAP32[$maxkills43>>2]|0;
      $div44 = (($mul42|0) / ($45|0))&-1;
      $46 = $i;
      $arrayidx45 = (395184 + ($46<<2)|0);
      HEAP32[$arrayidx45>>2] = $div44;
      break;
     } else {
      $stillticking = 1;
      break;
     }
    }
   } while(0);
   $47 = $i;
   $inc48 = (($47) + 1)|0;
   $i = $inc48;
  }
  $48 = $stillticking;
  $tobool50 = ($48|0)!=(0);
  if ($tobool50) {
   STACKTOP = sp;return;
  }
  _S_StartSound(0,82);
  $49 = HEAP32[100191]|0;
  $inc52 = (($49) + 1)|0;
  HEAP32[100191] = $inc52;
  STACKTOP = sp;return;
 }
 $50 = HEAP32[100191]|0;
 $cmp55 = ($50|0)==(4);
 if ($cmp55) {
  $51 = HEAP32[100161]|0;
  $and57 = $51 & 3;
  $tobool58 = ($and57|0)!=(0);
  if (!($tobool58)) {
   _S_StartSound(0,1);
  }
  $stillticking = 0;
  $i = 0;
  while(1) {
   $52 = $i;
   $cmp62 = ($52|0)<(4);
   if (!($cmp62)) {
    break;
   }
   $53 = $i;
   $arrayidx64 = (183040 + ($53<<2)|0);
   $54 = HEAP32[$arrayidx64>>2]|0;
   $tobool65 = ($54|0)!=(0);
   do {
    if ($tobool65) {
     $55 = $i;
     $arrayidx68 = (395168 + ($55<<2)|0);
     $56 = HEAP32[$arrayidx68>>2]|0;
     $add69 = (($56) + 2)|0;
     HEAP32[$arrayidx68>>2] = $add69;
     $57 = $i;
     $arrayidx70 = (395168 + ($57<<2)|0);
     $58 = HEAP32[$arrayidx70>>2]|0;
     $59 = HEAP32[100185]|0;
     $60 = $i;
     $arrayidx71 = (($59) + (($60*40)|0)|0);
     $sitems72 = ((($arrayidx71)) + 8|0);
     $61 = HEAP32[$sitems72>>2]|0;
     $mul73 = ($61*100)|0;
     $62 = HEAP32[100156]|0;
     $maxitems74 = ((($62)) + 20|0);
     $63 = HEAP32[$maxitems74>>2]|0;
     $div75 = (($mul73|0) / ($63|0))&-1;
     $cmp76 = ($58|0)>=($div75|0);
     if ($cmp76) {
      $64 = HEAP32[100185]|0;
      $65 = $i;
      $arrayidx78 = (($64) + (($65*40)|0)|0);
      $sitems79 = ((($arrayidx78)) + 8|0);
      $66 = HEAP32[$sitems79>>2]|0;
      $mul80 = ($66*100)|0;
      $67 = HEAP32[100156]|0;
      $maxitems81 = ((($67)) + 20|0);
      $68 = HEAP32[$maxitems81>>2]|0;
      $div82 = (($mul80|0) / ($68|0))&-1;
      $69 = $i;
      $arrayidx83 = (395168 + ($69<<2)|0);
      HEAP32[$arrayidx83>>2] = $div82;
      break;
     } else {
      $stillticking = 1;
      break;
     }
    }
   } while(0);
   $70 = $i;
   $inc87 = (($70) + 1)|0;
   $i = $inc87;
  }
  $71 = $stillticking;
  $tobool89 = ($71|0)!=(0);
  if ($tobool89) {
   STACKTOP = sp;return;
  }
  _S_StartSound(0,82);
  $72 = HEAP32[100191]|0;
  $inc91 = (($72) + 1)|0;
  HEAP32[100191] = $inc91;
  STACKTOP = sp;return;
 }
 $73 = HEAP32[100191]|0;
 $cmp94 = ($73|0)==(6);
 if ($cmp94) {
  $74 = HEAP32[100161]|0;
  $and96 = $74 & 3;
  $tobool97 = ($and96|0)!=(0);
  if (!($tobool97)) {
   _S_StartSound(0,1);
  }
  $stillticking = 0;
  $i = 0;
  while(1) {
   $75 = $i;
   $cmp101 = ($75|0)<(4);
   if (!($cmp101)) {
    break;
   }
   $76 = $i;
   $arrayidx103 = (183040 + ($76<<2)|0);
   $77 = HEAP32[$arrayidx103>>2]|0;
   $tobool104 = ($77|0)!=(0);
   do {
    if ($tobool104) {
     $78 = $i;
     $arrayidx107 = (395152 + ($78<<2)|0);
     $79 = HEAP32[$arrayidx107>>2]|0;
     $add108 = (($79) + 2)|0;
     HEAP32[$arrayidx107>>2] = $add108;
     $80 = $i;
     $arrayidx109 = (395152 + ($80<<2)|0);
     $81 = HEAP32[$arrayidx109>>2]|0;
     $82 = HEAP32[100185]|0;
     $83 = $i;
     $arrayidx110 = (($82) + (($83*40)|0)|0);
     $ssecret111 = ((($arrayidx110)) + 12|0);
     $84 = HEAP32[$ssecret111>>2]|0;
     $mul112 = ($84*100)|0;
     $85 = HEAP32[100156]|0;
     $maxsecret113 = ((($85)) + 24|0);
     $86 = HEAP32[$maxsecret113>>2]|0;
     $div114 = (($mul112|0) / ($86|0))&-1;
     $cmp115 = ($81|0)>=($div114|0);
     if ($cmp115) {
      $87 = HEAP32[100185]|0;
      $88 = $i;
      $arrayidx117 = (($87) + (($88*40)|0)|0);
      $ssecret118 = ((($arrayidx117)) + 12|0);
      $89 = HEAP32[$ssecret118>>2]|0;
      $mul119 = ($89*100)|0;
      $90 = HEAP32[100156]|0;
      $maxsecret120 = ((($90)) + 24|0);
      $91 = HEAP32[$maxsecret120>>2]|0;
      $div121 = (($mul119|0) / ($91|0))&-1;
      $92 = $i;
      $arrayidx122 = (395152 + ($92<<2)|0);
      HEAP32[$arrayidx122>>2] = $div121;
      break;
     } else {
      $stillticking = 1;
      break;
     }
    }
   } while(0);
   $93 = $i;
   $inc126 = (($93) + 1)|0;
   $i = $inc126;
  }
  $94 = $stillticking;
  $tobool128 = ($94|0)!=(0);
  if ($tobool128) {
   STACKTOP = sp;return;
  }
  _S_StartSound(0,82);
  $95 = HEAP32[100192]|0;
  $tobool130 = ($95|0)!=(0);
  $lnot = $tobool130 ^ 1;
  $lnot$ext = $lnot&1;
  $mul131 = $lnot$ext<<1;
  $add132 = (1 + ($mul131))|0;
  $96 = HEAP32[100191]|0;
  $add133 = (($96) + ($add132))|0;
  HEAP32[100191] = $add133;
  STACKTOP = sp;return;
 }
 $97 = HEAP32[100191]|0;
 $cmp136 = ($97|0)==(8);
 if ($cmp136) {
  $98 = HEAP32[100161]|0;
  $and138 = $98 & 3;
  $tobool139 = ($and138|0)!=(0);
  if (!($tobool139)) {
   _S_StartSound(0,1);
  }
  $stillticking = 0;
  $i = 0;
  while(1) {
   $99 = $i;
   $cmp143 = ($99|0)<(4);
   if (!($cmp143)) {
    break;
   }
   $100 = $i;
   $arrayidx145 = (183040 + ($100<<2)|0);
   $101 = HEAP32[$arrayidx145>>2]|0;
   $tobool146 = ($101|0)!=(0);
   do {
    if ($tobool146) {
     $102 = $i;
     $arrayidx149 = (395136 + ($102<<2)|0);
     $103 = HEAP32[$arrayidx149>>2]|0;
     $add150 = (($103) + 1)|0;
     HEAP32[$arrayidx149>>2] = $add150;
     $104 = $i;
     $arrayidx151 = (395136 + ($104<<2)|0);
     $105 = HEAP32[$arrayidx151>>2]|0;
     $106 = $i;
     $call152 = (_WI_fragSum($106)|0);
     $fsum = $call152;
     $cmp153 = ($105|0)>=($call152|0);
     if ($cmp153) {
      $107 = $fsum;
      $108 = $i;
      $arrayidx155 = (395136 + ($108<<2)|0);
      HEAP32[$arrayidx155>>2] = $107;
      break;
     } else {
      $stillticking = 1;
      break;
     }
    }
   } while(0);
   $109 = $i;
   $inc159 = (($109) + 1)|0;
   $i = $inc159;
  }
  $110 = $stillticking;
  $tobool161 = ($110|0)!=(0);
  if ($tobool161) {
   STACKTOP = sp;return;
  }
  _S_StartSound(0,57);
  $111 = HEAP32[100191]|0;
  $inc163 = (($111) + 1)|0;
  HEAP32[100191] = $inc163;
  STACKTOP = sp;return;
 }
 $112 = HEAP32[100191]|0;
 $cmp166 = ($112|0)==(10);
 if (!($cmp166)) {
  $115 = HEAP32[100191]|0;
  $and176 = $115 & 1;
  $tobool177 = ($and176|0)!=(0);
  if (!($tobool177)) {
   STACKTOP = sp;return;
  }
  $116 = HEAP32[100187]|0;
  $dec = (($116) + -1)|0;
  HEAP32[100187] = $dec;
  $tobool179 = ($dec|0)!=(0);
  if ($tobool179) {
   STACKTOP = sp;return;
  }
  $117 = HEAP32[100191]|0;
  $inc181 = (($117) + 1)|0;
  HEAP32[100191] = $inc181;
  HEAP32[100187] = 35;
  STACKTOP = sp;return;
 }
 $113 = HEAP32[100182]|0;
 $tobool168 = ($113|0)!=(0);
 if (!($tobool168)) {
  STACKTOP = sp;return;
 }
 _S_StartSound(0,3);
 $114 = HEAP32[32168]|0;
 $cmp170 = ($114|0)==(2);
 if ($cmp170) {
  _WI_initNoState();
  STACKTOP = sp;return;
 } else {
  _WI_initShowNextLoc();
  STACKTOP = sp;return;
 }
}
function _WI_drawNetgameStats() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add15 = 0, $add16 = 0;
 var $add23 = 0, $add28 = 0, $add29 = 0, $add3 = 0, $add37 = 0, $add4 = 0, $add42 = 0, $add43 = 0, $add48 = 0, $add56 = 0, $add61 = 0, $add75 = 0, $add77 = 0, $add79 = 0, $add81 = 0, $add83 = 0, $add85 = 0, $add87 = 0, $add90 = 0, $add93 = 0;
 var $arrayidx = 0, $arrayidx62 = 0, $arrayidx66 = 0, $arrayidx70 = 0, $arrayidx78 = 0, $arrayidx82 = 0, $arrayidx86 = 0, $arrayidx91 = 0, $cmp = 0, $cmp67 = 0, $conv = 0, $conv18 = 0, $conv2 = 0, $conv21 = 0, $conv31 = 0, $conv35 = 0, $conv45 = 0, $conv47 = 0, $conv54 = 0, $conv6 = 0;
 var $conv64 = 0, $conv72 = 0, $conv8 = 0, $div = 0, $div22 = 0, $div36 = 0, $div55 = 0, $div9 = 0, $height = 0, $i = 0, $inc = 0, $lnot = 0, $lnot$ext = 0, $lnot$ext13 = 0, $lnot$ext26 = 0, $lnot$ext40 = 0, $lnot$ext59 = 0, $lnot12 = 0, $lnot25 = 0, $lnot39 = 0;
 var $lnot58 = 0, $mul = 0, $mul14 = 0, $mul27 = 0, $mul41 = 0, $mul60 = 0, $pwidth = 0, $sub = 0, $sub19 = 0, $sub32 = 0, $sub46 = 0, $sub65 = 0, $sub73 = 0, $sub76 = 0, $sub80 = 0, $sub84 = 0, $tobool = 0, $tobool11 = 0, $tobool24 = 0, $tobool33 = 0;
 var $tobool38 = 0, $tobool50 = 0, $tobool57 = 0, $tobool88 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100164]|0;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $pwidth = $conv;
 _WI_slamBackground();
 _WI_drawAnimatedBack();
 _WI_drawLF();
 $2 = HEAP32[100190]|0;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8);
 $conv2 = $3 << 16 >> 16;
 $div = (($conv2|0) / 2)&-1;
 $add = (32 + ($div))|0;
 $4 = HEAP32[100192]|0;
 $tobool = ($4|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 $mul = $lnot$ext<<5;
 $add3 = (($add) + ($mul))|0;
 $add4 = (($add3) + 64)|0;
 $5 = HEAP32[100172]|0;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8);
 $conv6 = $6 << 16 >> 16;
 $sub = (($add4) - ($conv6))|0;
 $7 = HEAP32[100172]|0;
 _V_DrawPatch($sub,50,$7);
 $8 = HEAP32[100190]|0;
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8);
 $conv8 = $9 << 16 >> 16;
 $div9 = (($conv8|0) / 2)&-1;
 $add10 = (32 + ($div9))|0;
 $10 = HEAP32[100192]|0;
 $tobool11 = ($10|0)!=(0);
 $lnot12 = $tobool11 ^ 1;
 $lnot$ext13 = $lnot12&1;
 $mul14 = $lnot$ext13<<5;
 $add15 = (($add10) + ($mul14))|0;
 $add16 = (($add15) + 128)|0;
 $11 = HEAP32[100175]|0;
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
 $conv18 = $12 << 16 >> 16;
 $sub19 = (($add16) - ($conv18))|0;
 $13 = HEAP32[100175]|0;
 _V_DrawPatch($sub19,50,$13);
 $14 = HEAP32[100190]|0;
 $15 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
 $conv21 = $15 << 16 >> 16;
 $div22 = (($conv21|0) / 2)&-1;
 $add23 = (32 + ($div22))|0;
 $16 = HEAP32[100192]|0;
 $tobool24 = ($16|0)!=(0);
 $lnot25 = $tobool24 ^ 1;
 $lnot$ext26 = $lnot25&1;
 $mul27 = $lnot$ext26<<5;
 $add28 = (($add23) + ($mul27))|0;
 $add29 = (($add28) + 192)|0;
 $17 = HEAP32[100173]|0;
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
 $conv31 = $18 << 16 >> 16;
 $sub32 = (($add29) - ($conv31))|0;
 $19 = HEAP32[100173]|0;
 _V_DrawPatch($sub32,50,$19);
 $20 = HEAP32[100192]|0;
 $tobool33 = ($20|0)!=(0);
 if ($tobool33) {
  $21 = HEAP32[100190]|0;
  $22 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8);
  $conv35 = $22 << 16 >> 16;
  $div36 = (($conv35|0) / 2)&-1;
  $add37 = (32 + ($div36))|0;
  $23 = HEAP32[100192]|0;
  $tobool38 = ($23|0)!=(0);
  $lnot39 = $tobool38 ^ 1;
  $lnot$ext40 = $lnot39&1;
  $mul41 = $lnot$ext40<<5;
  $add42 = (($add37) + ($mul41))|0;
  $add43 = (($add42) + 256)|0;
  $24 = HEAP32[100176]|0;
  $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8);
  $conv45 = $25 << 16 >> 16;
  $sub46 = (($add43) - ($conv45))|0;
  $26 = HEAP32[100176]|0;
  _V_DrawPatch($sub46,50,$26);
 }
 $27 = HEAP32[100172]|0;
 $height = ((($27)) + 2|0);
 $28 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv47 = $28 << 16 >> 16;
 $add48 = (50 + ($conv47))|0;
 $y = $add48;
 $i = 0;
 while(1) {
  $29 = $i;
  $cmp = ($29|0)<(4);
  if (!($cmp)) {
   break;
  }
  $30 = $i;
  $arrayidx = (183040 + ($30<<2)|0);
  $31 = HEAP32[$arrayidx>>2]|0;
  $tobool50 = ($31|0)!=(0);
  if ($tobool50) {
   $32 = HEAP32[100190]|0;
   $33 = HEAPU8[$32>>0]|(HEAPU8[$32+1>>0]<<8);
   $conv54 = $33 << 16 >> 16;
   $div55 = (($conv54|0) / 2)&-1;
   $add56 = (32 + ($div55))|0;
   $34 = HEAP32[100192]|0;
   $tobool57 = ($34|0)!=(0);
   $lnot58 = $tobool57 ^ 1;
   $lnot$ext59 = $lnot58&1;
   $mul60 = $lnot$ext59<<5;
   $add61 = (($add56) + ($mul60))|0;
   $x = $add61;
   $35 = $x;
   $36 = $i;
   $arrayidx62 = (395024 + ($36<<2)|0);
   $37 = HEAP32[$arrayidx62>>2]|0;
   $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8);
   $conv64 = $38 << 16 >> 16;
   $sub65 = (($35) - ($conv64))|0;
   $39 = $y;
   $40 = $i;
   $arrayidx66 = (395024 + ($40<<2)|0);
   $41 = HEAP32[$arrayidx66>>2]|0;
   _V_DrawPatch($sub65,$39,$41);
   $42 = $i;
   $43 = HEAP32[100188]|0;
   $cmp67 = ($42|0)==($43|0);
   if ($cmp67) {
    $44 = $x;
    $45 = $i;
    $arrayidx70 = (395024 + ($45<<2)|0);
    $46 = HEAP32[$arrayidx70>>2]|0;
    $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8);
    $conv72 = $47 << 16 >> 16;
    $sub73 = (($44) - ($conv72))|0;
    $48 = $y;
    $49 = HEAP32[100190]|0;
    _V_DrawPatch($sub73,$48,$49);
   }
   $50 = $x;
   $add75 = (($50) + 64)|0;
   $x = $add75;
   $51 = $x;
   $52 = $pwidth;
   $sub76 = (($51) - ($52))|0;
   $53 = $y;
   $add77 = (($53) + 10)|0;
   $54 = $i;
   $arrayidx78 = (395184 + ($54<<2)|0);
   $55 = HEAP32[$arrayidx78>>2]|0;
   _WI_drawPercent($sub76,$add77,$55);
   $56 = $x;
   $add79 = (($56) + 64)|0;
   $x = $add79;
   $57 = $x;
   $58 = $pwidth;
   $sub80 = (($57) - ($58))|0;
   $59 = $y;
   $add81 = (($59) + 10)|0;
   $60 = $i;
   $arrayidx82 = (395168 + ($60<<2)|0);
   $61 = HEAP32[$arrayidx82>>2]|0;
   _WI_drawPercent($sub80,$add81,$61);
   $62 = $x;
   $add83 = (($62) + 64)|0;
   $x = $add83;
   $63 = $x;
   $64 = $pwidth;
   $sub84 = (($63) - ($64))|0;
   $65 = $y;
   $add85 = (($65) + 10)|0;
   $66 = $i;
   $arrayidx86 = (395152 + ($66<<2)|0);
   $67 = HEAP32[$arrayidx86>>2]|0;
   _WI_drawPercent($sub84,$add85,$67);
   $68 = $x;
   $add87 = (($68) + 64)|0;
   $x = $add87;
   $69 = HEAP32[100192]|0;
   $tobool88 = ($69|0)!=(0);
   if ($tobool88) {
    $70 = $x;
    $71 = $y;
    $add90 = (($71) + 10)|0;
    $72 = $i;
    $arrayidx91 = (395136 + ($72<<2)|0);
    $73 = HEAP32[$arrayidx91>>2]|0;
    (_WI_drawNum($70,$add90,$73,-1)|0);
   }
   $74 = $y;
   $add93 = (($74) + 33)|0;
   $y = $add93;
  }
  $75 = $i;
  $inc = (($75) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _WI_initStats() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[100162] = 0;
 HEAP32[100182] = 0;
 HEAP32[100193] = 1;
 HEAP32[98788] = -1;
 HEAP32[98792] = -1;
 HEAP32[98796] = -1;
 HEAP32[100194] = -1;
 HEAP32[100195] = -1;
 HEAP32[100187] = 35;
 _WI_initAnimatedBack();
 return;
}
function _WI_updateStats() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $add = 0, $add30 = 0, $add52 = 0, $add78 = 0, $add88 = 0, $and = 0;
 var $and114 = 0, $and31 = 0, $and53 = 0, $and74 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx15 = 0, $arrayidx22 = 0, $arrayidx35 = 0, $arrayidx4 = 0, $arrayidx42 = 0, $arrayidx57 = 0, $arrayidx64 = 0, $arrayidx7 = 0, $arrayidx79 = 0, $arrayidx84 = 0, $arrayidx95 = 0, $cmp = 0, $cmp10 = 0, $cmp104 = 0;
 var $cmp108 = 0, $cmp20 = 0, $cmp28 = 0, $cmp40 = 0, $cmp50 = 0, $cmp62 = 0, $cmp72 = 0, $cmp82 = 0, $cmp91 = 0, $cmp98 = 0, $dec = 0, $div = 0, $div19 = 0, $div26 = 0, $div3 = 0, $div39 = 0, $div46 = 0, $div6 = 0, $div61 = 0, $div68 = 0;
 var $div8 = 0, $div81 = 0, $div86 = 0, $div9 = 0, $div90 = 0, $div94 = 0, $div97 = 0, $inc = 0, $inc100 = 0, $inc119 = 0, $inc47 = 0, $inc69 = 0, $maxitems = 0, $maxitems38 = 0, $maxitems45 = 0, $maxkills = 0, $maxkills18 = 0, $maxkills25 = 0, $maxsecret = 0, $maxsecret60 = 0;
 var $maxsecret67 = 0, $mul = 0, $mul17 = 0, $mul2 = 0, $mul24 = 0, $mul37 = 0, $mul44 = 0, $mul5 = 0, $mul59 = 0, $mul66 = 0, $or$cond = 0, $partime = 0, $partime89 = 0, $partime93 = 0, $sitems = 0, $sitems36 = 0, $sitems43 = 0, $skills = 0, $skills16 = 0, $skills23 = 0;
 var $ssecret = 0, $ssecret58 = 0, $ssecret65 = 0, $stime = 0, $stime80 = 0, $stime85 = 0, $stime96 = 0, $tobool = 0, $tobool106 = 0, $tobool115 = 0, $tobool117 = 0, $tobool12 = 0, $tobool32 = 0, $tobool54 = 0, $tobool75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WI_updateAnimatedBack();
 $0 = HEAP32[100182]|0;
 $tobool = ($0|0)!=(0);
 $1 = HEAP32[100193]|0;
 $cmp = ($1|0)!=(10);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[100182] = 0;
  $2 = HEAP32[100185]|0;
  $3 = HEAP32[100188]|0;
  $arrayidx = (($2) + (($3*40)|0)|0);
  $skills = ((($arrayidx)) + 4|0);
  $4 = HEAP32[$skills>>2]|0;
  $mul = ($4*100)|0;
  $5 = HEAP32[100156]|0;
  $maxkills = ((($5)) + 16|0);
  $6 = HEAP32[$maxkills>>2]|0;
  $div = (($mul|0) / ($6|0))&-1;
  HEAP32[98796] = $div;
  $7 = HEAP32[100185]|0;
  $8 = HEAP32[100188]|0;
  $arrayidx1 = (($7) + (($8*40)|0)|0);
  $sitems = ((($arrayidx1)) + 8|0);
  $9 = HEAP32[$sitems>>2]|0;
  $mul2 = ($9*100)|0;
  $10 = HEAP32[100156]|0;
  $maxitems = ((($10)) + 20|0);
  $11 = HEAP32[$maxitems>>2]|0;
  $div3 = (($mul2|0) / ($11|0))&-1;
  HEAP32[98792] = $div3;
  $12 = HEAP32[100185]|0;
  $13 = HEAP32[100188]|0;
  $arrayidx4 = (($12) + (($13*40)|0)|0);
  $ssecret = ((($arrayidx4)) + 12|0);
  $14 = HEAP32[$ssecret>>2]|0;
  $mul5 = ($14*100)|0;
  $15 = HEAP32[100156]|0;
  $maxsecret = ((($15)) + 24|0);
  $16 = HEAP32[$maxsecret>>2]|0;
  $div6 = (($mul5|0) / ($16|0))&-1;
  HEAP32[98788] = $div6;
  $17 = HEAP32[100185]|0;
  $18 = HEAP32[100188]|0;
  $arrayidx7 = (($17) + (($18*40)|0)|0);
  $stime = ((($arrayidx7)) + 16|0);
  $19 = HEAP32[$stime>>2]|0;
  $div8 = (($19|0) / 35)&-1;
  HEAP32[100195] = $div8;
  $20 = HEAP32[100156]|0;
  $partime = ((($20)) + 32|0);
  $21 = HEAP32[$partime>>2]|0;
  $div9 = (($21|0) / 35)&-1;
  HEAP32[100194] = $div9;
  _S_StartSound(0,82);
  HEAP32[100193] = 10;
 }
 $22 = HEAP32[100193]|0;
 $cmp10 = ($22|0)==(2);
 if ($cmp10) {
  $23 = HEAP32[98796]|0;
  $add = (($23) + 2)|0;
  HEAP32[98796] = $add;
  $24 = HEAP32[100161]|0;
  $and = $24 & 3;
  $tobool12 = ($and|0)!=(0);
  if (!($tobool12)) {
   _S_StartSound(0,1);
  }
  $25 = HEAP32[98796]|0;
  $26 = HEAP32[100185]|0;
  $27 = HEAP32[100188]|0;
  $arrayidx15 = (($26) + (($27*40)|0)|0);
  $skills16 = ((($arrayidx15)) + 4|0);
  $28 = HEAP32[$skills16>>2]|0;
  $mul17 = ($28*100)|0;
  $29 = HEAP32[100156]|0;
  $maxkills18 = ((($29)) + 16|0);
  $30 = HEAP32[$maxkills18>>2]|0;
  $div19 = (($mul17|0) / ($30|0))&-1;
  $cmp20 = ($25|0)>=($div19|0);
  if (!($cmp20)) {
   return;
  }
  $31 = HEAP32[100185]|0;
  $32 = HEAP32[100188]|0;
  $arrayidx22 = (($31) + (($32*40)|0)|0);
  $skills23 = ((($arrayidx22)) + 4|0);
  $33 = HEAP32[$skills23>>2]|0;
  $mul24 = ($33*100)|0;
  $34 = HEAP32[100156]|0;
  $maxkills25 = ((($34)) + 16|0);
  $35 = HEAP32[$maxkills25>>2]|0;
  $div26 = (($mul24|0) / ($35|0))&-1;
  HEAP32[98796] = $div26;
  _S_StartSound(0,82);
  $36 = HEAP32[100193]|0;
  $inc = (($36) + 1)|0;
  HEAP32[100193] = $inc;
  return;
 }
 $37 = HEAP32[100193]|0;
 $cmp28 = ($37|0)==(4);
 if ($cmp28) {
  $38 = HEAP32[98792]|0;
  $add30 = (($38) + 2)|0;
  HEAP32[98792] = $add30;
  $39 = HEAP32[100161]|0;
  $and31 = $39 & 3;
  $tobool32 = ($and31|0)!=(0);
  if (!($tobool32)) {
   _S_StartSound(0,1);
  }
  $40 = HEAP32[98792]|0;
  $41 = HEAP32[100185]|0;
  $42 = HEAP32[100188]|0;
  $arrayidx35 = (($41) + (($42*40)|0)|0);
  $sitems36 = ((($arrayidx35)) + 8|0);
  $43 = HEAP32[$sitems36>>2]|0;
  $mul37 = ($43*100)|0;
  $44 = HEAP32[100156]|0;
  $maxitems38 = ((($44)) + 20|0);
  $45 = HEAP32[$maxitems38>>2]|0;
  $div39 = (($mul37|0) / ($45|0))&-1;
  $cmp40 = ($40|0)>=($div39|0);
  if (!($cmp40)) {
   return;
  }
  $46 = HEAP32[100185]|0;
  $47 = HEAP32[100188]|0;
  $arrayidx42 = (($46) + (($47*40)|0)|0);
  $sitems43 = ((($arrayidx42)) + 8|0);
  $48 = HEAP32[$sitems43>>2]|0;
  $mul44 = ($48*100)|0;
  $49 = HEAP32[100156]|0;
  $maxitems45 = ((($49)) + 20|0);
  $50 = HEAP32[$maxitems45>>2]|0;
  $div46 = (($mul44|0) / ($50|0))&-1;
  HEAP32[98792] = $div46;
  _S_StartSound(0,82);
  $51 = HEAP32[100193]|0;
  $inc47 = (($51) + 1)|0;
  HEAP32[100193] = $inc47;
  return;
 }
 $52 = HEAP32[100193]|0;
 $cmp50 = ($52|0)==(6);
 if ($cmp50) {
  $53 = HEAP32[98788]|0;
  $add52 = (($53) + 2)|0;
  HEAP32[98788] = $add52;
  $54 = HEAP32[100161]|0;
  $and53 = $54 & 3;
  $tobool54 = ($and53|0)!=(0);
  if (!($tobool54)) {
   _S_StartSound(0,1);
  }
  $55 = HEAP32[98788]|0;
  $56 = HEAP32[100185]|0;
  $57 = HEAP32[100188]|0;
  $arrayidx57 = (($56) + (($57*40)|0)|0);
  $ssecret58 = ((($arrayidx57)) + 12|0);
  $58 = HEAP32[$ssecret58>>2]|0;
  $mul59 = ($58*100)|0;
  $59 = HEAP32[100156]|0;
  $maxsecret60 = ((($59)) + 24|0);
  $60 = HEAP32[$maxsecret60>>2]|0;
  $div61 = (($mul59|0) / ($60|0))&-1;
  $cmp62 = ($55|0)>=($div61|0);
  if (!($cmp62)) {
   return;
  }
  $61 = HEAP32[100185]|0;
  $62 = HEAP32[100188]|0;
  $arrayidx64 = (($61) + (($62*40)|0)|0);
  $ssecret65 = ((($arrayidx64)) + 12|0);
  $63 = HEAP32[$ssecret65>>2]|0;
  $mul66 = ($63*100)|0;
  $64 = HEAP32[100156]|0;
  $maxsecret67 = ((($64)) + 24|0);
  $65 = HEAP32[$maxsecret67>>2]|0;
  $div68 = (($mul66|0) / ($65|0))&-1;
  HEAP32[98788] = $div68;
  _S_StartSound(0,82);
  $66 = HEAP32[100193]|0;
  $inc69 = (($66) + 1)|0;
  HEAP32[100193] = $inc69;
  return;
 }
 $67 = HEAP32[100193]|0;
 $cmp72 = ($67|0)==(8);
 if ($cmp72) {
  $68 = HEAP32[100161]|0;
  $and74 = $68 & 3;
  $tobool75 = ($and74|0)!=(0);
  if (!($tobool75)) {
   _S_StartSound(0,1);
  }
  $69 = HEAP32[100195]|0;
  $add78 = (($69) + 3)|0;
  HEAP32[100195] = $add78;
  $70 = HEAP32[100195]|0;
  $71 = HEAP32[100185]|0;
  $72 = HEAP32[100188]|0;
  $arrayidx79 = (($71) + (($72*40)|0)|0);
  $stime80 = ((($arrayidx79)) + 16|0);
  $73 = HEAP32[$stime80>>2]|0;
  $div81 = (($73|0) / 35)&-1;
  $cmp82 = ($70|0)>=($div81|0);
  if ($cmp82) {
   $74 = HEAP32[100185]|0;
   $75 = HEAP32[100188]|0;
   $arrayidx84 = (($74) + (($75*40)|0)|0);
   $stime85 = ((($arrayidx84)) + 16|0);
   $76 = HEAP32[$stime85>>2]|0;
   $div86 = (($76|0) / 35)&-1;
   HEAP32[100195] = $div86;
  }
  $77 = HEAP32[100194]|0;
  $add88 = (($77) + 3)|0;
  HEAP32[100194] = $add88;
  $78 = HEAP32[100194]|0;
  $79 = HEAP32[100156]|0;
  $partime89 = ((($79)) + 32|0);
  $80 = HEAP32[$partime89>>2]|0;
  $div90 = (($80|0) / 35)&-1;
  $cmp91 = ($78|0)>=($div90|0);
  if (!($cmp91)) {
   return;
  }
  $81 = HEAP32[100156]|0;
  $partime93 = ((($81)) + 32|0);
  $82 = HEAP32[$partime93>>2]|0;
  $div94 = (($82|0) / 35)&-1;
  HEAP32[100194] = $div94;
  $83 = HEAP32[100195]|0;
  $84 = HEAP32[100185]|0;
  $85 = HEAP32[100188]|0;
  $arrayidx95 = (($84) + (($85*40)|0)|0);
  $stime96 = ((($arrayidx95)) + 16|0);
  $86 = HEAP32[$stime96>>2]|0;
  $div97 = (($86|0) / 35)&-1;
  $cmp98 = ($83|0)>=($div97|0);
  if (!($cmp98)) {
   return;
  }
  _S_StartSound(0,82);
  $87 = HEAP32[100193]|0;
  $inc100 = (($87) + 1)|0;
  HEAP32[100193] = $inc100;
  return;
 }
 $88 = HEAP32[100193]|0;
 $cmp104 = ($88|0)==(10);
 if (!($cmp104)) {
  $91 = HEAP32[100193]|0;
  $and114 = $91 & 1;
  $tobool115 = ($and114|0)!=(0);
  if (!($tobool115)) {
   return;
  }
  $92 = HEAP32[100187]|0;
  $dec = (($92) + -1)|0;
  HEAP32[100187] = $dec;
  $tobool117 = ($dec|0)!=(0);
  if ($tobool117) {
   return;
  }
  $93 = HEAP32[100193]|0;
  $inc119 = (($93) + 1)|0;
  HEAP32[100193] = $inc119;
  HEAP32[100187] = 35;
  return;
 }
 $89 = HEAP32[100182]|0;
 $tobool106 = ($89|0)!=(0);
 if (!($tobool106)) {
  return;
 }
 _S_StartSound(0,3);
 $90 = HEAP32[32168]|0;
 $cmp108 = ($90|0)==(2);
 if ($cmp108) {
  _WI_initNoState();
  return;
 } else {
  _WI_initShowNextLoc();
  return;
 }
}
function _WI_drawStats() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add1 = 0;
 var $add3 = 0, $add5 = 0, $cmp = 0, $conv = 0, $div = 0, $height = 0, $lh = 0, $mul = 0, $mul2 = 0, $mul4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[98744]|0;
 $height = ((($0)) + 2|0);
 $1 = HEAPU8[$height>>0]|(HEAPU8[$height+1>>0]<<8);
 $conv = $1 << 16 >> 16;
 $mul = ($conv*3)|0;
 $div = (($mul|0) / 2)&-1;
 $lh = $div;
 _WI_slamBackground();
 _WI_drawAnimatedBack();
 _WI_drawLF();
 $2 = HEAP32[100172]|0;
 _V_DrawPatch(50,50,$2);
 $3 = HEAP32[98796]|0;
 _WI_drawPercent(270,50,$3);
 $4 = $lh;
 $add = (50 + ($4))|0;
 $5 = HEAP32[100175]|0;
 _V_DrawPatch(50,$add,$5);
 $6 = $lh;
 $add1 = (50 + ($6))|0;
 $7 = HEAP32[98792]|0;
 _WI_drawPercent(270,$add1,$7);
 $8 = $lh;
 $mul2 = $8<<1;
 $add3 = (50 + ($mul2))|0;
 $9 = HEAP32[100174]|0;
 _V_DrawPatch(50,$add3,$9);
 $10 = $lh;
 $mul4 = $10<<1;
 $add5 = (50 + ($mul4))|0;
 $11 = HEAP32[98788]|0;
 _WI_drawPercent(270,$add5,$11);
 $12 = HEAP32[100177]|0;
 _V_DrawPatch(16,168,$12);
 $13 = HEAP32[100195]|0;
 _WI_drawTime(144,168,$13);
 $14 = HEAP32[100156]|0;
 $15 = HEAP32[$14>>2]|0;
 $cmp = ($15|0)<(3);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[100178]|0;
 _V_DrawPatch(176,168,$16);
 $17 = HEAP32[100194]|0;
 _WI_drawTime(304,168,$17);
 STACKTOP = sp;return;
}
function _WI_checkForAccelerate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and11 = 0, $arrayidx = 0, $attackdown = 0, $attackdown5 = 0;
 var $buttons = 0, $buttons9 = 0, $cmd = 0, $cmd8 = 0, $cmp = 0, $conv = 0, $conv10 = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $player = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool14 = 0, $tobool3 = 0, $usedown = 0, $usedown17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 $player = 183056;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (183040 + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $tobool = ($2|0)!=(0);
  do {
   if ($tobool) {
    $3 = $player;
    $cmd = ((($3)) + 8|0);
    $buttons = ((($cmd)) + 5|0);
    $4 = HEAP8[$buttons>>0]|0;
    $conv = $4&255;
    $and = $conv & 1;
    $tobool1 = ($and|0)!=(0);
    $5 = $player;
    $attackdown = ((($5)) + 196|0);
    if ($tobool1) {
     $6 = HEAP32[$attackdown>>2]|0;
     $tobool3 = ($6|0)!=(0);
     if (!($tobool3)) {
      HEAP32[100182] = 1;
     }
     $7 = $player;
     $attackdown5 = ((($7)) + 196|0);
     HEAP32[$attackdown5>>2] = 1;
    } else {
     HEAP32[$attackdown>>2] = 0;
    }
    $8 = $player;
    $cmd8 = ((($8)) + 8|0);
    $buttons9 = ((($cmd8)) + 5|0);
    $9 = HEAP8[$buttons9>>0]|0;
    $conv10 = $9&255;
    $and11 = $conv10 & 2;
    $tobool12 = ($and11|0)!=(0);
    $10 = $player;
    $usedown = ((($10)) + 200|0);
    if (!($tobool12)) {
     HEAP32[$usedown>>2] = 0;
     break;
    }
    $11 = HEAP32[$usedown>>2]|0;
    $tobool14 = ($11|0)!=(0);
    if (!($tobool14)) {
     HEAP32[100182] = 1;
    }
    $12 = $player;
    $usedown17 = ((($12)) + 200|0);
    HEAP32[$usedown17>>2] = 1;
   }
  } while(0);
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
  $14 = $player;
  $incdec$ptr = ((($14)) + 288|0);
  $player = $incdec$ptr;
 }
 STACKTOP = sp;return;
}
function _WI_Ticker() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp1 = 0, $inc = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100161]|0;
 $inc = (($0) + 1)|0;
 HEAP32[100161] = $inc;
 $1 = HEAP32[100161]|0;
 $cmp = ($1|0)==(1);
 do {
  if ($cmp) {
   $2 = HEAP32[32168]|0;
   $cmp1 = ($2|0)==(2);
   if ($cmp1) {
    _S_ChangeMusic(67,1);
    break;
   } else {
    _S_ChangeMusic(28,1);
    break;
   }
  }
 } while(0);
 _WI_checkForAccelerate();
 $3 = HEAP32[100162]|0;
 switch ($3|0) {
 case 0:  {
  $4 = HEAP32[99430]|0;
  $tobool = ($4|0)!=(0);
  if ($tobool) {
   _WI_updateDeathmatchStats();
   return;
  }
  $5 = HEAP32[99433]|0;
  $tobool6 = ($5|0)!=(0);
  if ($tobool6) {
   _WI_updateNetgameStats();
   return;
  } else {
   _WI_updateStats();
   return;
  }
  break;
 }
 case 1:  {
  _WI_updateShowNextLoc();
  return;
  break;
 }
 case -1:  {
  _WI_updateNoState();
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _WI_loadData() {
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $cmp = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32168]|0;
 $cmp = ($0|0)==(2);
 if ($cmp) {
  HEAP32[100157] = 32;
  $1 = HEAP32[100157]|0;
  $mul = $1<<2;
  $call = (_Z_Malloc($mul,1,0)|0);
  HEAP32[100158] = $call;
 } else {
  $call1 = (_Z_Malloc(36,1,0)|0);
  HEAP32[100158] = $call1;
 }
 _WI_loadUnloadData(165);
 $call2 = (_W_CacheLumpName(158247,1)|0);
 HEAP32[100190] = $call2;
 $call3 = (_W_CacheLumpName(158255,1)|0);
 HEAP32[100189] = $call3;
 return;
}
function _WI_loadCallback($name,$variable) {
 $name = $name|0;
 $variable = $variable|0;
 var $0 = 0, $1 = 0, $call = 0, $name$addr = 0, $variable$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $variable$addr = $variable;
 $0 = $name$addr;
 $call = (_W_CacheLumpName($0,1)|0);
 $1 = $variable$addr;
 HEAP32[$1>>2] = $call;
 STACKTOP = sp;return;
}
function _WI_Drawer() {
 var $0 = 0, $1 = 0, $2 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100162]|0;
 switch ($0|0) {
 case 0:  {
  $1 = HEAP32[99430]|0;
  $tobool = ($1|0)!=(0);
  if ($tobool) {
   _WI_drawDeathmatchStats();
   return;
  }
  $2 = HEAP32[99433]|0;
  $tobool1 = ($2|0)!=(0);
  if ($tobool1) {
   _WI_drawNetgameStats();
   return;
  } else {
   _WI_drawStats();
   return;
  }
  break;
 }
 case 1:  {
  _WI_drawShowNextLoc();
  return;
  break;
 }
 case -1:  {
  _WI_drawNoState();
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _WI_initVariables($wbstartstruct) {
 $wbstartstruct = $wbstartstruct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp11 = 0;
 var $maxitems = 0, $maxitems4 = 0, $maxkills = 0, $maxkills1 = 0, $maxsecret = 0, $maxsecret8 = 0, $plyr = 0, $pnum = 0, $sub = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, $wbstartstruct$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wbstartstruct$addr = $wbstartstruct;
 $0 = $wbstartstruct$addr;
 HEAP32[100156] = $0;
 HEAP32[100182] = 0;
 HEAP32[100161] = 0;
 HEAP32[100183] = 0;
 $1 = HEAP32[100156]|0;
 $pnum = ((($1)) + 36|0);
 $2 = HEAP32[$pnum>>2]|0;
 HEAP32[100188] = $2;
 $3 = HEAP32[100156]|0;
 $plyr = ((($3)) + 40|0);
 HEAP32[100185] = $plyr;
 $4 = HEAP32[100156]|0;
 $maxkills = ((($4)) + 16|0);
 $5 = HEAP32[$maxkills>>2]|0;
 $tobool = ($5|0)!=(0);
 if (!($tobool)) {
  $6 = HEAP32[100156]|0;
  $maxkills1 = ((($6)) + 16|0);
  HEAP32[$maxkills1>>2] = 1;
 }
 $7 = HEAP32[100156]|0;
 $maxitems = ((($7)) + 20|0);
 $8 = HEAP32[$maxitems>>2]|0;
 $tobool2 = ($8|0)!=(0);
 if (!($tobool2)) {
  $9 = HEAP32[100156]|0;
  $maxitems4 = ((($9)) + 20|0);
  HEAP32[$maxitems4>>2] = 1;
 }
 $10 = HEAP32[100156]|0;
 $maxsecret = ((($10)) + 24|0);
 $11 = HEAP32[$maxsecret>>2]|0;
 $tobool6 = ($11|0)!=(0);
 if (!($tobool6)) {
  $12 = HEAP32[100156]|0;
  $maxsecret8 = ((($12)) + 24|0);
  HEAP32[$maxsecret8>>2] = 1;
 }
 $13 = HEAP32[32168]|0;
 $cmp = ($13|0)!=(3);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[100156]|0;
 $15 = HEAP32[$14>>2]|0;
 $cmp11 = ($15|0)>(2);
 if (!($cmp11)) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[100156]|0;
 $17 = HEAP32[$16>>2]|0;
 $sub = (($17) - 3)|0;
 HEAP32[$16>>2] = $sub;
 STACKTOP = sp;return;
}
function _WI_Start($wbstartstruct) {
 $wbstartstruct = $wbstartstruct|0;
 var $0 = 0, $1 = 0, $2 = 0, $tobool = 0, $tobool1 = 0, $wbstartstruct$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wbstartstruct$addr = $wbstartstruct;
 $0 = $wbstartstruct$addr;
 _WI_initVariables($0);
 _WI_loadData();
 $1 = HEAP32[99430]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  _WI_initDeathmatchStats();
  STACKTOP = sp;return;
 }
 $2 = HEAP32[99433]|0;
 $tobool1 = ($2|0)!=(0);
 if ($tobool1) {
  _WI_initNetgameStats();
  STACKTOP = sp;return;
 } else {
  _WI_initStats();
  STACKTOP = sp;return;
 }
}
function _W_Checksum($digest) {
 $digest = $digest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $cmp = 0, $digest$addr = 0, $i = 0, $inc = 0, $sha1_context = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $sha1_context = sp + 4|0;
 $digest$addr = $digest;
 _SHA1_Init($sha1_context);
 HEAP32[100196] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[100198]|0;
  $cmp = ($0>>>0)<($1>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[100199]|0;
  $3 = $i;
  $arrayidx = (($2) + (($3*28)|0)|0);
  _ChecksumAddLump($sha1_context,$arrayidx);
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 $5 = $digest$addr;
 _SHA1_Final($5,$sha1_context);
 STACKTOP = sp;return;
}
function _ChecksumAddLump($sha1_context,$lump) {
 $sha1_context = $sha1_context|0;
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $call3 = 0, $lump$addr = 0, $position = 0, $sha1_context$addr = 0, $size = 0, $wad_file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf = sp + 8|0;
 $sha1_context$addr = $sha1_context;
 $lump$addr = $lump;
 $0 = $lump$addr;
 (_M_StringCopy($buf,$0,9)|0);
 $1 = $sha1_context$addr;
 _SHA1_UpdateString($1,$buf);
 $2 = $sha1_context$addr;
 $3 = $lump$addr;
 $wad_file = ((($3)) + 8|0);
 $4 = HEAP32[$wad_file>>2]|0;
 $call3 = (_GetFileNumber($4)|0);
 _SHA1_UpdateInt32($2,$call3);
 $5 = $sha1_context$addr;
 $6 = $lump$addr;
 $position = ((($6)) + 12|0);
 $7 = HEAP32[$position>>2]|0;
 _SHA1_UpdateInt32($5,$7);
 $8 = $sha1_context$addr;
 $9 = $lump$addr;
 $size = ((($9)) + 16|0);
 $10 = HEAP32[$size>>2]|0;
 _SHA1_UpdateInt32($8,$10);
 STACKTOP = sp;return;
}
function _GetFileNumber($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx2 = 0, $call = 0, $cmp = 0;
 var $cmp1 = 0, $handle$addr = 0, $i = 0, $inc = 0, $inc3 = 0, $mul = 0, $result = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $handle$addr = $handle;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[100196]|0;
  $cmp = ($0|0)<($1|0);
  $2 = HEAP32[100197]|0;
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = $i;
  $arrayidx = (($2) + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = $handle$addr;
  $cmp1 = ($4|0)==($5|0);
  $6 = $i;
  if ($cmp1) {
   label = 4;
   break;
  }
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $retval = $6;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 else if ((label|0) == 6) {
  $7 = HEAP32[100196]|0;
  $add = (($7) + 1)|0;
  $mul = $add<<2;
  $call = (_realloc($2,$mul)|0);
  HEAP32[100197] = $call;
  $8 = $handle$addr;
  $9 = HEAP32[100197]|0;
  $10 = HEAP32[100196]|0;
  $arrayidx2 = (($9) + ($10<<2)|0);
  HEAP32[$arrayidx2>>2] = $8;
  $11 = HEAP32[100196]|0;
  $result = $11;
  $12 = HEAP32[100196]|0;
  $inc3 = (($12) + 1)|0;
  HEAP32[100196] = $inc3;
  $13 = $result;
  $retval = $13;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _W_OpenFile($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $cmp = 0, $cmp4 = 0, $i = 0, $inc = 0, $path$addr = 0;
 var $result = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $path$addr = $path;
 $call = (_M_CheckParm(158264)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $0 = HEAP32[32473]|0;
  $1 = $path$addr;
  $call1 = (FUNCTION_TABLE_ii[$0 & 255]($1)|0);
  $retval = $call1;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 }
 $result = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $cmp = ($2>>>0)<(1);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $arrayidx = (129888 + ($3<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $path$addr;
  $call3 = (FUNCTION_TABLE_ii[$5 & 255]($6)|0);
  $result = $call3;
  $7 = $result;
  $cmp4 = ($7|0)!=(0|0);
  if ($cmp4) {
   break;
  }
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 $9 = $result;
 $retval = $9;
 $10 = $retval;
 STACKTOP = sp;return ($10|0);
}
function _W_Read($wad,$offset,$buffer,$buffer_len) {
 $wad = $wad|0;
 $offset = $offset|0;
 $buffer = $buffer|0;
 $buffer_len = $buffer_len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $Read = 0, $buffer$addr = 0, $buffer_len$addr = 0, $call = 0, $offset$addr = 0, $wad$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wad$addr = $wad;
 $offset$addr = $offset;
 $buffer$addr = $buffer;
 $buffer_len$addr = $buffer_len;
 $0 = $wad$addr;
 $1 = HEAP32[$0>>2]|0;
 $Read = ((($1)) + 8|0);
 $2 = HEAP32[$Read>>2]|0;
 $3 = $wad$addr;
 $4 = $offset$addr;
 $5 = $buffer$addr;
 $6 = $buffer_len$addr;
 $call = (FUNCTION_TABLE_iiiii[$2 & 127]($3,$4,$5,$6)|0);
 STACKTOP = sp;return ($call|0);
}
function _W_ParseCommandLine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $conv = 0;
 var $filename = 0, $inc = 0, $modifiedgame = 0, $p = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $modifiedgame = 0;
 $call = (_M_CheckParmWithArgs(158270,1)|0);
 $p = $call;
 $0 = $p;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  $12 = $modifiedgame;
  STACKTOP = sp;return ($12|0);
 }
 $modifiedgame = 1;
 while(1) {
  $1 = $p;
  $inc = (($1) + 1)|0;
  $p = $inc;
  $2 = HEAP32[99713]|0;
  $cmp = ($inc|0)!=($2|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = HEAP32[99714]|0;
  $4 = $p;
  $arrayidx = (($3) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $conv = $6 << 24 >> 24;
  $cmp2 = ($conv|0)!=(45);
  if (!($cmp2)) {
   label = 6;
   break;
  }
  $7 = HEAP32[99714]|0;
  $8 = $p;
  $arrayidx4 = (($7) + ($8<<2)|0);
  $9 = HEAP32[$arrayidx4>>2]|0;
  $call5 = (_D_TryFindWADByName($9)|0);
  $filename = $call5;
  $10 = $filename;
  HEAP32[$vararg_buffer>>2] = $10;
  (_printf(158276,$vararg_buffer)|0);
  $11 = $filename;
  (_W_AddFile($11)|0);
 }
 if ((label|0) == 6) {
  $12 = $modifiedgame;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _W_LumpNameHash($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $conv = 0, $conv4 = 0, $i = 0, $inc = 0;
 var $result = 0, $s$addr = 0, $shl = 0, $xor = 0, $xor5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $result = 5381;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(8);
  if ($cmp) {
   $1 = $s$addr;
   $2 = $i;
   $arrayidx = (($1) + ($2)|0);
   $3 = HEAP8[$arrayidx>>0]|0;
   $conv = $3 << 24 >> 24;
   $cmp1 = ($conv|0)!=(0);
   $10 = $cmp1;
  } else {
   $10 = 0;
  }
  $4 = $result;
  if (!($10)) {
   break;
  }
  $shl = $4 << 5;
  $5 = $result;
  $xor = $shl ^ $5;
  $6 = $s$addr;
  $7 = $i;
  $arrayidx3 = (($6) + ($7)|0);
  $8 = HEAP8[$arrayidx3>>0]|0;
  $conv4 = $8 << 24 >> 24;
  $call = (_toupper($conv4)|0);
  $xor5 = $xor ^ $call;
  $result = $xor5;
  $9 = $i;
  $inc = (($9) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return ($4|0);
}
function _W_AddFile($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr3 = 0, $arrayidx = 0, $cache = 0, $call = 0, $call10 = 0, $call15 = 0;
 var $call2 = 0, $call23 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp28 = 0, $cmp40 = 0, $fileinfo = 0, $filename$addr = 0, $filerover = 0, $header = 0, $i = 0, $inc = 0, $inc39 = 0, $incdec$ptr = 0, $incdec$ptr38 = 0, $infotableofs = 0, $infotableofs21 = 0, $infotableofs24 = 0, $length = 0;
 var $length7 = 0, $lump_p = 0, $mul = 0, $name = 0, $name35 = 0, $newnumlumps = 0, $numlumps = 0, $numlumps20 = 0, $numlumps22 = 0, $numlumps26 = 0, $position = 0, $retval = 0, $size = 0, $size31 = 0, $size32 = 0, $startlump = 0, $tobool = 0, $tobool11 = 0, $tobool16 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $wad_file = 0, $wad_file29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 52|0;
 $filename$addr = $filename;
 $0 = $filename$addr;
 $call = (_W_OpenFile($0)|0);
 $wad_file = $call;
 $1 = $wad_file;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $2 = $filename$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  (_printf(158288,$vararg_buffer)|0);
  $retval = 0;
  $51 = $retval;
  STACKTOP = sp;return ($51|0);
 }
 $3 = HEAP32[100198]|0;
 $newnumlumps = $3;
 $4 = $filename$addr;
 $5 = $filename$addr;
 $call2 = (_strlen($5)|0);
 $add$ptr = (($4) + ($call2)|0);
 $add$ptr3 = ((($add$ptr)) + -3|0);
 $call4 = (_strcasecmp($add$ptr3,158307)|0);
 $tobool = ($call4|0)!=(0);
 if ($tobool) {
  $call6 = (_Z_Malloc(16,1,0)|0);
  $fileinfo = $call6;
  $6 = $fileinfo;
  HEAP8[$6>>0]=0&255;HEAP8[$6+1>>0]=(0>>8)&255;HEAP8[$6+2>>0]=(0>>16)&255;HEAP8[$6+3>>0]=0>>24;
  $7 = $wad_file;
  $length7 = ((($7)) + 8|0);
  $8 = HEAP32[$length7>>2]|0;
  $9 = $fileinfo;
  $size = ((($9)) + 4|0);
  HEAP8[$size>>0]=$8&255;HEAP8[$size+1>>0]=($8>>8)&255;HEAP8[$size+2>>0]=($8>>16)&255;HEAP8[$size+3>>0]=$8>>24;
  $10 = $filename$addr;
  $11 = $fileinfo;
  $name = ((($11)) + 8|0);
  _M_ExtractFileBase($10,$name);
  $12 = $newnumlumps;
  $inc = (($12) + 1)|0;
  $newnumlumps = $inc;
 } else {
  $13 = $wad_file;
  (_W_Read($13,0,$header,12)|0);
  $call10 = (_strncmp($header,158311,4)|0);
  $tobool11 = ($call10|0)!=(0);
  if ($tobool11) {
   $call15 = (_strncmp($header,158316,4)|0);
   $tobool16 = ($call15|0)!=(0);
   if ($tobool16) {
    $14 = $filename$addr;
    HEAP32[$vararg_buffer1>>2] = $14;
    _I_Error(158321,$vararg_buffer1);
   }
  }
  $numlumps = ((($header)) + 4|0);
  $15 = HEAPU8[$numlumps>>0]|(HEAPU8[$numlumps+1>>0]<<8)|(HEAPU8[$numlumps+2>>0]<<16)|(HEAPU8[$numlumps+3>>0]<<24);
  $numlumps20 = ((($header)) + 4|0);
  HEAP8[$numlumps20>>0]=$15&255;HEAP8[$numlumps20+1>>0]=($15>>8)&255;HEAP8[$numlumps20+2>>0]=($15>>16)&255;HEAP8[$numlumps20+3>>0]=$15>>24;
  $infotableofs = ((($header)) + 8|0);
  $16 = HEAPU8[$infotableofs>>0]|(HEAPU8[$infotableofs+1>>0]<<8)|(HEAPU8[$infotableofs+2>>0]<<16)|(HEAPU8[$infotableofs+3>>0]<<24);
  $infotableofs21 = ((($header)) + 8|0);
  HEAP8[$infotableofs21>>0]=$16&255;HEAP8[$infotableofs21+1>>0]=($16>>8)&255;HEAP8[$infotableofs21+2>>0]=($16>>16)&255;HEAP8[$infotableofs21+3>>0]=$16>>24;
  $numlumps22 = ((($header)) + 4|0);
  $17 = HEAPU8[$numlumps22>>0]|(HEAPU8[$numlumps22+1>>0]<<8)|(HEAPU8[$numlumps22+2>>0]<<16)|(HEAPU8[$numlumps22+3>>0]<<24);
  $mul = $17<<4;
  $length = $mul;
  $18 = $length;
  $call23 = (_Z_Malloc($18,1,0)|0);
  $fileinfo = $call23;
  $19 = $wad_file;
  $infotableofs24 = ((($header)) + 8|0);
  $20 = HEAPU8[$infotableofs24>>0]|(HEAPU8[$infotableofs24+1>>0]<<8)|(HEAPU8[$infotableofs24+2>>0]<<16)|(HEAPU8[$infotableofs24+3>>0]<<24);
  $21 = $fileinfo;
  $22 = $length;
  (_W_Read($19,$20,$21,$22)|0);
  $numlumps26 = ((($header)) + 4|0);
  $23 = HEAPU8[$numlumps26>>0]|(HEAPU8[$numlumps26+1>>0]<<8)|(HEAPU8[$numlumps26+2>>0]<<16)|(HEAPU8[$numlumps26+3>>0]<<24);
  $24 = $newnumlumps;
  $add = (($24) + ($23))|0;
  $newnumlumps = $add;
 }
 $25 = HEAP32[100198]|0;
 $startlump = $25;
 $26 = $newnumlumps;
 _ExtendLumpInfo($26);
 $27 = HEAP32[100199]|0;
 $28 = $startlump;
 $arrayidx = (($27) + (($28*28)|0)|0);
 $lump_p = $arrayidx;
 $29 = $fileinfo;
 $filerover = $29;
 $30 = $startlump;
 $i = $30;
 while(1) {
  $31 = $i;
  $32 = HEAP32[100198]|0;
  $cmp28 = ($31>>>0)<($32>>>0);
  if (!($cmp28)) {
   break;
  }
  $33 = $wad_file;
  $34 = $lump_p;
  $wad_file29 = ((($34)) + 8|0);
  HEAP32[$wad_file29>>2] = $33;
  $35 = $filerover;
  $36 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8)|(HEAPU8[$35+2>>0]<<16)|(HEAPU8[$35+3>>0]<<24);
  $37 = $lump_p;
  $position = ((($37)) + 12|0);
  HEAP32[$position>>2] = $36;
  $38 = $filerover;
  $size31 = ((($38)) + 4|0);
  $39 = HEAPU8[$size31>>0]|(HEAPU8[$size31+1>>0]<<8)|(HEAPU8[$size31+2>>0]<<16)|(HEAPU8[$size31+3>>0]<<24);
  $40 = $lump_p;
  $size32 = ((($40)) + 16|0);
  HEAP32[$size32>>2] = $39;
  $41 = $lump_p;
  $cache = ((($41)) + 20|0);
  HEAP32[$cache>>2] = 0;
  $42 = $lump_p;
  $43 = $filerover;
  $name35 = ((($43)) + 8|0);
  (_strncpy($42,$name35,8)|0);
  $44 = $lump_p;
  $incdec$ptr = ((($44)) + 28|0);
  $lump_p = $incdec$ptr;
  $45 = $filerover;
  $incdec$ptr38 = ((($45)) + 16|0);
  $filerover = $incdec$ptr38;
  $46 = $i;
  $inc39 = (($46) + 1)|0;
  $i = $inc39;
 }
 $47 = $fileinfo;
 _Z_Free($47);
 $48 = HEAP32[100200]|0;
 $cmp40 = ($48|0)!=(0|0);
 if ($cmp40) {
  $49 = HEAP32[100200]|0;
  _Z_Free($49);
  HEAP32[100200] = 0;
 }
 $50 = $wad_file;
 $retval = $50;
 $51 = $retval;
 STACKTOP = sp;return ($51|0);
}
function _ExtendLumpInfo($newnumlumps) {
 $newnumlumps = $newnumlumps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx3 = 0, $arrayidx4 = 0;
 var $arrayidx7 = 0, $arrayidx9 = 0, $cache = 0, $cache10 = 0, $cache8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp2 = 0, $cmp5 = 0, $i = 0, $inc = 0, $newlumpinfo = 0, $newnumlumps$addr = 0, $next = 0, $next16 = 0, $next19 = 0, $nextlumpnum = 0, $sub$ptr$div = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $newnumlumps$addr = $newnumlumps;
 $0 = $newnumlumps$addr;
 $call = (_calloc($0,28)|0);
 $newlumpinfo = $call;
 $1 = $newlumpinfo;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  _I_Error(158363,$vararg_buffer);
 }
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[100198]|0;
  $cmp1 = ($2>>>0)<($3>>>0);
  if (!($cmp1)) {
   label = 11;
   break;
  }
  $4 = $i;
  $5 = $newnumlumps$addr;
  $cmp2 = ($4>>>0)<($5>>>0);
  if (!($cmp2)) {
   label = 11;
   break;
  }
  $6 = $newlumpinfo;
  $7 = $i;
  $arrayidx = (($6) + (($7*28)|0)|0);
  $8 = HEAP32[100199]|0;
  $9 = $i;
  $arrayidx3 = (($8) + (($9*28)|0)|0);
  ;HEAP32[$arrayidx>>2]=HEAP32[$arrayidx3>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$arrayidx3+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$arrayidx3+8>>2]|0;HEAP32[$arrayidx+12>>2]=HEAP32[$arrayidx3+12>>2]|0;HEAP32[$arrayidx+16>>2]=HEAP32[$arrayidx3+16>>2]|0;HEAP32[$arrayidx+20>>2]=HEAP32[$arrayidx3+20>>2]|0;HEAP32[$arrayidx+24>>2]=HEAP32[$arrayidx3+24>>2]|0;
  $10 = $newlumpinfo;
  $11 = $i;
  $arrayidx4 = (($10) + (($11*28)|0)|0);
  $cache = ((($arrayidx4)) + 20|0);
  $12 = HEAP32[$cache>>2]|0;
  $cmp5 = ($12|0)!=(0|0);
  if ($cmp5) {
   $13 = $newlumpinfo;
   $14 = $i;
   $arrayidx7 = (($13) + (($14*28)|0)|0);
   $cache8 = ((($arrayidx7)) + 20|0);
   $15 = HEAP32[$cache8>>2]|0;
   $16 = $newlumpinfo;
   $17 = $i;
   $arrayidx9 = (($16) + (($17*28)|0)|0);
   $cache10 = ((($arrayidx9)) + 20|0);
   _Z_ChangeUser($15,$cache10);
  }
  $18 = HEAP32[100199]|0;
  $19 = $i;
  $arrayidx12 = (($18) + (($19*28)|0)|0);
  $next = ((($arrayidx12)) + 24|0);
  $20 = HEAP32[$next>>2]|0;
  $cmp13 = ($20|0)!=(0|0);
  if ($cmp13) {
   $21 = HEAP32[100199]|0;
   $22 = $i;
   $arrayidx15 = (($21) + (($22*28)|0)|0);
   $next16 = ((($arrayidx15)) + 24|0);
   $23 = HEAP32[$next16>>2]|0;
   $24 = HEAP32[100199]|0;
   $sub$ptr$lhs$cast = $23;
   $sub$ptr$rhs$cast = $24;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
   $nextlumpnum = $sub$ptr$div;
   $25 = $newlumpinfo;
   $26 = $nextlumpnum;
   $arrayidx17 = (($25) + (($26*28)|0)|0);
   $27 = $newlumpinfo;
   $28 = $i;
   $arrayidx18 = (($27) + (($28*28)|0)|0);
   $next19 = ((($arrayidx18)) + 24|0);
   HEAP32[$next19>>2] = $arrayidx17;
  }
  $29 = $i;
  $inc = (($29) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 11) {
  $30 = HEAP32[100199]|0;
  _free($30);
  $31 = $newlumpinfo;
  HEAP32[100199] = $31;
  $32 = $newnumlumps$addr;
  HEAP32[100198] = $32;
  STACKTOP = sp;return;
 }
}
function _W_CheckNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $arrayidx8 = 0, $call = 0, $call11 = 0, $call3 = 0, $cmp = 0, $cmp1 = 0, $cmp6 = 0, $dec = 0, $hash = 0, $i = 0, $lump_p = 0, $name$addr = 0, $next = 0, $rem = 0, $retval = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 var $tobool = 0, $tobool12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $name$addr = $name;
 $0 = HEAP32[100200]|0;
 $cmp = ($0|0)!=(0|0);
 L1: do {
  if ($cmp) {
   $1 = $name$addr;
   $call = (_W_LumpNameHash($1)|0);
   $2 = HEAP32[100198]|0;
   $rem = (($call>>>0) % ($2>>>0))&-1;
   $hash = $rem;
   $3 = HEAP32[100200]|0;
   $4 = $hash;
   $arrayidx = (($3) + ($4<<2)|0);
   $5 = HEAP32[$arrayidx>>2]|0;
   $lump_p = $5;
   while(1) {
    $6 = $lump_p;
    $cmp1 = ($6|0)!=(0|0);
    if (!($cmp1)) {
     break L1;
    }
    $7 = $lump_p;
    $8 = $name$addr;
    $call3 = (_strncasecmp($7,$8,8)|0);
    $tobool = ($call3|0)!=(0);
    $9 = $lump_p;
    if (!($tobool)) {
     break;
    }
    $next = ((($9)) + 24|0);
    $11 = HEAP32[$next>>2]|0;
    $lump_p = $11;
   }
   $10 = HEAP32[100199]|0;
   $sub$ptr$lhs$cast = $9;
   $sub$ptr$rhs$cast = $10;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $sub$ptr$div = (($sub$ptr$sub|0) / 28)&-1;
   $retval = $sub$ptr$div;
   $18 = $retval;
   STACKTOP = sp;return ($18|0);
  } else {
   $12 = HEAP32[100198]|0;
   $sub = (($12) - 1)|0;
   $i = $sub;
   while(1) {
    $13 = $i;
    $cmp6 = ($13|0)>=(0);
    if (!($cmp6)) {
     break L1;
    }
    $14 = HEAP32[100199]|0;
    $15 = $i;
    $arrayidx8 = (($14) + (($15*28)|0)|0);
    $16 = $name$addr;
    $call11 = (_strncasecmp($arrayidx8,$16,8)|0);
    $tobool12 = ($call11|0)!=(0);
    $17 = $i;
    if (!($tobool12)) {
     break;
    }
    $dec = (($17) + -1)|0;
    $i = $dec;
   }
   $retval = $17;
   $18 = $retval;
   STACKTOP = sp;return ($18|0);
  }
 } while(0);
 $retval = -1;
 $18 = $retval;
 STACKTOP = sp;return ($18|0);
}
function _W_GetNumForName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $i = 0, $name$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $name$addr = $name;
 $0 = $name$addr;
 $call = (_W_CheckNumForName($0)|0);
 $i = $call;
 $1 = $i;
 $cmp = ($1|0)<(0);
 if (!($cmp)) {
  $3 = $i;
  STACKTOP = sp;return ($3|0);
 }
 $2 = $name$addr;
 HEAP32[$vararg_buffer>>2] = $2;
 _I_Error(158389,$vararg_buffer);
 $3 = $i;
 STACKTOP = sp;return ($3|0);
}
function _W_LumpLength($lump) {
 $lump = $lump|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $cmp = 0, $lump$addr = 0, $size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $lump$addr = $lump;
 $0 = $lump$addr;
 $1 = HEAP32[100198]|0;
 $cmp = ($0>>>0)>=($1>>>0);
 if ($cmp) {
  $2 = $lump$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(158420,$vararg_buffer);
 }
 $3 = HEAP32[100199]|0;
 $4 = $lump$addr;
 $arrayidx = (($3) + (($4*28)|0)|0);
 $size = ((($arrayidx)) + 16|0);
 $5 = HEAP32[$size>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _W_ReadLump($lump,$dest) {
 $lump = $lump|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0;
 var $c = 0, $call = 0, $cmp = 0, $cmp2 = 0, $dest$addr = 0, $l = 0, $lump$addr = 0, $position = 0, $size = 0, $size1 = 0, $size4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $wad_file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lump$addr = $lump;
 $dest$addr = $dest;
 $0 = $lump$addr;
 $1 = HEAP32[100198]|0;
 $cmp = ($0>>>0)>=($1>>>0);
 if ($cmp) {
  $2 = $lump$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(158449,$vararg_buffer);
 }
 $3 = HEAP32[100199]|0;
 $4 = $lump$addr;
 $add$ptr = (($3) + (($4*28)|0)|0);
 $l = $add$ptr;
 _I_BeginRead();
 $5 = $l;
 $wad_file = ((($5)) + 8|0);
 $6 = HEAP32[$wad_file>>2]|0;
 $7 = $l;
 $position = ((($7)) + 12|0);
 $8 = HEAP32[$position>>2]|0;
 $9 = $dest$addr;
 $10 = $l;
 $size = ((($10)) + 16|0);
 $11 = HEAP32[$size>>2]|0;
 $call = (_W_Read($6,$8,$9,$11)|0);
 $c = $call;
 $12 = $c;
 $13 = $l;
 $size1 = ((($13)) + 16|0);
 $14 = HEAP32[$size1>>2]|0;
 $cmp2 = ($12|0)<($14|0);
 if (!($cmp2)) {
  _I_EndRead();
  STACKTOP = sp;return;
 }
 $15 = $c;
 $16 = $l;
 $size4 = ((($16)) + 16|0);
 $17 = HEAP32[$size4>>2]|0;
 $18 = $lump$addr;
 HEAP32[$vararg_buffer1>>2] = $15;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $17;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $18;
 _I_Error(158476,$vararg_buffer1);
 _I_EndRead();
 STACKTOP = sp;return;
}
function _W_CacheLumpNum($lumpnum,$tag) {
 $lumpnum = $lumpnum|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $cache = 0, $cache10 = 0, $cache12 = 0, $cache13 = 0, $cache14 = 0, $cache7 = 0, $cache8 = 0, $call = 0, $call11 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp5 = 0, $lump = 0, $lumpnum$addr = 0, $mapped = 0, $mapped4 = 0, $position = 0, $result = 0, $tag$addr = 0, $vararg_buffer = 0, $wad_file = 0, $wad_file3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $lumpnum$addr = $lumpnum;
 $tag$addr = $tag;
 $0 = $lumpnum$addr;
 $1 = HEAP32[100198]|0;
 $cmp = ($0>>>0)>=($1>>>0);
 if ($cmp) {
  $2 = $lumpnum$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(158518,$vararg_buffer);
 }
 $3 = HEAP32[100199]|0;
 $4 = $lumpnum$addr;
 $arrayidx = (($3) + (($4*28)|0)|0);
 $lump = $arrayidx;
 $5 = $lump;
 $wad_file = ((($5)) + 8|0);
 $6 = HEAP32[$wad_file>>2]|0;
 $mapped = ((($6)) + 4|0);
 $7 = HEAP32[$mapped>>2]|0;
 $cmp1 = ($7|0)!=(0|0);
 $8 = $lump;
 if ($cmp1) {
  $wad_file3 = ((($8)) + 8|0);
  $9 = HEAP32[$wad_file3>>2]|0;
  $mapped4 = ((($9)) + 4|0);
  $10 = HEAP32[$mapped4>>2]|0;
  $11 = $lump;
  $position = ((($11)) + 12|0);
  $12 = HEAP32[$position>>2]|0;
  $add$ptr = (($10) + ($12)|0);
  $result = $add$ptr;
  $28 = $result;
  STACKTOP = sp;return ($28|0);
 }
 $cache = ((($8)) + 20|0);
 $13 = HEAP32[$cache>>2]|0;
 $cmp5 = ($13|0)!=(0|0);
 if ($cmp5) {
  $14 = $lump;
  $cache7 = ((($14)) + 20|0);
  $15 = HEAP32[$cache7>>2]|0;
  $result = $15;
  $16 = $lump;
  $cache8 = ((($16)) + 20|0);
  $17 = HEAP32[$cache8>>2]|0;
  $18 = $tag$addr;
  _Z_ChangeTag2($17,$18,158549,410);
  $28 = $result;
  STACKTOP = sp;return ($28|0);
 } else {
  $19 = $lumpnum$addr;
  $call = (_W_LumpLength($19)|0);
  $20 = $tag$addr;
  $21 = $lump;
  $cache10 = ((($21)) + 20|0);
  $call11 = (_Z_Malloc($call,$20,$cache10)|0);
  $22 = $lump;
  $cache12 = ((($22)) + 20|0);
  HEAP32[$cache12>>2] = $call11;
  $23 = $lumpnum$addr;
  $24 = $lump;
  $cache13 = ((($24)) + 20|0);
  $25 = HEAP32[$cache13>>2]|0;
  _W_ReadLump($23,$25);
  $26 = $lump;
  $cache14 = ((($26)) + 20|0);
  $27 = HEAP32[$cache14>>2]|0;
  $result = $27;
  $28 = $result;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _W_CacheLumpName($name,$tag) {
 $name = $name|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $name$addr = 0, $tag$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $tag$addr = $tag;
 $0 = $name$addr;
 $call = (_W_GetNumForName($0)|0);
 $1 = $tag$addr;
 $call1 = (_W_CacheLumpNum($call,$1)|0);
 STACKTOP = sp;return ($call1|0);
}
function _W_ReleaseLumpNum($lumpnum) {
 $lumpnum = $lumpnum|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cache = 0, $cmp = 0, $cmp1 = 0, $lump = 0, $lumpnum$addr = 0, $mapped = 0, $vararg_buffer = 0, $wad_file = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $lumpnum$addr = $lumpnum;
 $0 = $lumpnum$addr;
 $1 = HEAP32[100198]|0;
 $cmp = ($0>>>0)>=($1>>>0);
 if ($cmp) {
  $2 = $lumpnum$addr;
  HEAP32[$vararg_buffer>>2] = $2;
  _I_Error(158557,$vararg_buffer);
 }
 $3 = HEAP32[100199]|0;
 $4 = $lumpnum$addr;
 $arrayidx = (($3) + (($4*28)|0)|0);
 $lump = $arrayidx;
 $5 = $lump;
 $wad_file = ((($5)) + 8|0);
 $6 = HEAP32[$wad_file>>2]|0;
 $mapped = ((($6)) + 4|0);
 $7 = HEAP32[$mapped>>2]|0;
 $cmp1 = ($7|0)!=(0|0);
 if ($cmp1) {
  STACKTOP = sp;return;
 }
 $8 = $lump;
 $cache = ((($8)) + 20|0);
 $9 = HEAP32[$cache>>2]|0;
 _Z_ChangeTag2($9,8,158549,461);
 STACKTOP = sp;return;
}
function _W_ReleaseLumpName($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $0 = $name$addr;
 $call = (_W_GetNumForName($0)|0);
 _W_ReleaseLumpNum($call);
 STACKTOP = sp;return;
}
function _W_GenerateHashTable() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $hash = 0, $i = 0, $inc = 0, $mul = 0, $mul3 = 0, $next = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[100200]|0;
 $cmp = ($0|0)!=(0|0);
 if ($cmp) {
  $1 = HEAP32[100200]|0;
  _Z_Free($1);
 }
 $2 = HEAP32[100198]|0;
 $cmp1 = ($2>>>0)>(0);
 if (!($cmp1)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[100198]|0;
 $mul = $3<<2;
 $call = (_Z_Malloc($mul,1,0)|0);
 HEAP32[100200] = $call;
 $4 = HEAP32[100200]|0;
 $5 = HEAP32[100198]|0;
 $mul3 = $5<<2;
 _memset(($4|0),0,($mul3|0))|0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = HEAP32[100198]|0;
  $cmp4 = ($6>>>0)<($7>>>0);
  if (!($cmp4)) {
   break;
  }
  $8 = HEAP32[100199]|0;
  $9 = $i;
  $arrayidx = (($8) + (($9*28)|0)|0);
  $call5 = (_W_LumpNameHash($arrayidx)|0);
  $10 = HEAP32[100198]|0;
  $rem = (($call5>>>0) % ($10>>>0))&-1;
  $hash = $rem;
  $11 = HEAP32[100200]|0;
  $12 = $hash;
  $arrayidx6 = (($11) + ($12<<2)|0);
  $13 = HEAP32[$arrayidx6>>2]|0;
  $14 = HEAP32[100199]|0;
  $15 = $i;
  $arrayidx7 = (($14) + (($15*28)|0)|0);
  $next = ((($arrayidx7)) + 24|0);
  HEAP32[$next>>2] = $13;
  $16 = HEAP32[100199]|0;
  $17 = $i;
  $arrayidx8 = (($16) + (($17*28)|0)|0);
  $18 = HEAP32[100200]|0;
  $19 = $hash;
  $arrayidx9 = (($18) + ($19<<2)|0);
  HEAP32[$arrayidx9>>2] = $arrayidx8;
  $20 = $i;
  $inc = (($20) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _W_CheckCorrectIWAD($mission) {
 $mission = $mission|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx3 = 0, $arrayidx6 = 0, $call = 0, $call12 = 0, $call8 = 0;
 var $call9 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $i = 0, $inc = 0, $lumpname = 0, $lumpnum = 0, $mission$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $mission$addr = $mission;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0>>>0)<(4);
  if (!($cmp)) {
   break;
  }
  $1 = $mission$addr;
  $2 = $i;
  $arrayidx = (126976 + ($2<<3)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $cmp2 = ($1|0)!=($3|0);
  if ($cmp2) {
   $4 = $i;
   $arrayidx3 = (126976 + ($4<<3)|0);
   $lumpname = ((($arrayidx3)) + 4|0);
   $5 = HEAP32[$lumpname>>2]|0;
   $call = (_W_CheckNumForName($5)|0);
   $lumpnum = $call;
   $6 = $lumpnum;
   $cmp4 = ($6|0)>=(0);
   if ($cmp4) {
    $7 = $i;
    $arrayidx6 = (126976 + ($7<<3)|0);
    $8 = HEAP32[$arrayidx6>>2]|0;
    $call8 = (_D_SuggestGameName($8,4)|0);
    $9 = $mission$addr;
    $call9 = (_D_GameMissionString($9)|0);
    $10 = $i;
    $arrayidx10 = (126976 + ($10<<3)|0);
    $11 = HEAP32[$arrayidx10>>2]|0;
    $call12 = (_D_GameMissionString($11)|0);
    HEAP32[$vararg_buffer>>2] = $call8;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 158718;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call9;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = 158718;
    $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
    HEAP32[$vararg_ptr4>>2] = $call12;
    _I_Error(158590,$vararg_buffer);
   }
  }
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _Z_Init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $block = 0, $blocklist = 0;
 var $blocklist2 = 0, $blocklist3 = 0, $blocklist4 = 0, $blocklist5 = 0, $call = 0, $next = 0, $next6 = 0, $prev = 0, $prev7 = 0, $rover = 0, $size = 0, $sub = 0, $tag = 0, $tag8 = 0, $user = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $size = sp;
 $call = (_I_ZoneBase($size)|0);
 HEAP32[100201] = $call;
 $0 = HEAP32[$size>>2]|0;
 $1 = HEAP32[100201]|0;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[100201]|0;
 $add$ptr = ((($2)) + 32|0);
 $block = $add$ptr;
 $3 = HEAP32[100201]|0;
 $blocklist = ((($3)) + 4|0);
 $prev = ((($blocklist)) + 20|0);
 HEAP32[$prev>>2] = $add$ptr;
 $4 = HEAP32[100201]|0;
 $blocklist2 = ((($4)) + 4|0);
 $next = ((($blocklist2)) + 16|0);
 HEAP32[$next>>2] = $add$ptr;
 $5 = HEAP32[100201]|0;
 $6 = HEAP32[100201]|0;
 $blocklist3 = ((($6)) + 4|0);
 $user = ((($blocklist3)) + 4|0);
 HEAP32[$user>>2] = $5;
 $7 = HEAP32[100201]|0;
 $blocklist4 = ((($7)) + 4|0);
 $tag = ((($blocklist4)) + 8|0);
 HEAP32[$tag>>2] = 1;
 $8 = $block;
 $9 = HEAP32[100201]|0;
 $rover = ((($9)) + 28|0);
 HEAP32[$rover>>2] = $8;
 $10 = HEAP32[100201]|0;
 $blocklist5 = ((($10)) + 4|0);
 $11 = $block;
 $next6 = ((($11)) + 16|0);
 HEAP32[$next6>>2] = $blocklist5;
 $12 = $block;
 $prev7 = ((($12)) + 20|0);
 HEAP32[$prev7>>2] = $blocklist5;
 $13 = $block;
 $tag8 = ((($13)) + 8|0);
 HEAP32[$tag8>>2] = 4;
 $14 = HEAP32[100201]|0;
 $15 = HEAP32[$14>>2]|0;
 $sub = (($15) - 32)|0;
 $16 = $block;
 HEAP32[$16>>2] = $sub;
 STACKTOP = sp;return;
}
function _Z_Free($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add27 = 0, $block = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp16 = 0, $cmp2 = 0;
 var $cmp23 = 0, $cmp33 = 0, $id = 0, $id8 = 0, $next = 0, $next13 = 0, $next14 = 0, $next21 = 0, $next28 = 0, $next29 = 0, $next30 = 0, $other = 0, $prev = 0, $prev15 = 0, $prev31 = 0, $ptr$addr = 0, $rover = 0, $rover18 = 0, $rover32 = 0, $rover35 = 0;
 var $tag = 0, $tag22 = 0, $tag6 = 0, $tag9 = 0, $user = 0, $user4 = 0, $user7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $ptr$addr = $ptr;
 $0 = $ptr$addr;
 $add$ptr = ((($0)) + -24|0);
 $block = $add$ptr;
 $1 = $block;
 $id = ((($1)) + 12|0);
 $2 = HEAP32[$id>>2]|0;
 $cmp = ($2|0)!=(1919505);
 if ($cmp) {
  _I_Error(158758,$vararg_buffer);
 }
 $3 = $block;
 $tag = ((($3)) + 8|0);
 $4 = HEAP32[$tag>>2]|0;
 $cmp1 = ($4|0)!=(4);
 if ($cmp1) {
  $5 = $block;
  $user = ((($5)) + 4|0);
  $6 = HEAP32[$user>>2]|0;
  $cmp2 = ($6|0)!=(0|0);
  if ($cmp2) {
   $7 = $block;
   $user4 = ((($7)) + 4|0);
   $8 = HEAP32[$user4>>2]|0;
   HEAP32[$8>>2] = 0;
  }
 }
 $9 = $block;
 $tag6 = ((($9)) + 8|0);
 HEAP32[$tag6>>2] = 4;
 $10 = $block;
 $user7 = ((($10)) + 4|0);
 HEAP32[$user7>>2] = 0;
 $11 = $block;
 $id8 = ((($11)) + 12|0);
 HEAP32[$id8>>2] = 0;
 $12 = $block;
 $prev = ((($12)) + 20|0);
 $13 = HEAP32[$prev>>2]|0;
 $other = $13;
 $14 = $other;
 $tag9 = ((($14)) + 8|0);
 $15 = HEAP32[$tag9>>2]|0;
 $cmp10 = ($15|0)==(4);
 if ($cmp10) {
  $16 = $block;
  $17 = HEAP32[$16>>2]|0;
  $18 = $other;
  $19 = HEAP32[$18>>2]|0;
  $add = (($19) + ($17))|0;
  HEAP32[$18>>2] = $add;
  $20 = $block;
  $next = ((($20)) + 16|0);
  $21 = HEAP32[$next>>2]|0;
  $22 = $other;
  $next13 = ((($22)) + 16|0);
  HEAP32[$next13>>2] = $21;
  $23 = $other;
  $24 = $other;
  $next14 = ((($24)) + 16|0);
  $25 = HEAP32[$next14>>2]|0;
  $prev15 = ((($25)) + 20|0);
  HEAP32[$prev15>>2] = $23;
  $26 = $block;
  $27 = HEAP32[100201]|0;
  $rover = ((($27)) + 28|0);
  $28 = HEAP32[$rover>>2]|0;
  $cmp16 = ($26|0)==($28|0);
  if ($cmp16) {
   $29 = $other;
   $30 = HEAP32[100201]|0;
   $rover18 = ((($30)) + 28|0);
   HEAP32[$rover18>>2] = $29;
  }
  $31 = $other;
  $block = $31;
 }
 $32 = $block;
 $next21 = ((($32)) + 16|0);
 $33 = HEAP32[$next21>>2]|0;
 $other = $33;
 $34 = $other;
 $tag22 = ((($34)) + 8|0);
 $35 = HEAP32[$tag22>>2]|0;
 $cmp23 = ($35|0)==(4);
 if (!($cmp23)) {
  STACKTOP = sp;return;
 }
 $36 = $other;
 $37 = HEAP32[$36>>2]|0;
 $38 = $block;
 $39 = HEAP32[$38>>2]|0;
 $add27 = (($39) + ($37))|0;
 HEAP32[$38>>2] = $add27;
 $40 = $other;
 $next28 = ((($40)) + 16|0);
 $41 = HEAP32[$next28>>2]|0;
 $42 = $block;
 $next29 = ((($42)) + 16|0);
 HEAP32[$next29>>2] = $41;
 $43 = $block;
 $44 = $block;
 $next30 = ((($44)) + 16|0);
 $45 = HEAP32[$next30>>2]|0;
 $prev31 = ((($45)) + 20|0);
 HEAP32[$prev31>>2] = $43;
 $46 = $other;
 $47 = HEAP32[100201]|0;
 $rover32 = ((($47)) + 28|0);
 $48 = HEAP32[$rover32>>2]|0;
 $cmp33 = ($46|0)==($48|0);
 if (!($cmp33)) {
  STACKTOP = sp;return;
 }
 $49 = $block;
 $50 = HEAP32[100201]|0;
 $rover35 = ((($50)) + 28|0);
 HEAP32[$rover35>>2] = $49;
 STACKTOP = sp;return;
}
function _Z_Malloc($size,$tag,$user) {
 $size = $size|0;
 $tag = $tag|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr30 = 0, $add$ptr48 = 0, $add1 = 0, $and = 0, $base = 0;
 var $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp23 = 0, $cmp25 = 0, $cmp28 = 0, $cmp42 = 0, $cmp43 = 0, $cmp6 = 0, $extra = 0, $id = 0, $newblock = 0, $next = 0, $next16 = 0, $next17 = 0, $next20 = 0, $next35 = 0, $next36 = 0, $next37 = 0, $next39 = 0;
 var $next53 = 0, $or$cond = 0, $prev = 0, $prev15 = 0, $prev34 = 0, $prev38 = 0, $prev4 = 0, $prev5 = 0, $result = 0, $rover = 0, $rover2 = 0, $rover54 = 0, $size$addr = 0, $start = 0, $sub = 0, $sub27 = 0, $tag$addr = 0, $tag12 = 0, $tag22 = 0, $tag3 = 0;
 var $tag32 = 0, $tag47 = 0, $tag9 = 0, $tobool = 0, $user$addr = 0, $user33 = 0, $user46 = 0, $user49 = 0, $user51 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $size$addr = $size;
 $tag$addr = $tag;
 $user$addr = $user;
 $0 = $size$addr;
 $add = (($0) + 4)|0;
 $sub = (($add) - 1)|0;
 $and = $sub & -4;
 $size$addr = $and;
 $1 = $size$addr;
 $add1 = (($1) + 24)|0;
 $size$addr = $add1;
 $2 = HEAP32[100201]|0;
 $rover2 = ((($2)) + 28|0);
 $3 = HEAP32[$rover2>>2]|0;
 $base = $3;
 $4 = $base;
 $prev = ((($4)) + 20|0);
 $5 = HEAP32[$prev>>2]|0;
 $tag3 = ((($5)) + 8|0);
 $6 = HEAP32[$tag3>>2]|0;
 $cmp = ($6|0)==(4);
 if ($cmp) {
  $7 = $base;
  $prev4 = ((($7)) + 20|0);
  $8 = HEAP32[$prev4>>2]|0;
  $base = $8;
 }
 $9 = $base;
 $rover = $9;
 $10 = $base;
 $prev5 = ((($10)) + 20|0);
 $11 = HEAP32[$prev5>>2]|0;
 $start = $11;
 while(1) {
  $12 = $rover;
  $13 = $start;
  $cmp6 = ($12|0)==($13|0);
  if ($cmp6) {
   $14 = $size$addr;
   HEAP32[$vararg_buffer>>2] = $14;
   _I_Error(158797,$vararg_buffer);
  }
  $15 = $rover;
  $tag9 = ((($15)) + 8|0);
  $16 = HEAP32[$tag9>>2]|0;
  $cmp10 = ($16|0)!=(4);
  $17 = $rover;
  do {
   if ($cmp10) {
    $tag12 = ((($17)) + 8|0);
    $18 = HEAP32[$tag12>>2]|0;
    $cmp13 = ($18|0)<(7);
    if ($cmp13) {
     $19 = $rover;
     $next = ((($19)) + 16|0);
     $20 = HEAP32[$next>>2]|0;
     $rover = $20;
     $base = $20;
     break;
    } else {
     $21 = $base;
     $prev15 = ((($21)) + 20|0);
     $22 = HEAP32[$prev15>>2]|0;
     $base = $22;
     $23 = $rover;
     $add$ptr = ((($23)) + 24|0);
     _Z_Free($add$ptr);
     $24 = $base;
     $next16 = ((($24)) + 16|0);
     $25 = HEAP32[$next16>>2]|0;
     $base = $25;
     $26 = $base;
     $next17 = ((($26)) + 16|0);
     $27 = HEAP32[$next17>>2]|0;
     $rover = $27;
     break;
    }
   } else {
    $next20 = ((($17)) + 16|0);
    $28 = HEAP32[$next20>>2]|0;
    $rover = $28;
   }
  } while(0);
  $29 = $base;
  $tag22 = ((($29)) + 8|0);
  $30 = HEAP32[$tag22>>2]|0;
  $cmp23 = ($30|0)!=(4);
  if ($cmp23) {
   continue;
  } else {
   $31 = $base;
   $32 = HEAP32[$31>>2]|0;
   $33 = $size$addr;
   $cmp25 = ($32|0)<($33|0);
   if ($cmp25) {
    continue;
   } else {
    break;
   }
  }
 }
 $34 = $base;
 $35 = HEAP32[$34>>2]|0;
 $36 = $size$addr;
 $sub27 = (($35) - ($36))|0;
 $extra = $sub27;
 $37 = $extra;
 $cmp28 = ($37|0)>(64);
 if ($cmp28) {
  $38 = $base;
  $39 = $size$addr;
  $add$ptr30 = (($38) + ($39)|0);
  $newblock = $add$ptr30;
  $40 = $extra;
  $41 = $newblock;
  HEAP32[$41>>2] = $40;
  $42 = $newblock;
  $tag32 = ((($42)) + 8|0);
  HEAP32[$tag32>>2] = 4;
  $43 = $newblock;
  $user33 = ((($43)) + 4|0);
  HEAP32[$user33>>2] = 0;
  $44 = $base;
  $45 = $newblock;
  $prev34 = ((($45)) + 20|0);
  HEAP32[$prev34>>2] = $44;
  $46 = $base;
  $next35 = ((($46)) + 16|0);
  $47 = HEAP32[$next35>>2]|0;
  $48 = $newblock;
  $next36 = ((($48)) + 16|0);
  HEAP32[$next36>>2] = $47;
  $49 = $newblock;
  $50 = $newblock;
  $next37 = ((($50)) + 16|0);
  $51 = HEAP32[$next37>>2]|0;
  $prev38 = ((($51)) + 20|0);
  HEAP32[$prev38>>2] = $49;
  $52 = $newblock;
  $53 = $base;
  $next39 = ((($53)) + 16|0);
  HEAP32[$next39>>2] = $52;
  $54 = $size$addr;
  $55 = $base;
  HEAP32[$55>>2] = $54;
 }
 $56 = $user$addr;
 $cmp42 = ($56|0)==(0|0);
 $57 = $tag$addr;
 $cmp43 = ($57|0)>=(7);
 $or$cond = $cmp42 & $cmp43;
 if ($or$cond) {
  _I_Error(158840,$vararg_buffer1);
 }
 $58 = $user$addr;
 $59 = $base;
 $user46 = ((($59)) + 4|0);
 HEAP32[$user46>>2] = $58;
 $60 = $tag$addr;
 $61 = $base;
 $tag47 = ((($61)) + 8|0);
 HEAP32[$tag47>>2] = $60;
 $62 = $base;
 $add$ptr48 = ((($62)) + 24|0);
 $result = $add$ptr48;
 $63 = $base;
 $user49 = ((($63)) + 4|0);
 $64 = HEAP32[$user49>>2]|0;
 $tobool = ($64|0)!=(0|0);
 if (!($tobool)) {
  $68 = $base;
  $next53 = ((($68)) + 16|0);
  $69 = HEAP32[$next53>>2]|0;
  $70 = HEAP32[100201]|0;
  $rover54 = ((($70)) + 28|0);
  HEAP32[$rover54>>2] = $69;
  $71 = $base;
  $id = ((($71)) + 12|0);
  HEAP32[$id>>2] = 1919505;
  $72 = $result;
  STACKTOP = sp;return ($72|0);
 }
 $65 = $result;
 $66 = $base;
 $user51 = ((($66)) + 4|0);
 $67 = HEAP32[$user51>>2]|0;
 HEAP32[$67>>2] = $65;
 $68 = $base;
 $next53 = ((($68)) + 16|0);
 $69 = HEAP32[$next53>>2]|0;
 $70 = HEAP32[100201]|0;
 $rover54 = ((($70)) + 28|0);
 HEAP32[$rover54>>2] = $69;
 $71 = $base;
 $id = ((($71)) + 12|0);
 HEAP32[$id>>2] = 1919505;
 $72 = $result;
 STACKTOP = sp;return ($72|0);
}
function _Z_FreeTags($lowtag,$hightag) {
 $lowtag = $lowtag|0;
 $hightag = $hightag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $block = 0, $blocklist = 0, $blocklist2 = 0;
 var $cmp = 0, $cmp4 = 0, $cmp6 = 0, $cmp8 = 0, $hightag$addr = 0, $lowtag$addr = 0, $next = 0, $next1 = 0, $next3 = 0, $tag = 0, $tag5 = 0, $tag7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lowtag$addr = $lowtag;
 $hightag$addr = $hightag;
 $0 = HEAP32[100201]|0;
 $blocklist = ((($0)) + 4|0);
 $next1 = ((($blocklist)) + 16|0);
 $1 = HEAP32[$next1>>2]|0;
 $block = $1;
 while(1) {
  $2 = $block;
  $3 = HEAP32[100201]|0;
  $blocklist2 = ((($3)) + 4|0);
  $cmp = ($2|0)!=($blocklist2|0);
  if (!($cmp)) {
   break;
  }
  $4 = $block;
  $next3 = ((($4)) + 16|0);
  $5 = HEAP32[$next3>>2]|0;
  $next = $5;
  $6 = $block;
  $tag = ((($6)) + 8|0);
  $7 = HEAP32[$tag>>2]|0;
  $cmp4 = ($7|0)==(4);
  if (!($cmp4)) {
   $8 = $block;
   $tag5 = ((($8)) + 8|0);
   $9 = HEAP32[$tag5>>2]|0;
   $10 = $lowtag$addr;
   $cmp6 = ($9|0)>=($10|0);
   if ($cmp6) {
    $11 = $block;
    $tag7 = ((($11)) + 8|0);
    $12 = HEAP32[$tag7>>2]|0;
    $13 = $hightag$addr;
    $cmp8 = ($12|0)<=($13|0);
    if ($cmp8) {
     $14 = $block;
     $add$ptr = ((($14)) + 24|0);
     _Z_Free($add$ptr);
    }
   }
  }
  $15 = $next;
  $block = $15;
 }
 STACKTOP = sp;return;
}
function _Z_CheckHeap() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $block = 0, $blocklist = 0, $blocklist2 = 0, $cmp = 0, $cmp11 = 0, $cmp14 = 0, $cmp4 = 0, $cmp8 = 0, $next = 0, $next1 = 0, $next12 = 0, $next17 = 0, $next3 = 0, $next7 = 0, $prev = 0, $tag = 0, $tag13 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[100201]|0;
 $blocklist = ((($0)) + 4|0);
 $next = ((($blocklist)) + 16|0);
 $1 = HEAP32[$next>>2]|0;
 $block = $1;
 while(1) {
  $2 = $block;
  $next1 = ((($2)) + 16|0);
  $3 = HEAP32[$next1>>2]|0;
  $4 = HEAP32[100201]|0;
  $blocklist2 = ((($4)) + 4|0);
  $cmp = ($3|0)==($blocklist2|0);
  if ($cmp) {
   break;
  }
  $5 = $block;
  $6 = $block;
  $7 = HEAP32[$6>>2]|0;
  $add$ptr = (($5) + ($7)|0);
  $8 = $block;
  $next3 = ((($8)) + 16|0);
  $9 = HEAP32[$next3>>2]|0;
  $cmp4 = ($add$ptr|0)!=($9|0);
  if ($cmp4) {
   _I_Error(158891,$vararg_buffer);
  }
  $10 = $block;
  $next7 = ((($10)) + 16|0);
  $11 = HEAP32[$next7>>2]|0;
  $prev = ((($11)) + 20|0);
  $12 = HEAP32[$prev>>2]|0;
  $13 = $block;
  $cmp8 = ($12|0)!=($13|0);
  if ($cmp8) {
   _I_Error(158946,$vararg_buffer1);
  }
  $14 = $block;
  $tag = ((($14)) + 8|0);
  $15 = HEAP32[$tag>>2]|0;
  $cmp11 = ($15|0)==(4);
  if ($cmp11) {
   $16 = $block;
   $next12 = ((($16)) + 16|0);
   $17 = HEAP32[$next12>>2]|0;
   $tag13 = ((($17)) + 8|0);
   $18 = HEAP32[$tag13>>2]|0;
   $cmp14 = ($18|0)==(4);
   if ($cmp14) {
    _I_Error(159001,$vararg_buffer3);
   }
  }
  $19 = $block;
  $next17 = ((($19)) + 16|0);
  $20 = HEAP32[$next17>>2]|0;
  $block = $20;
 }
 STACKTOP = sp;return;
}
function _Z_ChangeTag2($ptr,$tag,$file,$line) {
 $ptr = $ptr|0;
 $tag = $tag|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $block = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $file$addr = 0, $id = 0, $line$addr = 0;
 var $ptr$addr = 0, $tag$addr = 0, $tag5 = 0, $user = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $ptr$addr = $ptr;
 $tag$addr = $tag;
 $file$addr = $file;
 $line$addr = $line;
 $0 = $ptr$addr;
 $add$ptr = ((($0)) + -24|0);
 $block = $add$ptr;
 $1 = $block;
 $id = ((($1)) + 12|0);
 $2 = HEAP32[$id>>2]|0;
 $cmp = ($2|0)!=(1919505);
 if ($cmp) {
  $3 = $file$addr;
  $4 = $line$addr;
  HEAP32[$vararg_buffer>>2] = $3;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  _I_Error(159043,$vararg_buffer);
 }
 $5 = $tag$addr;
 $cmp1 = ($5|0)>=(7);
 if ($cmp1) {
  $6 = $block;
  $user = ((($6)) + 4|0);
  $7 = HEAP32[$user>>2]|0;
  $cmp2 = ($7|0)==(0|0);
  if ($cmp2) {
   $8 = $file$addr;
   $9 = $line$addr;
   HEAP32[$vararg_buffer2>>2] = $8;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $9;
   _I_Error(159087,$vararg_buffer2);
  }
 }
 $10 = $tag$addr;
 $11 = $block;
 $tag5 = ((($11)) + 8|0);
 HEAP32[$tag5>>2] = $10;
 STACKTOP = sp;return;
}
function _Z_ChangeUser($ptr,$user) {
 $ptr = $ptr|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr = 0, $block = 0, $cmp = 0, $id = 0, $ptr$addr = 0, $user$addr = 0, $user1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $ptr$addr = $ptr;
 $user$addr = $user;
 $0 = $ptr$addr;
 $add$ptr = ((($0)) + -24|0);
 $block = $add$ptr;
 $1 = $block;
 $id = ((($1)) + 12|0);
 $2 = HEAP32[$id>>2]|0;
 $cmp = ($2|0)!=(1919505);
 if ($cmp) {
  _I_Error(159148,$vararg_buffer);
 }
 $3 = $user$addr;
 $4 = $block;
 $user1 = ((($4)) + 4|0);
 HEAP32[$user1>>2] = $3;
 $5 = $ptr$addr;
 $6 = $user$addr;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _W_StdC_OpenFile($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call3 = 0, $cmp = 0, $fstream = 0, $fstream5 = 0, $length = 0, $mapped = 0, $path$addr = 0, $result = 0;
 var $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $path$addr = $path;
 $0 = $path$addr;
 $call = (_fopen($0,159202)|0);
 $fstream = $call;
 $1 = $fstream;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $retval = 0;
  $9 = $retval;
  STACKTOP = sp;return ($9|0);
 } else {
  $call1 = (_Z_Malloc(16,1,0)|0);
  $result = $call1;
  $2 = $result;
  HEAP32[$2>>2] = 129892;
  $3 = $result;
  $mapped = ((($3)) + 4|0);
  HEAP32[$mapped>>2] = 0;
  $4 = $fstream;
  $call3 = (_M_FileLength($4)|0);
  $5 = $result;
  $length = ((($5)) + 8|0);
  HEAP32[$length>>2] = $call3;
  $6 = $fstream;
  $7 = $result;
  $fstream5 = ((($7)) + 12|0);
  HEAP32[$fstream5>>2] = $6;
  $8 = $result;
  $retval = $8;
  $9 = $retval;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _W_StdC_CloseFile($wad) {
 $wad = $wad|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $fstream = 0, $stdc_wad = 0, $wad$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wad$addr = $wad;
 $0 = $wad$addr;
 $stdc_wad = $0;
 $1 = $stdc_wad;
 $fstream = ((($1)) + 12|0);
 $2 = HEAP32[$fstream>>2]|0;
 (_fclose($2)|0);
 $3 = $stdc_wad;
 _Z_Free($3);
 STACKTOP = sp;return;
}
function _W_StdC_Read($wad,$offset,$buffer,$buffer_len) {
 $wad = $wad|0;
 $offset = $offset|0;
 $buffer = $buffer|0;
 $buffer_len = $buffer_len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buffer$addr = 0, $buffer_len$addr = 0, $call2 = 0, $fstream = 0, $fstream1 = 0, $offset$addr = 0, $result = 0, $stdc_wad = 0, $wad$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $wad$addr = $wad;
 $offset$addr = $offset;
 $buffer$addr = $buffer;
 $buffer_len$addr = $buffer_len;
 $0 = $wad$addr;
 $stdc_wad = $0;
 $1 = $stdc_wad;
 $fstream = ((($1)) + 12|0);
 $2 = HEAP32[$fstream>>2]|0;
 $3 = $offset$addr;
 (_fseek($2,$3,0)|0);
 $4 = $buffer$addr;
 $5 = $buffer_len$addr;
 $6 = $stdc_wad;
 $fstream1 = ((($6)) + 12|0);
 $7 = HEAP32[$fstream1>>2]|0;
 $call2 = (_fread($4,1,$5,$7)|0);
 $result = $call2;
 $8 = $result;
 STACKTOP = sp;return ($8|0);
}
function _I_GetEvent() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp14 = 0, $conv = 0, $conv10 = 0, $conv4 = 0, $data1 = 0, $data111 = 0, $data113 = 0;
 var $data15 = 0, $data2 = 0, $data212 = 0, $event = 0, $key = 0, $pressed = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $event = sp + 4|0;
 $pressed = sp;
 $key = sp + 24|0;
 while(1) {
  $call = (_DG_GetKey($pressed,$key)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 9;
   break;
  }
  $0 = HEAP32[$pressed>>2]|0;
  $1 = HEAP8[$key>>0]|0;
  _UpdateShiftStatus($0,$1);
  $2 = HEAP32[$pressed>>2]|0;
  $tobool1 = ($2|0)!=(0);
  if (!($tobool1)) {
   break;
  }
  HEAP32[$event>>2] = 0;
  $3 = HEAP8[$key>>0]|0;
  $call2 = (_TranslateKey($3)|0);
  $conv = $call2&255;
  $data1 = ((($event)) + 4|0);
  HEAP32[$data1>>2] = $conv;
  $4 = HEAP8[$key>>0]|0;
  $call3 = (_GetTypedChar($4)|0);
  $conv4 = $call3&255;
  $data2 = ((($event)) + 8|0);
  HEAP32[$data2>>2] = $conv4;
  $data15 = ((($event)) + 4|0);
  $5 = HEAP32[$data15>>2]|0;
  $cmp = ($5|0)!=(0);
  if ($cmp) {
   _D_PostEvent($event);
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 HEAP32[$event>>2] = 1;
 $6 = HEAP8[$key>>0]|0;
 $call9 = (_TranslateKey($6)|0);
 $conv10 = $call9&255;
 $data111 = ((($event)) + 4|0);
 HEAP32[$data111>>2] = $conv10;
 $data212 = ((($event)) + 8|0);
 HEAP32[$data212>>2] = 0;
 $data113 = ((($event)) + 4|0);
 $7 = HEAP32[$data113>>2]|0;
 $cmp14 = ($7|0)!=(0);
 if (!($cmp14)) {
  STACKTOP = sp;return;
 }
 _D_PostEvent($event);
 STACKTOP = sp;return;
}
function _UpdateShiftStatus($pressed,$key) {
 $pressed = $pressed|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $change = 0, $cmp = 0, $conv = 0, $key$addr = 0, $pressed$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pressed$addr = $pressed;
 $key$addr = $key;
 $0 = $pressed$addr;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $change = 1;
 } else {
  $change = -1;
 }
 $1 = $key$addr;
 $conv = $1&255;
 $cmp = ($conv|0)==(182);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $change;
 $3 = HEAP32[100202]|0;
 $add = (($3) + ($2))|0;
 HEAP32[100202] = $add;
 STACKTOP = sp;return;
}
function _TranslateKey($key) {
 $key = $key|0;
 var $0 = 0, $key$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 STACKTOP = sp;return ($0|0);
}
function _GetTypedChar($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $conv = 0, $conv3 = 0, $idxprom = 0, $key$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $call = (_TranslateKey($0)|0);
 $key$addr = $call;
 $1 = HEAP32[100202]|0;
 $cmp = ($1|0)>(0);
 do {
  if ($cmp) {
   $2 = $key$addr;
   $conv = $2&255;
   $cmp1 = ($conv|0)>=(0);
   if ($cmp1) {
    $3 = $key$addr;
    $conv3 = $3&255;
    $cmp4 = ($conv3>>>0)<(128);
    if ($cmp4) {
     $4 = $key$addr;
     $idxprom = $4&255;
     $arrayidx = (127008 + ($idxprom)|0);
     $5 = HEAP8[$arrayidx>>0]|0;
     $key$addr = $5;
     break;
    }
   }
   $key$addr = 0;
  }
 } while(0);
 $6 = $key$addr;
 STACKTOP = sp;return ($6|0);
}
function _I_InitInput() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _cmap_to_fb($out,$in,$in_pixels) {
 $out = $out|0;
 $in = $in|0;
 $in_pixels = $in_pixels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr34 = 0, $and = 0, $and5 = 0, $arrayidx = 0, $bf$clear = 0, $bf$clear19 = 0, $bf$clear23 = 0, $bf$clear27 = 0, $bf$clear4 = 0, $bf$clear8 = 0, $bf$load = 0, $bf$load17 = 0, $bf$load2 = 0, $bf$load21 = 0, $bf$load26 = 0;
 var $bf$load7 = 0, $bf$lshr = 0, $bf$lshr18 = 0, $bf$lshr22 = 0, $bf$lshr3 = 0, $c = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp14 = 0, $cmp31 = 0, $conv = 0, $i = 0, $idxprom = 0, $in$addr = 0, $in_pixels$addr = 0, $inc = 0, $inc36 = 0, $inc41 = 0, $incdec$ptr = 0;
 var $k = 0, $or = 0, $or25 = 0, $or29 = 0, $or9 = 0, $out$addr = 0, $p = 0, $pix = 0, $shl = 0, $shl20 = 0, $shl24 = 0, $shl28 = 0, $shl6 = 0, $shr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $c = sp + 8|0;
 $out$addr = $out;
 $in$addr = $in;
 $in_pixels$addr = $in_pixels;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $in_pixels$addr;
  $cmp = ($0|0)<($1|0);
  if (!($cmp)) {
   break;
  }
  $2 = $in$addr;
  $3 = HEAP8[$2>>0]|0;
  $idxprom = $3&255;
  $arrayidx = (395200 + ($idxprom<<2)|0);
  ;HEAP32[$c>>2]=HEAP32[$arrayidx>>2]|0;
  $4 = HEAP32[(400840)>>2]|0;
  $cmp1 = ($4|0)==(16);
  L4: do {
   if ($cmp1) {
    $bf$load = HEAP32[$c>>2]|0;
    $bf$lshr = $bf$load >>> 16;
    $bf$clear = $bf$lshr & 255;
    $and = $bf$clear & 248;
    $shl = $and << 8;
    $bf$load2 = HEAP32[$c>>2]|0;
    $bf$lshr3 = $bf$load2 >>> 8;
    $bf$clear4 = $bf$lshr3 & 255;
    $and5 = $bf$clear4 & 252;
    $shl6 = $and5 << 3;
    $or = $shl | $shl6;
    $bf$load7 = HEAP32[$c>>2]|0;
    $bf$clear8 = $bf$load7 & 255;
    $shr = $bf$clear8 >> 3;
    $or9 = $or | $shr;
    $conv = $or9&65535;
    $p = $conv;
    $k = 0;
    while(1) {
     $5 = $k;
     $6 = HEAP32[32476]|0;
     $cmp11 = ($5|0)<($6|0);
     if (!($cmp11)) {
      break L4;
     }
     $7 = $p;
     $8 = $out$addr;
     HEAP16[$8>>1] = $7;
     $9 = $out$addr;
     $add$ptr = ((($9)) + 2|0);
     $out$addr = $add$ptr;
     $10 = $k;
     $inc = (($10) + 1)|0;
     $k = $inc;
    }
   } else {
    $11 = HEAP32[(400840)>>2]|0;
    $cmp14 = ($11|0)==(32);
    if (!($cmp14)) {
     $21 = HEAP32[(400840)>>2]|0;
     HEAP32[$vararg_buffer>>2] = $21;
     _I_Error(159205,$vararg_buffer);
     break;
    }
    $bf$load17 = HEAP32[$c>>2]|0;
    $bf$lshr18 = $bf$load17 >>> 16;
    $bf$clear19 = $bf$lshr18 & 255;
    $12 = HEAP32[(400844)>>2]|0;
    $shl20 = $bf$clear19 << $12;
    $bf$load21 = HEAP32[$c>>2]|0;
    $bf$lshr22 = $bf$load21 >>> 8;
    $bf$clear23 = $bf$lshr22 & 255;
    $13 = HEAP32[(400852)>>2]|0;
    $shl24 = $bf$clear23 << $13;
    $or25 = $shl20 | $shl24;
    $bf$load26 = HEAP32[$c>>2]|0;
    $bf$clear27 = $bf$load26 & 255;
    $14 = HEAP32[(400860)>>2]|0;
    $shl28 = $bf$clear27 << $14;
    $or29 = $or25 | $shl28;
    $pix = $or29;
    $k = 0;
    while(1) {
     $15 = $k;
     $16 = HEAP32[32476]|0;
     $cmp31 = ($15|0)<($16|0);
     if (!($cmp31)) {
      break L4;
     }
     $17 = $pix;
     $18 = $out$addr;
     HEAP32[$18>>2] = $17;
     $19 = $out$addr;
     $add$ptr34 = ((($19)) + 4|0);
     $out$addr = $add$ptr34;
     $20 = $k;
     $inc36 = (($20) + 1)|0;
     $k = $inc36;
    }
   }
  } while(0);
  $22 = $in$addr;
  $incdec$ptr = ((($22)) + 1|0);
  $in$addr = $incdec$ptr;
  $23 = $i;
  $inc41 = (($23) + 1)|0;
  $i = $inc41;
 }
 STACKTOP = sp;return;
}
function _I_InitGraphics() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add16 = 0, $arrayidx = 0, $arrayidx17 = 0, $call = 0, $call1 = 0, $call13 = 0;
 var $call18 = 0, $call28 = 0, $call4 = 0, $cmp = 0, $cmp14 = 0, $cmp22 = 0, $cmp5 = 0, $div = 0, $div21 = 0, $div24 = 0, $gfxmodeparm = 0, $i = 0, $mode = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer8 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 dest=400824; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[100206] = 320;
 HEAP32[(400828)>>2] = 200;
 $0 = HEAP32[100206]|0;
 HEAP32[(400832)>>2] = $0;
 $1 = HEAP32[(400828)>>2]|0;
 HEAP32[(400836)>>2] = $1;
 $call = (_M_CheckParmWithArgs(159242,1)|0);
 $gfxmodeparm = $call;
 $2 = $gfxmodeparm;
 $tobool = ($2|0)!=(0);
 if ($tobool) {
  $3 = HEAP32[99714]|0;
  $4 = $gfxmodeparm;
  $add = (($4) + 1)|0;
  $arrayidx = (($3) + ($add<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $mode = $5;
 } else {
  $mode = 159251;
 }
 $6 = $mode;
 $call1 = (_strcmp($6,159251)|0);
 $cmp = ($call1|0)==(0);
 do {
  if ($cmp) {
   HEAP32[(400840)>>2] = 32;
   HEAP32[(400864)>>2] = 8;
   HEAP32[(400856)>>2] = 8;
   HEAP32[(400848)>>2] = 8;
   HEAP32[(400872)>>2] = 8;
   HEAP32[(400860)>>2] = 0;
   HEAP32[(400852)>>2] = 8;
   HEAP32[(400844)>>2] = 16;
   HEAP32[(400868)>>2] = 24;
  } else {
   $7 = $mode;
   $call4 = (_strcmp($7,159260)|0);
   $cmp5 = ($call4|0)==(0);
   if ($cmp5) {
    HEAP32[(400840)>>2] = 16;
    HEAP32[(400864)>>2] = 5;
    HEAP32[(400856)>>2] = 6;
    HEAP32[(400848)>>2] = 5;
    HEAP32[(400872)>>2] = 0;
    HEAP32[(400860)>>2] = 11;
    HEAP32[(400852)>>2] = 5;
    HEAP32[(400844)>>2] = 0;
    HEAP32[(400868)>>2] = 16;
    break;
   } else {
    $8 = $mode;
    HEAP32[$vararg_buffer>>2] = $8;
    _I_Error(159267,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $9 = HEAP32[100206]|0;
 $10 = HEAP32[(400828)>>2]|0;
 $11 = HEAP32[(400832)>>2]|0;
 $12 = HEAP32[(400836)>>2]|0;
 $13 = HEAP32[(400840)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $9;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $10;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $11;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $12;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $13;
 (_printf(159294,$vararg_buffer1)|0);
 $14 = HEAP32[(400848)>>2]|0;
 $15 = HEAP32[(400856)>>2]|0;
 $16 = HEAP32[(400864)>>2]|0;
 $17 = HEAP32[(400872)>>2]|0;
 $18 = HEAP32[(400844)>>2]|0;
 $19 = HEAP32[(400852)>>2]|0;
 $20 = HEAP32[(400860)>>2]|0;
 $21 = HEAP32[(400868)>>2]|0;
 HEAP32[$vararg_buffer8>>2] = $14;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $15;
 $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
 HEAP32[$vararg_ptr12>>2] = $16;
 $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
 HEAP32[$vararg_ptr13>>2] = $17;
 $vararg_ptr14 = ((($vararg_buffer8)) + 16|0);
 HEAP32[$vararg_ptr14>>2] = $18;
 $vararg_ptr15 = ((($vararg_buffer8)) + 20|0);
 HEAP32[$vararg_ptr15>>2] = $19;
 $vararg_ptr16 = ((($vararg_buffer8)) + 24|0);
 HEAP32[$vararg_ptr16>>2] = $20;
 $vararg_ptr17 = ((($vararg_buffer8)) + 28|0);
 HEAP32[$vararg_ptr17>>2] = $21;
 (_printf(159384,$vararg_buffer8)|0);
 HEAP32[$vararg_buffer18>>2] = 320;
 $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
 HEAP32[$vararg_ptr21>>2] = 200;
 (_printf(159487,$vararg_buffer18)|0);
 $call13 = (_M_CheckParmWithArgs(159537,1)|0);
 $i = $call13;
 $22 = $i;
 $cmp14 = ($22|0)>(0);
 if ($cmp14) {
  $23 = HEAP32[99714]|0;
  $24 = $i;
  $add16 = (($24) + 1)|0;
  $arrayidx17 = (($23) + ($add16<<2)|0);
  $25 = HEAP32[$arrayidx17>>2]|0;
  $call18 = (_atoi($25)|0);
  $i = $call18;
  $26 = $i;
  HEAP32[32476] = $26;
  $27 = HEAP32[32476]|0;
  HEAP32[$vararg_buffer22>>2] = $27;
  (_printf(159546,$vararg_buffer22)|0);
  $call28 = (_Z_Malloc(64000,1,0)|0);
  HEAP32[100203] = $call28;
  HEAP32[100205] = 1;
  _I_InitInput();
  STACKTOP = sp;return;
 }
 $28 = HEAP32[100206]|0;
 $div = (($28>>>0) / 320)&-1;
 HEAP32[32476] = $div;
 $29 = HEAP32[(400828)>>2]|0;
 $div21 = (($29>>>0) / 200)&-1;
 $30 = HEAP32[32476]|0;
 $cmp22 = ($div21>>>0)<($30>>>0);
 if ($cmp22) {
  $31 = HEAP32[(400828)>>2]|0;
  $div24 = (($31>>>0) / 200)&-1;
  HEAP32[32476] = $div24;
 }
 $32 = HEAP32[32476]|0;
 HEAP32[$vararg_buffer25>>2] = $32;
 (_printf(159582,$vararg_buffer25)|0);
 $call28 = (_Z_Malloc(64000,1,0)|0);
 HEAP32[100203] = $call28;
 HEAP32[100205] = 1;
 _I_InitInput();
 STACKTOP = sp;return;
}
function _I_StartFrame() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_StartTic() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _I_GetEvent();
 return;
}
function _I_UpdateNoBlit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_FinishUpdate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr17 = 0, $cmp = 0, $dec = 0, $div = 0, $div11 = 0, $div14 = 0, $div2 = 0, $div6 = 0, $div7 = 0, $i = 0, $inc = 0, $line_in = 0;
 var $line_out = 0, $mul = 0, $mul1 = 0, $mul10 = 0, $mul13 = 0, $mul15 = 0, $mul3 = 0, $mul5 = 0, $mul8 = 0, $sub = 0, $sub12 = 0, $sub4 = 0, $sub9 = 0, $tobool = 0, $x_offset = 0, $x_offset_end = 0, $y = 0, $y_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = HEAP32[(400828)>>2]|0;
 $1 = HEAP32[32476]|0;
 $mul = ($1*200)|0;
 $sub = (($0) - ($mul))|0;
 $2 = HEAP32[(400840)>>2]|0;
 $mul1 = Math_imul($sub, $2)|0;
 $div = (($mul1>>>0) / 8)&-1;
 $div2 = (($div>>>0) / 2)&-1;
 $y_offset = $div2;
 $3 = HEAP32[100206]|0;
 $4 = HEAP32[32476]|0;
 $mul3 = ($4*320)|0;
 $sub4 = (($3) - ($mul3))|0;
 $5 = HEAP32[(400840)>>2]|0;
 $mul5 = Math_imul($sub4, $5)|0;
 $div6 = (($mul5>>>0) / 8)&-1;
 $div7 = (($div6>>>0) / 2)&-1;
 $x_offset = $div7;
 $6 = HEAP32[100206]|0;
 $7 = HEAP32[32476]|0;
 $mul8 = ($7*320)|0;
 $sub9 = (($6) - ($mul8))|0;
 $8 = HEAP32[(400840)>>2]|0;
 $mul10 = Math_imul($sub9, $8)|0;
 $div11 = (($mul10>>>0) / 8)&-1;
 $9 = $x_offset;
 $sub12 = (($div11) - ($9))|0;
 $x_offset_end = $sub12;
 $10 = HEAP32[100203]|0;
 $line_in = $10;
 $11 = HEAP32[100219]|0;
 $line_out = $11;
 $y = 200;
 while(1) {
  $12 = $y;
  $dec = (($12) + -1)|0;
  $y = $dec;
  $tobool = ($12|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = HEAP32[32476]|0;
   $cmp = ($13|0)<($14|0);
   if (!($cmp)) {
    break;
   }
   $15 = $x_offset;
   $16 = $line_out;
   $add$ptr = (($16) + ($15)|0);
   $line_out = $add$ptr;
   $17 = $line_out;
   $18 = $line_in;
   _cmap_to_fb($17,$18,320);
   $19 = HEAP32[32476]|0;
   $mul13 = ($19*320)|0;
   $20 = HEAP32[(400840)>>2]|0;
   $div14 = (($20>>>0) / 8)&-1;
   $mul15 = Math_imul($mul13, $div14)|0;
   $21 = $x_offset_end;
   $add = (($mul15) + ($21))|0;
   $22 = $line_out;
   $add$ptr16 = (($22) + ($add)|0);
   $line_out = $add$ptr16;
   $23 = $i;
   $inc = (($23) + 1)|0;
   $i = $inc;
  }
  $24 = $line_in;
  $add$ptr17 = ((($24)) + 320|0);
  $line_in = $add$ptr17;
 }
 _DG_DrawFrame();
 STACKTOP = sp;return;
}
function _I_ReadScreen($scr) {
 $scr = $scr|0;
 var $0 = 0, $1 = 0, $scr$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $scr$addr = $scr;
 $0 = $scr$addr;
 $1 = HEAP32[100203]|0;
 _memcpy(($0|0),($1|0),64000)|0;
 STACKTOP = sp;return;
}
function _I_SetPalette($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0;
 var $arrayidx11 = 0, $arrayidx17 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx3 = 0, $arrayidx6 = 0, $arrayidx9 = 0, $bf$clear = 0, $bf$clear15 = 0, $bf$clear25 = 0, $bf$clear5 = 0, $bf$load = 0, $bf$load12 = 0, $bf$load23 = 0, $bf$load4 = 0, $bf$set = 0, $bf$set16 = 0, $bf$set26 = 0, $bf$shl = 0;
 var $bf$shl14 = 0, $bf$value = 0, $bf$value13 = 0, $bf$value24 = 0, $cmp = 0, $conv = 0, $conv10 = 0, $conv21 = 0, $i = 0, $idxprom = 0, $idxprom19 = 0, $idxprom8 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr18 = 0, $incdec$ptr7 = 0, $palette$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $palette$addr = $palette;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(256);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (395200 + ($1<<2)|0);
  $bf$load = HEAP32[$arrayidx>>2]|0;
  $bf$clear = $bf$load & 16777215;
  HEAP32[$arrayidx>>2] = $bf$clear;
  $2 = HEAP32[100204]|0;
  $arrayidx1 = (123968 + ($2<<8)|0);
  $3 = $palette$addr;
  $incdec$ptr = ((($3)) + 1|0);
  $palette$addr = $incdec$ptr;
  $4 = HEAP8[$3>>0]|0;
  $idxprom = $4&255;
  $arrayidx2 = (($arrayidx1) + ($idxprom)|0);
  $5 = HEAP8[$arrayidx2>>0]|0;
  $conv = $5&255;
  $6 = $i;
  $arrayidx3 = (395200 + ($6<<2)|0);
  $bf$load4 = HEAP32[$arrayidx3>>2]|0;
  $bf$value = $conv & 255;
  $bf$shl = $bf$value << 16;
  $bf$clear5 = $bf$load4 & -16711681;
  $bf$set = $bf$clear5 | $bf$shl;
  HEAP32[$arrayidx3>>2] = $bf$set;
  $7 = HEAP32[100204]|0;
  $arrayidx6 = (123968 + ($7<<8)|0);
  $8 = $palette$addr;
  $incdec$ptr7 = ((($8)) + 1|0);
  $palette$addr = $incdec$ptr7;
  $9 = HEAP8[$8>>0]|0;
  $idxprom8 = $9&255;
  $arrayidx9 = (($arrayidx6) + ($idxprom8)|0);
  $10 = HEAP8[$arrayidx9>>0]|0;
  $conv10 = $10&255;
  $11 = $i;
  $arrayidx11 = (395200 + ($11<<2)|0);
  $bf$load12 = HEAP32[$arrayidx11>>2]|0;
  $bf$value13 = $conv10 & 255;
  $bf$shl14 = $bf$value13 << 8;
  $bf$clear15 = $bf$load12 & -65281;
  $bf$set16 = $bf$clear15 | $bf$shl14;
  HEAP32[$arrayidx11>>2] = $bf$set16;
  $12 = HEAP32[100204]|0;
  $arrayidx17 = (123968 + ($12<<8)|0);
  $13 = $palette$addr;
  $incdec$ptr18 = ((($13)) + 1|0);
  $palette$addr = $incdec$ptr18;
  $14 = HEAP8[$13>>0]|0;
  $idxprom19 = $14&255;
  $arrayidx20 = (($arrayidx17) + ($idxprom19)|0);
  $15 = HEAP8[$arrayidx20>>0]|0;
  $conv21 = $15&255;
  $16 = $i;
  $arrayidx22 = (395200 + ($16<<2)|0);
  $bf$load23 = HEAP32[$arrayidx22>>2]|0;
  $bf$value24 = $conv21 & 255;
  $bf$clear25 = $bf$load23 & -256;
  $bf$set26 = $bf$clear25 | $bf$value24;
  HEAP32[$arrayidx22>>2] = $bf$set26;
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _I_GetPaletteIndex($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add33 = 0, $and = 0, $and11 = 0, $and5 = 0, $b$addr = 0, $b13 = 0, $b26 = 0, $b29 = 0, $best = 0, $best_diff = 0, $cmp = 0, $cmp34 = 0, $cmp36 = 0, $color = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv12 = 0, $conv15 = 0;
 var $conv17 = 0, $conv20 = 0, $conv23 = 0, $conv27 = 0, $conv30 = 0, $conv4 = 0, $conv7 = 0, $diff = 0, $g$addr = 0, $g19 = 0, $g22 = 0, $g8 = 0, $i = 0, $inc = 0, $mul = 0, $mul25 = 0, $mul32 = 0, $r$addr = 0, $shr = 0, $shr6 = 0;
 var $sub = 0, $sub18 = 0, $sub21 = 0, $sub24 = 0, $sub28 = 0, $sub31 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $color = sp + 32|0;
 $r$addr = $r;
 $g$addr = $g;
 $b$addr = $b;
 (_printf(159623,$vararg_buffer)|0);
 $best = 0;
 $best_diff = 2147483647;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(256);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $conv = 0;
  $and = 63488 & $conv;
  $shr = $and >> 11;
  $conv1 = $shr&255;
  HEAP8[$color>>0] = $conv1;
  $conv4 = 0;
  $and5 = 2016 & $conv4;
  $shr6 = $and5 >> 5;
  $conv7 = $shr6&255;
  $g8 = ((($color)) + 1|0);
  HEAP8[$g8>>0] = $conv7;
  $conv10 = 0;
  $and11 = 31 & $conv10;
  $conv12 = $and11&255;
  $b13 = ((($color)) + 2|0);
  HEAP8[$b13>>0] = $conv12;
  $1 = $r$addr;
  $2 = HEAP8[$color>>0]|0;
  $conv15 = $2&255;
  $sub = (($1) - ($conv15))|0;
  $3 = $r$addr;
  $4 = HEAP8[$color>>0]|0;
  $conv17 = $4&255;
  $sub18 = (($3) - ($conv17))|0;
  $mul = Math_imul($sub, $sub18)|0;
  $5 = $g$addr;
  $g19 = ((($color)) + 1|0);
  $6 = HEAP8[$g19>>0]|0;
  $conv20 = $6&255;
  $sub21 = (($5) - ($conv20))|0;
  $7 = $g$addr;
  $g22 = ((($color)) + 1|0);
  $8 = HEAP8[$g22>>0]|0;
  $conv23 = $8&255;
  $sub24 = (($7) - ($conv23))|0;
  $mul25 = Math_imul($sub21, $sub24)|0;
  $add = (($mul) + ($mul25))|0;
  $9 = $b$addr;
  $b26 = ((($color)) + 2|0);
  $10 = HEAP8[$b26>>0]|0;
  $conv27 = $10&255;
  $sub28 = (($9) - ($conv27))|0;
  $11 = $b$addr;
  $b29 = ((($color)) + 2|0);
  $12 = HEAP8[$b29>>0]|0;
  $conv30 = $12&255;
  $sub31 = (($11) - ($conv30))|0;
  $mul32 = Math_imul($sub28, $sub31)|0;
  $add33 = (($add) + ($mul32))|0;
  $diff = $add33;
  $13 = $diff;
  $14 = $best_diff;
  $cmp34 = ($13|0)<($14|0);
  if ($cmp34) {
   $15 = $i;
   $best = $15;
   $16 = $diff;
   $best_diff = $16;
  }
  $17 = $diff;
  $cmp36 = ($17|0)==(0);
  if ($cmp36) {
   label = 7;
   break;
  }
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 7) {
  $19 = $best;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _I_BeginRead() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_EndRead() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SetWindowTitle($title) {
 $title = $title|0;
 var $0 = 0, $title$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $title$addr = $title;
 $0 = $title$addr;
 _DG_SetWindowTitle($0);
 STACKTOP = sp;return;
}
function _I_GraphicsCheckCommandLine() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_SetGrabMouseCallback($func) {
 $func = $func|0;
 var $func$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $func$addr = $func;
 STACKTOP = sp;return;
}
function _I_EnableLoadingDisk() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_BindVideoVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _I_DisplayFPSDots($dots_on) {
 $dots_on = $dots_on|0;
 var $dots_on$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dots_on$addr = $dots_on;
 STACKTOP = sp;return;
}
function _I_CheckIsScreensaver() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _doomgeneric_Create($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $argc$addr = 0, $argv$addr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $argc$addr = $argc;
 $argv$addr = $argv;
 $0 = $argc$addr;
 HEAP32[99713] = $0;
 $1 = $argv$addr;
 HEAP32[99714] = $1;
 _M_FindResponseFile();
 $call = (_malloc(256000)|0);
 HEAP32[100219] = $call;
 _DG_Init();
 _D_DoomMain();
 STACKTOP = sp;return;
}
function _getTime() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _emscripten_asm_const_i(1)|0;
 return ($call|0);
}
function _DG_Init() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_getTime()|0);
 HEAP32[100220] = $call;
 return;
}
function _DG_DrawFrame() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[100219]|0;
 $call = _emscripten_asm_const_iiii(2,($0|0),320,200)|0;
 return;
}
function _DG_SleepMs($ms) {
 $ms = $ms|0;
 var $ms$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ms$addr = $ms;
 STACKTOP = sp;return;
}
function _DG_GetTicksMs() {
 var $0 = 0, $1 = 0, $call = 0, $newTime = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_getTime()|0);
 $newTime = $call;
 $0 = $newTime;
 $1 = HEAP32[100220]|0;
 $sub = (($0) - ($1))|0;
 STACKTOP = sp;return ($sub|0);
}
function _DG_GetKey($pressed,$key) {
 $pressed = $pressed|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $call = 0, $cmp = 0, $conv = 0, $key$addr = 0, $key_data = 0, $pressed$addr = 0, $retval = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pressed$addr = $pressed;
 $key$addr = $key;
 $call = _emscripten_asm_const_i(3)|0;
 $key_data = $call;
 $0 = $key_data;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $retval = 0;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 } else {
  $1 = $key_data;
  $shr = $1 >> 8;
  $2 = $pressed$addr;
  HEAP32[$2>>2] = $shr;
  $3 = $key_data;
  $and = $3 & 255;
  $conv = $and&255;
  $4 = $key$addr;
  HEAP8[$4>>0] = $conv;
  $retval = 1;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _toDoomKey($keycode) {
 $keycode = $keycode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp13 = 0, $cmp16 = 0, $cmp19 = 0, $cmp22 = 0;
 var $cmp25 = 0, $cmp4 = 0, $cmp7 = 0, $keycode$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $keycode$addr = $keycode;
 $0 = $keycode$addr;
 $cmp = ($0|0)==(38);
 do {
  if ($cmp) {
   $retval = 173;
  } else {
   $1 = $keycode$addr;
   $cmp1 = ($1|0)==(40);
   if ($cmp1) {
    $retval = 175;
    break;
   }
   $2 = $keycode$addr;
   $cmp4 = ($2|0)==(37);
   if ($cmp4) {
    $retval = 172;
    break;
   }
   $3 = $keycode$addr;
   $cmp7 = ($3|0)==(39);
   if ($cmp7) {
    $retval = 174;
    break;
   }
   $4 = $keycode$addr;
   $cmp10 = ($4|0)==(27);
   if ($cmp10) {
    $retval = 27;
    break;
   }
   $5 = $keycode$addr;
   $cmp13 = ($5|0)==(13);
   if ($cmp13) {
    $retval = 13;
    break;
   }
   $6 = $keycode$addr;
   $cmp16 = ($6|0)==(32);
   if ($cmp16) {
    $retval = 162;
    break;
   }
   $7 = $keycode$addr;
   $cmp19 = ($7|0)==(17);
   if ($cmp19) {
    $retval = 163;
    break;
   }
   $8 = $keycode$addr;
   $cmp22 = ($8|0)==(9);
   if ($cmp22) {
    $retval = 9;
    break;
   }
   $9 = $keycode$addr;
   $cmp25 = ($9|0)==(16);
   if ($cmp25) {
    $retval = 182;
    break;
   } else {
    $10 = $keycode$addr;
    $call = (_tolower($10)|0);
    $retval = $call;
    break;
   }
  }
 } while(0);
 $11 = $retval;
 STACKTOP = sp;return ($11|0);
}
function _DG_SetWindowTitle($title) {
 $title = $title|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $title$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $title$addr = $title;
 $0 = $title$addr;
 $1 = $title$addr;
 $call = (_strlen($1)|0);
 $call1 = _emscripten_asm_const_iii(4,($0|0),($call|0))|0;
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $argc$addr = 0, $argv$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = 0;
 $argc$addr = $argc;
 $argv$addr = $argv;
 STACKTOP = sp;return 0;
}
function ___emscripten_stdout_close($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr34 = 0, $buf9 = 0, $buf_size = 0, $call = 0, $call7 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp19 = 0, $cmp26 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$0 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len21 = 0, $iov_len25 = 0, $iov_len3 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovcnt$1 = 0, $iovs = 0, $num = 0;
 var $or = 0, $rem$0 = 0, $retval$1$ph = 0, $sub = 0, $sub$ptr$sub = 0, $sub23 = 0, $sub30 = 0, $sub39 = 0, $tobool = 0, $wbase = 0, $wend = 0, $wend16 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iovs = sp;
 $num = sp + 16|0;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $add;
 while(1) {
  $2 = HEAP32[$fd>>2]|0;
  $call = (___wasi_fd_write(($2|0),($iov$0|0),($iovcnt$0|0),($num|0))|0);
  $call7 = (___wasi_syscall_ret($call)|0);
  $tobool = ($call7|0)==(0);
  if ($tobool) {
   $$pr = HEAP32[$num>>2]|0;
   $3 = $$pr;
  } else {
   HEAP32[$num>>2] = -1;
   $3 = -1;
  }
  $cmp = ($rem$0|0)==($3|0);
  if ($cmp) {
   label = 6;
   break;
  }
  $cmp14 = ($3|0)<(0);
  if ($cmp14) {
   label = 8;
   break;
  }
  $sub23 = (($rem$0) - ($3))|0;
  $iov_len25 = ((($iov$0)) + 4|0);
  $9 = HEAP32[$iov_len25>>2]|0;
  $cmp26 = ($3>>>0)>($9>>>0);
  $incdec$ptr = ((($iov$0)) + 8|0);
  $iov$1 = $cmp26 ? $incdec$ptr : $iov$0;
  $dec = $cmp26 << 31 >> 31;
  $iovcnt$1 = (($iovcnt$0) + ($dec))|0;
  $sub30 = $cmp26 ? $9 : 0;
  $cnt$0 = (($3) - ($sub30))|0;
  $10 = HEAP32[$iov$1>>2]|0;
  $add$ptr34 = (($10) + ($cnt$0)|0);
  HEAP32[$iov$1>>2] = $add$ptr34;
  $iov_len38 = ((($iov$1)) + 4|0);
  $11 = HEAP32[$iov_len38>>2]|0;
  $sub39 = (($11) - ($cnt$0))|0;
  HEAP32[$iov_len38>>2] = $sub39;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $sub23;
 }
 if ((label|0) == 6) {
  $buf9 = ((($f)) + 44|0);
  $4 = HEAP32[$buf9>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$1$ph = $len;
 }
 else if ((label|0) == 8) {
  $wend16 = ((($f)) + 16|0);
  HEAP32[$wend16>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $7 = HEAP32[$f>>2]|0;
  $or = $7 | 32;
  HEAP32[$f>>2] = $or;
  $cmp19 = ($iovcnt$0|0)==(2);
  if ($cmp19) {
   $retval$1$ph = 0;
  } else {
   $iov_len21 = ((($iov$0)) + 4|0);
   $8 = HEAP32[$iov_len21>>2]|0;
   $sub = (($len) - ($8))|0;
   $retval$1$ph = $sub;
  }
 }
 STACKTOP = sp;return ($retval$1$ph|0);
}
function ___emscripten_stdout_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function ___wasi_syscall_ret($code) {
 $code = $code|0;
 var $call = 0, $cmp = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($code<<16>>16)==(0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $conv = $code&65535;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $conv;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (400948|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $conv = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy($0)|0);
 $call1 = (___wasi_fd_close(($call|0))|0);
 $conv = $call1&65535;
 return ($conv|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $conv = 0, $fd = 0, $ret = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $conv = $whence&255;
 $3 = (___wasi_fd_seek(($2|0),($0|0),($1|0),($conv|0),($ret|0))|0);
 $call1 = (___wasi_syscall_ret($3)|0);
 $tobool = ($call1|0)==(0);
 if ($tobool) {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 } else {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function _dummy($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$cast = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx24 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0;
 var $cmp11 = 0, $fd = 0, $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $num = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub16 = 0, $sub23 = 0, $tobool = 0, $tobool20 = 0, $tobool7 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iov = sp;
 $num = sp + 16|0;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $call = (___wasi_fd_read(($2|0),($iov|0),2,($num|0))|0);
 $call6 = (___wasi_syscall_ret($call)|0);
 $tobool7 = ($call6|0)==(0);
 if ($tobool7) {
  $$pr = HEAP32[$num>>2]|0;
  $cmp = ($$pr|0)<(1);
  if ($cmp) {
   $3 = $$pr;
   label = 4;
  } else {
   $5 = HEAP32[$iov_len>>2]|0;
   $cmp11 = ($$pr>>>0)>($5>>>0);
   if ($cmp11) {
    $sub16 = (($$pr) - ($5))|0;
    $6 = HEAP32[$buf3>>2]|0;
    $rpos = ((($f)) + 4|0);
    HEAP32[$rpos>>2] = $6;
    $$cast = $6;
    $add$ptr = (($$cast) + ($sub16)|0);
    $rend = ((($f)) + 8|0);
    HEAP32[$rend>>2] = $add$ptr;
    $7 = HEAP32[$buf_size>>2]|0;
    $tobool20 = ($7|0)==(0);
    if ($tobool20) {
     $retval$0 = $len;
    } else {
     $incdec$ptr = ((($$cast)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $8 = HEAP8[$$cast>>0]|0;
     $sub23 = (($len) + -1)|0;
     $arrayidx24 = (($buf) + ($sub23)|0);
     HEAP8[$arrayidx24>>0] = $8;
     $retval$0 = $len;
    }
   } else {
    $retval$0 = $$pr;
   }
  }
 } else {
  HEAP32[$num>>2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label|0) == 4) {
  $and = $3 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $xor | $4;
  HEAP32[$f>>2] = $or;
  $retval$0 = $3;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 return ($cond|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and15 = 0, $and16 = 0, $and40 = 0, $cmp = 0, $cmp11 = 0, $cmp1133 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa53 = 0, $n$addr$044 = 0, $n$addr$1$lcssa = 0, $n$addr$134 = 0, $n$addr$2 = 0, $n$addr$327 = 0, $neg = 0, $or$cond = 0, $or$cond43 = 0, $s$0$lcssa = 0, $s$0$lcssa54 = 0, $s$045 = 0, $s$1 = 0;
 var $s$228 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool242 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool41 = 0, $w$0$lcssa = 0, $w$035 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and40 = $0 & 3;
 $tobool41 = ($and40|0)!=(0);
 $tobool242 = ($n|0)!=(0);
 $or$cond43 = $tobool242 & $tobool41;
 L1: do {
  if ($or$cond43) {
   $1 = $c&255;
   $n$addr$044 = $n;$s$045 = $src;
   while(1) {
    $2 = HEAP8[$s$045>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa53 = $n$addr$044;$s$0$lcssa54 = $s$045;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$045)) + 1|0);
    $dec = (($n$addr$044) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$044 = $dec;$s$045 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool242;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa53 = $n$addr$0$lcssa;$s$0$lcssa54 = $s$0$lcssa;
   label = 6;
  } else {
   $9 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa54>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $n$addr$2 = $n$addr$0$lcssa53;$s$1 = $s$0$lcssa54;
   } else {
    $mul = Math_imul($conv1, 16843009)|0;
    $cmp1133 = ($n$addr$0$lcssa53>>>0)>(3);
    L12: do {
     if ($cmp1133) {
      $n$addr$134 = $n$addr$0$lcssa53;$w$035 = $s$0$lcssa54;
      while(1) {
       $6 = HEAP32[$w$035>>2]|0;
       $xor = $6 ^ $mul;
       $sub = (($xor) + -16843009)|0;
       $neg = $xor & -2139062144;
       $and15 = $neg ^ -2139062144;
       $and16 = $and15 & $sub;
       $tobool17 = ($and16|0)==(0);
       if (!($tobool17)) {
        $n$addr$1$lcssa = $n$addr$134;$w$0$lcssa = $w$035;
        break L12;
       }
       $incdec$ptr21 = ((($w$035)) + 4|0);
       $sub22 = (($n$addr$134) + -4)|0;
       $cmp11 = ($sub22>>>0)>(3);
       if ($cmp11) {
        $n$addr$134 = $sub22;$w$035 = $incdec$ptr21;
       } else {
        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
        break;
       }
      }
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa53;$w$0$lcssa = $s$0$lcssa54;
     }
    } while(0);
    $n$addr$2 = $n$addr$1$lcssa;$s$1 = $w$0$lcssa;
   }
   $tobool2526 = ($n$addr$2|0)==(0);
   if ($tobool2526) {
    $9 = 0;
   } else {
    $7 = $c&255;
    $n$addr$327 = $n$addr$2;$s$228 = $s$1;
    while(1) {
     $8 = HEAP8[$s$228>>0]|0;
     $cmp28 = ($8<<24>>24)==($7<<24>>24);
     if ($cmp28) {
      $9 = $s$228;
      break L8;
     }
     $incdec$ptr33 = ((($s$228)) + 1|0);
     $dec34 = (($n$addr$327) + -1)|0;
     $tobool25 = ($dec34|0)==(0);
     if ($tobool25) {
      $9 = 0;
      break;
     } else {
      $n$addr$327 = $dec34;$s$228 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 return ($9|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$1 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1031 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$1 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$1 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $tobool16 = ($and15|0)==(0);
      if (!($tobool16)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$1 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$1|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (129920|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $narrow = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $narrow = $cmp | $cmp1;
 $0 = $narrow&1;
 return ($0|0);
}
function _islower($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _tolower($c) {
 $c = $c|0;
 var $call = 0, $or = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isupper($c)|0);
 $tobool = ($call|0)==(0);
 $or = $c | 32;
 $retval$0 = $tobool ? $c : $or;
 return ($retval$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -65)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _toupper($c) {
 $c = $c|0;
 var $and = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_islower($c)|0);
 $tobool = ($call|0)==(0);
 $and = $c & 95;
 $retval$0 = $tobool ? $c : $and;
 return ($retval$0|0);
}
function _mkdir($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $path;
 $call = (___syscall39(($0|0),($mode|0))|0);
 $call1 = (___syscall_ret($call)|0);
 return ($call1|0);
}
function ___shlim($f,$0,$1) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend5 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $2 = $shlim;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $rend = ((($f)) + 8|0);
 $6 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $7 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $shcnt = ((($f)) + 120|0);
 $10 = $shcnt;
 $11 = $10;
 HEAP32[$11>>2] = $sub$ptr$sub;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = ($0|0)!=(0);
 $15 = ($1|0)!=(0);
 $16 = $14 | $15;
 $17 = ($9|0)>($1|0);
 $18 = ($sub$ptr$sub>>>0)>($0>>>0);
 $19 = ($9|0)==($1|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $or$cond = $16 & $21;
 if ($or$cond) {
  $22 = $7;
  $add$ptr = (($22) + ($0)|0);
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = $add$ptr;
 } else {
  $shend5 = ((($f)) + 104|0);
  HEAP32[$shend5>>2] = $6;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0;
 var $arrayidx178 = 0, $arrayidx178158 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237176 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0;
 var $call = 0, $call105 = 0, $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0;
 var $cmp112 = 0, $cmp112192 = 0, $cmp114 = 0, $cmp119 = 0, $cmp132 = 0, $cmp132184 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180160 = 0, $cmp183 = 0, $cmp193 = 0, $cmp208 = 0, $cmp208153 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239178 = 0, $cmp242 = 0, $cmp25 = 0;
 var $cmp253 = 0, $cmp268 = 0, $cmp268167 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0;
 var $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0, $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179159 = 0, $conv179162 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207152$pre$phiZ2D = 0, $conv229 = 0, $conv238 = 0, $conv238177 = 0, $conv238180 = 0, $conv258 = 0;
 var $conv267 = 0, $conv267166$pre$phiZ2D = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0, $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr340 = 0;
 var $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul = 0, $mul173 = 0, $mul246 = 0, $neg$0 = 0, $neg$1 = 0, $or = 0, $or$cond = 0, $or$cond155 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond5 = 0, $or189 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0;
 var $spec$select132 = 0, $spec$select133 = 0, $sub = 0, $sub111 = 0, $sub111191 = 0, $sub111194 = 0, $sub131 = 0, $sub131187 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool337 = 0, $tobool349 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 L1: do {
  if ($cmp) {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 28;
   $148 = 0;$149 = 0;
  } else {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $2 = HEAP32[$rpos>>2]|0;
    $3 = HEAP32[$shend>>2]|0;
    $cmp1 = ($2>>>0)<($3>>>0);
    if ($cmp1) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $4 = HEAP8[$2>>0]|0;
     $conv = $4&255;
     $cond = $conv;
    } else {
     $call3 = (___shgetc($f)|0);
     $cond = $call3;
    }
    $call4 = (_isspace($cond)|0);
    $tobool = ($call4|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L11: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp7 = ($cond|0)==(45);
     $sub = $cmp7 << 31 >> 31;
     $5 = HEAP32[$rpos>>2]|0;
     $6 = HEAP32[$shend>>2]|0;
     $cmp14 = ($5>>>0)<($6>>>0);
     if ($cmp14) {
      $incdec$ptr18 = ((($5)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr18;
      $7 = HEAP8[$5>>0]|0;
      $conv19 = $7&255;
      $c$0 = $conv19;$neg$0 = $sub;
      break L11;
     } else {
      $call21 = (___shgetc($f)|0);
      $c$0 = $call21;$neg$0 = $sub;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $cond;$neg$0 = 0;
    }
    }
   } while(0);
   $cmp25 = ($base|0)==(0);
   $8 = $base | 16;
   $9 = ($8|0)==(16);
   $cmp30 = ($c$0|0)==(48);
   $or$cond2 = $9 & $cmp30;
   do {
    if ($or$cond2) {
     $10 = HEAP32[$rpos>>2]|0;
     $11 = HEAP32[$shend>>2]|0;
     $cmp35 = ($10>>>0)<($11>>>0);
     if ($cmp35) {
      $incdec$ptr39 = ((($10)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr39;
      $12 = HEAP8[$10>>0]|0;
      $conv40 = $12&255;
      $cond44 = $conv40;
     } else {
      $call42 = (___shgetc($f)|0);
      $cond44 = $call42;
     }
     $or = $cond44 | 32;
     $cmp45 = ($or|0)==(120);
     if (!($cmp45)) {
      if ($cmp25) {
       $base$addr$1135 = 8;$c$1137 = $cond44;
       label = 47;
       break;
      } else {
       $base$addr$1 = $base;$c$1 = $cond44;
       label = 32;
       break;
      }
     }
     $13 = HEAP32[$rpos>>2]|0;
     $14 = HEAP32[$shend>>2]|0;
     $cmp50 = ($13>>>0)<($14>>>0);
     if ($cmp50) {
      $incdec$ptr54 = ((($13)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr54;
      $15 = HEAP8[$13>>0]|0;
      $conv55 = $15&255;
      $cond59 = $conv55;
     } else {
      $call57 = (___shgetc($f)|0);
      $cond59 = $call57;
     }
     $arrayidx = ((127345) + ($cond59)|0);
     $16 = HEAP8[$arrayidx>>0]|0;
     $cmp61 = ($16&255)>(15);
     if ($cmp61) {
      $17 = HEAP32[$shend>>2]|0;
      $tobool65 = ($17|0)==(0|0);
      if (!($tobool65)) {
       $18 = HEAP32[$rpos>>2]|0;
       $incdec$ptr68 = ((($18)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr68;
      }
      $tobool71 = ($pok|0)==(0);
      if ($tobool71) {
       ___shlim($f,0,0);
       $148 = 0;$149 = 0;
       break L1;
      }
      if ($tobool65) {
       $148 = 0;$149 = 0;
       break L1;
      }
      $19 = HEAP32[$rpos>>2]|0;
      $incdec$ptr77 = ((($19)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr77;
      $148 = 0;$149 = 0;
      break L1;
     } else {
      $base$addr$1135 = 16;$c$1137 = $cond59;
      label = 47;
     }
    } else {
     $spec$select132 = $cmp25 ? 10 : $base;
     $arrayidx93 = ((127345) + ($c$0)|0);
     $20 = HEAP8[$arrayidx93>>0]|0;
     $conv94 = $20&255;
     $cmp95 = ($spec$select132>>>0)>($conv94>>>0);
     if ($cmp95) {
      $base$addr$1 = $spec$select132;$c$1 = $c$0;
      label = 32;
     } else {
      $21 = HEAP32[$shend>>2]|0;
      $tobool99 = ($21|0)==(0|0);
      if (!($tobool99)) {
       $22 = HEAP32[$rpos>>2]|0;
       $incdec$ptr102 = ((($22)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr102;
      }
      ___shlim($f,0,0);
      $call105 = (___errno_location()|0);
      HEAP32[$call105>>2] = 28;
      $148 = 0;$149 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $cmp108 = ($base$addr$1|0)==(10);
     if ($cmp108) {
      $sub111191 = (($c$1) + -48)|0;
      $cmp112192 = ($sub111191>>>0)<(10);
      if ($cmp112192) {
       $sub111194 = $sub111191;$x$0193 = 0;
       while(1) {
        $mul = ($x$0193*10)|0;
        $add = (($mul) + ($sub111194))|0;
        $23 = HEAP32[$rpos>>2]|0;
        $24 = HEAP32[$shend>>2]|0;
        $cmp119 = ($23>>>0)<($24>>>0);
        if ($cmp119) {
         $incdec$ptr123 = ((($23)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr123;
         $25 = HEAP8[$23>>0]|0;
         $conv124 = $25&255;
         $cond128 = $conv124;
        } else {
         $call126 = (___shgetc($f)|0);
         $cond128 = $call126;
        }
        $sub111 = (($cond128) + -48)|0;
        $cmp112 = ($sub111>>>0)<(10);
        $cmp114 = ($add>>>0)<(429496729);
        $26 = $cmp112 & $cmp114;
        if ($26) {
         $sub111194 = $sub111;$x$0193 = $add;
        } else {
         break;
        }
       }
       $cmp132184 = ($sub111>>>0)<(10);
       if ($cmp132184) {
        $27 = $add;$28 = 0;$c$3185 = $cond128;$sub131187 = $sub111;
        while(1) {
         $29 = (___muldi3(($27|0),($28|0),10,0)|0);
         $30 = (getTempRet0() | 0);
         $31 = ($sub131187|0)<(0);
         $32 = $31 << 31 >> 31;
         $33 = $sub131187 ^ -1;
         $34 = $32 ^ -1;
         $35 = ($30>>>0)>($34>>>0);
         $36 = ($29>>>0)>($33>>>0);
         $37 = ($30|0)==($34|0);
         $38 = $37 & $36;
         $39 = $35 | $38;
         if ($39) {
          $150 = $27;$151 = $28;$base$addr$1136 = 10;$c$8 = $c$3185;
          label = 76;
          break L43;
         }
         $40 = (_i64Add(($29|0),($30|0),($sub131187|0),($32|0))|0);
         $41 = (getTempRet0() | 0);
         $42 = HEAP32[$rpos>>2]|0;
         $43 = HEAP32[$shend>>2]|0;
         $cmp153 = ($42>>>0)<($43>>>0);
         if ($cmp153) {
          $incdec$ptr157 = ((($42)) + 1|0);
          HEAP32[$rpos>>2] = $incdec$ptr157;
          $44 = HEAP8[$42>>0]|0;
          $conv158 = $44&255;
          $cond162 = $conv158;
         } else {
          $call160 = (___shgetc($f)|0);
          $cond162 = $call160;
         }
         $sub131 = (($cond162) + -48)|0;
         $cmp132 = ($sub131>>>0)<(10);
         $45 = ($41>>>0)<(429496729);
         $46 = ($40>>>0)<(2576980378);
         $47 = ($41|0)==(429496729);
         $48 = $47 & $46;
         $49 = $45 | $48;
         $or$cond3 = $cmp132 & $49;
         if ($or$cond3) {
          $27 = $40;$28 = $41;$c$3185 = $cond162;$sub131187 = $sub131;
         } else {
          break;
         }
        }
        $cmp165 = ($sub131>>>0)>(9);
        if ($cmp165) {
         $125 = $41;$127 = $40;$neg$1 = $neg$0;
        } else {
         $150 = $40;$151 = $41;$base$addr$1136 = 10;$c$8 = $cond162;
         label = 76;
        }
       } else {
        $125 = 0;$127 = $add;$neg$1 = $neg$0;
       }
      } else {
       $125 = 0;$127 = 0;$neg$1 = $neg$0;
      }
     } else {
      $base$addr$1135 = $base$addr$1;$c$1137 = $c$1;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $sub170 = (($base$addr$1135) + -1)|0;
     $and = $sub170 & $base$addr$1135;
     $tobool171 = ($and|0)==(0);
     if ($tobool171) {
      $mul173 = ($base$addr$1135*23)|0;
      $shr = $mul173 >>> 5;
      $and174 = $shr & 7;
      $arrayidx175 = (159871 + ($and174)|0);
      $50 = HEAP8[$arrayidx175>>0]|0;
      $conv176 = $50 << 24 >> 24;
      $arrayidx178158 = ((127345) + ($c$1137)|0);
      $51 = HEAP8[$arrayidx178158>>0]|0;
      $conv179159 = $51&255;
      $cmp180160 = ($base$addr$1135>>>0)>($conv179159>>>0);
      if ($cmp180160) {
       $conv179162 = $conv179159;$x$1161 = 0;
       while(1) {
        $shl = $x$1161 << $conv176;
        $or189 = $conv179162 | $shl;
        $52 = HEAP32[$rpos>>2]|0;
        $53 = HEAP32[$shend>>2]|0;
        $cmp193 = ($52>>>0)<($53>>>0);
        if ($cmp193) {
         $incdec$ptr197 = ((($52)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr197;
         $54 = HEAP8[$52>>0]|0;
         $conv198 = $54&255;
         $cond202 = $conv198;
        } else {
         $call200 = (___shgetc($f)|0);
         $cond202 = $call200;
        }
        $arrayidx178 = ((127345) + ($cond202)|0);
        $55 = HEAP8[$arrayidx178>>0]|0;
        $conv179 = $55&255;
        $cmp180 = ($base$addr$1135>>>0)>($conv179>>>0);
        $cmp183 = ($or189>>>0)<(134217728);
        $56 = $cmp183 & $cmp180;
        if ($56) {
         $conv179162 = $conv179;$x$1161 = $or189;
        } else {
         break;
        }
       }
       $152 = $55;$60 = 0;$62 = $or189;$c$4$lcssa = $cond202;$conv207152$pre$phiZ2D = $conv179;
      } else {
       $152 = $51;$60 = 0;$62 = 0;$c$4$lcssa = $c$1137;$conv207152$pre$phiZ2D = $conv179159;
      }
      $57 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
      $58 = (getTempRet0() | 0);
      $cmp208153 = ($base$addr$1135>>>0)<=($conv207152$pre$phiZ2D>>>0);
      $59 = ($58>>>0)<($60>>>0);
      $61 = ($57>>>0)<($62>>>0);
      $63 = ($58|0)==($60|0);
      $64 = $63 & $61;
      $65 = $59 | $64;
      $or$cond155 = $cmp208153 | $65;
      if ($or$cond155) {
       $150 = $62;$151 = $60;$base$addr$1136 = $base$addr$1135;$c$8 = $c$4$lcssa;
       label = 76;
       break;
      }
      $66 = $62;$67 = $60;$71 = $152;
      while(1) {
       $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
       $69 = (getTempRet0() | 0);
       $70 = $71&255;
       $72 = $68 | $70;
       $73 = HEAP32[$rpos>>2]|0;
       $74 = HEAP32[$shend>>2]|0;
       $cmp224 = ($73>>>0)<($74>>>0);
       if ($cmp224) {
        $incdec$ptr228 = ((($73)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr228;
        $75 = HEAP8[$73>>0]|0;
        $conv229 = $75&255;
        $cond233 = $conv229;
       } else {
        $call231 = (___shgetc($f)|0);
        $cond233 = $call231;
       }
       $arrayidx206 = ((127345) + ($cond233)|0);
       $76 = HEAP8[$arrayidx206>>0]|0;
       $conv207 = $76&255;
       $cmp208 = ($base$addr$1135>>>0)<=($conv207>>>0);
       $77 = ($69>>>0)>($58>>>0);
       $78 = ($72>>>0)>($57>>>0);
       $79 = ($69|0)==($58|0);
       $80 = $79 & $78;
       $81 = $77 | $80;
       $or$cond = $cmp208 | $81;
       if ($or$cond) {
        $150 = $72;$151 = $69;$base$addr$1136 = $base$addr$1135;$c$8 = $cond233;
        label = 76;
        break L63;
       } else {
        $66 = $72;$67 = $69;$71 = $76;
       }
      }
     }
     $arrayidx237176 = ((127345) + ($c$1137)|0);
     $82 = HEAP8[$arrayidx237176>>0]|0;
     $conv238177 = $82&255;
     $cmp239178 = ($base$addr$1135>>>0)>($conv238177>>>0);
     if ($cmp239178) {
      $conv238180 = $conv238177;$x$2179 = 0;
      while(1) {
       $mul246 = Math_imul($x$2179, $base$addr$1135)|0;
       $add249 = (($conv238180) + ($mul246))|0;
       $83 = HEAP32[$rpos>>2]|0;
       $84 = HEAP32[$shend>>2]|0;
       $cmp253 = ($83>>>0)<($84>>>0);
       if ($cmp253) {
        $incdec$ptr257 = ((($83)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr257;
        $85 = HEAP8[$83>>0]|0;
        $conv258 = $85&255;
        $cond262 = $conv258;
       } else {
        $call260 = (___shgetc($f)|0);
        $cond262 = $call260;
       }
       $arrayidx237 = ((127345) + ($cond262)|0);
       $86 = HEAP8[$arrayidx237>>0]|0;
       $conv238 = $86&255;
       $cmp239 = ($base$addr$1135>>>0)>($conv238>>>0);
       $cmp242 = ($add249>>>0)<(119304647);
       $87 = $cmp242 & $cmp239;
       if ($87) {
        $conv238180 = $conv238;$x$2179 = $add249;
       } else {
        break;
       }
      }
      $153 = $86;$154 = $add249;$155 = 0;$c$6$lcssa = $cond262;$conv267166$pre$phiZ2D = $conv238;
     } else {
      $153 = $82;$154 = 0;$155 = 0;$c$6$lcssa = $c$1137;$conv267166$pre$phiZ2D = $conv238177;
     }
     $cmp268167 = ($base$addr$1135>>>0)>($conv267166$pre$phiZ2D>>>0);
     if ($cmp268167) {
      $88 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
      $89 = (getTempRet0() | 0);
      $100 = $153;$91 = $155;$93 = $154;$c$7168 = $c$6$lcssa;
      while(1) {
       $90 = ($91>>>0)>($89>>>0);
       $92 = ($93>>>0)>($88>>>0);
       $94 = ($91|0)==($89|0);
       $95 = $94 & $92;
       $96 = $90 | $95;
       if ($96) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $97 = (___muldi3(($93|0),($91|0),($base$addr$1135|0),0)|0);
       $98 = (getTempRet0() | 0);
       $99 = $100&255;
       $101 = $99 ^ -1;
       $102 = ($98>>>0)>(4294967295);
       $103 = ($97>>>0)>($101>>>0);
       $104 = ($98|0)==(-1);
       $105 = $104 & $103;
       $106 = $102 | $105;
       if ($106) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $107 = (_i64Add(($97|0),($98|0),($99|0),0)|0);
       $108 = (getTempRet0() | 0);
       $109 = HEAP32[$rpos>>2]|0;
       $110 = HEAP32[$shend>>2]|0;
       $cmp292 = ($109>>>0)<($110>>>0);
       if ($cmp292) {
        $incdec$ptr296 = ((($109)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr296;
        $111 = HEAP8[$109>>0]|0;
        $conv297 = $111&255;
        $cond301 = $conv297;
       } else {
        $call299 = (___shgetc($f)|0);
        $cond301 = $call299;
       }
       $arrayidx266 = ((127345) + ($cond301)|0);
       $112 = HEAP8[$arrayidx266>>0]|0;
       $conv267 = $112&255;
       $cmp268 = ($base$addr$1135>>>0)>($conv267>>>0);
       if ($cmp268) {
        $100 = $112;$91 = $108;$93 = $107;$c$7168 = $cond301;
       } else {
        $150 = $107;$151 = $108;$base$addr$1136 = $base$addr$1135;$c$8 = $cond301;
        label = 76;
        break;
       }
      }
     } else {
      $150 = $154;$151 = $155;$base$addr$1136 = $base$addr$1135;$c$8 = $c$6$lcssa;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $arrayidx305 = ((127345) + ($c$8)|0);
    $113 = HEAP8[$arrayidx305>>0]|0;
    $conv306 = $113&255;
    $cmp307 = ($base$addr$1136>>>0)>($conv306>>>0);
    if ($cmp307) {
     while(1) {
      $114 = HEAP32[$rpos>>2]|0;
      $115 = HEAP32[$shend>>2]|0;
      $cmp319 = ($114>>>0)<($115>>>0);
      if ($cmp319) {
       $incdec$ptr323 = ((($114)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr323;
       $116 = HEAP8[$114>>0]|0;
       $conv324 = $116&255;
       $cond328 = $conv324;
      } else {
       $call326 = (___shgetc($f)|0);
       $cond328 = $call326;
      }
      $arrayidx311 = ((127345) + ($cond328)|0);
      $117 = HEAP8[$arrayidx311>>0]|0;
      $conv312 = $117&255;
      $cmp313 = ($base$addr$1136>>>0)>($conv312>>>0);
      if (!($cmp313)) {
       break;
      }
     }
     $call330 = (___errno_location()|0);
     HEAP32[$call330>>2] = 68;
     $118 = $0 & 1;
     $119 = ($118|0)==(0);
     $120 = (0)==(0);
     $121 = $119 & $120;
     $spec$select133 = $121 ? $neg$0 : 0;
     $125 = $1;$127 = $0;$neg$1 = $spec$select133;
    } else {
     $125 = $151;$127 = $150;$neg$1 = $neg$0;
    }
   }
   $122 = HEAP32[$shend>>2]|0;
   $tobool337 = ($122|0)==(0|0);
   if (!($tobool337)) {
    $123 = HEAP32[$rpos>>2]|0;
    $incdec$ptr340 = ((($123)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr340;
   }
   $124 = ($125>>>0)<($1>>>0);
   $126 = ($127>>>0)<($0>>>0);
   $128 = ($125|0)==($1|0);
   $129 = $128 & $126;
   $130 = $124 | $129;
   if (!($130)) {
    $131 = $0 & 1;
    $132 = ($131|0)!=(0);
    $133 = (0)!=(0);
    $134 = $132 | $133;
    $tobool349 = ($neg$1|0)!=(0);
    $or$cond5 = $134 | $tobool349;
    if (!($or$cond5)) {
     $call351 = (___errno_location()|0);
     HEAP32[$call351>>2] = 68;
     $135 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $136 = (getTempRet0() | 0);
     $148 = $136;$149 = $135;
     break;
    }
    $137 = ($125>>>0)>($1>>>0);
    $138 = ($127>>>0)>($0>>>0);
    $139 = ($125|0)==($1|0);
    $140 = $139 & $138;
    $141 = $137 | $140;
    if ($141) {
     $call357 = (___errno_location()|0);
     HEAP32[$call357>>2] = 68;
     $148 = $1;$149 = $0;
     break;
    }
   }
   $142 = ($neg$1|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = $127 ^ $neg$1;
   $145 = $125 ^ $143;
   $146 = (_i64Subtract(($144|0),($145|0),($neg$1|0),($143|0))|0);
   $147 = (getTempRet0() | 0);
   $148 = $147;$149 = $146;
  }
 } while(0);
 setTempRet0(($148) | 0);
 return ($149|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $cmp2 = 0, $cmp35 = 0, $conv34 = 0, $conv38 = 0, $idx$ext = 0, $rend18$phi$trans$insert = 0, $retval$0 = 0;
 var $rpos = 0, $rpos33$phi$trans$insert = 0, $shcnt = 0, $shcnt30 = 0, $shcnt7 = 0, $shend = 0, $shend17 = 0, $shend19 = 0, $shlim = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $tobool22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $0 = $shlim;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(0);
 $7 = ($5|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  label = 3;
 } else {
  $shcnt = ((($f)) + 120|0);
  $9 = $shcnt;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<($5|0);
  $16 = ($11>>>0)<($2>>>0);
  $17 = ($14|0)==($5|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if ($cmp2) {
   label = 4;
  } else {
   $20 = $shlim;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   $rend18$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$rend18$phi$trans$insert>>2]|0;
   if ($28) {
    $29 = $$pre;
    $66 = $29;
    label = 9;
   } else {
    $rpos = ((($f)) + 4|0);
    $30 = HEAP32[$rpos>>2]|0;
    $sub$ptr$rhs$cast = $30;
    $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
    $31 = ($sub$ptr$sub|0)<(0);
    $32 = $31 << 31 >> 31;
    $shcnt7 = ((($f)) + 120|0);
    $33 = $shcnt7;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_i64Subtract(($22|0),($25|0),($35|0),($38|0))|0);
    $40 = (getTempRet0() | 0);
    $41 = ($40|0)>($32|0);
    $42 = ($39>>>0)>($sub$ptr$sub>>>0);
    $43 = ($40|0)==($32|0);
    $44 = $43 & $42;
    $45 = $41 | $44;
    $46 = $$pre;
    if ($45) {
     $66 = $46;
     label = 9;
    } else {
     $idx$ext = (($39) + -1)|0;
     $add$ptr = (($30) + ($idx$ext)|0);
     $shend17 = ((($f)) + 104|0);
     HEAP32[$shend17>>2] = $add$ptr;
     $47 = $46;
    }
   }
   if ((label|0) == 9) {
    $shend19 = ((($f)) + 104|0);
    HEAP32[$shend19>>2] = $$pre;
    $47 = $66;
   }
   $tobool22 = ($47|0)==(0|0);
   $rpos33$phi$trans$insert = ((($f)) + 4|0);
   if ($tobool22) {
    $$pre25 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $64 = $$pre25;
   } else {
    $48 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $sub$ptr$lhs$cast26 = $47;
    $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) + 1)|0;
    $add = (($sub$ptr$sub28) - ($48))|0;
    $49 = ($add|0)<(0);
    $50 = $49 << 31 >> 31;
    $shcnt30 = ((($f)) + 120|0);
    $51 = $shcnt30;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (_i64Add(($53|0),($56|0),($add|0),($50|0))|0);
    $58 = (getTempRet0() | 0);
    $59 = $shcnt30;
    $60 = $59;
    HEAP32[$60>>2] = $57;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    $63 = $48;
    $64 = $63;
   }
   $arrayidx = ((($64)) + -1|0);
   $65 = HEAP8[$arrayidx>>0]|0;
   $conv34 = $65&255;
   $cmp35 = ($call|0)==($conv34|0);
   if ($cmp35) {
    $retval$0 = $call;
   } else {
    $conv38 = $call&255;
    HEAP8[$arrayidx>>0] = $conv38;
    $retval$0 = $call;
   }
  }
 }
 if ((label|0) == 4) {
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = 0;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 255]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 255]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx95 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0;
 var $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call113 = 0, $call133 = 0, $call157 = 0, $call189 = 0, $call215 = 0, $call229 = 0, $call23 = 0, $call236 = 0.0, $call246 = 0.0, $call43 = 0, $call6 = 0, $cmp = 0, $cmp101 = 0;
 var $cmp106 = 0, $cmp126 = 0, $cmp136 = 0, $cmp150 = 0, $cmp16 = 0, $cmp161 = 0, $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp217 = 0, $cmp222 = 0, $cmp233 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp36 = 0, $cmp53 = 0, $cmp57 = 0, $cmp70 = 0;
 var $cmp7089 = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $conv = 0, $conv111 = 0, $conv12 = 0, $conv131 = 0, $conv155 = 0, $conv21 = 0, $conv227 = 0, $conv28 = 0, $conv41 = 0, $conv84 = 0.0, $conv86 = 0.0, $conv96 = 0;
 var $dec = 0, $dec19293 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $inc204 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0;
 var $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr242 = 0, $incdec$ptr40 = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $mul = 0, $mul85 = 0.0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond98 = 0, $or232 = 0, $or94 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0;
 var $sub160 = 0, $sub164 = 0, $sub168 = 0, $tobool = 0, $tobool140 = 0, $tobool181 = 0, $tobool193 = 0, $tobool19392 = 0, $tobool209 = 0, $tobool239 = 0, $tobool55 = 0, $tobool61 = 0, $tobool67 = 0, $tobool88 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($prec|0) {
 case 0:  {
  $bits$0 = 24;$emin$0 = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 default: {
  $retval$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $0 = HEAP32[$rpos>>2]|0;
    $1 = HEAP32[$shend>>2]|0;
    $cmp = ($0>>>0)<($1>>>0);
    if ($cmp) {
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $2 = HEAP8[$0>>0]|0;
     $conv = $2&255;
     $cond = $conv;
    } else {
     $call = (___shgetc($f)|0);
     $cond = $call;
    }
    $call6 = (_isspace($cond)|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L13: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp9 = ($cond|0)==(45);
     $conv12 = $cmp9&1;
     $mul = $conv12 << 1;
     $sub13 = (1 - ($mul))|0;
     $3 = HEAP32[$rpos>>2]|0;
     $4 = HEAP32[$shend>>2]|0;
     $cmp16 = ($3>>>0)<($4>>>0);
     if ($cmp16) {
      $incdec$ptr20 = ((($3)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr20;
      $5 = HEAP8[$3>>0]|0;
      $conv21 = $5&255;
      $c$0 = $conv21;$sign$0 = $sub13;
      break L13;
     } else {
      $call23 = (___shgetc($f)|0);
      $c$0 = $call23;$sign$0 = $sub13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $cond;$sign$0 = 1;
    }
    }
   } while(0);
   $c$197 = $c$0;$i$096 = 0;
   while(1) {
    $or = $c$197 | 32;
    $arrayidx = (159880 + ($i$096)|0);
    $6 = HEAP8[$arrayidx>>0]|0;
    $conv28 = $6 << 24 >> 24;
    $cmp29 = ($or|0)==($conv28|0);
    if (!($cmp29)) {
     $c$1$lcssa = $c$197;$trunc = $i$096;
     break;
    }
    $cmp31 = ($i$096>>>0)<(7);
    do {
     if ($cmp31) {
      $7 = HEAP32[$rpos>>2]|0;
      $8 = HEAP32[$shend>>2]|0;
      $cmp36 = ($7>>>0)<($8>>>0);
      if ($cmp36) {
       $incdec$ptr40 = ((($7)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr40;
       $9 = HEAP8[$7>>0]|0;
       $conv41 = $9&255;
       $c$2 = $conv41;
       break;
      } else {
       $call43 = (___shgetc($f)|0);
       $c$2 = $call43;
       break;
      }
     } else {
      $c$2 = $c$197;
     }
    } while(0);
    $inc = (($i$096) + 1)|0;
    $cmp26 = ($inc>>>0)<(8);
    if ($cmp26) {
     $c$197 = $c$2;$i$096 = $inc;
    } else {
     $c$1$lcssa = $c$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $cmp53 = ($trunc>>>0)>(3);
     $tobool55 = ($pok|0)!=(0);
     $or$cond2 = $tobool55 & $cmp53;
     if ($or$cond2) {
      $cmp57 = ($trunc|0)==(8);
      if ($cmp57) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $tobool88 = ($trunc|0)==(0);
     L34: do {
      if ($tobool88) {
       $c$395 = $c$1$lcssa;$i$294 = 0;
       while(1) {
        $or94 = $c$395 | 32;
        $arrayidx95 = (159933 + ($i$294)|0);
        $13 = HEAP8[$arrayidx95>>0]|0;
        $conv96 = $13 << 24 >> 24;
        $cmp97 = ($or94|0)==($conv96|0);
        if (!($cmp97)) {
         $c$5 = $c$395;$i$3 = $i$294;
         break L34;
        }
        $cmp101 = ($i$294>>>0)<(2);
        do {
         if ($cmp101) {
          $14 = HEAP32[$rpos>>2]|0;
          $15 = HEAP32[$shend>>2]|0;
          $cmp106 = ($14>>>0)<($15>>>0);
          if ($cmp106) {
           $incdec$ptr110 = ((($14)) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr110;
           $16 = HEAP8[$14>>0]|0;
           $conv111 = $16&255;
           $c$4 = $conv111;
           break;
          } else {
           $call113 = (___shgetc($f)|0);
           $c$4 = $call113;
           break;
          }
         } else {
          $c$4 = $c$395;
         }
        } while(0);
        $inc118 = (($i$294) + 1)|0;
        $cmp91 = ($inc118>>>0)<(3);
        if ($cmp91) {
         $c$395 = $c$4;$i$294 = $inc118;
        } else {
         $c$5 = $c$4;$i$3 = 3;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $trunc;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $17 = HEAP32[$rpos>>2]|0;
      $18 = HEAP32[$shend>>2]|0;
      $cmp126 = ($17>>>0)<($18>>>0);
      if ($cmp126) {
       $incdec$ptr130 = ((($17)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr130;
       $19 = HEAP8[$17>>0]|0;
       $conv131 = $19&255;
       $cond135 = $conv131;
      } else {
       $call133 = (___shgetc($f)|0);
       $cond135 = $call133;
      }
      $cmp136 = ($cond135|0)==(40);
      if (!($cmp136)) {
       $20 = HEAP32[$shend>>2]|0;
       $tobool140 = ($20|0)==(0|0);
       if ($tobool140) {
        $retval$0 = nan;
        break L4;
       }
       $21 = HEAP32[$rpos>>2]|0;
       $incdec$ptr143 = ((($21)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr143;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while(1) {
       $22 = HEAP32[$rpos>>2]|0;
       $23 = HEAP32[$shend>>2]|0;
       $cmp150 = ($22>>>0)<($23>>>0);
       if ($cmp150) {
        $incdec$ptr154 = ((($22)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr154;
        $24 = HEAP8[$22>>0]|0;
        $conv155 = $24&255;
        $cond159 = $conv155;
       } else {
        $call157 = (___shgetc($f)|0);
        $cond159 = $call157;
       }
       $sub160 = (($cond159) + -48)|0;
       $cmp161 = ($sub160>>>0)<(10);
       $sub164 = (($cond159) + -65)|0;
       $cmp165 = ($sub164>>>0)<(26);
       $or$cond = $cmp161 | $cmp165;
       if (!($or$cond)) {
        $sub168 = (($cond159) + -97)|0;
        $cmp169 = ($sub168>>>0)<(26);
        $cmp172 = ($cond159|0)==(95);
        $or$cond3 = $cmp172 | $cmp169;
        if (!($or$cond3)) {
         break;
        }
       }
       $inc204 = (($i$4) + 1)|0;
       $i$4 = $inc204;
      }
      $cmp176 = ($cond159|0)==(41);
      if ($cmp176) {
       $retval$0 = nan;
       break L4;
      }
      $25 = HEAP32[$shend>>2]|0;
      $tobool181 = ($25|0)==(0|0);
      if (!($tobool181)) {
       $26 = HEAP32[$rpos>>2]|0;
       $incdec$ptr184 = ((($26)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr184;
      }
      if (!($tobool55)) {
       $call189 = (___errno_location()|0);
       HEAP32[$call189>>2] = 28;
       ___shlim($f,0,0);
       $retval$0 = 0.0;
       break L4;
      }
      $tobool19392 = ($i$4|0)==(0);
      if ($tobool19392) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while(1) {
       $dec19293 = (($dec19293$in) + -1)|0;
       if (!($tobool181)) {
        $27 = HEAP32[$rpos>>2]|0;
        $incdec$ptr199 = ((($27)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr199;
       }
       $tobool193 = ($dec19293|0)==(0);
       if ($tobool193) {
        $retval$0 = nan;
        break L4;
       } else {
        $dec19293$in = $dec19293;
       }
      }
      break;
     }
     case 0:  {
      $cmp217 = ($c$5|0)==(48);
      if ($cmp217) {
       $30 = HEAP32[$rpos>>2]|0;
       $31 = HEAP32[$shend>>2]|0;
       $cmp222 = ($30>>>0)<($31>>>0);
       if ($cmp222) {
        $incdec$ptr226 = ((($30)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr226;
        $32 = HEAP8[$30>>0]|0;
        $conv227 = $32&255;
        $cond231 = $conv227;
       } else {
        $call229 = (___shgetc($f)|0);
        $cond231 = $call229;
       }
       $or232 = $cond231 | 32;
       $cmp233 = ($or232|0)==(120);
       if ($cmp233) {
        $call236 = (+_hexfloat($f,$bits$0,$emin$0,$sign$0,$pok));
        $retval$0 = $call236;
        break L4;
       }
       $33 = HEAP32[$shend>>2]|0;
       $tobool239 = ($33|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
       } else {
        $34 = HEAP32[$rpos>>2]|0;
        $incdec$ptr242 = ((($34)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr242;
        $c$6 = 48;
       }
      } else {
       $c$6 = $c$5;
      }
      $call246 = (+_decfloat($f,$c$6,$bits$0,$emin$0,$sign$0,$pok));
      $retval$0 = $call246;
      break L4;
      break;
     }
     default: {
      $28 = HEAP32[$shend>>2]|0;
      $tobool209 = ($28|0)==(0|0);
      if (!($tobool209)) {
       $29 = HEAP32[$rpos>>2]|0;
       $incdec$ptr212 = ((($29)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr212;
      }
      $call215 = (___errno_location()|0);
      HEAP32[$call215>>2] = 28;
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $10 = HEAP32[$shend>>2]|0;
    $tobool61 = ($10|0)==(0|0);
    if (!($tobool61)) {
     $11 = HEAP32[$rpos>>2]|0;
     $incdec$ptr64 = ((($11)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr64;
    }
    $tobool67 = ($pok|0)!=(0);
    $cmp7089 = ($trunc>>>0)>(3);
    $or$cond98 = $tobool67 & $cmp7089;
    if ($or$cond98) {
     $i$190 = $trunc;
     while(1) {
      if (!($tobool61)) {
       $12 = HEAP32[$rpos>>2]|0;
       $incdec$ptr77 = ((($12)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr77;
      }
      $dec = (($i$190) + -1)|0;
      $cmp70 = ($dec>>>0)>(3);
      if ($cmp70) {
       $i$190 = $dec;
      } else {
       break;
      }
     }
    }
   }
   $conv84 = (+($sign$0|0));
   $mul85 = $conv84 * inf;
   $conv86 = $mul85;
   $retval$0 = $conv86;
  }
 } while(0);
 return (+$retval$0);
}
function _hexfloat($f,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$pre = 0, $$pre136 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add210 = 0, $add214 = 0, $add256 = 0.0, $add259 = 0.0, $add73 = 0, $add80 = 0.0;
 var $add86 = 0.0, $and = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $brmerge = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $call = 0, $call101 = 0, $call13 = 0, $call187 = 0, $call197 = 0, $call240 = 0.0;
 var $call242 = 0.0, $call263 = 0, $call266 = 0.0, $call27 = 0, $call44 = 0, $cmp = 0, $cmp146 = 0, $cmp20 = 0, $cmp203 = 0, $cmp203118 = 0, $cmp206 = 0, $cmp235 = 0, $cmp244 = 0, $cmp31 = 0, $cmp31128 = 0, $cmp37 = 0, $cmp49 = 0, $cmp52 = 0, $cmp54 = 0, $cmp6 = 0;
 var $cmp62 = 0, $cmp94 = 0, $cond29 = 0, $cond46 = 0, $conv = 0, $conv11 = 0, $conv135 = 0.0, $conv179 = 0.0, $conv188 = 0.0, $conv198 = 0.0, $conv241112 = 0.0, $conv25 = 0, $conv253$pre$phiZ2D = 0.0, $conv254 = 0.0, $conv42 = 0, $conv78 = 0.0, $conv99 = 0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0;
 var $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $inc251 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr111 = 0, $incdec$ptr120 = 0, $incdec$ptr129 = 0, $incdec$ptr159 = 0, $incdec$ptr170 = 0, $incdec$ptr24 = 0, $incdec$ptr41 = 0, $incdec$ptr98 = 0;
 var $mul = 0, $mul136 = 0.0, $mul143 = 0, $mul180 = 0.0, $mul189 = 0.0, $mul190 = 0.0, $mul199 = 0.0, $mul200 = 0.0, $mul255 = 0.0, $mul258 = 0.0, $mul79 = 0.0, $mul85 = 0.0, $not$cmp206 = 0, $or$cond = 0, $or$cond103 = 0, $or$cond2 = 0, $or$cond3 = 0, $or145 = 0, $retval$0 = 0.0, $rpos = 0;
 var $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $spec$select113 = 0.0, $spec$select114 = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub211 = 0.0, $sub211$pn = 0.0, $sub239 = 0, $sub239111 = 0, $sub260 = 0.0, $sub51 = 0, $sub66 = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool114 = 0;
 var $tobool123 = 0, $tobool138 = 0, $tobool153 = 0, $tobool156 = 0, $tobool167 = 0, $tobool177 = 0, $tobool247 = 0, $tobool249 = 0, $tobool261 = 0, $tobool82 = 0, $tobool83 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $x$6 = 0;
 var $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, $y$5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $c$0$ph = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $c$0$ph = $call;
 }
 $c$0 = $c$0$ph;$gotdig$0 = 0;
 L5: while(1) {
  switch ($c$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$3$ph = $c$0;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 0;
   break L5;
  }
  }
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp6 = ($3>>>0)<($4>>>0);
  if ($cmp6) {
   $incdec$ptr10 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr10;
   $5 = HEAP8[$3>>0]|0;
   $conv11 = $5&255;
   $c$0$be = $conv11;
  } else {
   $call13 = (___shgetc($f)|0);
   $c$0$be = $call13;
  }
  $c$0 = $c$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 10) {
  $6 = HEAP32[$rpos>>2]|0;
  $7 = HEAP32[$shend>>2]|0;
  $cmp20 = ($6>>>0)<($7>>>0);
  if ($cmp20) {
   $incdec$ptr24 = ((($6)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr24;
   $8 = HEAP8[$6>>0]|0;
   $conv25 = $8&255;
   $cond29 = $conv25;
  } else {
   $call27 = (___shgetc($f)|0);
   $cond29 = $call27;
  }
  $cmp31128 = ($cond29|0)==(48);
  if ($cmp31128) {
   $12 = 0;$13 = 0;
   while(1) {
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp37 = ($9>>>0)<($10>>>0);
    if ($cmp37) {
     $incdec$ptr41 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr41;
     $11 = HEAP8[$9>>0]|0;
     $conv42 = $11&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $14 = (_i64Add(($12|0),($13|0),-1,-1)|0);
    $15 = (getTempRet0() | 0);
    $cmp31 = ($cond46|0)==(48);
    if ($cmp31) {
     $12 = $14;$13 = $15;
    } else {
     $106 = $14;$107 = $15;$c$3$ph = $cond46;$gotdig$3$ph = 1;$gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$3$ph = $cond29;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 1;
  }
 }
 $17 = 0;$19 = 0;$38 = $106;$40 = $107;$c$3 = $c$3$ph;$gotdig$3 = $gotdig$3$ph;$gotrad$1 = $gotrad$1$ph;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
 while(1) {
  $sub = (($c$3) + -48)|0;
  $cmp49 = ($sub>>>0)<(10);
  $$pre = $c$3 | 32;
  if ($cmp49) {
   label = 24;
  } else {
   $sub51 = (($$pre) + -97)|0;
   $cmp52 = ($sub51>>>0)<(6);
   $cmp54 = ($c$3|0)==(46);
   $or$cond3 = $cmp54 | $cmp52;
   if (!($or$cond3)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) {
    $tobool = ($gotrad$1|0)==(0);
    if ($tobool) {
     $108 = $19;$109 = $17;$110 = $19;$111 = $17;$gotdig$4 = $gotdig$3;$gotrad$2 = 1;$gottail$2 = $gottail$0;$scale$2 = $scale$0;$x$2 = $x$0;$y$2 = $y$0;
    } else {
     $c$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $cmp62 = ($c$3|0)>(57);
   $sub66 = (($$pre) + -87)|0;
   $d$0 = $cmp62 ? $sub66 : $sub;
   $16 = ($17|0)<(0);
   $18 = ($19>>>0)<(8);
   $20 = ($17|0)==(0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   do {
    if ($22) {
     $mul = $x$0 << 4;
     $add73 = (($d$0) + ($mul))|0;
     $gottail$1 = $gottail$0;$scale$1 = $scale$0;$x$1 = $add73;$y$1 = $y$0;
    } else {
     $23 = ($17|0)<(0);
     $24 = ($19>>>0)<(14);
     $25 = ($17|0)==(0);
     $26 = $25 & $24;
     $27 = $23 | $26;
     if ($27) {
      $conv78 = (+($d$0|0));
      $div = $scale$0 * 0.0625;
      $mul79 = $div * $conv78;
      $add80 = $y$0 + $mul79;
      $gottail$1 = $gottail$0;$scale$1 = $div;$x$1 = $x$0;$y$1 = $add80;
      break;
     } else {
      $tobool82 = ($d$0|0)==(0);
      $tobool83 = ($gottail$0|0)!=(0);
      $or$cond = $tobool83 | $tobool82;
      $mul85 = $scale$0 * 0.5;
      $add86 = $y$0 + $mul85;
      $spec$select113 = $or$cond ? $y$0 : $add86;
      $spec$select114 = $or$cond ? $gottail$0 : 1;
      $gottail$1 = $spec$select114;$scale$1 = $scale$0;$x$1 = $x$0;$y$1 = $spec$select113;
      break;
     }
    }
   } while(0);
   $28 = (_i64Add(($19|0),($17|0),1,0)|0);
   $29 = (getTempRet0() | 0);
   $108 = $38;$109 = $40;$110 = $28;$111 = $29;$gotdig$4 = 1;$gotrad$2 = $gotrad$1;$gottail$2 = $gottail$1;$scale$2 = $scale$1;$x$2 = $x$1;$y$2 = $y$1;
  }
  $30 = HEAP32[$rpos>>2]|0;
  $31 = HEAP32[$shend>>2]|0;
  $cmp94 = ($30>>>0)<($31>>>0);
  if ($cmp94) {
   $incdec$ptr98 = ((($30)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr98;
   $32 = HEAP8[$30>>0]|0;
   $conv99 = $32&255;
   $c$3$be = $conv99;
  } else {
   $call101 = (___shgetc($f)|0);
   $c$3$be = $call101;
  }
  $17 = $111;$19 = $110;$38 = $108;$40 = $109;$c$3 = $c$3$be;$gotdig$3 = $gotdig$4;$gotrad$1 = $gotrad$2;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
 }
 $tobool105 = ($gotdig$3|0)==(0);
 do {
  if ($tobool105) {
   $33 = HEAP32[$shend>>2]|0;
   $tobool108 = ($33|0)==(0|0);
   if (!($tobool108)) {
    $34 = HEAP32[$rpos>>2]|0;
    $incdec$ptr111 = ((($34)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr111;
   }
   $tobool114 = ($pok|0)==(0);
   if ($tobool114) {
    ___shlim($f,0,0);
   } else {
    if (!($tobool108)) {
     $35 = HEAP32[$rpos>>2]|0;
     $incdec$ptr120 = ((($35)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr120;
     $tobool123 = ($gotrad$1|0)==(0);
     $brmerge = $tobool123 | $tobool108;
     if (!($brmerge)) {
      $36 = HEAP32[$rpos>>2]|0;
      $incdec$ptr129 = ((($36)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr129;
     }
    }
   }
   $conv135 = (+($sign|0));
   $mul136 = $conv135 * 0.0;
   $retval$0 = $mul136;
  } else {
   $tobool138 = ($gotrad$1|0)==(0);
   $37 = $tobool138 ? $19 : $38;
   $39 = $tobool138 ? $17 : $40;
   $41 = ($17|0)<(0);
   $42 = ($19>>>0)<(8);
   $43 = ($17|0)==(0);
   $44 = $43 & $42;
   $45 = $41 | $44;
   if ($45) {
    $46 = $19;$47 = $17;$x$3125 = $x$0;
    while(1) {
     $mul143 = $x$3125 << 4;
     $48 = (_i64Add(($46|0),($47|0),1,0)|0);
     $49 = (getTempRet0() | 0);
     $50 = ($47|0)<(0);
     $51 = ($46>>>0)<(7);
     $52 = ($47|0)==(0);
     $53 = $52 & $51;
     $54 = $50 | $53;
     if ($54) {
      $46 = $48;$47 = $49;$x$3125 = $mul143;
     } else {
      $x$3$lcssa = $mul143;
      break;
     }
    }
   } else {
    $x$3$lcssa = $x$0;
   }
   $or145 = $c$3$lcssa | 32;
   $cmp146 = ($or145|0)==(112);
   if ($cmp146) {
    $55 = (_scanexp($f,$pok)|0);
    $56 = (getTempRet0() | 0);
    $57 = ($55|0)==(0);
    $58 = ($56|0)==(-2147483648);
    $59 = $57 & $58;
    if ($59) {
     $tobool153 = ($pok|0)==(0);
     if ($tobool153) {
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break;
     }
     $60 = HEAP32[$shend>>2]|0;
     $tobool156 = ($60|0)==(0|0);
     if ($tobool156) {
      $68 = 0;$69 = 0;
     } else {
      $61 = HEAP32[$rpos>>2]|0;
      $incdec$ptr159 = ((($61)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr159;
      $68 = 0;$69 = 0;
     }
    } else {
     $68 = $55;$69 = $56;
    }
   } else {
    $62 = HEAP32[$shend>>2]|0;
    $tobool167 = ($62|0)==(0|0);
    if ($tobool167) {
     $68 = 0;$69 = 0;
    } else {
     $63 = HEAP32[$rpos>>2]|0;
     $incdec$ptr170 = ((($63)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr170;
     $68 = 0;$69 = 0;
    }
   }
   $64 = (_bitshift64Shl(($37|0),($39|0),2)|0);
   $65 = (getTempRet0() | 0);
   $66 = (_i64Add(($64|0),($65|0),-32,-1)|0);
   $67 = (getTempRet0() | 0);
   $70 = (_i64Add(($66|0),($67|0),($68|0),($69|0))|0);
   $71 = (getTempRet0() | 0);
   $tobool177 = ($x$3$lcssa|0)==(0);
   if ($tobool177) {
    $conv179 = (+($sign|0));
    $mul180 = $conv179 * 0.0;
    $retval$0 = $mul180;
    break;
   }
   $sub182 = (0 - ($emin))|0;
   $72 = ($sub182|0)<(0);
   $73 = $72 << 31 >> 31;
   $74 = ($71|0)>($73|0);
   $75 = ($70>>>0)>($sub182>>>0);
   $76 = ($71|0)==($73|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    $call187 = (___errno_location()|0);
    HEAP32[$call187>>2] = 68;
    $conv188 = (+($sign|0));
    $mul189 = $conv188 * 1.7976931348623157E+308;
    $mul190 = $mul189 * 1.7976931348623157E+308;
    $retval$0 = $mul190;
    break;
   }
   $sub192 = (($emin) + -106)|0;
   $79 = ($sub192|0)<(0);
   $80 = $79 << 31 >> 31;
   $81 = ($71|0)<($80|0);
   $82 = ($70>>>0)<($sub192>>>0);
   $83 = ($71|0)==($80|0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $call197 = (___errno_location()|0);
    HEAP32[$call197>>2] = 68;
    $conv198 = (+($sign|0));
    $mul199 = $conv198 * 2.2250738585072014E-308;
    $mul200 = $mul199 * 2.2250738585072014E-308;
    $retval$0 = $mul200;
    break;
   }
   $cmp203118 = ($x$3$lcssa|0)>(-1);
   if ($cmp203118) {
    $86 = $70;$87 = $71;$x$4119 = $x$3$lcssa;$y$3120 = $y$0;
    while(1) {
     $cmp206 = !($y$3120 >= 0.5);
     $add214 = $x$4119 << 1;
     $sub211 = $y$3120 + -1.0;
     $not$cmp206 = $cmp206 ^ 1;
     $add210 = $not$cmp206&1;
     $x$5 = $add214 | $add210;
     $sub211$pn = $cmp206 ? $y$3120 : $sub211;
     $y$4 = $y$3120 + $sub211$pn;
     $88 = (_i64Add(($86|0),($87|0),-1,-1)|0);
     $89 = (getTempRet0() | 0);
     $cmp203 = ($x$5|0)>(-1);
     if ($cmp203) {
      $86 = $88;$87 = $89;$x$4119 = $x$5;$y$3120 = $y$4;
     } else {
      $96 = $88;$97 = $89;$x$4$lcssa = $x$5;$y$3$lcssa = $y$4;
      break;
     }
    }
   } else {
    $96 = $70;$97 = $71;$x$4$lcssa = $x$3$lcssa;$y$3$lcssa = $y$0;
   }
   $90 = ($bits|0)<(0);
   $91 = $90 << 31 >> 31;
   $92 = ($emin|0)<(0);
   $93 = $92 << 31 >> 31;
   $94 = (_i64Subtract(32,0,($emin|0),($93|0))|0);
   $95 = (getTempRet0() | 0);
   $98 = (_i64Add(($94|0),($95|0),($96|0),($97|0))|0);
   $99 = (getTempRet0() | 0);
   $100 = ($99|0)<($91|0);
   $101 = ($98>>>0)<($bits>>>0);
   $102 = ($99|0)==($91|0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $105 = ($98|0)>(0);
    if ($105) {
     $bits$addr$0 = $98;
     label = 65;
    } else {
     $bits$addr$0110 = 0;$sub239111 = 84;
     label = 67;
    }
   } else {
    $bits$addr$0 = $bits;
    label = 65;
   }
   if ((label|0) == 65) {
    $cmp235 = ($bits$addr$0|0)<(53);
    $sub239 = (84 - ($bits$addr$0))|0;
    if ($cmp235) {
     $bits$addr$0110 = $bits$addr$0;$sub239111 = $sub239;
     label = 67;
    } else {
     $$pre136 = (+($sign|0));
     $bias$0 = 0.0;$bits$addr$0109 = $bits$addr$0;$conv253$pre$phiZ2D = $$pre136;
    }
   }
   if ((label|0) == 67) {
    $conv241112 = (+($sign|0));
    $call240 = (+_scalbn(1.0,$sub239111));
    $call242 = (+_copysignl($call240,$conv241112));
    $bias$0 = $call242;$bits$addr$0109 = $bits$addr$0110;$conv253$pre$phiZ2D = $conv241112;
   }
   $cmp244 = ($bits$addr$0109|0)<(32);
   $tobool247 = $y$3$lcssa != 0.0;
   $or$cond2 = $tobool247 & $cmp244;
   $and = $x$4$lcssa & 1;
   $tobool249 = ($and|0)==(0);
   $or$cond103 = $tobool249 & $or$cond2;
   $inc251 = $or$cond103&1;
   $x$6 = (($x$4$lcssa) + ($inc251))|0;
   $y$5 = $or$cond103 ? 0.0 : $y$3$lcssa;
   $conv254 = (+($x$6>>>0));
   $mul255 = $conv253$pre$phiZ2D * $conv254;
   $add256 = $bias$0 + $mul255;
   $mul258 = $y$5 * $conv253$pre$phiZ2D;
   $add259 = $mul258 + $add256;
   $sub260 = $add259 - $bias$0;
   $tobool261 = $sub260 != 0.0;
   if (!($tobool261)) {
    $call263 = (___errno_location()|0);
    HEAP32[$call263>>2] = 68;
   }
   $call266 = (+_scalbnl($sub260,$96));
   $retval$0 = $call266;
  }
 } while(0);
 return (+$retval$0);
}
function _decfloat($f,$c,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $c = $c|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$neg = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa381 = 0, $a$0335 = 0, $a$3$ph = 0, $a$3$ph408 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6328 = 0, $add260 = 0, $add273 = 0, $add283 = 0, $add295 = 0, $add315$sink$off0 = 0, $add353 = 0, $add375 = 0;
 var $add408 = 0, $add420 = 0, $add430 = 0, $add436 = 0, $add441 = 0, $add465 = 0, $add470 = 0, $add480 = 0.0, $add486 = 0, $add509 = 0.0, $add511 = 0, $add525 = 0, $add532 = 0.0, $add539 = 0.0, $add545 = 0, $add552 = 0.0, $add556 = 0.0, $add571 = 0.0, $add59 = 0, $and = 0;
 var $and329 = 0, $and355 = 0, $and360 = 0, $and363 = 0, $and376 = 0, $and417 = 0, $and431 = 0, $and437 = 0, $and442 = 0, $and451 = 0, $and466 = 0, $and471 = 0, $and512 = 0, $and526 = 0, $and546 = 0, $and574 = 0, $arrayidx186 = 0, $arrayidx186$promoted = 0, $arrayidx219 = 0, $arrayidx239 = 0;
 var $arrayidx246 = 0, $arrayidx264 = 0, $arrayidx269 = 0, $arrayidx292 = 0, $arrayidx302 = 0, $arrayidx312 = 0, $arrayidx361 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx380 = 0, $arrayidx381 = 0, $arrayidx414 = 0, $arrayidx446 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx518 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0;
 var $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3354 = 0, $call = 0, $call135 = 0, $call15 = 0, $call165 = 0, $call175 = 0, $call32 = 0, $call503 = 0.0, $call504 = 0.0, $call506 = 0.0, $call507 = 0.0, $call565 = 0.0, $call579 = 0.0, $call602 = 0, $call605 = 0.0;
 var $call91 = 0, $carry$0337 = 0, $carry306$0 = 0, $carry306$1 = 0, $carry370$0330 = 0, $cmp100 = 0, $cmp121 = 0, $cmp149 = 0, $cmp152 = 0, $cmp183 = 0, $cmp183341 = 0, $cmp19 = 0, $cmp19365 = 0, $cmp194 = 0, $cmp197 = 0, $cmp2 = 0, $cmp200 = 0, $cmp203 = 0, $cmp211 = 0, $cmp226 = 0;
 var $cmp231 = 0, $cmp25 = 0, $cmp254 = 0, $cmp266 = 0, $cmp266333 = 0, $cmp277 = 0, $cmp297 = 0, $cmp300 = 0, $cmp303 = 0, $cmp330 = 0, $cmp333 = 0, $cmp356 = 0, $cmp372 = 0, $cmp377 = 0, $cmp38 = 0, $cmp382 = 0, $cmp38345 = 0, $cmp390 = 0, $cmp40 = 0, $cmp400 = 0;
 var $cmp40346 = 0, $cmp40356 = 0, $cmp404 = 0, $cmp410 = 0, $cmp410326 = 0, $cmp424 = 0, $cmp443 = 0, $cmp467 = 0, $cmp48 = 0, $cmp488 = 0, $cmp498 = 0, $cmp51 = 0, $cmp513 = 0, $cmp519 = 0, $cmp527 = 0, $cmp534 = 0, $cmp547 = 0, $cmp562 = 0, $cmp576 = 0, $cmp580 = 0;
 var $cmp587 = 0, $cmp595 = 0, $cmp67 = 0, $cmp8 = 0, $cmp84 = 0, $cond17 = 0, $cond262 = 0, $cond270 = 0, $cond34 = 0, $cond93 = 0, $conv = 0, $conv13 = 0, $conv140 = 0.0, $conv155 = 0.0, $conv157 = 0.0, $conv166 = 0.0, $conv176 = 0.0, $conv206 = 0.0, $conv208 = 0.0, $conv214 = 0.0;
 var $conv216 = 0.0, $conv220 = 0.0, $conv234 = 0.0, $conv236 = 0.0, $conv240 = 0.0, $conv30 = 0, $conv479 = 0.0, $conv484 = 0.0, $conv89 = 0, $denormal$2$v = 0, $div = 0, $div221 = 0.0, $div272 = 0, $div275 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0;
 var $e2$4 = 0, $exitcond = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3350 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1351 = 0, $gotrad$2 = 0, $i$0325 = 0, $i$4324 = 0, $inc189 = 0, $inc191 = 0, $inc287 = 0, $inc291 = 0;
 var $inc395 = 0, $inc482 = 0, $inc568 = 0.0, $inc592 = 0, $inc66 = 0, $inc70 = 0, $incdec$ptr = 0, $incdec$ptr113 = 0, $incdec$ptr12 = 0, $incdec$ptr128 = 0, $incdec$ptr29 = 0, $incdec$ptr88 = 0, $j$0$lcssa = 0, $j$0302 = 0, $j$0303 = 0, $j$0304 = 0, $j$0353 = 0, $j$2 = 0, $j$3342 = 0, $k$0$lcssa = 0;
 var $k$0306 = 0, $k$0307 = 0, $k$0308 = 0, $k$0352 = 0, $k$2 = 0, $k$3 = 0, $k$4336 = 0, $k$5 = 0, $k$5$in = 0, $k$6329 = 0, $lnz$0$lcssa = 0, $lnz$0312 = 0, $lnz$0313 = 0, $lnz$0314 = 0, $lnz$0349 = 0, $lnz$2 = 0, $mul = 0, $mul141 = 0.0, $mul158 = 0.0, $mul167 = 0.0;
 var $mul168 = 0.0, $mul177 = 0.0, $mul178 = 0.0, $mul187 = 0, $mul187343 = 0, $mul209 = 0.0, $mul217 = 0.0, $mul224$neg = 0, $mul237 = 0.0, $mul241 = 0.0, $mul276 = 0, $mul423 = 0, $mul475 = 0.0, $mul485 = 0.0, $mul531 = 0.0, $mul538 = 0.0, $mul551 = 0.0, $mul555 = 0.0, $mul591 = 0.0, $narrow = 0;
 var $not$cmp580 = 0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond262 = 0, $or$cond263 = 0, $or$cond264 = 0, $or$cond265 = 0, $or$cond268 = 0, $or$cond394 = 0, $or$cond5 = 0, $or365 = 0, $or453 = 0, $or99 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa380 = 0, $rp$0334 = 0, $rp$3$ph = 0, $rp$3$ph406 = 0;
 var $rp$5$ph = 0, $rp$5$ph405 = 0, $rp$5$ph405$ph = 0, $rp$6327 = 0, $rpos = 0, $shend = 0, $shl415 = 0, $shr = 0, $shr230 = 0, $shr419 = 0, $shr422 = 0, $spec$select = 0, $spec$select259 = 0, $spec$select260 = 0, $spec$select266 = 0, $spec$select267 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0;
 var $spec$select296 = 0, $spec$store$select = 0, $storemerge298 = 0, $sub1 = 0, $sub170 = 0, $sub218 = 0, $sub225 = 0, $sub238 = 0, $sub245 = 0, $sub263 = 0, $sub284 = 0, $sub294 = 0, $sub307 = 0, $sub308 = 0, $sub328 = 0, $sub348 = 0, $sub354 = 0, $sub359 = 0, $sub362 = 0, $sub37 = 0;
 var $sub37344 = 0, $sub37355 = 0, $sub416 = 0, $sub433 = 0, $sub450 = 0, $sub472 = 0, $sub487 = 0, $sub502 = 0, $sub505 = 0, $sub508 = 0.0, $sub561 = 0, $sub572 = 0.0, $sub575 = 0, $sub60 = 0, $tobool107 = 0, $tobool110 = 0, $tobool125 = 0, $tobool138 = 0, $tobool180 = 0, $tobool247 = 0;
 var $tobool252 = 0, $tobool281 = 0, $tobool289 = 0, $tobool337 = 0, $tobool351 = 0, $tobool428 = 0, $tobool439 = 0, $tobool522 = 0, $tobool56 = 0, $tobool566 = 0, $tobool600 = 0, $tobool95 = 0, $tobool98 = 0, $tobool98271 = 0, $tobool98276 = 0, $tobool98277279 = 0, $x = 0, $y$0323 = 0.0, $y$1 = 0.0, $y$2 = 0.0;
 var $y$3 = 0.0, $z$0 = 0, $z$1 = 0, $z$11322 = 0, $z$12 = 0, $z$3 = 0, $z$3$ph = 0, $z$3$ph407 = 0, $z$4 = 0, $z$6 = 0, $z$8$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $x = sp;
 $0 = (($emin) + ($bits))|0;
 $sub1 = (0 - ($0))|0;
 $rpos = ((($f)) + 4|0);
 $shend = ((($f)) + 104|0);
 $c$addr$0 = $c;$gotdig$0 = 0;
 L1: while(1) {
  switch ($c$addr$0|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $107 = 0;$108 = 0;$c$addr$2 = $c$addr$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;
   break L1;
  }
  }
  $1 = HEAP32[$rpos>>2]|0;
  $2 = HEAP32[$shend>>2]|0;
  $cmp2 = ($1>>>0)<($2>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($1)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $3 = HEAP8[$1>>0]|0;
   $conv = $3&255;
   $c$addr$0$be = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $c$addr$0$be = $call;
  }
  $c$addr$0 = $c$addr$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 7) {
  $4 = HEAP32[$rpos>>2]|0;
  $5 = HEAP32[$shend>>2]|0;
  $cmp8 = ($4>>>0)<($5>>>0);
  if ($cmp8) {
   $incdec$ptr12 = ((($4)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr12;
   $6 = HEAP8[$4>>0]|0;
   $conv13 = $6&255;
   $cond17 = $conv13;
  } else {
   $call15 = (___shgetc($f)|0);
   $cond17 = $call15;
  }
  $cmp19365 = ($cond17|0)==(48);
  if ($cmp19365) {
   $7 = 0;$8 = 0;
   while(1) {
    $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
    $10 = (getTempRet0() | 0);
    $11 = HEAP32[$rpos>>2]|0;
    $12 = HEAP32[$shend>>2]|0;
    $cmp25 = ($11>>>0)<($12>>>0);
    if ($cmp25) {
     $incdec$ptr29 = ((($11)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr29;
     $13 = HEAP8[$11>>0]|0;
     $conv30 = $13&255;
     $cond34 = $conv30;
    } else {
     $call32 = (___shgetc($f)|0);
     $cond34 = $call32;
    }
    $cmp19 = ($cond34|0)==(48);
    if ($cmp19) {
     $7 = $9;$8 = $10;
    } else {
     $107 = $9;$108 = $10;$c$addr$2 = $cond34;$gotdig$2 = 1;$gotrad$0 = 1;
     break;
    }
   }
  } else {
   $107 = 0;$108 = 0;$c$addr$2 = $cond17;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;
  }
 }
 HEAP32[$x>>2] = 0;
 $sub37344 = (($c$addr$2) + -48)|0;
 $cmp38345 = ($sub37344>>>0)<(10);
 $cmp40346 = ($c$addr$2|0)==(46);
 $14 = $cmp40346 | $cmp38345;
 L22: do {
  if ($14) {
   $arrayidx77 = ((($x)) + 496|0);
   $109 = $107;$110 = $108;$15 = 0;$16 = 0;$c$addr$3354 = $c$addr$2;$cmp40356 = $cmp40346;$gotdig$3350 = $gotdig$2;$gotrad$1351 = $gotrad$0;$j$0353 = 0;$k$0352 = 0;$lnz$0349 = 0;$sub37355 = $sub37344;
   L24: while(1) {
    do {
     if ($cmp40356) {
      $cond270 = ($gotrad$1351|0)==(0);
      if ($cond270) {
       $111 = $15;$112 = $16;$113 = $15;$114 = $16;$gotdig$4 = $gotdig$3350;$gotrad$2 = 1;$j$2 = $j$0353;$k$2 = $k$0352;$lnz$2 = $lnz$0349;
      } else {
       break L24;
      }
     } else {
      $cmp48 = ($k$0352|0)<(125);
      $17 = (_i64Add(($15|0),($16|0),1,0)|0);
      $18 = (getTempRet0() | 0);
      $cmp51 = ($c$addr$3354|0)!=(48);
      if (!($cmp48)) {
       if (!($cmp51)) {
        $111 = $109;$112 = $110;$113 = $17;$114 = $18;$gotdig$4 = $gotdig$3350;$gotrad$2 = $gotrad$1351;$j$2 = $j$0353;$k$2 = $k$0352;$lnz$2 = $lnz$0349;
        break;
       }
       $20 = HEAP32[$arrayidx77>>2]|0;
       $or = $20 | 1;
       HEAP32[$arrayidx77>>2] = $or;
       $111 = $109;$112 = $110;$113 = $17;$114 = $18;$gotdig$4 = $gotdig$3350;$gotrad$2 = $gotrad$1351;$j$2 = $j$0353;$k$2 = $k$0352;$lnz$2 = 1116;
       break;
      }
      $spec$select = $cmp51 ? $17 : $lnz$0349;
      $tobool56 = ($j$0353|0)==(0);
      $arrayidx64 = (($x) + ($k$0352<<2)|0);
      if ($tobool56) {
       $storemerge298 = $sub37355;
      } else {
       $19 = HEAP32[$arrayidx64>>2]|0;
       $mul = ($19*10)|0;
       $add59 = (($c$addr$3354) + -48)|0;
       $sub60 = (($add59) + ($mul))|0;
       $storemerge298 = $sub60;
      }
      HEAP32[$arrayidx64>>2] = $storemerge298;
      $inc66 = (($j$0353) + 1)|0;
      $cmp67 = ($inc66|0)==(9);
      $inc70 = $cmp67&1;
      $spec$select259 = (($k$0352) + ($inc70))|0;
      $spec$select260 = $cmp67 ? 0 : $inc66;
      $111 = $109;$112 = $110;$113 = $17;$114 = $18;$gotdig$4 = 1;$gotrad$2 = $gotrad$1351;$j$2 = $spec$select260;$k$2 = $spec$select259;$lnz$2 = $spec$select;
     }
    } while(0);
    $21 = HEAP32[$rpos>>2]|0;
    $22 = HEAP32[$shend>>2]|0;
    $cmp84 = ($21>>>0)<($22>>>0);
    if ($cmp84) {
     $incdec$ptr88 = ((($21)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr88;
     $23 = HEAP8[$21>>0]|0;
     $conv89 = $23&255;
     $cond93 = $conv89;
    } else {
     $call91 = (___shgetc($f)|0);
     $cond93 = $call91;
    }
    $sub37 = (($cond93) + -48)|0;
    $cmp38 = ($sub37>>>0)<(10);
    $cmp40 = ($cond93|0)==(46);
    $24 = $cmp40 | $cmp38;
    if ($24) {
     $109 = $111;$110 = $112;$15 = $113;$16 = $114;$c$addr$3354 = $cond93;$cmp40356 = $cmp40;$gotdig$3350 = $gotdig$4;$gotrad$1351 = $gotrad$2;$j$0353 = $j$2;$k$0352 = $k$2;$lnz$0349 = $lnz$2;$sub37355 = $sub37;
    } else {
     $26 = $113;$27 = $111;$29 = $114;$30 = $112;$c$addr$3$lcssa = $cond93;$gotdig$3$lcssa = $gotdig$4;$gotrad$1$lcssa = $gotrad$2;$j$0$lcssa = $j$2;$k$0$lcssa = $k$2;$lnz$0$lcssa = $lnz$2;
     label = 31;
     break L22;
    }
   }
   $tobool98271 = ($gotdig$3350|0)!=(0);
   $115 = $15;$116 = $16;$117 = $109;$118 = $110;$j$0304 = $j$0353;$k$0308 = $k$0352;$lnz$0314 = $lnz$0349;$tobool98277279 = $tobool98271;
   label = 39;
  } else {
   $26 = 0;$27 = $107;$29 = 0;$30 = $108;$c$addr$3$lcssa = $c$addr$2;$gotdig$3$lcssa = $gotdig$2;$gotrad$1$lcssa = $gotrad$0;$j$0$lcssa = 0;$k$0$lcssa = 0;$lnz$0$lcssa = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $tobool95 = ($gotrad$1$lcssa|0)==(0);
   $25 = $tobool95 ? $26 : $27;
   $28 = $tobool95 ? $29 : $30;
   $tobool98 = ($gotdig$3$lcssa|0)!=(0);
   $or99 = $c$addr$3$lcssa | 32;
   $cmp100 = ($or99|0)==(101);
   $or$cond262 = $tobool98 & $cmp100;
   if (!($or$cond262)) {
    $cmp121 = ($c$addr$3$lcssa|0)>(-1);
    if ($cmp121) {
     $115 = $26;$116 = $29;$117 = $25;$118 = $28;$j$0304 = $j$0$lcssa;$k$0308 = $k$0$lcssa;$lnz$0314 = $lnz$0$lcssa;$tobool98277279 = $tobool98;
     label = 39;
     break;
    } else {
     $119 = $26;$120 = $29;$121 = $25;$122 = $28;$j$0303 = $j$0$lcssa;$k$0307 = $k$0$lcssa;$lnz$0313 = $lnz$0$lcssa;$tobool98276 = $tobool98;
     label = 41;
     break;
    }
   }
   $31 = (_scanexp($f,$pok)|0);
   $32 = (getTempRet0() | 0);
   $33 = ($31|0)==(0);
   $34 = ($32|0)==(-2147483648);
   $35 = $33 & $34;
   if ($35) {
    $tobool107 = ($pok|0)==(0);
    if ($tobool107) {
     ___shlim($f,0,0);
     $retval$1 = 0.0;
     break;
    }
    $36 = HEAP32[$shend>>2]|0;
    $tobool110 = ($36|0)==(0|0);
    if ($tobool110) {
     $38 = 0;$39 = 0;
    } else {
     $37 = HEAP32[$rpos>>2]|0;
     $incdec$ptr113 = ((($37)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr113;
     $38 = 0;$39 = 0;
    }
   } else {
    $38 = $31;$39 = $32;
   }
   $40 = (_i64Add(($38|0),($39|0),($25|0),($28|0))|0);
   $41 = (getTempRet0() | 0);
   $46 = $40;$47 = $26;$49 = $41;$50 = $29;$j$0302 = $j$0$lcssa;$k$0306 = $k$0$lcssa;$lnz$0312 = $lnz$0$lcssa;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $42 = HEAP32[$shend>>2]|0;
  $tobool125 = ($42|0)==(0|0);
  if ($tobool125) {
   $119 = $115;$120 = $116;$121 = $117;$122 = $118;$j$0303 = $j$0304;$k$0307 = $k$0308;$lnz$0313 = $lnz$0314;$tobool98276 = $tobool98277279;
   label = 41;
  } else {
   $43 = HEAP32[$rpos>>2]|0;
   $incdec$ptr128 = ((($43)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr128;
   if ($tobool98277279) {
    $46 = $117;$47 = $115;$49 = $118;$50 = $116;$j$0302 = $j$0304;$k$0306 = $k$0308;$lnz$0312 = $lnz$0314;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($tobool98276) {
   $46 = $121;$47 = $119;$49 = $122;$50 = $120;$j$0302 = $j$0303;$k$0306 = $k$0307;$lnz$0312 = $lnz$0313;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $call135 = (___errno_location()|0);
   HEAP32[$call135>>2] = 28;
   ___shlim($f,0,0);
   $retval$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $44 = HEAP32[$x>>2]|0;
   $tobool138 = ($44|0)==(0);
   if ($tobool138) {
    $conv140 = (+($sign|0));
    $mul141 = $conv140 * 0.0;
    $retval$1 = $mul141;
    break;
   }
   $45 = ($46|0)==($47|0);
   $48 = ($49|0)==($50|0);
   $51 = $45 & $48;
   $52 = ($50|0)<(0);
   $53 = ($47>>>0)<(10);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   $or$cond = $56 & $51;
   if ($or$cond) {
    $cmp149 = ($bits|0)>(30);
    $shr = $44 >>> $bits;
    $cmp152 = ($shr|0)==(0);
    $or$cond263 = $cmp149 | $cmp152;
    if ($or$cond263) {
     $conv155 = (+($sign|0));
     $conv157 = (+($44>>>0));
     $mul158 = $conv155 * $conv157;
     $retval$1 = $mul158;
     break;
    }
   }
   $div = (($emin|0) / -2)&-1;
   $57 = ($div|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = ($49|0)>($58|0);
   $60 = ($46>>>0)>($div>>>0);
   $61 = ($49|0)==($58|0);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $call165 = (___errno_location()|0);
    HEAP32[$call165>>2] = 68;
    $conv166 = (+($sign|0));
    $mul167 = $conv166 * 1.7976931348623157E+308;
    $mul168 = $mul167 * 1.7976931348623157E+308;
    $retval$1 = $mul168;
    break;
   }
   $sub170 = (($emin) + -106)|0;
   $64 = ($sub170|0)<(0);
   $65 = $64 << 31 >> 31;
   $66 = ($49|0)<($65|0);
   $67 = ($46>>>0)<($sub170>>>0);
   $68 = ($49|0)==($65|0);
   $69 = $68 & $67;
   $70 = $66 | $69;
   if ($70) {
    $call175 = (___errno_location()|0);
    HEAP32[$call175>>2] = 68;
    $conv176 = (+($sign|0));
    $mul177 = $conv176 * 2.2250738585072014E-308;
    $mul178 = $mul177 * 2.2250738585072014E-308;
    $retval$1 = $mul178;
    break;
   }
   $tobool180 = ($j$0302|0)==(0);
   if ($tobool180) {
    $k$3 = $k$0306;
   } else {
    $cmp183341 = ($j$0302|0)<(9);
    if ($cmp183341) {
     $arrayidx186 = (($x) + ($k$0306<<2)|0);
     $arrayidx186$promoted = HEAP32[$arrayidx186>>2]|0;
     $j$3342 = $j$0302;$mul187343 = $arrayidx186$promoted;
     while(1) {
      $mul187 = ($mul187343*10)|0;
      $inc189 = (($j$3342) + 1)|0;
      $cmp183 = ($j$3342|0)<(8);
      if ($cmp183) {
       $j$3342 = $inc189;$mul187343 = $mul187;
      } else {
       break;
      }
     }
     HEAP32[$arrayidx186>>2] = $mul187;
    }
    $inc191 = (($k$0306) + 1)|0;
    $k$3 = $inc191;
   }
   $cmp194 = ($lnz$0312|0)<(9);
   if ($cmp194) {
    $cmp197 = ($lnz$0312|0)<=($46|0);
    $cmp200 = ($46|0)<(18);
    $or$cond2 = $cmp197 & $cmp200;
    if ($or$cond2) {
     $cmp203 = ($46|0)==(9);
     if ($cmp203) {
      $conv206 = (+($sign|0));
      $71 = HEAP32[$x>>2]|0;
      $conv208 = (+($71>>>0));
      $mul209 = $conv206 * $conv208;
      $retval$1 = $mul209;
      break;
     }
     $cmp211 = ($46|0)<(9);
     if ($cmp211) {
      $conv214 = (+($sign|0));
      $72 = HEAP32[$x>>2]|0;
      $conv216 = (+($72>>>0));
      $mul217 = $conv214 * $conv216;
      $sub218 = (8 - ($46))|0;
      $arrayidx219 = (127616 + ($sub218<<2)|0);
      $73 = HEAP32[$arrayidx219>>2]|0;
      $conv220 = (+($73|0));
      $div221 = $mul217 / $conv220;
      $retval$1 = $div221;
      break;
     }
     $$neg = Math_imul($46, -3)|0;
     $mul224$neg = (($bits) + 27)|0;
     $sub225 = (($mul224$neg) + ($$neg))|0;
     $cmp226 = ($sub225|0)>(30);
     $$pre = HEAP32[$x>>2]|0;
     $shr230 = $$pre >>> $sub225;
     $cmp231 = ($shr230|0)==(0);
     $or$cond394 = $cmp226 | $cmp231;
     if ($or$cond394) {
      $conv234 = (+($sign|0));
      $conv236 = (+($$pre>>>0));
      $mul237 = $conv234 * $conv236;
      $sub238 = (($46) + -10)|0;
      $arrayidx239 = (127616 + ($sub238<<2)|0);
      $74 = HEAP32[$arrayidx239>>2]|0;
      $conv240 = (+($74|0));
      $mul241 = $mul237 * $conv240;
      $retval$1 = $mul241;
      break;
     }
    }
   }
   $z$0 = $k$3;
   while(1) {
    $sub245 = (($z$0) + -1)|0;
    $arrayidx246 = (($x) + ($sub245<<2)|0);
    $75 = HEAP32[$arrayidx246>>2]|0;
    $tobool247 = ($75|0)==(0);
    if ($tobool247) {
     $z$0 = $sub245;
    } else {
     break;
    }
   }
   $rem = (($46|0) % 9)&-1;
   $tobool252 = ($rem|0)==(0);
   if ($tobool252) {
    $a$3$ph = 0;$rp$3$ph = $46;$z$3$ph = $z$0;
   } else {
    $cmp254 = ($46|0)>(-1);
    $add260 = (($rem) + 9)|0;
    $cond262 = $cmp254 ? $rem : $add260;
    $sub263 = (8 - ($cond262))|0;
    $arrayidx264 = (127616 + ($sub263<<2)|0);
    $76 = HEAP32[$arrayidx264>>2]|0;
    $cmp266333 = ($z$0|0)==(0);
    if ($cmp266333) {
     $a$0$lcssa381 = 0;$rp$0$lcssa380 = $46;$z$1 = 0;
    } else {
     $div275 = (1000000000 / ($76|0))&-1;
     $a$0335 = 0;$carry$0337 = 0;$k$4336 = 0;$rp$0334 = $46;
     while(1) {
      $arrayidx269 = (($x) + ($k$4336<<2)|0);
      $77 = HEAP32[$arrayidx269>>2]|0;
      $div272 = (($77>>>0) / ($76>>>0))&-1;
      $78 = Math_imul($div272, $76)|0;
      $79 = (($77) - ($78))|0;
      $add273 = (($div272) + ($carry$0337))|0;
      HEAP32[$arrayidx269>>2] = $add273;
      $mul276 = Math_imul($div275, $79)|0;
      $cmp277 = ($k$4336|0)==($a$0335|0);
      $tobool281 = ($add273|0)==(0);
      $or$cond264 = $cmp277 & $tobool281;
      $add283 = (($a$0335) + 1)|0;
      $and = $add283 & 127;
      $sub284 = (($rp$0334) + -9)|0;
      $spec$select292 = $or$cond264 ? $sub284 : $rp$0334;
      $spec$select293 = $or$cond264 ? $and : $a$0335;
      $inc287 = (($k$4336) + 1)|0;
      $cmp266 = ($inc287|0)==($z$0|0);
      if ($cmp266) {
       break;
      } else {
       $a$0335 = $spec$select293;$carry$0337 = $mul276;$k$4336 = $inc287;$rp$0334 = $spec$select292;
      }
     }
     $tobool289 = ($mul276|0)==(0);
     if ($tobool289) {
      $a$0$lcssa381 = $spec$select293;$rp$0$lcssa380 = $spec$select292;$z$1 = $z$0;
     } else {
      $arrayidx292 = (($x) + ($z$0<<2)|0);
      $inc291 = (($z$0) + 1)|0;
      HEAP32[$arrayidx292>>2] = $mul276;
      $a$0$lcssa381 = $spec$select293;$rp$0$lcssa380 = $spec$select292;$z$1 = $inc291;
     }
    }
    $sub294 = (9 - ($cond262))|0;
    $add295 = (($sub294) + ($rp$0$lcssa380))|0;
    $a$3$ph = $a$0$lcssa381;$rp$3$ph = $add295;$z$3$ph = $z$1;
   }
   $a$3$ph408 = $a$3$ph;$e2$0$ph = 0;$rp$3$ph406 = $rp$3$ph;$z$3$ph407 = $z$3$ph;
   L107: while(1) {
    $cmp297 = ($rp$3$ph406|0)<(18);
    $cmp300 = ($rp$3$ph406|0)==(18);
    $arrayidx302 = (($x) + ($a$3$ph408<<2)|0);
    $e2$0 = $e2$0$ph;$z$3 = $z$3$ph407;
    while(1) {
     if (!($cmp297)) {
      if (!($cmp300)) {
       $rp$5$ph = $rp$3$ph406;
       break L107;
      }
      $80 = HEAP32[$arrayidx302>>2]|0;
      $cmp303 = ($80>>>0)<(9007199);
      if (!($cmp303)) {
       $rp$5$ph = 18;
       break L107;
      }
     }
     $sub308 = (($z$3) + 127)|0;
     $carry306$0 = 0;$k$5$in = $sub308;$z$4 = $z$3;
     while(1) {
      $k$5 = $k$5$in & 127;
      $arrayidx312 = (($x) + ($k$5<<2)|0);
      $81 = HEAP32[$arrayidx312>>2]|0;
      $82 = (_bitshift64Shl(($81|0),0,29)|0);
      $83 = (getTempRet0() | 0);
      $84 = (_i64Add(($82|0),($83|0),($carry306$0|0),0)|0);
      $85 = (getTempRet0() | 0);
      $86 = ($85>>>0)>(0);
      $87 = ($84>>>0)>(1000000000);
      $88 = ($85|0)==(0);
      $89 = $88 & $87;
      $90 = $86 | $89;
      if ($90) {
       $91 = (___udivdi3(($84|0),($85|0),1000000000,0)|0);
       $92 = (getTempRet0() | 0);
       $93 = (___muldi3(($91|0),($92|0),1000000000,0)|0);
       $94 = (getTempRet0() | 0);
       $95 = (_i64Subtract(($84|0),($85|0),($93|0),($94|0))|0);
       $96 = (getTempRet0() | 0);
       $add315$sink$off0 = $95;$carry306$1 = $91;
      } else {
       $add315$sink$off0 = $84;$carry306$1 = 0;
      }
      HEAP32[$arrayidx312>>2] = $add315$sink$off0;
      $sub328 = (($z$4) + 127)|0;
      $and329 = $sub328 & 127;
      $cmp330 = ($k$5|0)!=($and329|0);
      $cmp333 = ($k$5|0)==($a$3$ph408|0);
      $or$cond265 = $cmp330 | $cmp333;
      $tobool337 = ($add315$sink$off0|0)==(0);
      $spec$select266 = $tobool337 ? $k$5 : $z$4;
      $spec$select294 = $or$cond265 ? $z$4 : $spec$select266;
      $sub348 = (($k$5) + -1)|0;
      if ($cmp333) {
       break;
      } else {
       $carry306$0 = $carry306$1;$k$5$in = $sub348;$z$4 = $spec$select294;
      }
     }
     $sub307 = (($e2$0) + -29)|0;
     $tobool351 = ($carry306$1|0)==(0);
     if ($tobool351) {
      $e2$0 = $sub307;$z$3 = $z$4;
     } else {
      break;
     }
    }
    $add353 = (($rp$3$ph406) + 9)|0;
    $sub354 = (($a$3$ph408) + 127)|0;
    $and355 = $sub354 & 127;
    $cmp356 = ($and355|0)==($spec$select294|0);
    $sub359 = (($spec$select294) + 127)|0;
    $and360 = $sub359 & 127;
    $sub362 = (($spec$select294) + 126)|0;
    $and363 = $sub362 & 127;
    $arrayidx364 = (($x) + ($and363<<2)|0);
    if ($cmp356) {
     $arrayidx361 = (($x) + ($and360<<2)|0);
     $97 = HEAP32[$arrayidx361>>2]|0;
     $98 = HEAP32[$arrayidx364>>2]|0;
     $or365 = $98 | $97;
     HEAP32[$arrayidx364>>2] = $or365;
     $z$6 = $and360;
    } else {
     $z$6 = $z$4;
    }
    $arrayidx367 = (($x) + ($and355<<2)|0);
    HEAP32[$arrayidx367>>2] = $carry306$1;
    $a$3$ph408 = $and355;$e2$0$ph = $sub307;$rp$3$ph406 = $add353;$z$3$ph407 = $z$6;
   }
   $a$5$ph$ph = $a$3$ph408;$e2$1$ph$ph = $e2$0;$rp$5$ph405$ph = $rp$5$ph;$z$8$ph$ph = $z$3;
   L126: while(1) {
    $add441 = (($z$8$ph$ph) + 1)|0;
    $and442 = $add441 & 127;
    $sub450 = (($z$8$ph$ph) + 127)|0;
    $and451 = $sub450 & 127;
    $arrayidx452 = (($x) + ($and451<<2)|0);
    $a$5$ph = $a$5$ph$ph;$e2$1$ph = $e2$1$ph$ph;$rp$5$ph405 = $rp$5$ph405$ph;
    while(1) {
     $cmp400 = ($rp$5$ph405|0)==(18);
     $cmp404 = ($rp$5$ph405|0)>(27);
     $spec$select267 = $cmp404 ? 9 : 1;
     $a$5 = $a$5$ph;$e2$1 = $e2$1$ph;
     while(1) {
      $i$0325 = 0;
      while(1) {
       $add375 = (($i$0325) + ($a$5))|0;
       $and376 = $add375 & 127;
       $cmp377 = ($and376|0)==($z$8$ph$ph|0);
       if ($cmp377) {
        label = 94;
        break;
       }
       $arrayidx380 = (($x) + ($and376<<2)|0);
       $99 = HEAP32[$arrayidx380>>2]|0;
       $arrayidx381 = (130152 + ($i$0325<<2)|0);
       $100 = HEAP32[$arrayidx381>>2]|0;
       $cmp382 = ($99>>>0)<($100>>>0);
       if ($cmp382) {
        label = 94;
        break;
       }
       $cmp390 = ($99>>>0)>($100>>>0);
       if ($cmp390) {
        break;
       }
       $inc395 = (($i$0325) + 1)|0;
       $cmp372 = ($inc395>>>0)<(2);
       if ($cmp372) {
        $i$0325 = 1;
       } else {
        label = 94;
        break;
       }
      }
      if ((label|0) == 94) {
       label = 0;
       if ($cmp400) {
        break L126;
       }
      }
      $add408 = (($spec$select267) + ($e2$1))|0;
      $cmp410326 = ($a$5|0)==($z$8$ph$ph|0);
      if ($cmp410326) {
       $a$5 = $z$8$ph$ph;$e2$1 = $add408;
      } else {
       break;
      }
     }
     $shl415 = 1 << $spec$select267;
     $sub416 = (($shl415) + -1)|0;
     $shr422 = 1000000000 >>> $spec$select267;
     $a$6328 = $a$5;$carry370$0330 = 0;$k$6329 = $a$5;$rp$6327 = $rp$5$ph405;
     while(1) {
      $arrayidx414 = (($x) + ($k$6329<<2)|0);
      $101 = HEAP32[$arrayidx414>>2]|0;
      $and417 = $101 & $sub416;
      $shr419 = $101 >>> $spec$select267;
      $add420 = (($shr419) + ($carry370$0330))|0;
      HEAP32[$arrayidx414>>2] = $add420;
      $mul423 = Math_imul($and417, $shr422)|0;
      $cmp424 = ($k$6329|0)==($a$6328|0);
      $tobool428 = ($add420|0)==(0);
      $or$cond268 = $cmp424 & $tobool428;
      $add430 = (($a$6328) + 1)|0;
      $and431 = $add430 & 127;
      $sub433 = (($rp$6327) + -9)|0;
      $spec$select295 = $or$cond268 ? $sub433 : $rp$6327;
      $spec$select296 = $or$cond268 ? $and431 : $a$6328;
      $add436 = (($k$6329) + 1)|0;
      $and437 = $add436 & 127;
      $cmp410 = ($and437|0)==($z$8$ph$ph|0);
      if ($cmp410) {
       break;
      } else {
       $a$6328 = $spec$select296;$carry370$0330 = $mul423;$k$6329 = $and437;$rp$6327 = $spec$select295;
      }
     }
     $tobool439 = ($mul423|0)==(0);
     if (!($tobool439)) {
      $cmp443 = ($and442|0)==($spec$select296|0);
      if (!($cmp443)) {
       break;
      }
      $102 = HEAP32[$arrayidx452>>2]|0;
      $or453 = $102 | 1;
      HEAP32[$arrayidx452>>2] = $or453;
     }
     $a$5$ph = $spec$select296;$e2$1$ph = $add408;$rp$5$ph405 = $spec$select295;
    }
    $arrayidx446 = (($x) + ($z$8$ph$ph<<2)|0);
    HEAP32[$arrayidx446>>2] = $mul423;
    $a$5$ph$ph = $spec$select296;$e2$1$ph$ph = $add408;$rp$5$ph405$ph = $spec$select295;$z$8$ph$ph = $and442;
   }
   $i$4324 = 0;$y$0323 = 0.0;$z$11322 = $z$8$ph$ph;
   while(1) {
    $add465 = (($i$4324) + ($a$5))|0;
    $and466 = $add465 & 127;
    $cmp467 = ($and466|0)==($z$11322|0);
    $add470 = (($z$11322) + 1)|0;
    $and471 = $add470 & 127;
    if ($cmp467) {
     $sub472 = (($and471) + -1)|0;
     $arrayidx473 = (($x) + ($sub472<<2)|0);
     HEAP32[$arrayidx473>>2] = 0;
     $z$12 = $and471;
    } else {
     $z$12 = $z$11322;
    }
    $mul475 = $y$0323 * 1.0E+9;
    $arrayidx478 = (($x) + ($and466<<2)|0);
    $103 = HEAP32[$arrayidx478>>2]|0;
    $conv479 = (+($103>>>0));
    $add480 = $mul475 + $conv479;
    $inc482 = (($i$4324) + 1)|0;
    $exitcond = ($inc482|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $i$4324 = $inc482;$y$0323 = $add480;$z$11322 = $z$12;
    }
   }
   $conv484 = (+($sign|0));
   $mul485 = $add480 * $conv484;
   $add486 = (($e2$1) + 53)|0;
   $sub487 = (($add486) - ($emin))|0;
   $cmp488 = ($sub487|0)<($bits|0);
   $104 = ($sub487|0)>(0);
   $spec$store$select = $104 ? $sub487 : 0;
   $bits$addr$0 = $cmp488 ? $spec$store$select : $bits;
   $cmp498 = ($bits$addr$0|0)<(53);
   if ($cmp498) {
    $sub502 = (105 - ($bits$addr$0))|0;
    $call503 = (+_scalbn(1.0,$sub502));
    $call504 = (+_copysignl($call503,$mul485));
    $sub505 = (53 - ($bits$addr$0))|0;
    $call506 = (+_scalbn(1.0,$sub505));
    $call507 = (+_fmodl($mul485,$call506));
    $sub508 = $mul485 - $call507;
    $add509 = $call504 + $sub508;
    $bias$0 = $call504;$frac$0 = $call507;$y$1 = $add509;
   } else {
    $bias$0 = 0.0;$frac$0 = 0.0;$y$1 = $mul485;
   }
   $add511 = (($a$5) + 2)|0;
   $and512 = $add511 & 127;
   $cmp513 = ($and512|0)==($z$12|0);
   if ($cmp513) {
    $frac$3 = $frac$0;
   } else {
    $arrayidx518 = (($x) + ($and512<<2)|0);
    $105 = HEAP32[$arrayidx518>>2]|0;
    $cmp519 = ($105>>>0)<(500000000);
    do {
     if ($cmp519) {
      $tobool522 = ($105|0)==(0);
      if ($tobool522) {
       $add525 = (($a$5) + 3)|0;
       $and526 = $add525 & 127;
       $cmp527 = ($and526|0)==($z$12|0);
       if ($cmp527) {
        $frac$1 = $frac$0;
        break;
       }
      }
      $mul531 = $conv484 * 0.25;
      $add532 = $mul531 + $frac$0;
      $frac$1 = $add532;
     } else {
      $cmp534 = ($105|0)==(500000000);
      if (!($cmp534)) {
       $mul538 = $conv484 * 0.75;
       $add539 = $mul538 + $frac$0;
       $frac$1 = $add539;
       break;
      }
      $add545 = (($a$5) + 3)|0;
      $and546 = $add545 & 127;
      $cmp547 = ($and546|0)==($z$12|0);
      if ($cmp547) {
       $mul551 = $conv484 * 0.5;
       $add552 = $mul551 + $frac$0;
       $frac$1 = $add552;
       break;
      } else {
       $mul555 = $conv484 * 0.75;
       $add556 = $mul555 + $frac$0;
       $frac$1 = $add556;
       break;
      }
     }
    } while(0);
    $sub561 = (53 - ($bits$addr$0))|0;
    $cmp562 = ($sub561|0)>(1);
    if ($cmp562) {
     $call565 = (+_fmodl($frac$1,1.0));
     $tobool566 = $call565 != 0.0;
     if ($tobool566) {
      $frac$3 = $frac$1;
     } else {
      $inc568 = $frac$1 + 1.0;
      $frac$3 = $inc568;
     }
    } else {
     $frac$3 = $frac$1;
    }
   }
   $add571 = $y$1 + $frac$3;
   $sub572 = $add571 - $bias$0;
   $and574 = $add486 & 2147483647;
   $sub575 = (-2 - ($0))|0;
   $cmp576 = ($and574|0)>($sub575|0);
   do {
    if ($cmp576) {
     $call579 = (+Math_abs((+$sub572)));
     $cmp580 = !($call579 >= 9007199254740992.0);
     $mul591 = $sub572 * 0.5;
     $not$cmp580 = $cmp580 ^ 1;
     $inc592 = $not$cmp580&1;
     $e2$3 = (($e2$1) + ($inc592))|0;
     $y$2 = $cmp580 ? $sub572 : $mul591;
     $106 = (($e2$3) + 50)|0;
     $cmp595 = ($106|0)>($sub1|0);
     if (!($cmp595)) {
      $cmp587 = ($bits$addr$0|0)!=($sub487|0);
      $narrow = $cmp587 | $cmp580;
      $denormal$2$v = $cmp488 & $narrow;
      $tobool600 = $frac$3 != 0.0;
      $or$cond5 = $tobool600 & $denormal$2$v;
      if (!($or$cond5)) {
       $e2$4 = $e2$3;$y$3 = $y$2;
       break;
      }
     }
     $call602 = (___errno_location()|0);
     HEAP32[$call602>>2] = 68;
     $e2$4 = $e2$3;$y$3 = $y$2;
    } else {
     $e2$4 = $e2$1;$y$3 = $sub572;
    }
   } while(0);
   $call605 = (+_scalbnl($y$3,$e2$4));
   $retval$1 = $call605;
  }
 } while(0);
 STACKTOP = sp;return (+$retval$1);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp51 = 0, $cmp64 = 0, $cmp6440 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9138 = 0, $cmp97 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv = 0, $conv102 = 0, $conv15 = 0;
 var $conv56 = 0, $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $mul = 0, $neg$0 = 0, $or$cond1 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub90 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$047 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 switch ($cond|0) {
 case 43: case 45:  {
  $cmp4 = ($cond|0)==(45);
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)>(9);
  $tobool = ($pok|0)!=(0);
  $or$cond1 = $tobool & $cmp20;
  if ($or$cond1) {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $45 = -2147483648;$46 = 0;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = ((($7)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    label = 14;
   }
  } else {
   $c$0 = $cond19;$neg$0 = $conv7;$sub31$pre$phiZ2D = $sub;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($cond) + -48)|0;
  $c$0 = $cond;$neg$0 = 0;$sub31$pre$phiZ2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $cmp32 = ($sub31$pre$phiZ2D>>>0)>(9);
  if ($cmp32) {
   label = 14;
  } else {
   $c$146 = $c$0;$x$047 = 0;
   while(1) {
    $mul = ($x$047*10)|0;
    $add = (($c$146) + -48)|0;
    $sub48 = (($add) + ($mul))|0;
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp51 = ($9>>>0)<($10>>>0);
    if ($cmp51) {
     $incdec$ptr55 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr55;
     $11 = HEAP8[$9>>0]|0;
     $conv56 = $11&255;
     $cond60 = $conv56;
    } else {
     $call58 = (___shgetc($f)|0);
     $cond60 = $call58;
    }
    $sub43 = (($cond60) + -48)|0;
    $cmp44 = ($sub43>>>0)<(10);
    $cmp46 = ($sub48|0)<(214748364);
    $12 = $cmp44 & $cmp46;
    if ($12) {
     $c$146 = $cond60;$x$047 = $sub48;
    } else {
     break;
    }
   }
   $13 = ($sub48|0)<(0);
   $14 = $13 << 31 >> 31;
   $cmp6440 = ($sub43>>>0)<(10);
   if ($cmp6440) {
    $15 = $sub48;$16 = $14;$c$241 = $cond60;
    while(1) {
     $17 = (___muldi3(($15|0),($16|0),10,0)|0);
     $18 = (getTempRet0() | 0);
     $19 = ($c$241|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = (_i64Add(($c$241|0),($20|0),-48,-1)|0);
     $22 = (getTempRet0() | 0);
     $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
     $24 = (getTempRet0() | 0);
     $25 = HEAP32[$rpos>>2]|0;
     $26 = HEAP32[$shend>>2]|0;
     $cmp78 = ($25>>>0)<($26>>>0);
     if ($cmp78) {
      $incdec$ptr82 = ((($25)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr82;
      $27 = HEAP8[$25>>0]|0;
      $conv83 = $27&255;
      $cond87 = $conv83;
     } else {
      $call85 = (___shgetc($f)|0);
      $cond87 = $call85;
     }
     $sub63 = (($cond87) + -48)|0;
     $cmp64 = ($sub63>>>0)<(10);
     $28 = ($24|0)<(21474836);
     $29 = ($23>>>0)<(2061584302);
     $30 = ($24|0)==(21474836);
     $31 = $30 & $29;
     $32 = $28 | $31;
     $33 = $cmp64 & $32;
     if ($33) {
      $15 = $23;$16 = $24;$c$241 = $cond87;
     } else {
      break;
     }
    }
    $cmp9138 = ($sub63>>>0)<(10);
    if ($cmp9138) {
     while(1) {
      $34 = HEAP32[$rpos>>2]|0;
      $35 = HEAP32[$shend>>2]|0;
      $cmp97 = ($34>>>0)<($35>>>0);
      if ($cmp97) {
       $incdec$ptr101 = ((($34)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr101;
       $36 = HEAP8[$34>>0]|0;
       $conv102 = $36&255;
       $cond106 = $conv102;
      } else {
       $call104 = (___shgetc($f)|0);
       $cond106 = $call104;
      }
      $sub90 = (($cond106) + -48)|0;
      $cmp91 = ($sub90>>>0)<(10);
      if (!($cmp91)) {
       $39 = $23;$40 = $24;
       break;
      }
     }
    } else {
     $39 = $23;$40 = $24;
    }
   } else {
    $39 = $sub48;$40 = $14;
   }
   $37 = HEAP32[$shend>>2]|0;
   $tobool109 = ($37|0)==(0|0);
   if (!($tobool109)) {
    $38 = HEAP32[$rpos>>2]|0;
    $incdec$ptr112 = ((($38)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr112;
   }
   $tobool115 = ($neg$0|0)==(0);
   $41 = (_i64Subtract(0,0,($39|0),($40|0))|0);
   $42 = (getTempRet0() | 0);
   $43 = $tobool115 ? $39 : $41;
   $44 = $tobool115 ? $40 : $42;
   $45 = $44;$46 = $43;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$shend>>2]|0;
  $tobool36 = ($$pr|0)==(0|0);
  if ($tobool36) {
   $45 = -2147483648;$46 = 0;
  } else {
   $8 = HEAP32[$rpos>>2]|0;
   $incdec$ptr39 = ((($8)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr39;
   $45 = -2147483648;$46 = 0;
  }
 }
 setTempRet0(($45) | 0);
 return ($46|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0, $spec$select = 0, $spec$select20 = 0.0;
 var $spec$select21 = 0, $spec$select22 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.9884656743115795E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($n|0)>(2046);
  $mul3 = $mul * 8.9884656743115795E+307;
  $sub4 = (($n) + -2046)|0;
  $0 = ($sub4|0)<(1023);
  $spec$store$select = $0 ? $sub4 : 1023;
  $spec$select = $cmp1 ? $spec$store$select : $sub;
  $spec$select20 = $cmp1 ? $mul3 : $mul;
  $n$addr$0 = $spec$select;$y$0 = $spec$select20;
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.2250738585072014E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($n|0)<(-2044);
   $mul13 = $mul10 * 2.2250738585072014E-308;
   $add14 = (($n) + 2044)|0;
   $1 = ($add14|0)>(-1022);
   $spec$store$select1 = $1 ? $add14 : -1022;
   $spec$select21 = $cmp11 ? $spec$store$select1 : $add;
   $spec$select22 = $cmp11 ? $mul13 : $mul10;
   $n$addr$0 = $spec$select21;$y$0 = $spec$select22;
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $2 = (_bitshift64Shl(($add21|0),0,52)|0);
 $3 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $4;
 return (+$mul22);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_copysign($x,$y));
 return (+$call);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_fmod($x,$y));
 return (+$call);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 return (+$call);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add128 = 0;
 var $add68 = 0, $cmp119 = 0, $cmp27 = 0, $cmp79 = 0, $cmp7965 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $div = 0.0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0;
 var $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $mul107 = 0.0, $mul42 = 0.0, $mul91 = 0.0, $or$cond = 0, $retval$0 = 0.0, $spec$select = 0.0, $tobool = 0, $tobool54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = (getTempRet0() | 0);
 $conv = $4 & 2047;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $10 = (getTempRet0() | 0);
 $11 = ($9|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_460($y)|0);
   $15 = (getTempRet0() | 0);
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $cmp27 = ($conv|0)==(2047);
   $or$cond = $cmp27 | $21;
   if ($or$cond) {
    label = 3;
   } else {
    $22 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $23 = (getTempRet0() | 0);
    $24 = ($23>>>0)>($10>>>0);
    $25 = ($22>>>0)>($9>>>0);
    $26 = ($23|0)==($10|0);
    $27 = $26 & $25;
    $28 = $24 | $27;
    if (!($28)) {
     $29 = ($22|0)==($9|0);
     $30 = ($23|0)==($10|0);
     $31 = $29 & $30;
     $mul42 = $x * 0.0;
     $spec$select = $31 ? $mul42 : $x;
     return (+$spec$select);
    }
    $tobool = ($conv|0)==(0);
    if ($tobool) {
     $32 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $33 = (getTempRet0() | 0);
     $34 = ($33|0)>(-1);
     $35 = ($32>>>0)>(4294967295);
     $36 = ($33|0)==(-1);
     $37 = $36 & $35;
     $38 = $34 | $37;
     if ($38) {
      $39 = $32;$40 = $33;$ex$081 = 0;
      while(1) {
       $dec = (($ex$081) + -1)|0;
       $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
       $42 = (getTempRet0() | 0);
       $43 = ($42|0)>(-1);
       $44 = ($41>>>0)>(4294967295);
       $45 = ($42|0)==(-1);
       $46 = $45 & $44;
       $47 = $43 | $46;
       if ($47) {
        $39 = $41;$40 = $42;$ex$081 = $dec;
       } else {
        $ex$0$lcssa = $dec;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $add = (1 - ($ex$0$lcssa))|0;
     $48 = (_bitshift64Shl(($0|0),($1|0),($add|0))|0);
     $49 = (getTempRet0() | 0);
     $72 = $48;$73 = $49;$ex$1 = $ex$0$lcssa;
    } else {
     $50 = $1 & 1048575;
     $51 = $50 | 1048576;
     $72 = $0;$73 = $51;$ex$1 = $conv;
    }
    $tobool54 = ($conv5|0)==(0);
    if ($tobool54) {
     $52 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $53 = (getTempRet0() | 0);
     $54 = ($53|0)>(-1);
     $55 = ($52>>>0)>(4294967295);
     $56 = ($53|0)==(-1);
     $57 = $56 & $55;
     $58 = $54 | $57;
     if ($58) {
      $59 = $52;$60 = $53;$ey$077 = 0;
      while(1) {
       $dec64 = (($ey$077) + -1)|0;
       $61 = (_bitshift64Shl(($59|0),($60|0),1)|0);
       $62 = (getTempRet0() | 0);
       $63 = ($62|0)>(-1);
       $64 = ($61>>>0)>(4294967295);
       $65 = ($62|0)==(-1);
       $66 = $65 & $64;
       $67 = $63 | $66;
       if ($67) {
        $59 = $61;$60 = $62;$ey$077 = $dec64;
       } else {
        $ey$0$lcssa = $dec64;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $add68 = (1 - ($ey$0$lcssa))|0;
     $68 = (_bitshift64Shl(($2|0),($3|0),($add68|0))|0);
     $69 = (getTempRet0() | 0);
     $74 = $68;$75 = $69;$ey$1 = $ey$0$lcssa;
    } else {
     $70 = $3 & 1048575;
     $71 = $70 | 1048576;
     $74 = $2;$75 = $71;$ey$1 = $conv5;
    }
    $cmp7965 = ($ex$1|0)>($ey$1|0);
    $76 = (_i64Subtract(($72|0),($73|0),($74|0),($75|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = ($77|0)>(-1);
    $79 = ($76>>>0)>(4294967295);
    $80 = ($77|0)==(-1);
    $81 = $80 & $79;
    $82 = $78 | $81;
    L25: do {
     if ($cmp7965) {
      $136 = $72;$137 = $73;$84 = $76;$86 = $77;$cmp8571 = $82;$ex$268 = $ex$1;
      while(1) {
       if ($cmp8571) {
        $83 = ($84|0)==(0);
        $85 = ($86|0)==(0);
        $87 = $83 & $85;
        if ($87) {
         break;
        } else {
         $88 = $84;$89 = $86;
        }
       } else {
        $88 = $136;$89 = $137;
       }
       $90 = (_bitshift64Shl(($88|0),($89|0),1)|0);
       $91 = (getTempRet0() | 0);
       $dec96 = (($ex$268) + -1)|0;
       $cmp79 = ($dec96|0)>($ey$1|0);
       $92 = (_i64Subtract(($90|0),($91|0),($74|0),($75|0))|0);
       $93 = (getTempRet0() | 0);
       $94 = ($93|0)>(-1);
       $95 = ($92>>>0)>(4294967295);
       $96 = ($93|0)==(-1);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($cmp79) {
        $136 = $90;$137 = $91;$84 = $92;$86 = $93;$cmp8571 = $98;$ex$268 = $dec96;
       } else {
        $100 = $92;$102 = $93;$134 = $90;$135 = $91;$cmp85$lcssa = $98;$ex$2$lcssa = $dec96;
        break L25;
       }
      }
      $mul91 = $x * 0.0;
      $retval$0 = $mul91;
      break L1;
     } else {
      $100 = $76;$102 = $77;$134 = $72;$135 = $73;$cmp85$lcssa = $82;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($cmp85$lcssa) {
     $99 = ($100|0)==(0);
     $101 = ($102|0)==(0);
     $103 = $99 & $101;
     if ($103) {
      $mul107 = $x * 0.0;
      $retval$0 = $mul107;
      break;
     } else {
      $105 = $102;$107 = $100;
     }
    } else {
     $105 = $135;$107 = $134;
    }
    $104 = ($105>>>0)<(1048576);
    $106 = ($107>>>0)<(0);
    $108 = ($105|0)==(1048576);
    $109 = $108 & $106;
    $110 = $104 | $109;
    if ($110) {
     $111 = $107;$112 = $105;$ex$362 = $ex$2$lcssa;
     while(1) {
      $113 = (_bitshift64Shl(($111|0),($112|0),1)|0);
      $114 = (getTempRet0() | 0);
      $dec117 = (($ex$362) + -1)|0;
      $115 = ($114>>>0)<(1048576);
      $116 = ($113>>>0)<(0);
      $117 = ($114|0)==(1048576);
      $118 = $117 & $116;
      $119 = $115 | $118;
      if ($119) {
       $111 = $113;$112 = $114;$ex$362 = $dec117;
      } else {
       $120 = $113;$121 = $114;$ex$3$lcssa = $dec117;
       break;
      }
     }
    } else {
     $120 = $107;$121 = $105;$ex$3$lcssa = $ex$2$lcssa;
    }
    $cmp119 = ($ex$3$lcssa|0)>(0);
    if ($cmp119) {
     $122 = (_i64Add(($120|0),($121|0),0,-1048576)|0);
     $123 = (getTempRet0() | 0);
     $124 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $125 = (getTempRet0() | 0);
     $126 = $122 | $124;
     $127 = $123 | $125;
     $131 = $127;$132 = $126;
    } else {
     $add128 = (1 - ($ex$3$lcssa))|0;
     $128 = (_bitshift64Lshr(($120|0),($121|0),($add128|0))|0);
     $129 = (getTempRet0() | 0);
     $131 = $129;$132 = $128;
    }
    $130 = $131 | $8;
    HEAP32[tempDoublePtr>>2] = $132;HEAP32[tempDoublePtr+4>>2] = $130;$133 = +HEAPF64[tempDoublePtr>>3];
    $retval$0 = $133;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $mul = $x * $y;
  $div = $mul / $mul;
  $retval$0 = $div;
 }
 return (+$retval$0);
}
function ___DOUBLE_BITS_460($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function ___lock($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___unlock($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $conv11 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017 = 0, $n$addr$017$in = 0, $or$cond = 0, $or$cond12 = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0, $sub = 0;
 var $tobool = 0, $tobool1 = 0, $tobool114 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $tobool114 = ($0<<24>>24)==(0);
  L3: do {
   if ($tobool114) {
    $$lcssa = 0;$r$0$lcssa = $_r;
   } else {
    $2 = $0;$l$015 = $_l;$n$addr$017$in = $n;$r$016 = $_r;
    while(1) {
     $n$addr$017 = (($n$addr$017$in) + -1)|0;
     $1 = HEAP8[$r$016>>0]|0;
     $tobool3 = ($1<<24>>24)!=(0);
     $tobool5 = ($n$addr$017|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond12 = $cmp & $or$cond;
     if (!($or$cond12)) {
      $$lcssa = $2;$r$0$lcssa = $r$016;
      break L3;
     }
     $incdec$ptr = ((($l$015)) + 1|0);
     $incdec$ptr9 = ((($r$016)) + 1|0);
     $3 = HEAP8[$incdec$ptr>>0]|0;
     $tobool1 = ($3<<24>>24)==(0);
     if ($tobool1) {
      $$lcssa = 0;$r$0$lcssa = $incdec$ptr9;
      break;
     } else {
      $2 = $3;$l$015 = $incdec$ptr;$n$addr$017$in = $n$addr$017;$r$016 = $incdec$ptr9;
     }
    }
   }
  } while(0);
  $conv11 = $$lcssa&255;
  $4 = HEAP8[$r$0$lcssa>>0]|0;
  $conv12 = $4&255;
  $sub = (($conv11) - ($conv12))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(128416|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 61;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,166,167)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_636($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_636($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 159906;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (159907) : (159912);
  $spec$select416 = $tobool9 ? $$ : (159909);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 159925 : 159929;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 159933 : 159937;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_633($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_633($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (128112 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_633($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_633($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_633($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_633($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_633($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_633($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,159941,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_633($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,159941,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_633($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_633($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 255]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 61;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((127648 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 159889;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 159889;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 159889 : (159891);
       $spec$select205 = $tobool291 ? $$ : (159890);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 159889;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 159889;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 159899 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 159889;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_633($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 255]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 159889;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (159889 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 159889 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_633($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_633($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_633($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_633($f,48,$w$2,$add436,$xor444);
    _pad_633($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_633($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 255]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (128112 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _pad_633($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_273()|0);
   $locale = ((($call)) + 176|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 25;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 25;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_273() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 255]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 255]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_636($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $cmp = ($call1|0)!=($call|0);
 $sub = $cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___unlist_locked_file($f) {
 $f = $f|0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $lockcount = 0, $next_locked = 0, $next_locked10 = 0, $prev_locked4 = 0, $stdio_locks = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lockcount = ((($f)) + 68|0);
 $0 = HEAP32[$lockcount>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $next_locked = ((($f)) + 132|0);
  $1 = HEAP32[$next_locked>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $2 = $1;
  $$pre = ((($f)) + 128|0);
  if (!($tobool1)) {
   $3 = HEAP32[$$pre>>2]|0;
   $prev_locked4 = ((($1)) + 128|0);
   HEAP32[$prev_locked4>>2] = $3;
  }
  $4 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($4|0)==(0|0);
  if ($tobool6) {
   $call = (___pthread_self_577()|0);
   $stdio_locks = ((($call)) + 220|0);
   $$sink = $stdio_locks;
  } else {
   $next_locked10 = ((($4)) + 132|0);
   $$sink = $next_locked10;
  }
  HEAP32[$$sink>>2] = $2;
 }
 return;
}
function ___pthread_self_577() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 255]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $conv = 0, $or = 0, $retval$0 = 0, $tobool = 0, $tobool9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(159943,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = (___fmodeflags($mode)|0);
  $1 = $filename;
  $or = $call2 | 32768;
  HEAP32[$vararg_buffer>>2] = 438;
  $call3 = (___syscall5(($1|0),($or|0),($vararg_buffer|0))|0);
  $call4 = (___syscall_ret($call3)|0);
  $cmp = ($call4|0)<(0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call8 = (___fdopen($call4,$mode)|0);
   $tobool9 = ($call8|0)==(0|0);
   if ($tobool9) {
    (___wasi_fd_close(($call4|0))|0);
    $retval$0 = 0;
   } else {
    $retval$0 = $call8;
   }
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $0 = 0, $call = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp27 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $or = 0, $or12 = 0, $or18 = 0, $or24 = 0, $or30 = 0, $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0;
 var $tobool = 0, $tobool10 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strchr($mode,43)|0);
 $tobool = ($call|0)==(0|0);
 $0 = HEAP8[$mode>>0]|0;
 $cmp = ($0<<24>>24)!=(114);
 $$ = $cmp&1;
 $flags$0 = $tobool ? $$ : 2;
 $call5 = (_strchr($mode,120)|0);
 $tobool6 = ($call5|0)==(0|0);
 $or = $flags$0 | 128;
 $spec$select = $tobool6 ? $flags$0 : $or;
 $call9 = (_strchr($mode,101)|0);
 $tobool10 = ($call9|0)==(0|0);
 $or12 = $spec$select | 524288;
 $flags$2 = $tobool10 ? $spec$select : $or12;
 $cmp15 = ($0<<24>>24)==(114);
 $or18 = $flags$2 | 64;
 $spec$select13 = $cmp15 ? $flags$2 : $or18;
 $cmp21 = ($0<<24>>24)==(119);
 $or24 = $spec$select13 | 512;
 $flags$4 = $cmp21 ? $or24 : $spec$select13;
 $cmp27 = ($0<<24>>24)==(97);
 $or30 = $flags$4 | 1024;
 $spec$select14 = $cmp27 ? $or30 : $flags$4;
 return ($spec$select14|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr27 = 0, $and = 0, $and29 = 0, $buf = 0, $buf_size = 0, $call = 0, $call1 = 0, $call18 = 0, $call2 = 0, $call31 = 0, $call39 = 0, $call7 = 0;
 var $close = 0, $cmp = 0, $cmp14 = 0, $cond = 0, $conv = 0, $fd26 = 0, $lock = 0, $or = 0, $or24 = 0, $read = 0, $retval$0 = 0, $seek = 0, $tobool = 0, $tobool19 = 0, $tobool3 = 0, $tobool30 = 0, $tobool32 = 0, $tobool36 = 0, $tobool8 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $wsz = sp + 24|0;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(159943,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = (_malloc(1176)|0);
  $tobool3 = ($call2|0)==(0|0);
  if ($tobool3) {
   $retval$0 = 0;
  } else {
   (_memset(($call2|0),0,144)|0);
   $call7 = (_strchr($mode,43)|0);
   $tobool8 = ($call7|0)==(0|0);
   $1 = HEAP8[$mode>>0]|0;
   if ($tobool8) {
    $cmp = ($1<<24>>24)==(114);
    $cond = $cmp ? 8 : 4;
    HEAP32[$call2>>2] = $cond;
   }
   $cmp14 = ($1<<24>>24)==(97);
   if ($cmp14) {
    $call18 = (___syscall221(($fd|0),3,($vararg_buffer|0))|0);
    $and = $call18 & 1024;
    $tobool19 = ($and|0)==(0);
    if ($tobool19) {
     $or = $call18 | 1024;
     HEAP32[$vararg_buffer1>>2] = $or;
     (___syscall221(($fd|0),4,($vararg_buffer1|0))|0);
    }
    $2 = HEAP32[$call2>>2]|0;
    $or24 = $2 | 128;
    HEAP32[$call2>>2] = $or24;
    $4 = $or24;
   } else {
    $$pre = HEAP32[$call2>>2]|0;
    $4 = $$pre;
   }
   $fd26 = ((($call2)) + 60|0);
   HEAP32[$fd26>>2] = $fd;
   $add$ptr27 = ((($call2)) + 152|0);
   $buf = ((($call2)) + 44|0);
   HEAP32[$buf>>2] = $add$ptr27;
   $buf_size = ((($call2)) + 48|0);
   HEAP32[$buf_size>>2] = 1024;
   $3 = ((($call2)) + 75|0);
   HEAP8[$3>>0] = -1;
   $and29 = $4 & 8;
   $tobool30 = ($and29|0)==(0);
   if ($tobool30) {
    $5 = $wsz;
    HEAP32[$vararg_buffer3>>2] = $5;
    $call31 = (___syscall54(($fd|0),21523,($vararg_buffer3|0))|0);
    $tobool32 = ($call31|0)==(0);
    if ($tobool32) {
     HEAP8[$3>>0] = 10;
    }
   }
   $read = ((($call2)) + 32|0);
   HEAP32[$read>>2] = 168;
   $write = ((($call2)) + 36|0);
   HEAP32[$write>>2] = 118;
   $seek = ((($call2)) + 40|0);
   HEAP32[$seek>>2] = 121;
   $close = ((($call2)) + 12|0);
   HEAP32[$close>>2] = 120;
   $6 = HEAP32[(400888)>>2]|0;
   $tobool36 = ($6|0)==(0);
   if ($tobool36) {
    $lock = ((($call2)) + 76|0);
    HEAP32[$lock>>2] = -1;
   }
   $call39 = (___ofl_add($call2)|0);
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___ofl_add($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $next = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ofl_lock()|0);
 $0 = HEAP32[$call>>2]|0;
 $next = ((($f)) + 56|0);
 HEAP32[$next>>2] = $0;
 $1 = HEAP32[$call>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $prev = ((($1)) + 52|0);
  HEAP32[$prev>>2] = $f;
 }
 HEAP32[$call>>2] = $f;
 ___ofl_unlock();
 return ($f|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock(400952);
 return (400960|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock(400952);
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call1 = 0, $call18 = 0, $call19 = 0, $close = 0, $cmp = 0, $cmp13 = 0, $cond = 0;
 var $getln_buf = 0, $lock = 0, $next5 = 0, $or = 0, $prev = 0, $prev11 = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 ___unlist_locked_file($f);
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $call1 = (___ofl_lock()|0);
  $prev = ((($f)) + 52|0);
  $2 = HEAP32[$prev>>2]|0;
  $tobool2 = ($2|0)==(0|0);
  $3 = $2;
  $$pre = ((($f)) + 56|0);
  if (!($tobool2)) {
   $4 = HEAP32[$$pre>>2]|0;
   $next5 = ((($2)) + 56|0);
   HEAP32[$next5>>2] = $4;
  }
  $5 = HEAP32[$$pre>>2]|0;
  $tobool7 = ($5|0)==(0|0);
  $6 = $5;
  if (!($tobool7)) {
   $prev11 = ((($5)) + 52|0);
   HEAP32[$prev11>>2] = $3;
  }
  $7 = HEAP32[$call1>>2]|0;
  $cmp13 = ($7|0)==($f|0);
  if ($cmp13) {
   HEAP32[$call1>>2] = $6;
  }
  ___ofl_unlock();
 }
 $call18 = (_fflush($f)|0);
 $close = ((($f)) + 12|0);
 $8 = HEAP32[$close>>2]|0;
 $call19 = (FUNCTION_TABLE_ii[$8 & 255]($f)|0);
 $or = $call19 | $call18;
 $getln_buf = ((($f)) + 96|0);
 $9 = HEAP32[$getln_buf>>2]|0;
 $tobool20 = ($9|0)==(0|0);
 if (!($tobool20)) {
  _free($9);
 }
 if ($tobool) {
  $tobool26 = ($cond|0)==(0);
  if (!($tobool26)) {
   ___unlockfile($f);
  }
 } else {
  _free($f);
 }
 return ($or|0);
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[32478]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[32478]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 255]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 127]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 _memset(($f|0),0,144)|0;
 $read = ((($f)) + 32|0);
 HEAP32[$read>>2] = 169;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 $cookie = ((($f)) + 84|0);
 HEAP32[$cookie>>2] = $s;
 $call = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___string_read($f,$buf,$len)|0);
 return ($call|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $$pr = 0, $$pr233 = 0, $$pre = 0, $$pre370 = 0, $$pre372 = 0, $$pre373 = 0, $$pre374 = 0, $$pre375 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0;
 var $add$ptr87 = 0, $add282 = 0, $add291 = 0, $add300 = 0, $add329 = 0, $add350 = 0, $add382 = 0, $add393 = 0, $add420 = 0, $add442 = 0, $add97 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $arglist_current = 0, $arglist_next = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0;
 var $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx273 = 0, $arrayidx283 = 0, $arrayidx292 = 0, $arrayidx330 = 0, $arrayidx34 = 0, $arrayidx342 = 0, $arrayidx383 = 0, $arrayidx388 = 0, $arrayidx421 = 0, $arrayidx426 = 0, $arrayidx443 = 0, $arrayidx497 = 0, $arrayidx501 = 0, $arrayidx80 = 0, $base$0 = 0, $c$0304 = 0, $call = 0;
 var $call1 = 0, $call14 = 0, $call153 = 0, $call156 = 0, $call17 = 0, $call187 = 0, $call310 = 0, $call326 = 0, $call335 = 0, $call352 = 0, $call358 = 0, $call365 = 0, $call379 = 0, $call395 = 0, $call4 = 0, $call417 = 0, $call439 = 0, $call51 = 0, $call529 = 0.0, $call78 = 0;
 var $call86 = 0, $call93 = 0, $call93297 = 0, $cmp = 0, $cmp101 = 0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp146 = 0, $cmp180 = 0, $cmp190 = 0, $cmp202 = 0, $cmp202$not = 0, $cmp205 = 0, $cmp223 = 0, $cmp277 = 0, $cmp277303 = 0, $cmp304 = 0, $cmp319 = 0, $cmp32 = 0;
 var $cmp346 = 0, $cmp372 = 0, $cmp389 = 0, $cmp410 = 0, $cmp432 = 0, $cmp44 = 0, $cmp520 = 0, $cmp55 = 0, $cmp65 = 0, $cmp7 = 0, $cmp82 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0;
 var $conv = 0, $conv12 = 0, $conv131 = 0, $conv151 = 0, $conv238 = 0, $conv247 = 0, $conv274 = 0, $conv276 = 0, $conv289$pre$phiZ2D = 0, $conv290 = 0, $conv3 = 0, $conv324 = 0, $conv334 = 0, $conv35 = 0, $conv377 = 0, $conv386 = 0, $conv41 = 0, $conv415 = 0, $conv424 = 0, $conv437 = 0;
 var $conv49 = 0, $conv54 = 0, $conv544 = 0.0, $conv85 = 0, $conv92 = 0, $conv92296 = 0, $conv96 = 0, $dest$0 = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor235 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0;
 var $i$3 = 0, $i$4 = 0, $inc341 = 0, $inc387 = 0, $inc425 = 0, $inc561 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr11 = 0, $incdec$ptr115 = 0, $incdec$ptr123 = 0, $incdec$ptr150 = 0, $incdec$ptr164 = 0, $incdec$ptr184 = 0, $incdec$ptr198 = 0, $incdec$ptr221 = 0, $incdec$ptr226 = 0, $incdec$ptr236 = 0, $incdec$ptr245 = 0, $incdec$ptr25 = 0;
 var $incdec$ptr294 = 0, $incdec$ptr323 = 0, $incdec$ptr376 = 0, $incdec$ptr414 = 0, $incdec$ptr436 = 0, $incdec$ptr454 = 0, $incdec$ptr48 = 0, $incdec$ptr564 = 0, $incdec$ptr62 = 0, $incdec$ptr76 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $lnot$ext = 0, $lock = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0;
 var $mul = 0, $mul309 = 0, $mul351 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond221 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0;
 var $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $spec$select220 = 0;
 var $spec$select222 = 0, $spec$select223 = 0, $spec$select224 = 0, $spec$select225 = 0, $spec$select226 = 0, $st = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub237 = 0, $sub246 = 0, $sub98 = 0, $tobool = 0, $tobool104 = 0, $tobool157 = 0, $tobool161 = 0;
 var $tobool18 = 0, $tobool195 = 0, $tobool2 = 0, $tobool22 = 0, $tobool305 = 0, $tobool307 = 0, $tobool311 = 0, $tobool331 = 0, $tobool339 = 0, $tobool353 = 0, $tobool359 = 0, $tobool366 = 0, $tobool384 = 0, $tobool396 = 0, $tobool405 = 0, $tobool422 = 0, $tobool444 = 0, $tobool451 = 0, $tobool495 = 0, $tobool499 = 0;
 var $tobool5 = 0, $tobool523 = 0, $tobool541 = 0, $tobool559 = 0, $tobool567 = 0, $tobool567$old = 0, $tobool570 = 0, $tobool574 = 0, $tobool59 = 0, $tobool79 = 0, $tobool94 = 0, $tobool94298 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $st = sp + 264|0;
 $scanset = sp;
 $wc = sp + 260|0;
 $$compoundliteral333 = sp + 272|0;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $1 = HEAP8[$fmt>>0]|0;
 $tobool305 = ($1<<24>>24)==(0);
 L4: do {
  if ($tobool305) {
   $matches$3 = 0;
  } else {
   $rpos42 = ((($f)) + 4|0);
   $shend43 = ((($f)) + 104|0);
   $shcnt = ((($f)) + 120|0);
   $rend = ((($f)) + 8|0);
   $arrayidx213 = ((($scanset)) + 10|0);
   $arrayidx218 = ((($scanset)) + 33|0);
   $arrayidx239 = ((($scanset)) + 46|0);
   $arrayidx248 = ((($scanset)) + 94|0);
   $$compoundliteral$sroa$2$0$$sroa_idx8 = ((($st)) + 4|0);
   $178 = 0;$2 = $1;$20 = 0;$21 = 0;$matches$0308 = 0;$p$0312 = $fmt;$s$0306 = 0;
   L6: while(1) {
    $conv = $2&255;
    $call1 = (_isspace($conv)|0);
    $tobool2 = ($call1|0)==(0);
    L8: do {
     if ($tobool2) {
      $26 = HEAP8[$p$0312>>0]|0;
      $cmp32 = ($26<<24>>24)==(37);
      L10: do {
       if ($cmp32) {
        $arrayidx34 = ((($p$0312)) + 1|0);
        $27 = HEAP8[$arrayidx34>>0]|0;
        L12: do {
         switch ($27<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $incdec$ptr76 = ((($p$0312)) + 2|0);
          $dest$0 = 0;$p$2 = $incdec$ptr76;
          break;
         }
         default: {
          $conv35 = $27&255;
          $call78 = (_isdigit($conv35)|0);
          $tobool79 = ($call78|0)==(0);
          if (!($tobool79)) {
           $arrayidx80 = ((($p$0312)) + 2|0);
           $36 = HEAP8[$arrayidx80>>0]|0;
           $cmp82 = ($36<<24>>24)==(36);
           if ($cmp82) {
            $37 = HEAP8[$arrayidx34>>0]|0;
            $conv85 = $37&255;
            $sub = (($conv85) + -48)|0;
            $call86 = (_arg_n($ap,$sub)|0);
            $add$ptr87 = ((($p$0312)) + 3|0);
            $dest$0 = $call86;$p$2 = $add$ptr87;
            break L12;
           }
          }
          $arglist_current = HEAP32[$ap>>2]|0;
          $38 = $arglist_current;
          $39 = ((0) + 4|0);
          $expanded1 = $39;
          $expanded = (($expanded1) - 1)|0;
          $40 = (($38) + ($expanded))|0;
          $41 = ((0) + 4|0);
          $expanded5 = $41;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $42 = $40 & $expanded3;
          $43 = $42;
          $44 = HEAP32[$43>>2]|0;
          $arglist_next = ((($43)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next;
          $dest$0 = $44;$p$2 = $arrayidx34;
         }
         }
        } while(0);
        $45 = HEAP8[$p$2>>0]|0;
        $conv92296 = $45&255;
        $call93297 = (_isdigit($conv92296)|0);
        $tobool94298 = ($call93297|0)==(0);
        if ($tobool94298) {
         $p$3$lcssa = $p$2;$width$0$lcssa = 0;
        } else {
         $p$3299 = $p$2;$width$0300 = 0;
         while(1) {
          $mul = ($width$0300*10)|0;
          $46 = HEAP8[$p$3299>>0]|0;
          $conv96 = $46&255;
          $add97 = (($mul) + -48)|0;
          $sub98 = (($add97) + ($conv96))|0;
          $incdec$ptr99 = ((($p$3299)) + 1|0);
          $47 = HEAP8[$incdec$ptr99>>0]|0;
          $conv92 = $47&255;
          $call93 = (_isdigit($conv92)|0);
          $tobool94 = ($call93|0)==(0);
          if ($tobool94) {
           $p$3$lcssa = $incdec$ptr99;$width$0$lcssa = $sub98;
           break;
          } else {
           $p$3299 = $incdec$ptr99;$width$0300 = $sub98;
          }
         }
        }
        $48 = HEAP8[$p$3$lcssa>>0]|0;
        $cmp101 = ($48<<24>>24)==(109);
        $incdec$ptr106 = ((($p$3$lcssa)) + 1|0);
        if ($cmp101) {
         $tobool104 = ($dest$0|0)!=(0|0);
         $lnot$ext = $tobool104&1;
         $$pr = HEAP8[$incdec$ptr106>>0]|0;
         $$pre373 = ((($p$3$lcssa)) + 2|0);
         $183 = 0;$49 = $$pr;$alloc$0 = $lnot$ext;$incdec$ptr109$pre$phiZZ2D = $$pre373;$p$4 = $incdec$ptr106;$s$1 = 0;
        } else {
         $183 = $178;$49 = $48;$alloc$0 = 0;$incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;$p$4 = $p$3$lcssa;$s$1 = $s$0306;
        }
        switch ($49<<24>>24) {
        case 104:  {
         $50 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp112 = ($50<<24>>24)==(104);
         $incdec$ptr115 = ((($p$4)) + 2|0);
         $spec$select223 = $cmp112 ? $incdec$ptr115 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select224 = $cmp112 ? -2 : -1;
         $p$5 = $spec$select223;$size$0 = $spec$select224;
         break;
        }
        case 108:  {
         $51 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp120 = ($51<<24>>24)==(108);
         $incdec$ptr123 = ((($p$4)) + 2|0);
         $spec$select225 = $cmp120 ? $incdec$ptr123 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select226 = $cmp120 ? 3 : 1;
         $p$5 = $spec$select225;$size$0 = $spec$select226;
         break;
        }
        case 106:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $184 = $183;$s$8 = $s$1;
         label = 143;
         break L6;
        }
        }
        $52 = HEAP8[$p$5>>0]|0;
        $conv131 = $52&255;
        $and = $conv131 & 47;
        $cmp132 = ($and|0)==(3);
        $or = $conv131 | 32;
        $spec$select = $cmp132 ? $or : $conv131;
        $spec$select219 = $cmp132 ? 1 : $size$0;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $53 = ($width$0$lcssa|0)>(1);
         $spec$select220 = $53 ? $width$0$lcssa : 1;
         $170 = $20;$171 = $21;$width$1 = $spec$select220;
         break;
        }
        case 91:  {
         $170 = $20;$171 = $21;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         _store_int($dest$0,$spec$select219,$20,$21);
         $179 = $183;$180 = $20;$181 = $21;$matches$1 = $matches$0308;$p$12 = $p$5;$s$7 = $s$1;
         break L8;
         break;
        }
        default: {
         ___shlim($f,0,0);
         while(1) {
          $54 = HEAP32[$rpos42>>2]|0;
          $55 = HEAP32[$shend43>>2]|0;
          $cmp146 = ($54>>>0)<($55>>>0);
          if ($cmp146) {
           $incdec$ptr150 = ((($54)) + 1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr150;
           $56 = HEAP8[$54>>0]|0;
           $conv151 = $56&255;
           $cond155 = $conv151;
          } else {
           $call153 = (___shgetc($f)|0);
           $cond155 = $call153;
          }
          $call156 = (_isspace($cond155)|0);
          $tobool157 = ($call156|0)==(0);
          if ($tobool157) {
           break;
          }
         }
         $57 = HEAP32[$shend43>>2]|0;
         $tobool161 = ($57|0)==(0|0);
         if ($tobool161) {
          $$pre370 = HEAP32[$rpos42>>2]|0;
          $67 = $$pre370;
         } else {
          $58 = HEAP32[$rpos42>>2]|0;
          $incdec$ptr164 = ((($58)) + -1|0);
          HEAP32[$rpos42>>2] = $incdec$ptr164;
          $59 = $incdec$ptr164;
          $67 = $59;
         }
         $60 = $shcnt;
         $61 = $60;
         $62 = HEAP32[$61>>2]|0;
         $63 = (($60) + 4)|0;
         $64 = $63;
         $65 = HEAP32[$64>>2]|0;
         $66 = HEAP32[$rend>>2]|0;
         $sub$ptr$sub172 = (($67) - ($66))|0;
         $68 = ($sub$ptr$sub172|0)<(0);
         $69 = $68 << 31 >> 31;
         $70 = (_i64Add(($62|0),($65|0),($20|0),($21|0))|0);
         $71 = (getTempRet0() | 0);
         $72 = (_i64Add(($70|0),($71|0),($sub$ptr$sub172|0),($69|0))|0);
         $73 = (getTempRet0() | 0);
         $170 = $72;$171 = $73;$width$1 = $width$0$lcssa;
        }
        }
        $74 = ($width$1|0)<(0);
        $75 = $74 << 31 >> 31;
        ___shlim($f,$width$1,$75);
        $76 = HEAP32[$rpos42>>2]|0;
        $77 = HEAP32[$shend43>>2]|0;
        $cmp180 = ($76>>>0)<($77>>>0);
        if ($cmp180) {
         $incdec$ptr184 = ((($76)) + 1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr184;
         $78 = $77;
        } else {
         $call187 = (___shgetc($f)|0);
         $cmp190 = ($call187|0)<(0);
         if ($cmp190) {
          $184 = $183;$s$8 = $s$1;
          label = 143;
          break L6;
         }
         $$pr233 = HEAP32[$shend43>>2]|0;
         $78 = $$pr233;
        }
        $tobool195 = ($78|0)==(0|0);
        if (!($tobool195)) {
         $79 = HEAP32[$rpos42>>2]|0;
         $incdec$ptr198 = ((($79)) + -1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr198;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $cmp202 = ($spec$select|0)==(99);
          $80 = $spec$select | 16;
          $81 = ($80|0)==(115);
          L61: do {
           if ($81) {
            $cmp205 = ($spec$select|0)==(115);
            (_memset(($scanset|0),-1,257)|0);
            HEAP8[$scanset>>0] = 0;
            if ($cmp205) {
             HEAP8[$arrayidx218>>0] = 0;
             ;HEAP16[$arrayidx213>>1]=0|0;HEAP16[$arrayidx213+2>>1]=0|0;HEAP8[$arrayidx213+4>>0]=0|0;
             $p$10 = $p$5;
            } else {
             $p$10 = $p$5;
            }
           } else {
            $incdec$ptr221 = ((($p$5)) + 1|0);
            $82 = HEAP8[$incdec$ptr221>>0]|0;
            $cmp223 = ($82<<24>>24)==(94);
            $incdec$ptr226 = ((($p$5)) + 2|0);
            $invert$0 = $cmp223&1;
            $p$6 = $cmp223 ? $incdec$ptr226 : $incdec$ptr221;
            (_memset(($scanset|0),($invert$0|0),257)|0);
            HEAP8[$scanset>>0] = 0;
            $83 = HEAP8[$p$6>>0]|0;
            switch ($83<<24>>24) {
            case 45:  {
             $incdec$ptr236 = ((($p$6)) + 1|0);
             $sub237 = $invert$0 ^ 1;
             $conv238 = $sub237&255;
             HEAP8[$arrayidx239>>0] = $conv238;
             $conv289$pre$phiZ2D = $conv238;$p$7 = $incdec$ptr236;
             break;
            }
            case 93:  {
             $incdec$ptr245 = ((($p$6)) + 1|0);
             $sub246 = $invert$0 ^ 1;
             $conv247 = $sub246&255;
             HEAP8[$arrayidx248>>0] = $conv247;
             $conv289$pre$phiZ2D = $conv247;$p$7 = $incdec$ptr245;
             break;
            }
            default: {
             $$pre374 = $invert$0 ^ 1;
             $$pre375 = $$pre374&255;
             $conv289$pre$phiZ2D = $$pre375;$p$7 = $p$6;
            }
            }
            $p$8 = $p$7;
            while(1) {
             $84 = HEAP8[$p$8>>0]|0;
             L72: do {
              switch ($84<<24>>24) {
              case 0:  {
               $184 = $183;$s$8 = $s$1;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $p$10 = $p$8;
               break L61;
               break;
              }
              case 45:  {
               $arrayidx263 = ((($p$8)) + 1|0);
               $85 = HEAP8[$arrayidx263>>0]|0;
               switch ($85<<24>>24) {
               case 93: case 0:  {
                $88 = 45;$p$9 = $p$8;
                break L72;
                break;
               }
               default: {
               }
               }
               $arrayidx273 = ((($p$8)) + -1|0);
               $86 = HEAP8[$arrayidx273>>0]|0;
               $cmp277303 = ($86&255)<($85&255);
               if ($cmp277303) {
                $conv274 = $86&255;
                $c$0304 = $conv274;
                while(1) {
                 $add282 = (($c$0304) + 1)|0;
                 $arrayidx283 = (($scanset) + ($add282)|0);
                 HEAP8[$arrayidx283>>0] = $conv289$pre$phiZ2D;
                 $87 = HEAP8[$arrayidx263>>0]|0;
                 $conv276 = $87&255;
                 $cmp277 = ($add282>>>0)<($conv276>>>0);
                 if ($cmp277) {
                  $c$0304 = $add282;
                 } else {
                  $88 = $87;$p$9 = $arrayidx263;
                  break;
                 }
                }
               } else {
                $88 = $85;$p$9 = $arrayidx263;
               }
               break;
              }
              default: {
               $88 = $84;$p$9 = $p$8;
              }
              }
             } while(0);
             $conv290 = $88&255;
             $add291 = (($conv290) + 1)|0;
             $arrayidx292 = (($scanset) + ($add291)|0);
             HEAP8[$arrayidx292>>0] = $conv289$pre$phiZ2D;
             $incdec$ptr294 = ((($p$9)) + 1|0);
             $p$8 = $incdec$ptr294;
            }
           }
          } while(0);
          $add300 = (($width$1) + 1)|0;
          $cond303 = $cmp202 ? $add300 : 31;
          $cmp304 = ($spec$select219|0)==(1);
          $tobool307 = ($alloc$0|0)!=(0);
          L80: do {
           if ($cmp304) {
            if ($tobool307) {
             $mul309 = $cond303 << 2;
             $call310 = (_malloc($mul309)|0);
             $tobool311 = ($call310|0)==(0|0);
             if ($tobool311) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $186 = $call310;
             }
            } else {
             $186 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8>>2] = 0;
            $$ph$ph = $186;$i$0$ph$ph = 0;$k$0$ph$ph = $cond303;
            L85: while(1) {
             $tobool339 = ($$ph$ph|0)==(0|0);
             $i$0$ph = $i$0$ph$ph;
             while(1) {
              L89: while(1) {
               $89 = HEAP32[$rpos42>>2]|0;
               $90 = HEAP32[$shend43>>2]|0;
               $cmp319 = ($89>>>0)<($90>>>0);
               if ($cmp319) {
                $incdec$ptr323 = ((($89)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr323;
                $91 = HEAP8[$89>>0]|0;
                $conv324 = $91&255;
                $cond328 = $conv324;
               } else {
                $call326 = (___shgetc($f)|0);
                $cond328 = $call326;
               }
               $add329 = (($cond328) + 1)|0;
               $arrayidx330 = (($scanset) + ($add329)|0);
               $92 = HEAP8[$arrayidx330>>0]|0;
               $tobool331 = ($92<<24>>24)==(0);
               if ($tobool331) {
                break L85;
               }
               $conv334 = $cond328&255;
               HEAP8[$$compoundliteral333>>0] = $conv334;
               $call335 = (_mbrtowc($wc,$$compoundliteral333,1,$st)|0);
               switch ($call335|0) {
               case -1:  {
                $184 = $$ph$ph;$s$8 = 0;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($tobool339) {
               $i$1 = $i$0$ph;
              } else {
               $arrayidx342 = (($$ph$ph) + ($i$0$ph<<2)|0);
               $inc341 = (($i$0$ph) + 1)|0;
               $93 = HEAP32[$wc>>2]|0;
               HEAP32[$arrayidx342>>2] = $93;
               $i$1 = $inc341;
              }
              $cmp346 = ($i$1|0)==($k$0$ph$ph|0);
              $or$cond = $tobool307 & $cmp346;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph = $i$1;
              }
             }
             $factor235 = $k$0$ph$ph << 1;
             $add350 = $factor235 | 1;
             $mul351 = $add350 << 2;
             $call352 = (_realloc($$ph$ph,$mul351)|0);
             $tobool353 = ($call352|0)==(0|0);
             if ($tobool353) {
              $184 = $$ph$ph;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $$ph$ph = $call352;$i$0$ph$ph = $i$1;$k$0$ph$ph = $add350;
             }
            }
            $call358 = (_mbsinit($st)|0);
            $tobool359 = ($call358|0)==(0);
            if ($tobool359) {
             $184 = $$ph$ph;$s$8 = 0;
             label = 143;
             break L6;
            } else {
             $187 = $$ph$ph;$i$4 = $i$0$ph;$s$5 = 0;$wcs$6 = $$ph$ph;
            }
           } else {
            if ($tobool307) {
             $call365 = (_malloc($cond303)|0);
             $tobool366 = ($call365|0)==(0|0);
             if ($tobool366) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             }
             $i$2$ph = 0;$k$2$ph = $cond303;$s$2$ph = $call365;
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $94 = HEAP32[$rpos42>>2]|0;
               $95 = HEAP32[$shend43>>2]|0;
               $cmp372 = ($94>>>0)<($95>>>0);
               if ($cmp372) {
                $incdec$ptr376 = ((($94)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr376;
                $96 = HEAP8[$94>>0]|0;
                $conv377 = $96&255;
                $cond381 = $conv377;
               } else {
                $call379 = (___shgetc($f)|0);
                $cond381 = $call379;
               }
               $add382 = (($cond381) + 1)|0;
               $arrayidx383 = (($scanset) + ($add382)|0);
               $97 = HEAP8[$arrayidx383>>0]|0;
               $tobool384 = ($97<<24>>24)==(0);
               if ($tobool384) {
                $187 = 0;$i$4 = $i$2;$s$5 = $s$2$ph;$wcs$6 = 0;
                break L80;
               }
               $conv386 = $cond381&255;
               $inc387 = (($i$2) + 1)|0;
               $arrayidx388 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$arrayidx388>>0] = $conv386;
               $cmp389 = ($inc387|0)==($k$2$ph|0);
               if ($cmp389) {
                break;
               } else {
                $i$2 = $inc387;
               }
              }
              $factor = $k$2$ph << 1;
              $add393 = $factor | 1;
              $call395 = (_realloc($s$2$ph,$add393)|0);
              $tobool396 = ($call395|0)==(0|0);
              if ($tobool396) {
               $184 = 0;$s$8 = $s$2$ph;
               label = 143;
               break L6;
              } else {
               $i$2$ph = $inc387;$k$2$ph = $add393;$s$2$ph = $call395;
              }
             }
            }
            $tobool405 = ($dest$0|0)==(0|0);
            if ($tobool405) {
             while(1) {
              $102 = HEAP32[$rpos42>>2]|0;
              $103 = HEAP32[$shend43>>2]|0;
              $cmp432 = ($102>>>0)<($103>>>0);
              if ($cmp432) {
               $incdec$ptr436 = ((($102)) + 1|0);
               HEAP32[$rpos42>>2] = $incdec$ptr436;
               $104 = HEAP8[$102>>0]|0;
               $conv437 = $104&255;
               $cond441 = $conv437;
              } else {
               $call439 = (___shgetc($f)|0);
               $cond441 = $call439;
              }
              $add442 = (($cond441) + 1)|0;
              $arrayidx443 = (($scanset) + ($add442)|0);
              $105 = HEAP8[$arrayidx443>>0]|0;
              $tobool444 = ($105<<24>>24)==(0);
              if ($tobool444) {
               $187 = 0;$i$4 = 0;$s$5 = 0;$wcs$6 = 0;
               break L80;
              }
             }
            }
            $i$3 = 0;
            while(1) {
             $98 = HEAP32[$rpos42>>2]|0;
             $99 = HEAP32[$shend43>>2]|0;
             $cmp410 = ($98>>>0)<($99>>>0);
             if ($cmp410) {
              $incdec$ptr414 = ((($98)) + 1|0);
              HEAP32[$rpos42>>2] = $incdec$ptr414;
              $100 = HEAP8[$98>>0]|0;
              $conv415 = $100&255;
              $cond419 = $conv415;
             } else {
              $call417 = (___shgetc($f)|0);
              $cond419 = $call417;
             }
             $add420 = (($cond419) + 1)|0;
             $arrayidx421 = (($scanset) + ($add420)|0);
             $101 = HEAP8[$arrayidx421>>0]|0;
             $tobool422 = ($101<<24>>24)==(0);
             if ($tobool422) {
              $187 = 0;$i$4 = $i$3;$s$5 = $dest$0;$wcs$6 = 0;
              break L80;
             }
             $conv424 = $cond419&255;
             $inc425 = (($i$3) + 1)|0;
             $arrayidx426 = (($dest$0) + ($i$3)|0);
             HEAP8[$arrayidx426>>0] = $conv424;
             $i$3 = $inc425;
            }
           }
          } while(0);
          $106 = HEAP32[$shend43>>2]|0;
          $tobool451 = ($106|0)==(0|0);
          if ($tobool451) {
           $$pre372 = HEAP32[$rpos42>>2]|0;
           $116 = $$pre372;
          } else {
           $107 = HEAP32[$rpos42>>2]|0;
           $incdec$ptr454 = ((($107)) + -1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr454;
           $108 = $incdec$ptr454;
           $116 = $108;
          }
          $109 = $shcnt;
          $110 = $109;
          $111 = HEAP32[$110>>2]|0;
          $112 = (($109) + 4)|0;
          $113 = $112;
          $114 = HEAP32[$113>>2]|0;
          $115 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub462 = (($116) - ($115))|0;
          $117 = ($sub$ptr$sub462|0)<(0);
          $118 = $117 << 31 >> 31;
          $119 = (_i64Add(($111|0),($114|0),($sub$ptr$sub462|0),($118|0))|0);
          $120 = (getTempRet0() | 0);
          $121 = ($119|0)==(0);
          $122 = ($120|0)==(0);
          $123 = $121 & $122;
          if ($123) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          $cmp202$not = $cmp202 ^ 1;
          $124 = ($119|0)==($width$1|0);
          $125 = ($120|0)==($75|0);
          $126 = $124 & $125;
          $or$cond221 = $126 | $cmp202$not;
          if (!($or$cond221)) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          do {
           if ($tobool307) {
            if ($cmp304) {
             HEAP32[$dest$0>>2] = $wcs$6;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$5;
             break;
            }
           }
          } while(0);
          if ($cmp202) {
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          } else {
           $tobool495 = ($wcs$6|0)==(0|0);
           if (!($tobool495)) {
            $arrayidx497 = (($wcs$6) + ($i$4<<2)|0);
            HEAP32[$arrayidx497>>2] = 0;
           }
           $tobool499 = ($s$5|0)==(0|0);
           if ($tobool499) {
            $185 = $187;$p$11 = $p$10;$s$6 = 0;
            break L59;
           }
           $arrayidx501 = (($s$5) + ($i$4)|0);
           HEAP8[$arrayidx501>>0] = 0;
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $call529 = (+___floatscan($f,$spec$select219,0));
          $145 = $shcnt;
          $146 = $145;
          $147 = HEAP32[$146>>2]|0;
          $148 = (($145) + 4)|0;
          $149 = $148;
          $150 = HEAP32[$149>>2]|0;
          $151 = HEAP32[$rpos42>>2]|0;
          $152 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub535 = (($151) - ($152))|0;
          $153 = ($sub$ptr$sub535|0)<(0);
          $154 = $153 << 31 >> 31;
          $155 = (_i64Subtract(0,0,($sub$ptr$sub535|0),($154|0))|0);
          $156 = (getTempRet0() | 0);
          $157 = ($147|0)==($155|0);
          $158 = ($150|0)==($156|0);
          $159 = $157 & $158;
          if ($159) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $tobool541 = ($dest$0|0)==(0|0);
          if ($tobool541) {
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
          } else {
           switch ($spec$select219|0) {
           case 0:  {
            $conv544 = $call529;
            HEAPF32[$dest$0>>2] = $conv544;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           default: {
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $127 = (___intscan($f,$base$0,0,-1,-1)|0);
          $128 = (getTempRet0() | 0);
          $129 = $shcnt;
          $130 = $129;
          $131 = HEAP32[$130>>2]|0;
          $132 = (($129) + 4)|0;
          $133 = $132;
          $134 = HEAP32[$133>>2]|0;
          $135 = HEAP32[$rpos42>>2]|0;
          $136 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub514 = (($135) - ($136))|0;
          $137 = ($sub$ptr$sub514|0)<(0);
          $138 = $137 << 31 >> 31;
          $139 = (_i64Subtract(0,0,($sub$ptr$sub514|0),($138|0))|0);
          $140 = (getTempRet0() | 0);
          $141 = ($131|0)==($139|0);
          $142 = ($134|0)==($140|0);
          $143 = $141 & $142;
          if ($143) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $cmp520 = ($spec$select|0)==(112);
          $tobool523 = ($dest$0|0)!=(0|0);
          $or$cond1 = $tobool523 & $cmp520;
          if ($or$cond1) {
           $144 = $127;
           HEAP32[$dest$0>>2] = $144;
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          } else {
           _store_int($dest$0,$spec$select219,$127,$128);
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          }
         }
        } while(0);
        $160 = $shcnt;
        $161 = $160;
        $162 = HEAP32[$161>>2]|0;
        $163 = (($160) + 4)|0;
        $164 = $163;
        $165 = HEAP32[$164>>2]|0;
        $166 = HEAP32[$rpos42>>2]|0;
        $167 = HEAP32[$rend>>2]|0;
        $sub$ptr$sub555 = (($166) - ($167))|0;
        $168 = ($sub$ptr$sub555|0)<(0);
        $169 = $168 << 31 >> 31;
        $172 = (_i64Add(($162|0),($165|0),($170|0),($171|0))|0);
        $173 = (getTempRet0() | 0);
        $174 = (_i64Add(($172|0),($173|0),($sub$ptr$sub555|0),($169|0))|0);
        $175 = (getTempRet0() | 0);
        $tobool559 = ($dest$0|0)!=(0|0);
        $inc561 = $tobool559&1;
        $spec$select222 = (($matches$0308) + ($inc561))|0;
        $179 = $185;$180 = $174;$181 = $175;$matches$1 = $spec$select222;$p$12 = $p$11;$s$7 = $s$6;
        break L8;
       }
      } while(0);
      $conv41 = $cmp32&1;
      $add$ptr = (($p$0312) + ($conv41)|0);
      ___shlim($f,0,0);
      $28 = HEAP32[$rpos42>>2]|0;
      $29 = HEAP32[$shend43>>2]|0;
      $cmp44 = ($28>>>0)<($29>>>0);
      if ($cmp44) {
       $incdec$ptr48 = ((($28)) + 1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr48;
       $30 = HEAP8[$28>>0]|0;
       $conv49 = $30&255;
       $cond53 = $conv49;
      } else {
       $call51 = (___shgetc($f)|0);
       $cond53 = $call51;
      }
      $31 = HEAP8[$add$ptr>>0]|0;
      $conv54 = $31&255;
      $cmp55 = ($cond53|0)==($conv54|0);
      if (!($cmp55)) {
       label = 23;
       break L6;
      }
      $34 = (_i64Add(($20|0),($21|0),1,0)|0);
      $35 = (getTempRet0() | 0);
      $179 = $178;$180 = $34;$181 = $35;$matches$1 = $matches$0308;$p$12 = $add$ptr;$s$7 = $s$0306;
     } else {
      $p$1 = $p$0312;
      while(1) {
       $arrayidx = ((($p$1)) + 1|0);
       $3 = HEAP8[$arrayidx>>0]|0;
       $conv3 = $3&255;
       $call4 = (_isspace($conv3)|0);
       $tobool5 = ($call4|0)==(0);
       if ($tobool5) {
        break;
       } else {
        $p$1 = $arrayidx;
       }
      }
      ___shlim($f,0,0);
      while(1) {
       $4 = HEAP32[$rpos42>>2]|0;
       $5 = HEAP32[$shend43>>2]|0;
       $cmp7 = ($4>>>0)<($5>>>0);
       if ($cmp7) {
        $incdec$ptr11 = ((($4)) + 1|0);
        HEAP32[$rpos42>>2] = $incdec$ptr11;
        $6 = HEAP8[$4>>0]|0;
        $conv12 = $6&255;
        $cond16 = $conv12;
       } else {
        $call14 = (___shgetc($f)|0);
        $cond16 = $call14;
       }
       $call17 = (_isspace($cond16)|0);
       $tobool18 = ($call17|0)==(0);
       if ($tobool18) {
        break;
       }
      }
      $7 = HEAP32[$shend43>>2]|0;
      $tobool22 = ($7|0)==(0|0);
      if ($tobool22) {
       $$pre = HEAP32[$rpos42>>2]|0;
       $17 = $$pre;
      } else {
       $8 = HEAP32[$rpos42>>2]|0;
       $incdec$ptr25 = ((($8)) + -1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr25;
       $9 = $incdec$ptr25;
       $17 = $9;
      }
      $10 = $shcnt;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($10) + 4)|0;
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$rend>>2]|0;
      $sub$ptr$sub = (($17) - ($16))|0;
      $18 = ($sub$ptr$sub|0)<(0);
      $19 = $18 << 31 >> 31;
      $22 = (_i64Add(($12|0),($15|0),($20|0),($21|0))|0);
      $23 = (getTempRet0() | 0);
      $24 = (_i64Add(($22|0),($23|0),($sub$ptr$sub|0),($19|0))|0);
      $25 = (getTempRet0() | 0);
      $179 = $178;$180 = $24;$181 = $25;$matches$1 = $matches$0308;$p$12 = $p$1;$s$7 = $s$0306;
     }
    } while(0);
    $incdec$ptr564 = ((($p$12)) + 1|0);
    $176 = HEAP8[$incdec$ptr564>>0]|0;
    $tobool = ($176<<24>>24)==(0);
    if ($tobool) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $178 = $179;$2 = $176;$20 = $180;$21 = $181;$matches$0308 = $matches$1;$p$0312 = $incdec$ptr564;$s$0306 = $s$7;
    }
   }
   if ((label|0) == 23) {
    $32 = HEAP32[$shend43>>2]|0;
    $tobool59 = ($32|0)==(0|0);
    if (!($tobool59)) {
     $33 = HEAP32[$rpos42>>2]|0;
     $incdec$ptr62 = ((($33)) + -1|0);
     HEAP32[$rpos42>>2] = $incdec$ptr62;
    }
    $cmp65 = ($cond53|0)>(-1);
    $tobool567 = ($matches$0308|0)!=(0);
    $or$cond2 = $tobool567 | $cmp65;
    if ($or$cond2) {
     $matches$3 = $matches$0308;
     break;
    } else {
     $182 = $178;$alloc$1 = 0;$s$9 = $s$0306;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $tobool567$old = ($matches$0308|0)==(0);
    if ($tobool567$old) {
     $182 = $184;$alloc$1 = $alloc$0;$s$9 = $s$8;
     label = 144;
    } else {
     $177 = $184;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$8;
    }
   }
   if ((label|0) == 144) {
    $177 = $182;$alloc$2 = $alloc$1;$matches$2 = -1;$s$10 = $s$9;
   }
   $tobool570 = ($alloc$2|0)==(0);
   if ($tobool570) {
    $matches$3 = $matches$2;
   } else {
    _free($s$10);
    _free($177);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $tobool574 = ($cond|0)==(0);
 if (!($tobool574)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _arg_n($ap,$n) {
 $ap = $ap|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ap2 = 0, $arglist_current = 0, $arglist_next = 0, $cmp = 0, $dec = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $i$0 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $i$0 = $n;
 while(1) {
  $cmp = ($i$0>>>0)>(1);
  $arglist_current = HEAP32[$ap2>>2]|0;
  $0 = $arglist_current;
  $1 = ((0) + 4|0);
  $expanded1 = $1;
  $expanded = (($expanded1) - 1)|0;
  $2 = (($0) + ($expanded))|0;
  $3 = ((0) + 4|0);
  $expanded5 = $3;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $4 = $2 & $expanded3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $arglist_next = ((($5)) + 4|0);
  HEAP32[$ap2>>2] = $arglist_next;
  $dec = (($i$0) + -1)|0;
  if ($cmp) {
   $i$0 = $dec;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function _store_int($dest,$size,$0,$1) {
 $dest = $dest|0;
 $size = $size|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($dest|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   switch ($size|0) {
   case -2:  {
    $2 = $0&255;
    HEAP8[$dest>>0] = $2;
    break L1;
    break;
   }
   case -1:  {
    $3 = $0&65535;
    HEAP16[$dest>>1] = $3;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 3:  {
    $4 = $dest;
    $5 = $4;
    HEAP32[$5>>2] = $0;
    $6 = (($4) + 4)|0;
    $7 = $6;
    HEAP32[$7>>2] = $1;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx38 = 0, $c$036 = 0, $c$2 = 0, $call = 0, $call71 = 0, $cmp = 0, $cmp32 = 0, $cmp65 = 0;
 var $conv = 0, $conv29 = 0, $conv31 = 0, $conv42 = 0, $conv52 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $incdec$ptr = 0, $incdec$ptr5149 = 0, $lnot$ext = 0, $locale = 0, $n$addr$035 = 0, $or = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0;
 var $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $shl = 0, $shl42 = 0, $shr46 = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, $sub43 = 0, $sub53 = 0, $sub5345 = 0, $sub59 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool21 = 0;
 var $tobool3 = 0, $tobool40 = 0, $tobool48 = 0, $tobool57 = 0, $tobool5748 = 0, $tobool6 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($st|0)==(0|0);
 $spec$select = $tobool ? 400964 : $st;
 $0 = HEAP32[$spec$select>>2]|0;
 $tobool1 = ($src|0)==(0|0);
 L1: do {
  if ($tobool1) {
   $tobool3 = ($0|0)==(0);
   if ($tobool3) {
    $retval$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $tobool6 = ($wc|0)==(0|0);
   $spec$select32 = $tobool6 ? $dummy : $wc;
   $tobool10 = ($n|0)==(0);
   if ($tobool10) {
    $retval$0 = -2;
   } else {
    $tobool13 = ($0|0)==(0);
    if ($tobool13) {
     $1 = HEAP8[$src>>0]|0;
     $cmp = ($1<<24>>24)>(-1);
     if ($cmp) {
      $conv = $1&255;
      HEAP32[$spec$select32>>2] = $conv;
      $tobool18 = ($1<<24>>24)!=(0);
      $lnot$ext = $tobool18&1;
      $retval$0 = $lnot$ext;
      break;
     }
     $call = (___pthread_self_288()|0);
     $locale = ((($call)) + 176|0);
     $2 = HEAP32[$locale>>2]|0;
     $3 = HEAP32[$2>>2]|0;
     $tobool21 = ($3|0)==(0|0);
     $4 = HEAP8[$src>>0]|0;
     if ($tobool21) {
      $conv29 = $4 << 24 >> 24;
      $and = $conv29 & 57343;
      HEAP32[$spec$select32>>2] = $and;
      $retval$0 = 1;
      break;
     }
     $conv31 = $4&255;
     $sub = (($conv31) + -194)|0;
     $cmp32 = ($sub>>>0)>(50);
     if ($cmp32) {
      label = 19;
      break;
     }
     $incdec$ptr = ((($src)) + 1|0);
     $arrayidx38 = (127136 + ($sub<<2)|0);
     $5 = HEAP32[$arrayidx38>>2]|0;
     $dec = (($n) + -1)|0;
     $tobool40 = ($dec|0)==(0);
     if ($tobool40) {
      $c$2 = $5;
     } else {
      $c$036 = $5;$n$addr$035 = $dec;$s$037 = $incdec$ptr;
      label = 11;
     }
    } else {
     $c$036 = $0;$n$addr$035 = $n;$s$037 = $src;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $6 = HEAP8[$s$037>>0]|0;
      $conv42 = $6&255;
      $7 = $conv42 >>> 3;
      $sub43 = (($7) + -16)|0;
      $shr46 = $c$036 >> 26;
      $add = (($7) + ($shr46))|0;
      $or = $sub43 | $add;
      $tobool48 = ($or>>>0)>(7);
      if ($tobool48) {
       label = 19;
       break L1;
      }
      $shl42 = $c$036 << 6;
      $sub5345 = (($conv42) + -128)|0;
      $or5446 = $sub5345 | $shl42;
      $dec5547 = (($n$addr$035) + -1)|0;
      $tobool5748 = ($or5446|0)<(0);
      if ($tobool5748) {
       $dec5551 = $dec5547;$or5450 = $or5446;$s$037$pn = $s$037;
       while(1) {
        $incdec$ptr5149 = ((($s$037$pn)) + 1|0);
        $tobool61 = ($dec5551|0)==(0);
        if ($tobool61) {
         $c$2 = $or5450;
         break L14;
        }
        $8 = HEAP8[$incdec$ptr5149>>0]|0;
        $9 = $8 & -64;
        $cmp65 = ($9<<24>>24)==(-128);
        if (!($cmp65)) {
         label = 19;
         break L1;
        }
        $shl = $or5450 << 6;
        $conv52 = $8&255;
        $sub53 = (($conv52) + -128)|0;
        $or54 = $sub53 | $shl;
        $dec55 = (($dec5551) + -1)|0;
        $tobool57 = ($or54|0)<(0);
        if ($tobool57) {
         $dec5551 = $dec55;$or5450 = $or54;$s$037$pn = $incdec$ptr5149;
        } else {
         $dec55$lcssa = $dec55;$or54$lcssa = $or54;
         break;
        }
       }
      } else {
       $dec55$lcssa = $dec5547;$or54$lcssa = $or5446;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select32>>2] = $or54$lcssa;
      $sub59 = (($n) - ($dec55$lcssa))|0;
      $retval$0 = $sub59;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $c$2;
    $retval$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $call71 = (___errno_location()|0);
  HEAP32[$call71>>2] = 25;
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $phitmp = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  $1 = 1;
 } else {
  $0 = HEAP32[$st>>2]|0;
  $tobool1 = ($0|0)==(0);
  $phitmp = $tobool1&1;
  $1 = $phitmp;
 }
 return ($1|0);
}
function ___pthread_self_288() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $rend = 0, $rpos = 0, $spec$select = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cookie = ((($f)) + 84|0);
 $0 = HEAP32[$cookie>>2]|0;
 $add = (($len) + 256)|0;
 $call = (_memchr($0,0,$add)|0);
 $tobool = ($call|0)==(0|0);
 $sub$ptr$lhs$cast = $call;
 $sub$ptr$rhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $k$0 = $tobool ? $add : $sub$ptr$sub;
 $cmp = ($k$0>>>0)<($len>>>0);
 $spec$select = $cmp ? $k$0 : $len;
 (_memcpy(($buf|0),($0|0),($spec$select|0))|0);
 $add$ptr = (($0) + ($spec$select)|0);
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $add$ptr;
 $add$ptr4 = (($0) + ($k$0)|0);
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = $add$ptr4;
 HEAP32[$cookie>>2] = $add$ptr4;
 return ($spec$select|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($off|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = (___fseeko($f,$off,$1,$whence)|0);
 return ($2|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function ___fseeko($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $2 = 0, $3 = 0, $4 = 0, $call = 0, $call17 = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $2 = HEAP32[$lock>>2]|0;
 $cmp = ($2|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $4 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  if ($phitmp) {
   $call17 = $4;
  } else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  $call17 = $3;
 }
 return ($call17|0);
}
function ___fseeko_unlocked($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cmp = 0, $cmp1 = 0, $rend = 0;
 var $rend15 = 0, $retval$0 = 0, $rpos = 0, $rpos16 = 0, $seek = 0, $sub$ptr$sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($whence|0)==(1);
 if ($cmp) {
  $rend = ((($f)) + 8|0);
  $2 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $3 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($2) - ($3))|0;
  $4 = ($sub$ptr$sub|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_i64Subtract(($0|0),($1|0),($sub$ptr$sub|0),($5|0))|0);
  $7 = (getTempRet0() | 0);
  $13 = $6;$14 = $7;
 } else {
  $13 = $0;$14 = $1;
 }
 $wpos = ((($f)) + 20|0);
 $8 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $9 = HEAP32[$wbase>>2]|0;
 $cmp1 = ($8>>>0)>($9>>>0);
 if ($cmp1) {
  $write = ((($f)) + 36|0);
  $10 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$10 & 255]($f,0,0)|0);
  $11 = HEAP32[$wpos>>2]|0;
  $tobool = ($11|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $seek = ((($f)) + 40|0);
  $12 = HEAP32[$seek>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 127]($f,$13,$14,$whence)|0);
  $15 = (getTempRet0() | 0);
  $16 = ($15|0)<(0);
  if ($16) {
   $retval$0 = -1;
  } else {
   $rend15 = ((($f)) + 8|0);
   HEAP32[$rend15>>2] = 0;
   $rpos16 = ((($f)) + 4|0);
   HEAP32[$rpos16>>2] = 0;
   $17 = HEAP32[$f>>2]|0;
   $and = $17 & -17;
   HEAP32[$f>>2] = $and;
   $retval$0 = 0;
  }
 }
 return ($retval$0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $add = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (___memrchr($s,$c,$add)|0);
 return ($call1|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx$le = 0, $cmp = 0, $dec8 = 0, $dec8$in = 0, $retval$0 = 0, $tobool = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool7 = ($n|0)==(0);
 L1: do {
  if ($tobool7) {
   $retval$0 = 0;
  } else {
   $0 = $c&255;
   $dec8$in = $n;
   while(1) {
    $dec8 = (($dec8$in) + -1)|0;
    $arrayidx = (($m) + ($dec8)|0);
    $1 = HEAP8[$arrayidx>>0]|0;
    $cmp = ($1<<24>>24)==($0<<24>>24);
    if ($cmp) {
     break;
    }
    $tobool = ($dec8|0)==(0);
    if ($tobool) {
     $retval$0 = 0;
     break L1;
    } else {
     $dec8$in = $dec8;
    }
   }
   $arrayidx$le = (($m) + ($dec8)|0);
   $retval$0 = $arrayidx$le;
  }
 } while(0);
 return ($retval$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = (_memcpy(($call1|0),($s|0),($add|0))|0);
  $retval$0 = $call3;
 }
 return ($retval$0|0);
}
function _htons($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16_210($n)|0);
 return ($call|0);
}
function ___bswap_16_210($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and13 = 0, $and14 = 0, $and2 = 0, $and247 = 0, $cmp = 0, $cmp10 = 0, $cmp1037 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0;
 var $d$addr$3 = 0, $dec = 0, $dec32 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $neg = 0, $or$cond = 0, $or$cond50 = 0, $s$addr$0$lcssa = 0;
 var $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool15 = 0, $tobool25 = 0, $tobool2530 = 0, $tobool28 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $tobool4 = 0, $tobool48 = 0, $tobool7 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $and247 = $0 & 3;
   $tobool48 = ($and247|0)!=(0);
   $tobool349 = ($n|0)!=(0);
   $or$cond50 = $tobool349 & $tobool48;
   if ($or$cond50) {
    $d$addr$051 = $d;$n$addr$053 = $n;$s$addr$052 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$052>>0]|0;
     HEAP8[$d$addr$051>>0] = $4;
     $tobool4 = ($4<<24>>24)==(0);
     if ($tobool4) {
      $d$addr$3 = $d$addr$051;$n$addr$4 = $n$addr$053;
      break L1;
     }
     $dec = (($n$addr$053) + -1)|0;
     $incdec$ptr = ((($s$addr$052)) + 1|0);
     $incdec$ptr5 = ((($d$addr$051)) + 1|0);
     $5 = $incdec$ptr;
     $and2 = $5 & 3;
     $tobool = ($and2|0)!=(0);
     $tobool3 = ($dec|0)!=(0);
     $or$cond = $tobool3 & $tobool;
     if ($or$cond) {
      $d$addr$051 = $incdec$ptr5;$n$addr$053 = $dec;$s$addr$052 = $incdec$ptr;
     } else {
      $d$addr$0$lcssa = $incdec$ptr5;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $incdec$ptr;$tobool3$lcssa = $tobool3;
      break;
     }
    }
   } else {
    $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $n;$s$addr$0$lcssa = $s;$tobool3$lcssa = $tobool349;
   }
   if ($tobool3$lcssa) {
    $$pr = HEAP8[$s$addr$0$lcssa>>0]|0;
    $tobool7 = ($$pr<<24>>24)==(0);
    if ($tobool7) {
     $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = $n$addr$0$lcssa;
    } else {
     $cmp1037 = ($n$addr$0$lcssa>>>0)>(3);
     L11: do {
      if ($cmp1037) {
       $n$addr$138 = $n$addr$0$lcssa;$wd$039 = $d$addr$0$lcssa;$ws$040 = $s$addr$0$lcssa;
       while(1) {
        $6 = HEAP32[$ws$040>>2]|0;
        $sub = (($6) + -16843009)|0;
        $neg = $6 & -2139062144;
        $and13 = $neg ^ -2139062144;
        $and14 = $and13 & $sub;
        $tobool15 = ($and14|0)==(0);
        if (!($tobool15)) {
         $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
         break L11;
        }
        HEAP32[$wd$039>>2] = $6;
        $sub19 = (($n$addr$138) + -4)|0;
        $incdec$ptr20 = ((($ws$040)) + 4|0);
        $incdec$ptr21 = ((($wd$039)) + 4|0);
        $cmp10 = ($sub19>>>0)>(3);
        if ($cmp10) {
         $n$addr$138 = $sub19;$wd$039 = $incdec$ptr21;$ws$040 = $incdec$ptr20;
        } else {
         $n$addr$1$lcssa = $sub19;$wd$0$lcssa = $incdec$ptr21;$ws$0$lcssa = $incdec$ptr20;
         break;
        }
       }
      } else {
       $n$addr$1$lcssa = $n$addr$0$lcssa;$wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
      }
     } while(0);
     $d$addr$1 = $wd$0$lcssa;$n$addr$2 = $n$addr$1$lcssa;$s$addr$1 = $ws$0$lcssa;
     label = 13;
    }
   } else {
    $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = 0;
   }
  } else {
   $d$addr$1 = $d;$n$addr$2 = $n;$s$addr$1 = $s;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $tobool2530 = ($n$addr$2|0)==(0);
   if ($tobool2530) {
    $d$addr$3 = $d$addr$1;$n$addr$4 = 0;
   } else {
    $d$addr$231 = $d$addr$1;$n$addr$333 = $n$addr$2;$s$addr$232 = $s$addr$1;
    while(1) {
     $7 = HEAP8[$s$addr$232>>0]|0;
     HEAP8[$d$addr$231>>0] = $7;
     $tobool28 = ($7<<24>>24)==(0);
     if ($tobool28) {
      $d$addr$3 = $d$addr$231;$n$addr$4 = $n$addr$333;
      break L17;
     }
     $dec32 = (($n$addr$333) + -1)|0;
     $incdec$ptr33 = ((($s$addr$232)) + 1|0);
     $incdec$ptr34 = ((($d$addr$231)) + 1|0);
     $tobool25 = ($dec32|0)==(0);
     if ($tobool25) {
      $d$addr$3 = $incdec$ptr34;$n$addr$4 = 0;
      break;
     } else {
      $d$addr$231 = $incdec$ptr34;$n$addr$333 = $dec32;$s$addr$232 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 (_memset(($d$addr$3|0),0,($n$addr$4|0))|0);
 return ($d$addr$3|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16($n)|0);
 return ($call|0);
}
function ___bswap_16($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function _htonl($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_32_217($n)|0);
 return ($call|0);
}
function ___bswap_32_217($__x) {
 $__x = $__x|0;
 var $or5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or5 = (_llvm_bswap_i32(($__x|0))|0);
 return ($or5|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call11 = 0, $call17 = 0, $call19 = 0, $cmp = 0, $cmp12 = 0, $conv = 0, $conv10 = 0, $conv15 = 0, $conv16 = 0, $conv18 = 0, $conv20 = 0;
 var $incdec$ptr = 0, $incdec$ptr14 = 0, $l$017 = 0, $n$addr$019 = 0, $n$addr$019$in = 0, $or$cond = 0, $r$0$lcssa = 0, $r$018 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool116 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $tobool116 = ($0<<24>>24)==(0);
  L3: do {
   if ($tobool116) {
    $5 = 0;$r$0$lcssa = $_r;
   } else {
    $conv15 = $0&255;
    $2 = $0;$conv20 = $conv15;$l$017 = $_l;$n$addr$019$in = $n;$r$018 = $_r;
    while(1) {
     $n$addr$019 = (($n$addr$019$in) + -1)|0;
     $1 = HEAP8[$r$018>>0]|0;
     $tobool3 = ($1<<24>>24)!=(0);
     $tobool5 = ($n$addr$019|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     if (!($or$cond)) {
      $5 = $2;$r$0$lcssa = $r$018;
      break L3;
     }
     $cmp = ($2<<24>>24)==($1<<24>>24);
     if (!($cmp)) {
      $call = (_tolower($conv20)|0);
      $3 = HEAP8[$r$018>>0]|0;
      $conv10 = $3&255;
      $call11 = (_tolower($conv10)|0);
      $cmp12 = ($call|0)==($call11|0);
      if (!($cmp12)) {
       break;
      }
     }
     $incdec$ptr = ((($l$017)) + 1|0);
     $incdec$ptr14 = ((($r$018)) + 1|0);
     $4 = HEAP8[$incdec$ptr>>0]|0;
     $conv = $4&255;
     $tobool1 = ($4<<24>>24)==(0);
     if ($tobool1) {
      $5 = 0;$r$0$lcssa = $incdec$ptr14;
      break L3;
     } else {
      $2 = $4;$conv20 = $conv;$l$017 = $incdec$ptr;$n$addr$019$in = $n$addr$019;$r$018 = $incdec$ptr14;
     }
    }
    $$pre$pre = HEAP8[$l$017>>0]|0;
    $5 = $$pre$pre;$r$0$lcssa = $r$018;
   }
  } while(0);
  $conv16 = $5&255;
  $call17 = (_tolower($conv16)|0);
  $6 = HEAP8[$r$0$lcssa>>0]|0;
  $conv18 = $6&255;
  $call19 = (_tolower($conv18)|0);
  $sub = (($call17) - ($call19))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call13 = 0, $call15 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $conv = 0, $conv12 = 0, $conv13 = 0, $conv14 = 0, $conv17 = 0, $conv7 = 0;
 var $incdec$ptr = 0, $incdec$ptr11 = 0, $l$015 = 0, $r$0$lcssa = 0, $r$016 = 0, $sub = 0, $tobool = 0, $tobool14 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $tobool14 = ($0<<24>>24)==(0);
 L1: do {
  if ($tobool14) {
   $5 = 0;$r$0$lcssa = $_r;
  } else {
   $conv13 = $0&255;
   $2 = $0;$conv17 = $conv13;$l$015 = $_l;$r$016 = $_r;
   while(1) {
    $1 = HEAP8[$r$016>>0]|0;
    $tobool2 = ($1<<24>>24)==(0);
    if ($tobool2) {
     $5 = $2;$r$0$lcssa = $r$016;
     break L1;
    }
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if (!($cmp)) {
     $call = (_tolower($conv17)|0);
     $3 = HEAP8[$r$016>>0]|0;
     $conv7 = $3&255;
     $call8 = (_tolower($conv7)|0);
     $cmp9 = ($call|0)==($call8|0);
     if (!($cmp9)) {
      break;
     }
    }
    $incdec$ptr = ((($l$015)) + 1|0);
    $incdec$ptr11 = ((($r$016)) + 1|0);
    $4 = HEAP8[$incdec$ptr>>0]|0;
    $conv = $4&255;
    $tobool = ($4<<24>>24)==(0);
    if ($tobool) {
     $5 = 0;$r$0$lcssa = $incdec$ptr11;
     break L1;
    } else {
     $2 = $4;$conv17 = $conv;$l$015 = $incdec$ptr;$r$016 = $incdec$ptr11;
    }
   }
   $$pre$pre = HEAP8[$l$015>>0]|0;
   $5 = $$pre$pre;$r$0$lcssa = $r$016;
  }
 } while(0);
 $conv12 = $5&255;
 $call13 = (_tolower($conv12)|0);
 $6 = HEAP8[$r$0$lcssa>>0]|0;
 $conv14 = $6&255;
 $call15 = (_tolower($conv14)|0);
 $sub = (($call13) - ($call15))|0;
 return ($sub|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and = 0, $cmp = 0, $phitmp = 0, $rend = 0, $rpos = 0, $seek = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0, $tobool = 0, $wbase = 0, $wbase3 = 0, $wpos = 0, $wpos2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $seek = ((($f)) + 40|0);
 $0 = HEAP32[$seek>>2]|0;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 128;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $4 = 1;
 } else {
  $wpos = ((($f)) + 20|0);
  $2 = HEAP32[$wpos>>2]|0;
  $wbase = ((($f)) + 28|0);
  $3 = HEAP32[$wbase>>2]|0;
  $cmp = ($2>>>0)>($3>>>0);
  $phitmp = $cmp ? 2 : 1;
  $4 = $phitmp;
 }
 $5 = (FUNCTION_TABLE_iiiii[$0 & 127]($f,0,0,$4)|0);
 $6 = (getTempRet0() | 0);
 $7 = ($6|0)<(0);
 if ($7) {
  $20 = $6;$21 = $5;
 } else {
  $rend = ((($f)) + 8|0);
  $8 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $9 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($8) - ($9))|0;
  $10 = ($sub$ptr$sub|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Subtract(($5|0),($6|0),($sub$ptr$sub|0),($11|0))|0);
  $13 = (getTempRet0() | 0);
  $wpos2 = ((($f)) + 20|0);
  $14 = HEAP32[$wpos2>>2]|0;
  $wbase3 = ((($f)) + 28|0);
  $15 = HEAP32[$wbase3>>2]|0;
  $sub$ptr$sub6 = (($14) - ($15))|0;
  $16 = ($sub$ptr$sub6|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (_i64Add(($12|0),($13|0),($sub$ptr$sub6|0),($17|0))|0);
  $19 = (getTempRet0() | 0);
  $20 = $19;$21 = $18;
 }
 setTempRet0(($20) | 0);
 return ($21|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $3 = (___ftello_unlocked($f)|0);
  $4 = (getTempRet0() | 0);
  if ($phitmp) {
   $5 = $4;$6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;$6 = $3;
  }
 } else {
  $1 = (___ftello_unlocked($f)|0);
  $2 = (getTempRet0() | 0);
  $5 = $2;$6 = $1;
 }
 setTempRet0(($5) | 0);
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call1 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(2147483647);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 61;
  $retval$0 = -1;
 } else {
  $retval$0 = $0;
 }
 return ($retval$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $path;
 $call = (___syscall10(($0|0))|0);
 $cmp = ($call|0)==(-31);
 if ($cmp) {
  $call1 = (___syscall40(($0|0))|0);
  $r$0 = $call1;
 } else {
  $r$0 = $call;
 }
 $call2 = (___syscall_ret($r$0)|0);
 return ($call2|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr46 = 0, $call = 0, $call30 = 0, $call34 = 0, $cmp = 0, $cmp12 = 0, $cmp37 = 0, $cmp4 = 0, $cond = 0, $conv = 0;
 var $conv3 = 0, $dest$0 = 0, $dest$146 = 0, $div = 0, $l$0 = 0, $l$147 = 0, $lock = 0, $mode = 0, $mul = 0, $or = 0, $read = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub27 = 0, $sub43 = 0;
 var $sub45 = 0, $tobool = 0, $tobool29 = 0, $tobool2945 = 0, $tobool31 = 0, $tobool40 = 0, $tobool47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $mode = ((($f)) + 74|0);
 $1 = HEAP8[$mode>>0]|0;
 $conv = $1 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $rend = ((($f)) + 8|0);
 $2 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $3 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($2) - ($3))|0;
 $cmp4 = ($sub$ptr$sub|0)>(0);
 if ($cmp4) {
  $4 = $3;
  $cmp12 = ($sub$ptr$sub>>>0)<($mul>>>0);
  $sub$ptr$sub$mul = $cmp12 ? $sub$ptr$sub : $mul;
  (_memcpy(($destv|0),($4|0),($sub$ptr$sub$mul|0))|0);
  $5 = HEAP32[$rpos>>2]|0;
  $add$ptr = (($5) + ($sub$ptr$sub$mul)|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $add$ptr26 = (($destv) + ($sub$ptr$sub$mul)|0);
  $sub27 = (($mul) - ($sub$ptr$sub$mul))|0;
  $dest$0 = $add$ptr26;$l$0 = $sub27;
 } else {
  $dest$0 = $destv;$l$0 = $mul;
 }
 $tobool2945 = ($l$0|0)==(0);
 L7: do {
  if ($tobool2945) {
   label = 13;
  } else {
   $read = ((($f)) + 32|0);
   $dest$146 = $dest$0;$l$147 = $l$0;
   while(1) {
    $call30 = (___toread($f)|0);
    $tobool31 = ($call30|0)==(0);
    if (!($tobool31)) {
     break;
    }
    $6 = HEAP32[$read>>2]|0;
    $call34 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$dest$146,$l$147)|0);
    $add = (($call34) + 1)|0;
    $cmp37 = ($add>>>0)<(2);
    if ($cmp37) {
     break;
    }
    $sub45 = (($l$147) - ($call34))|0;
    $add$ptr46 = (($dest$146) + ($call34)|0);
    $tobool29 = ($sub45|0)==(0);
    if ($tobool29) {
     label = 13;
     break L7;
    } else {
     $dest$146 = $add$ptr46;$l$147 = $sub45;
    }
   }
   $tobool40 = ($cond|0)==(0);
   if (!($tobool40)) {
    ___unlockfile($f);
   }
   $sub43 = (($mul) - ($l$147))|0;
   $div = (($sub43>>>0) / ($size>>>0))&-1;
   $retval$0 = $div;
  }
 } while(0);
 if ((label|0) == 13) {
  $tobool47 = ($cond|0)==(0);
  if ($tobool47) {
   $retval$0 = $spec$select;
  } else {
   ___unlockfile($f);
   $retval$0 = $spec$select;
  }
 }
 return ($retval$0|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32477]|0;
 $call = (_fputc($c,$0)|0);
 return ($call|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call10 = 0, $call10$lobit = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $lbf = 0, $lock = 0, $tobool = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32477]|0;
 $lock = ((($0)) + 76|0);
 $1 = HEAP32[$lock>>2]|0;
 $cmp = ($1|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($0)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $call1 = (_fputs($s,$0)|0);
 $cmp2 = ($call1|0)<(0);
 do {
  if ($cmp2) {
   $5 = -1;
  } else {
   $lbf = ((($0)) + 75|0);
   $2 = HEAP8[$lbf>>0]|0;
   $cmp3 = ($2<<24>>24)==(10);
   if (!($cmp3)) {
    $wpos = ((($0)) + 20|0);
    $3 = HEAP32[$wpos>>2]|0;
    $wend = ((($0)) + 16|0);
    $4 = HEAP32[$wend>>2]|0;
    $cmp5 = ($3>>>0)<($4>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($3)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$3>>0] = 10;
     $5 = 0;
     break;
    }
   }
   $call10 = (___overflow($0,10)|0);
   $call10$lobit = $call10 >> 31;
   $5 = $call10$lobit;
  }
 } while(0);
 $tobool = ($cond|0)==(0);
 if (!($tobool)) {
  ___unlockfile($0);
 }
 return ($5|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[32477]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _rename($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $old;
 $1 = $new;
 $call = (___syscall38(($0|0),($1|0))|0);
 $call1 = (___syscall_ret($call)|0);
 return ($call1|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$pre = 0, $$pre13 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call6 = 0, $call69 = 0, $cond = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv5 = 0, $conv58$pre$phiZ2D = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $mul = 0, $n$0$lcssa = 0, $n$012 = 0;
 var $neg$0 = 0, $neg$1 = 0, $s$addr$0 = 0, $s$addr$1 = 0, $s$addr$211 = 0, $sub$neg = 0, $sub11 = 0, $sub14 = 0, $tobool = 0, $tobool13 = 0, $tobool7 = 0, $tobool710 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP8[$s$addr$0>>0]|0;
  $conv = $0 << 24 >> 24;
  $call = (_isspace($conv)|0);
  $tobool = ($call|0)==(0);
  $incdec$ptr = ((($s$addr$0)) + 1|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 $1 = HEAP8[$s$addr$0>>0]|0;
 $conv1 = $1 << 24 >> 24;
 switch ($conv1|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $conv58$pre$phiZ2D = $conv1;$neg$1 = 0;$s$addr$1 = $s$addr$0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$incdec$ptr>>0]|0;
  $$pre13 = $$pre << 24 >> 24;
  $conv58$pre$phiZ2D = $$pre13;$neg$1 = $neg$0;$s$addr$1 = $incdec$ptr;
 }
 $call69 = (_isdigit($conv58$pre$phiZ2D)|0);
 $tobool710 = ($call69|0)==(0);
 if ($tobool710) {
  $n$0$lcssa = 0;
 } else {
  $n$012 = 0;$s$addr$211 = $s$addr$1;
  while(1) {
   $mul = ($n$012*10)|0;
   $incdec$ptr9 = ((($s$addr$211)) + 1|0);
   $2 = HEAP8[$s$addr$211>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $sub$neg = (($mul) + 48)|0;
   $sub11 = (($sub$neg) - ($conv10))|0;
   $3 = HEAP8[$incdec$ptr9>>0]|0;
   $conv5 = $3 << 24 >> 24;
   $call6 = (_isdigit($conv5)|0);
   $tobool7 = ($call6|0)==(0);
   if ($tobool7) {
    $n$0$lcssa = $sub11;
    break;
   } else {
    $n$012 = $sub11;$s$addr$211 = $incdec$ptr9;
   }
  }
 }
 $tobool13 = ($neg$1|0)==(0);
 $sub14 = (0 - ($n$0$lcssa))|0;
 $cond = $tobool13 ? $sub14 : $n$0$lcssa;
 return ($cond|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((400968|0));
 return;
}
function __get_environ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (400968|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[100243]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (401012 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[100243] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(400980)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (401012 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[100243] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(400992)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (401012 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[100243] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(400980)>>2] = $sub91;
     HEAP32[(400992)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(400976)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (401276 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (401276 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(400976)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(400992)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (401012 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[100243] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(400980)>>2] = $rsize$0$i;
       HEAP32[(400992)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(400976)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (401276 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (401276 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(400980)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (401276 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(400976)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (401012 + ($shl288$i<<2)|0);
           $58 = HEAP32[100243]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[100243] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (401276 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(400976)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(400980)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(400992)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(400992)>>2] = $add$ptr166;
   HEAP32[(400980)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(400980)>>2] = 0;
   HEAP32[(400992)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(400984)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(400984)>>2] = $sub190;
  $71 = HEAP32[(400996)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(400996)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[100361]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(401452)>>2] = 4096;
  HEAP32[(401448)>>2] = 4096;
  HEAP32[(401456)>>2] = -1;
  HEAP32[(401460)>>2] = -1;
  HEAP32[(401464)>>2] = 0;
  HEAP32[(401416)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[100361] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(401452)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(401412)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(401404)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(401416)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(400996)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (401420);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk($and80$i)|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(401448)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(401404)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(401412)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk($spec$select96$i)|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(401452)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk($and104$i)|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk($sub112$i)|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(401416)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(401416)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk($and11$i)|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(401404)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(401404)>>2] = $add150$i;
  $91 = HEAP32[(401408)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(401408)>>2] = $add150$i;
  }
  $92 = HEAP32[(400996)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(400988)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(400988)>>2] = $tbase$795$i;
    }
    HEAP32[(401420)>>2] = $tbase$795$i;
    HEAP32[(401424)>>2] = $tsize$794$i;
    HEAP32[(401432)>>2] = 0;
    $94 = HEAP32[100361]|0;
    HEAP32[(401008)>>2] = $94;
    HEAP32[(401004)>>2] = -1;
    HEAP32[(401024)>>2] = (401012);
    HEAP32[(401020)>>2] = (401012);
    HEAP32[(401032)>>2] = (401020);
    HEAP32[(401028)>>2] = (401020);
    HEAP32[(401040)>>2] = (401028);
    HEAP32[(401036)>>2] = (401028);
    HEAP32[(401048)>>2] = (401036);
    HEAP32[(401044)>>2] = (401036);
    HEAP32[(401056)>>2] = (401044);
    HEAP32[(401052)>>2] = (401044);
    HEAP32[(401064)>>2] = (401052);
    HEAP32[(401060)>>2] = (401052);
    HEAP32[(401072)>>2] = (401060);
    HEAP32[(401068)>>2] = (401060);
    HEAP32[(401080)>>2] = (401068);
    HEAP32[(401076)>>2] = (401068);
    HEAP32[(401088)>>2] = (401076);
    HEAP32[(401084)>>2] = (401076);
    HEAP32[(401096)>>2] = (401084);
    HEAP32[(401092)>>2] = (401084);
    HEAP32[(401104)>>2] = (401092);
    HEAP32[(401100)>>2] = (401092);
    HEAP32[(401112)>>2] = (401100);
    HEAP32[(401108)>>2] = (401100);
    HEAP32[(401120)>>2] = (401108);
    HEAP32[(401116)>>2] = (401108);
    HEAP32[(401128)>>2] = (401116);
    HEAP32[(401124)>>2] = (401116);
    HEAP32[(401136)>>2] = (401124);
    HEAP32[(401132)>>2] = (401124);
    HEAP32[(401144)>>2] = (401132);
    HEAP32[(401140)>>2] = (401132);
    HEAP32[(401152)>>2] = (401140);
    HEAP32[(401148)>>2] = (401140);
    HEAP32[(401160)>>2] = (401148);
    HEAP32[(401156)>>2] = (401148);
    HEAP32[(401168)>>2] = (401156);
    HEAP32[(401164)>>2] = (401156);
    HEAP32[(401176)>>2] = (401164);
    HEAP32[(401172)>>2] = (401164);
    HEAP32[(401184)>>2] = (401172);
    HEAP32[(401180)>>2] = (401172);
    HEAP32[(401192)>>2] = (401180);
    HEAP32[(401188)>>2] = (401180);
    HEAP32[(401200)>>2] = (401188);
    HEAP32[(401196)>>2] = (401188);
    HEAP32[(401208)>>2] = (401196);
    HEAP32[(401204)>>2] = (401196);
    HEAP32[(401216)>>2] = (401204);
    HEAP32[(401212)>>2] = (401204);
    HEAP32[(401224)>>2] = (401212);
    HEAP32[(401220)>>2] = (401212);
    HEAP32[(401232)>>2] = (401220);
    HEAP32[(401228)>>2] = (401220);
    HEAP32[(401240)>>2] = (401228);
    HEAP32[(401236)>>2] = (401228);
    HEAP32[(401248)>>2] = (401236);
    HEAP32[(401244)>>2] = (401236);
    HEAP32[(401256)>>2] = (401244);
    HEAP32[(401252)>>2] = (401244);
    HEAP32[(401264)>>2] = (401252);
    HEAP32[(401260)>>2] = (401252);
    HEAP32[(401272)>>2] = (401260);
    HEAP32[(401268)>>2] = (401260);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(400996)>>2] = $add$ptr4$i49$i;
    HEAP32[(400984)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(401460)>>2]|0;
    HEAP32[(401000)>>2] = $96;
   } else {
    $sp$0112$i = (401420);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(400984)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(400996)>>2] = $add$ptr4$i41$i;
       HEAP32[(400984)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(401460)>>2]|0;
       HEAP32[(401000)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(400988)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(400988)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (401420);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(400984)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(400984)>>2] = $add$i$i;
        HEAP32[(400996)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(400992)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(400980)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(400980)>>2] = $add26$i$i;
         HEAP32[(400992)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[100243]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[100243] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (401276 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(400976)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(400976)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (401012 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[100243]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[100243] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (401276 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(400976)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(400976)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (401420);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(400996)>>2] = $add$ptr4$i$i$i;
    HEAP32[(400984)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(401460)>>2]|0;
    HEAP32[(401000)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(401420)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(401420)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(401420)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(401420)+12>>2]|0;
    HEAP32[(401420)>>2] = $tbase$795$i;
    HEAP32[(401424)>>2] = $tsize$794$i;
    HEAP32[(401432)>>2] = 0;
    HEAP32[(401428)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (401012 + ($shl$i$i<<2)|0);
      $149 = HEAP32[100243]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[100243] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (401276 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(400976)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(400976)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(400984)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(400984)>>2] = $sub260$i;
   $159 = HEAP32[(400996)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(400996)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(400988)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(400992)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(400980)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[100243]|0;
     $and46 = $6 & $neg;
     HEAP32[100243] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (401276 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(400976)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(400976)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(400996)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(400984)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(400984)>>2] = $add246;
   HEAP32[(400996)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(400992)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(400992)>>2] = 0;
   HEAP32[(400980)>>2] = 0;
   return;
  }
  $26 = HEAP32[(400992)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(400980)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(400980)>>2] = $add258;
   HEAP32[(400992)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[100243]|0;
     $and301 = $30 & $neg300;
     HEAP32[100243] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (401276 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(400976)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(400976)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(400992)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(400980)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (401012 + ($shl508<<2)|0);
  $45 = HEAP32[100243]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[100243] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (401276 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(400976)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(400976)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(401004)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(401004)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (401428);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(401004)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $0 = 0, $and6 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp7 = 0, $div = 0, $head = 0, $mul = 0, $or = 0, $req$0 = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n_elements|0)==(0);
 if ($cmp) {
  $req$0 = 0;
 } else {
  $mul = Math_imul($elem_size, $n_elements)|0;
  $or = $elem_size | $n_elements;
  $tobool = ($or>>>0)>(65535);
  if ($tobool) {
   $div = (($mul>>>0) / ($n_elements>>>0))&-1;
   $cmp1 = ($div|0)==($elem_size|0);
   $spec$select = $cmp1 ? $mul : -1;
   $req$0 = $spec$select;
  } else {
   $req$0 = $mul;
  }
 }
 $call = (_malloc($req$0)|0);
 $cmp4 = ($call|0)==(0|0);
 if ($cmp4) {
  return ($call|0);
 }
 $head = ((($call)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and6 = $0 & 3;
 $cmp7 = ($and6|0)==(0);
 if ($cmp7) {
  return ($call|0);
 }
 (_memset(($call|0),0,($req$0|0))|0);
 return ($call|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 48;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0;
 var $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and80 = 0;
 var $and87 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0, $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp227 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0, $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0;
 var $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0;
 var $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(401452)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $head31 = ((($add$ptr)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(400996)>>2]|0;
 $cmp34 = ($3|0)==($add$ptr|0);
 if ($cmp34) {
  $4 = HEAP32[(400984)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(400996)>>2] = $add$ptr41;
  HEAP32[(400984)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(400992)>>2]|0;
 $cmp56 = ($5|0)==($add$ptr|0);
 if ($cmp56) {
  $6 = HEAP32[(400980)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(400980)>>2] = $storemerge1;
  HEAP32[(400992)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[100243]|0;
    $and128 = $12 & $neg;
    HEAP32[100243] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $17;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $16;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $19 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($19|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $19;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $18;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (401276 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($21|0)==($add$ptr|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(400976)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(400976)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($23|0)==($add$ptr|0);
     $arrayidx234 = ((($13)) + 20|0);
     $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
     HEAP32[$arrayidx234$sink>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0;
 var $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0;
 var $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and6067 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0;
 var $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0;
 var $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp139 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0;
 var $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0, $cmp400 = 0, $cmp421 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp6078 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0, $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0;
 var $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6056 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0;
 var $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0;
 var $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0;
 var $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(400992)>>2]|0;
   $cmp10 = ($2|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(400980)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[100243]|0;
     $and32 = $5 & $neg;
     HEAP32[100243] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $10;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $9;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $12 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($12|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $12;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $11;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (401276 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($14|0)==($add$ptr5|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(400976)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(400976)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($16|0)==($add$ptr5|0);
     $arrayidx146 = ((($6)) + 20|0);
     $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
     HEAP32[$arrayidx146$sink>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(400996)>>2]|0;
  $cmp227 = ($21|0)==($add$ptr|0);
  if ($cmp227) {
   $22 = HEAP32[(400984)>>2]|0;
   $add230 = (($22) + ($psize$addr$1))|0;
   HEAP32[(400984)>>2] = $add230;
   HEAP32[(400996)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $23 = HEAP32[(400992)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($23|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(400992)>>2] = 0;
   HEAP32[(400980)>>2] = 0;
   return;
  }
  $24 = HEAP32[(400992)>>2]|0;
  $cmp244 = ($24|0)==($add$ptr|0);
  if ($cmp244) {
   $25 = HEAP32[(400980)>>2]|0;
   $add248 = (($25) + ($psize$addr$1))|0;
   HEAP32[(400980)>>2] = $add248;
   HEAP32[(400992)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $26 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $27 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($27|0)==($26|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $28 = HEAP32[100243]|0;
     $and295 = $28 & $neg293;
     HEAP32[100243] = $and295;
     break;
    } else {
     $bk317 = ((($26)) + 12|0);
     HEAP32[$bk317>>2] = $27;
     $fd318 = ((($27)) + 8|0);
     HEAP32[$fd318>>2] = $26;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $29 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $30 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($30|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $32 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($32|0)==(0|0);
      if ($cmp360) {
       $33 = HEAP32[$child358>>2]|0;
       $cmp365 = ($33|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $33;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $32;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $34 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($34|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $35 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($35|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $35;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $34;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $31 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($31)) + 12|0);
      HEAP32[$bk352>>2] = $30;
      $fd353 = ((($30)) + 8|0);
      HEAP32[$fd353>>2] = $31;
      $R328$3 = $30;
     }
    } while(0);
    $cmp393 = ($29|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $36 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (401276 + ($36<<2)|0);
     $37 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($37|0)==($add$ptr|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $36;
       $neg408 = $shl407 ^ -1;
       $38 = HEAP32[(400976)>>2]|0;
       $and410 = $38 & $neg408;
       HEAP32[(400976)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($29)) + 16|0);
      $39 = HEAP32[$arrayidx420>>2]|0;
      $cmp421 = ($39|0)==($add$ptr|0);
      $arrayidx428 = ((($29)) + 20|0);
      $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
      HEAP32[$arrayidx428$sink>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $29;
     $child445 = ((($add$ptr)) + 16|0);
     $40 = HEAP32[$child445>>2]|0;
     $cmp447 = ($40|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $40;
      $parent458 = ((($40)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $41 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($41|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $41;
      $parent475 = ((($41)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $42 = HEAP32[(400992)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($42|0);
  if ($cmp489) {
   HEAP32[(400980)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (401012 + ($shl515<<2)|0);
  $43 = HEAP32[100243]|0;
  $shl519 = 1 << $shr507;
  $and520 = $43 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $43 | $shl519;
   HEAP32[100243] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $44 = ((($arrayidx516)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $$pre$phiZ2D = $44;$F517$0 = $45;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (401276 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $46 = HEAP32[(400976)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $46 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $46 | $shl586;
  HEAP32[(400976)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579>>2]|0;
 $head6056 = ((($47)) + 4|0);
 $48 = HEAP32[$head6056>>2]|0;
 $and6067 = $48 & -8;
 $cmp6078 = ($and6067|0)==($psize$addr$2|0);
 L104: do {
  if ($cmp6078) {
   $T$0$lcssa = $47;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$010 = $shl604;$T$09 = $47;
   while(1) {
    $shr611 = $K597$010 >>> 31;
    $arrayidx613 = (((($T$09)) + 16|0) + ($shr611<<2)|0);
    $49 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($49|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$010 << 1;
    $head605 = ((($49)) + 4|0);
    $50 = HEAP32[$head605>>2]|0;
    $and606 = $50 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $49;
     break L104;
    } else {
     $K597$010 = $shl614;$T$09 = $49;
    }
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$09;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $51 = HEAP32[$fd635>>2]|0;
 $bk648 = ((($51)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $51;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function _sbrk($increment) {
 $increment = $increment|0;
 var $0 = 0, $1 = 0, $add = 0, $add1 = 0, $and = 0, $call = 0, $call10 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($increment) + 3)|0;
 $and = $add & -4;
 $call = (_emscripten_get_sbrk_ptr()|0);
 $0 = HEAP32[$call>>2]|0;
 $add1 = (($0) + ($and))|0;
 $cmp = ($and|0)<(1);
 $cmp2 = ($add1>>>0)>($0>>>0);
 $or$cond = $cmp | $cmp2;
 do {
  if ($or$cond) {
   $call3 = (_emscripten_get_heap_size()|0);
   $cmp4 = ($add1>>>0)>($call3>>>0);
   if ($cmp4) {
    $call6 = (_emscripten_resize_heap(($add1|0))|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   HEAP32[$call>>2] = $add1;
   $1 = $0;
   $retval$0 = $1;
   return ($retval$0|0);
  }
 } while(0);
 $call10 = (___errno_location()|0);
 HEAP32[$call10>>2] = 48;
 $retval$0 = (-1);
 return ($retval$0|0);
}
function stackSave() {
    return STACKTOP|0;
}
function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
    STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);
    return ret|0;
}
function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = (getTempRet0() | 0);
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, (getTempRet0() | 0) ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 401552;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.copyWithin() becomes faster to use.
    if ((num|0) >= 512) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&255](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&0](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&0](a1|0,a2|0,a3|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(5);return 0;
}
function b6() {
 ; nullFunc_v(6);
}
function b7(p0) {
 p0 = p0|0; nullFunc_vi(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,_D_GrabMouseCallback,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_W_StdC_OpenFile,b1,b1,___emscripten_stdout_close,b1
,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_PIT_VileCheck,b1,b1,b1,b1,b1,_PIT_StompThing,_PIT_CheckThing,_PIT_CheckLine,_PTR_SlideTraverse,_PTR_AimTraverse,_PTR_ShootTraverse
,_PTR_UseTraverse,_PIT_RadiusAttack,_PIT_ChangeSector,_PIT_AddLineIntercepts,_PIT_AddThingIntercepts,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_fmt_fp,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3];
var FUNCTION_TABLE_iiii = [b4,b4,b4,b4,b4,_wipe_initColorXForm,_wipe_doColorXForm,_wipe_exitColorXForm,_wipe_initMelt,_wipe_doMelt,_wipe_exitMelt,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,___stdio_write
,b4,b4,b4,_sn_write,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,___stdio_read,_do_read,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_W_StdC_Read,b5,b5
,___emscripten_stdout_seek,b5,___stdio_seek,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,_D_ProcessEvents,b6,b6,_M_Ticker,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,_M_DrawReadThis1,_M_DrawMainMenu,b6,_M_DrawReadThis2,b6,_M_DrawSave,b6,b6,_M_DrawLoad,_M_DrawOptions,b6,b6,b6,b6,b6,b6,_M_DrawSound,b6,b6,_M_DrawNewGame,_M_DrawEpisode,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,_D_QuitNetGame,b6,_D_Endoom,_M_SaveDefaults,_StatDump,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,_R_DrawColumn,_R_DrawFuzzColumn,_R_DrawTranslatedColumn,_R_DrawSpan,_R_DrawColumnLow,_R_DrawFuzzColumnLow,_R_DrawTranslatedColumnLow,_R_DrawSpanLow,b6,_S_Shutdown,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vi = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,_A_BFGSpray,_A_Explode,_A_Pain,_A_PlayerScream,_A_Fall,_A_XScream,_A_Look,_A_Chase,_A_FaceTarget,_A_PosAttack,_A_Scream,_A_SPosAttack,_A_VileChase,_A_VileStart,_A_VileTarget,_A_VileAttack,_A_StartFire,_A_Fire,_A_FireCrackle,_A_Tracer,_A_SkelWhoosh,_A_SkelFist,_A_SkelMissile,_A_FatRaise,_A_FatAttack1,_A_FatAttack2
,_A_FatAttack3,_A_BossDeath,_A_CPosAttack,_A_CPosRefire,_A_TroopAttack,_A_SargAttack,_A_HeadAttack,_A_BruisAttack,_A_SkullAttack,_A_Metal,_A_SpidRefire,_A_BabyMetal,_A_BspiAttack,_A_Hoof,_A_CyberAttack,_A_PainAttack,_A_PainDie,_A_KeenDie,_A_BrainPain,_A_BrainScream,_A_BrainDie,_A_BrainAwake,_A_BrainSpit,_A_SpawnSound,_A_SpawnFly,_A_BrainExplode,_M_NewGame,_M_Options,_M_LoadGame,_M_SaveGame
,_M_ReadThis,_M_QuitDOOM,b7,b7,_M_ReadThis2,b7,_M_FinishReadThis,b7,_M_LoadSelect,_M_SaveSelect,b7,b7,_M_EndGame,_M_ChangeMessages,_M_ChangeDetail,_M_SizeDisplay,_M_ChangeSensitivity,_M_Sound,b7,_M_SfxVol,_M_MusicVol,b7,b7,_M_Episode,_M_ChooseSkill,b7,_W_StdC_CloseFile,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,_M_QuitResponse,_M_EndGameResponse,_M_VerifyNightmare,_M_QuickSaveResponse,_M_QuickLoadResponse,_T_MoveCeiling,_T_VerticalDoor,_T_PlatRaise,_P_MobjThinker,b7,_T_MoveFloor,_T_FireFlicker,_T_LightFlash,_T_StrobeFlash,_T_Glow,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_vii = [b8,b8,_G_BuildTiccmd,_RunTic,b8,b8,b8,b8,b8,b8,b8,_A_Light0,_A_WeaponReady,_A_Lower,_A_Raise,_A_Punch,_A_ReFire,_A_FirePistol,_A_Light1,_A_FireShotgun,_A_Light2,_A_FireShotgun2,_A_CheckReload,_A_OpenShotgun2,_A_LoadShotgun2,_A_CloseShotgun2,_A_FireCGun,_A_GunFlash,_A_FireMissile
,_A_Saw,_A_FirePlasma,_A_BFGsound,_A_FireBFG,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_ST_loadCallback,b8,_WI_unloadCallback,_WI_loadCallback,b8,_pop_arg_long_double,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9];

  return { ___divdi3: ___divdi3, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_environ: __get_environ, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _doomgeneric_Create: _doomgeneric_Create, _doomgeneric_Tick: _doomgeneric_Tick, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _htonl: _htonl, _htons: _htons, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i16: _llvm_bswap_i16, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _ntohs: _ntohs, _toDoomKey: _toDoomKey, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

/** @type {function(...*):?} */
var ___divdi3 = Module["___divdi3"] = createExportWrapper("___divdi3", asm);

/** @type {function(...*):?} */
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = createExportWrapper("___emscripten_environ_constructor", asm);

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("___errno_location", asm);

/** @type {function(...*):?} */
var ___muldi3 = Module["___muldi3"] = createExportWrapper("___muldi3", asm);

/** @type {function(...*):?} */
var ___udivdi3 = Module["___udivdi3"] = createExportWrapper("___udivdi3", asm);

/** @type {function(...*):?} */
var __get_environ = Module["__get_environ"] = createExportWrapper("__get_environ", asm);

/** @type {function(...*):?} */
var _bitshift64Ashr = Module["_bitshift64Ashr"] = createExportWrapper("_bitshift64Ashr", asm);

/** @type {function(...*):?} */
var _bitshift64Lshr = Module["_bitshift64Lshr"] = createExportWrapper("_bitshift64Lshr", asm);

/** @type {function(...*):?} */
var _bitshift64Shl = Module["_bitshift64Shl"] = createExportWrapper("_bitshift64Shl", asm);

/** @type {function(...*):?} */
var _doomgeneric_Create = Module["_doomgeneric_Create"] = createExportWrapper("_doomgeneric_Create", asm);

/** @type {function(...*):?} */
var _doomgeneric_Tick = Module["_doomgeneric_Tick"] = createExportWrapper("_doomgeneric_Tick", asm);

/** @type {function(...*):?} */
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = createExportWrapper("_emscripten_get_sbrk_ptr", asm);

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("_fflush", asm);

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("_free", asm);

/** @type {function(...*):?} */
var _htonl = Module["_htonl"] = createExportWrapper("_htonl", asm);

/** @type {function(...*):?} */
var _htons = Module["_htons"] = createExportWrapper("_htons", asm);

/** @type {function(...*):?} */
var _i64Add = Module["_i64Add"] = createExportWrapper("_i64Add", asm);

/** @type {function(...*):?} */
var _i64Subtract = Module["_i64Subtract"] = createExportWrapper("_i64Subtract", asm);

/** @type {function(...*):?} */
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = createExportWrapper("_llvm_bswap_i16", asm);

/** @type {function(...*):?} */
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = createExportWrapper("_llvm_bswap_i32", asm);

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("_main", asm);

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("_malloc", asm);

/** @type {function(...*):?} */
var _memcpy = Module["_memcpy"] = createExportWrapper("_memcpy", asm);

/** @type {function(...*):?} */
var _memmove = Module["_memmove"] = createExportWrapper("_memmove", asm);

/** @type {function(...*):?} */
var _memset = Module["_memset"] = createExportWrapper("_memset", asm);

/** @type {function(...*):?} */
var _ntohs = Module["_ntohs"] = createExportWrapper("_ntohs", asm);

/** @type {function(...*):?} */
var _toDoomKey = Module["_toDoomKey"] = createExportWrapper("_toDoomKey", asm);

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc", asm);

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore", asm);

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave", asm);

/** @type {function(...*):?} */
var dynCall_i = Module["dynCall_i"] = createExportWrapper("dynCall_i", asm);

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii", asm);

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii", asm);

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii", asm);

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii", asm);

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii", asm);

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = createExportWrapper("dynCall_v", asm);

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi", asm);

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii", asm);

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = createExportWrapper("dynCall_viii", asm);
;




// === Auto-generated postamble setup entry stuff ===

// asm.js startup is synchronous
Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        var e = new Error('could not load memory initializer ' + memoryInitializer);
          throw e;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}



